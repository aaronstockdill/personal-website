(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target3) => __defProp(target3, "__esModule", { value: !0 });
  var __esm = (fn, res) => function() {
    return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target3, all6) => {
    __markAsModule(target3);
    for (var name2 in all6)
      __defProp(target3, name2, { get: all6[name2], enumerable: !0 });
  }, __reExport = (target3, module, desc) => {
    if (module && typeof module == "object" || typeof module == "function")
      for (let key of __getOwnPropNames(module))
        !__hasOwnProp.call(target3, key) && key !== "default" && __defProp(target3, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    return target3;
  }, __toModule = (module) => __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: !0 } : { value: module, enumerable: !0 })), module);

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols, hasOwnProperty = Object.prototype.hasOwnProperty, propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val == null)
          throw new TypeError("Object.assign cannot be called with null or undefined");
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign)
            return !1;
          var test1 = new String("abc");
          if (test1[5] = "de", Object.getOwnPropertyNames(test1)[0] === "5")
            return !1;
          for (var test2 = {}, i = 0; i < 10; i++)
            test2["_" + String.fromCharCode(i)] = i;
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789")
            return !1;
          var test3 = {};
          return "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          }), Object.keys(Object.assign({}, test3)).join("") === "abcdefghijklmnopqrst";
        } catch {
          return !1;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target3, source3) {
        for (var from, to = toObject(target3), symbols, s2 = 1; s2 < arguments.length; s2++) {
          from = Object(arguments[s2]);
          for (var key in from)
            hasOwnProperty.call(from, key) && (to[key] = from[key]);
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++)
              propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      (function() {
        "use strict";
        var _assign = require_object_assign(), ReactVersion = "17.0.2", REACT_ELEMENT_TYPE = 60103, REACT_PORTAL_TYPE = 60106;
        exports.Fragment = 60107, exports.StrictMode = 60108, exports.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109, REACT_CONTEXT_TYPE = 60110, REACT_FORWARD_REF_TYPE = 60112;
        exports.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120, REACT_MEMO_TYPE = 60115, REACT_LAZY_TYPE = 60116, REACT_BLOCK_TYPE = 60121, REACT_SERVER_BLOCK_TYPE = 60122, REACT_FUNDAMENTAL_TYPE = 60117, REACT_SCOPE_TYPE = 60119, REACT_OPAQUE_ID_TYPE = 60128, REACT_DEBUG_TRACING_MODE_TYPE = 60129, REACT_OFFSCREEN_TYPE = 60130, REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol == "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element"), REACT_PORTAL_TYPE = symbolFor("react.portal"), exports.Fragment = symbolFor("react.fragment"), exports.StrictMode = symbolFor("react.strict_mode"), exports.Profiler = symbolFor("react.profiler"), REACT_PROVIDER_TYPE = symbolFor("react.provider"), REACT_CONTEXT_TYPE = symbolFor("react.context"), REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref"), exports.Suspense = symbolFor("react.suspense"), REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list"), REACT_MEMO_TYPE = symbolFor("react.memo"), REACT_LAZY_TYPE = symbolFor("react.lazy"), REACT_BLOCK_TYPE = symbolFor("react.block"), REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block"), REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental"), REACT_SCOPE_TYPE = symbolFor("react.scope"), REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id"), REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol == "function" && Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable != "object")
            return null;
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          return typeof maybeIterator == "function" ? maybeIterator : null;
        }
        var ReactCurrentDispatcher = {
          current: null
        }, ReactCurrentBatchConfig = {
          transition: 0
        }, ReactCurrentOwner = {
          current: null
        }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          currentExtraStackFrame = stack;
        }
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          currentExtraStackFrame = stack;
        }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          currentExtraStackFrame && (stack += currentExtraStackFrame);
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          return impl && (stack += impl() || ""), stack;
        };
        var IsSomeRendererActing = {
          current: !1
        }, ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
              args[_key - 1] = arguments[_key];
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
              args[_key2 - 1] = arguments[_key2];
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
            stack !== "" && (format += "%s", args = args.concat([stack]));
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey])
              return;
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = !0;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return !1;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        }, emptyObject = {};
        Object.freeze(emptyObject);
        function Component(props, context, updater) {
          this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {}, Component.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState == "object" || typeof partialState == "function" || partialState == null))
            throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        }, Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          }, defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              }
            });
          };
          for (var fnName in deprecatedAPIs)
            deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent, _assign(pureComponentPrototype, Component.prototype), pureComponentPrototype.isPureReactComponent = !0;
        function createRef() {
          var refObject = {
            current: null
          };
          return Object.seal(refObject), refObject;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null)
            return null;
          if (typeof type.tag == "number" && error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."), typeof type == "function")
            return type.displayName || type.name || null;
          if (typeof type == "string")
            return type;
          switch (type) {
            case exports.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports.Profiler:
              return "Profiler";
            case exports.StrictMode:
              return "StrictMode";
            case exports.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type == "object")
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type, payload3 = lazyComponent._payload, init3 = lazyComponent._init;
                try {
                  return getComponentName(init3(payload3));
                } catch {
                  return null;
                }
              }
            }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
          key: !0,
          ref: !0,
          __self: !0,
          __source: !0
        }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        didWarnAboutStringRefs = {};
        function hasValidRef(config2) {
          if (hasOwnProperty.call(config2, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
            if (getter && getter.isReactWarning)
              return !1;
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          if (hasOwnProperty.call(config2, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
            if (getter && getter.isReactWarning)
              return !1;
          }
          return config2.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config2) {
          if (typeof config2.ref == "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref), didWarnAboutStringRefs[componentName] = !0);
          }
        }
        var ReactElement = function(type, key, ref, self2, source3, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          return element._store = {}, Object.defineProperty(element._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: !1
          }), Object.defineProperty(element, "_self", {
            configurable: !1,
            enumerable: !1,
            writable: !1,
            value: self2
          }), Object.defineProperty(element, "_source", {
            configurable: !1,
            enumerable: !1,
            writable: !1,
            value: source3
          }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
        };
        function createElement6(type, config2, children2) {
          var propName, props = {}, key = null, ref = null, self2 = null, source3 = null;
          if (config2 != null) {
            hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2)), hasValidKey(config2) && (key = "" + config2.key), self2 = config2.__self === void 0 ? null : config2.__self, source3 = config2.__source === void 0 ? null : config2.__source;
            for (propName in config2)
              hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1)
            props.children = children2;
          else if (childrenLength > 1) {
            for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
              childArray[i] = arguments[i + 2];
            Object.freeze && Object.freeze(childArray), props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source3, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config2, children2) {
          if (element == null)
            throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          var propName, props = _assign({}, element.props), key = element.key, ref = element.ref, self2 = element._self, source3 = element._source, owner = element._owner;
          if (config2 != null) {
            hasValidRef(config2) && (ref = config2.ref, owner = ReactCurrentOwner.current), hasValidKey(config2) && (key = "" + config2.key);
            var defaultProps;
            element.type && element.type.defaultProps && (defaultProps = element.type.defaultProps);
            for (propName in config2)
              hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (config2[propName] === void 0 && defaultProps !== void 0 ? props[propName] = defaultProps[propName] : props[propName] = config2[propName]);
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1)
            props.children = children2;
          else if (childrenLength > 1) {
            for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
              childArray[i] = arguments[i + 2];
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source3, owner, props);
        }
        function isValidElement(object) {
          return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".", SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g, escaperLookup = {
            "=": "=0",
            ":": "=2"
          }, escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index2) {
          return typeof element == "object" && element !== null && element.key != null ? escape("" + element.key) : index2.toString(36);
        }
        function mapIntoArray(children2, array2, escapedPrefix, nameSoFar, callback) {
          var type = typeof children2;
          (type === "undefined" || type === "boolean") && (children2 = null);
          var invokeCallback = !1;
          if (children2 === null)
            invokeCallback = !0;
          else
            switch (type) {
              case "string":
              case "number":
                invokeCallback = !0;
                break;
              case "object":
                switch (children2.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = !0;
                }
            }
          if (invokeCallback) {
            var _child = children2, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              childKey != null && (escapedChildKey = escapeUserProvidedKey(childKey) + "/"), mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c3) {
                return c3;
              });
            } else
              mappedChild != null && (isValidElement(mappedChild) && (mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey)), array2.push(mappedChild));
            return 1;
          }
          var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children2))
            for (var i = 0; i < children2.length; i++)
              child = children2[i], nextName = nextNamePrefix + getElementKey(child, i), subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
          else {
            var iteratorFn = getIteratorFn(children2);
            if (typeof iteratorFn == "function") {
              var iterableChildren = children2;
              iteratorFn === iterableChildren.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
              for (var iterator = iteratorFn.call(iterableChildren), step, ii = 0; !(step = iterator.next()).done; )
                child = step.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
            } else if (type === "object") {
              var childrenString = "" + children2;
              throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children2, func, context) {
          if (children2 == null)
            return children2;
          var result = [], count = 0;
          return mapIntoArray(children2, result, "", "", function(child) {
            return func.call(context, child, count++);
          }), result;
        }
        function countChildren(children2) {
          var n = 0;
          return mapChildren(children2, function() {
            n++;
          }), n;
        }
        function forEachChildren(children2, forEachFunc, forEachContext) {
          mapChildren(children2, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray7(children2) {
          return mapChildren(children2, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children2) {
          if (!isValidElement(children2))
            throw Error("React.Children.only expected to receive a single React element child.");
          return children2;
        }
        function createContext(defaultValue, calculateChangedBits) {
          calculateChangedBits === void 0 ? calculateChangedBits = null : calculateChangedBits !== null && typeof calculateChangedBits != "function" && error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  return hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = !0, error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  return hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = !0, error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0);
                }
              }
            }), context.Consumer = Consumer;
          }
          return context._currentRenderer = null, context._currentRenderer2 = null, context;
        }
        var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
        function lazyInitializer(payload3) {
          if (payload3._status === Uninitialized) {
            var ctor = payload3._result, thenable = ctor(), pending = payload3;
            pending._status = Pending, pending._result = thenable, thenable.then(function(moduleObject) {
              if (payload3._status === Pending) {
                var defaultExport = moduleObject.default;
                defaultExport === void 0 && error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject);
                var resolved = payload3;
                resolved._status = Resolved, resolved._result = defaultExport;
              }
            }, function(error2) {
              if (payload3._status === Pending) {
                var rejected = payload3;
                rejected._status = Rejected, rejected._result = error2;
              }
            });
          }
          if (payload3._status === Resolved)
            return payload3._result;
          throw payload3._result;
        }
        function lazy(ctor) {
          var payload3 = {
            _status: -1,
            _result: ctor
          }, lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload3,
            _init: lazyInitializer
          };
          {
            var defaultProps, propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: !0,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps = newDefaultProps, Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: !0
                  });
                }
              },
              propTypes: {
                configurable: !0,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType, "propTypes", {
                    enumerable: !0
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render2) {
          render2 != null && render2.$$typeof === REACT_MEMO_TYPE ? error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render2 != "function" ? error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2) : render2.length !== 0 && render2.length !== 2 && error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), render2 != null && (render2.defaultProps != null || render2.propTypes != null) && error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: !1,
              configurable: !0,
              get: function() {
                return ownName;
              },
              set: function(name2) {
                ownName = name2, render2.displayName == null && (render2.displayName = name2);
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = !1;
        function isValidElementType(type) {
          return !!(typeof type == "string" || typeof type == "function" || type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE));
        }
        function memo(type, compare) {
          isValidElementType(type) || error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: !1,
              configurable: !0,
              get: function() {
                return ownName;
              },
              set: function(name2) {
                ownName = name2, type.displayName == null && (type.displayName = name2);
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (dispatcher === null)
            throw Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
          return dispatcher;
        }
        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          if (unstable_observedBits !== void 0 && error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits == "number" && Array.isArray(arguments[2]) ? `

Did you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks` : ""), Context._context !== void 0) {
            var realContext = Context._context;
            realContext.Consumer === Context ? error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer3(reducer3, initialArg, init3) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer3, initialArg, init3);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create12, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create12, deps);
        }
        function useLayoutEffect(create12, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create12, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create12, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create12, deps);
        }
        function useImperativeHandle(ref, create12, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create12, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = !0;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
              var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            if (disabledDepth--, disabledDepth === 0) {
              var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix;
        function describeBuiltInComponentFrame(name2, source3, ownerFn) {
          {
            if (prefix === void 0)
              try {
                throw Error();
              } catch (x5) {
                var match = x5.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            return `
` + prefix + name2;
          }
        }
        var reentry = !1, componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry)
            return "";
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0)
              return frame2;
          }
          var control;
          reentry = !0;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              if (Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              }), typeof Reflect == "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x5) {
                  control = x5;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x5) {
                  control = x5;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x5) {
                control = x5;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack == "string") {
              for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s2 = sampleLines.length - 1, c3 = controlLines.length - 1; s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]; )
                c3--;
              for (; s2 >= 1 && c3 >= 0; s2--, c3--)
                if (sampleLines[s2] !== controlLines[c3]) {
                  if (s2 !== 1 || c3 !== 1)
                    do
                      if (s2--, c3--, c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                        var _frame = `
` + sampleLines[s2].replace(" at new ", " at ");
                        return typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                      }
                    while (s2 >= 1 && c3 >= 0);
                  break;
                }
            }
          } finally {
            reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn ? fn.displayName || fn.name : "", syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source3, ownerFn) {
          return describeNativeComponentFrame(fn, !1);
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
          if (type == null)
            return "";
          if (typeof type == "function")
            return describeNativeComponentFrame(type, shouldConstruct(type));
          if (typeof type == "string")
            return describeBuiltInComponentFrame(type);
          switch (type) {
            case exports.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type == "object")
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type, payload3 = lazyComponent._payload, init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload3), source3, ownerFn);
                } catch {
                }
              }
            }
          return "";
        }
        var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          if (element) {
            var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has8 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs)
              if (has8(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] != "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    throw err.name = "Invariant Violation", err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
              }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          if (element) {
            var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else
            setExtraStackFrame(null);
        }
        var propTypesMisspellWarningShown;
        propTypesMisspellWarningShown = !1;
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name2 = getComponentName(ReactCurrentOwner.current.type);
            if (name2)
              return `

Check the render method of \`` + name2 + "`.";
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source3) {
          if (source3 !== void 0) {
            var fileName = source3.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source3.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          return elementProps != null ? getSourceInfoErrorAddendum(elementProps.__source) : "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!(!element._store || element._store.validated || element.key != null)) {
            element._store.validated = !0;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (!ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
              var childOwner = "";
              element && element._owner && element._owner !== ReactCurrentOwner.current && (childOwner = " It was passed a child from " + getComponentName(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node == "object") {
            if (Array.isArray(node))
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                isValidElement(child) && validateExplicitKey(child, parentType);
              }
            else if (isValidElement(node))
              node._store && (node._store.validated = !0);
            else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
                for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                  isValidElement(step.value) && validateExplicitKey(step.value, parentType);
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type == null || typeof type == "string")
              return;
            var propTypes;
            if (typeof type == "function")
              propTypes = type.propTypes;
            else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
              propTypes = type.propTypes;
            else
              return;
            if (propTypes) {
              var name2 = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name2, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = !0;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
        function validateFragmentProps(fragment) {
          {
            for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
          }
        }
        function createElementWithValidation(type, props, children2) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : Array.isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentName(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = createElement6.apply(this, arguments);
          if (element == null)
            return element;
          if (validType)
            for (var i = 2; i < arguments.length; i++)
              validateChildKeys(arguments[i], type);
          return type === exports.Fragment ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
        var didWarnAboutDeprecatedCreateFactory = !1;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          return validatedFactory.type = type, didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(validatedFactory, "type", {
            enumerable: !1,
            get: function() {
              return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
                value: type
              }), type;
            }
          }), validatedFactory;
        }
        function cloneElementWithValidation(element, props, children2) {
          for (var newElement = cloneElement.apply(this, arguments), i = 2; i < arguments.length; i++)
            validateChildKeys(arguments[i], newElement.type);
          return validatePropTypes(newElement), newElement;
        }
        try {
          var frozenObject = Object.freeze({});
          new Map([[frozenObject, null]]), new Set([frozenObject]);
        } catch {
        }
        var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray7,
          only: onlyChild
        };
        exports.Children = Children, exports.Component = Component, exports.PureComponent = PureComponent, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.cloneElement = cloneElement$1, exports.createContext = createContext, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef, exports.forwardRef = forwardRef, exports.isValidElement = isValidElement, exports.lazy = lazy, exports.memo = memo, exports.useCallback = useCallback, exports.useContext = useContext, exports.useDebugValue = useDebugValue, exports.useEffect = useEffect, exports.useImperativeHandle = useImperativeHandle, exports.useLayoutEffect = useLayoutEffect, exports.useMemo = useMemo, exports.useReducer = useReducer3, exports.useRef = useRef, exports.useState = useState, exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      module.exports = require_react_development();
    }
  });

  // ../react-d3-graph/node_modules/object-assign/index.js
  var require_object_assign2 = __commonJS({
    "../react-d3-graph/node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols, hasOwnProperty = Object.prototype.hasOwnProperty, propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val == null)
          throw new TypeError("Object.assign cannot be called with null or undefined");
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign)
            return !1;
          var test1 = new String("abc");
          if (test1[5] = "de", Object.getOwnPropertyNames(test1)[0] === "5")
            return !1;
          for (var test2 = {}, i = 0; i < 10; i++)
            test2["_" + String.fromCharCode(i)] = i;
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789")
            return !1;
          var test3 = {};
          return "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          }), Object.keys(Object.assign({}, test3)).join("") === "abcdefghijklmnopqrst";
        } catch {
          return !1;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target3, source3) {
        for (var from, to = toObject(target3), symbols, s2 = 1; s2 < arguments.length; s2++) {
          from = Object(arguments[s2]);
          for (var key in from)
            hasOwnProperty.call(from, key) && (to[key] = from[key]);
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++)
              propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
          }
        }
        return to;
      };
    }
  });

  // ../react-d3-graph/node_modules/react/cjs/react.development.js
  var require_react_development2 = __commonJS({
    "../react-d3-graph/node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      (function() {
        "use strict";
        var _assign = require_object_assign2(), ReactVersion = "17.0.2", REACT_ELEMENT_TYPE = 60103, REACT_PORTAL_TYPE = 60106;
        exports.Fragment = 60107, exports.StrictMode = 60108, exports.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109, REACT_CONTEXT_TYPE = 60110, REACT_FORWARD_REF_TYPE = 60112;
        exports.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120, REACT_MEMO_TYPE = 60115, REACT_LAZY_TYPE = 60116, REACT_BLOCK_TYPE = 60121, REACT_SERVER_BLOCK_TYPE = 60122, REACT_FUNDAMENTAL_TYPE = 60117, REACT_SCOPE_TYPE = 60119, REACT_OPAQUE_ID_TYPE = 60128, REACT_DEBUG_TRACING_MODE_TYPE = 60129, REACT_OFFSCREEN_TYPE = 60130, REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol == "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element"), REACT_PORTAL_TYPE = symbolFor("react.portal"), exports.Fragment = symbolFor("react.fragment"), exports.StrictMode = symbolFor("react.strict_mode"), exports.Profiler = symbolFor("react.profiler"), REACT_PROVIDER_TYPE = symbolFor("react.provider"), REACT_CONTEXT_TYPE = symbolFor("react.context"), REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref"), exports.Suspense = symbolFor("react.suspense"), REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list"), REACT_MEMO_TYPE = symbolFor("react.memo"), REACT_LAZY_TYPE = symbolFor("react.lazy"), REACT_BLOCK_TYPE = symbolFor("react.block"), REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block"), REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental"), REACT_SCOPE_TYPE = symbolFor("react.scope"), REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id"), REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol == "function" && Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable != "object")
            return null;
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          return typeof maybeIterator == "function" ? maybeIterator : null;
        }
        var ReactCurrentDispatcher = {
          current: null
        }, ReactCurrentBatchConfig = {
          transition: 0
        }, ReactCurrentOwner = {
          current: null
        }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          currentExtraStackFrame = stack;
        }
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          currentExtraStackFrame = stack;
        }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          currentExtraStackFrame && (stack += currentExtraStackFrame);
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          return impl && (stack += impl() || ""), stack;
        };
        var IsSomeRendererActing = {
          current: !1
        }, ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
              args[_key - 1] = arguments[_key];
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
              args[_key2 - 1] = arguments[_key2];
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
            stack !== "" && (format += "%s", args = args.concat([stack]));
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey])
              return;
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = !0;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return !1;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        }, emptyObject = {};
        Object.freeze(emptyObject);
        function Component(props, context, updater) {
          this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {}, Component.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState == "object" || typeof partialState == "function" || partialState == null))
            throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        }, Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          }, defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              }
            });
          };
          for (var fnName in deprecatedAPIs)
            deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent, _assign(pureComponentPrototype, Component.prototype), pureComponentPrototype.isPureReactComponent = !0;
        function createRef() {
          var refObject = {
            current: null
          };
          return Object.seal(refObject), refObject;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null)
            return null;
          if (typeof type.tag == "number" && error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."), typeof type == "function")
            return type.displayName || type.name || null;
          if (typeof type == "string")
            return type;
          switch (type) {
            case exports.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports.Profiler:
              return "Profiler";
            case exports.StrictMode:
              return "StrictMode";
            case exports.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type == "object")
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type, payload3 = lazyComponent._payload, init3 = lazyComponent._init;
                try {
                  return getComponentName(init3(payload3));
                } catch {
                  return null;
                }
              }
            }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
          key: !0,
          ref: !0,
          __self: !0,
          __source: !0
        }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        didWarnAboutStringRefs = {};
        function hasValidRef(config2) {
          if (hasOwnProperty.call(config2, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
            if (getter && getter.isReactWarning)
              return !1;
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          if (hasOwnProperty.call(config2, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
            if (getter && getter.isReactWarning)
              return !1;
          }
          return config2.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config2) {
          if (typeof config2.ref == "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            didWarnAboutStringRefs[componentName] || (error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref), didWarnAboutStringRefs[componentName] = !0);
          }
        }
        var ReactElement = function(type, key, ref, self2, source3, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          return element._store = {}, Object.defineProperty(element._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: !1
          }), Object.defineProperty(element, "_self", {
            configurable: !1,
            enumerable: !1,
            writable: !1,
            value: self2
          }), Object.defineProperty(element, "_source", {
            configurable: !1,
            enumerable: !1,
            writable: !1,
            value: source3
          }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
        };
        function createElement6(type, config2, children2) {
          var propName, props = {}, key = null, ref = null, self2 = null, source3 = null;
          if (config2 != null) {
            hasValidRef(config2) && (ref = config2.ref, warnIfStringRefCannotBeAutoConverted(config2)), hasValidKey(config2) && (key = "" + config2.key), self2 = config2.__self === void 0 ? null : config2.__self, source3 = config2.__source === void 0 ? null : config2.__source;
            for (propName in config2)
              hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config2[propName]);
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1)
            props.children = children2;
          else if (childrenLength > 1) {
            for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
              childArray[i] = arguments[i + 2];
            Object.freeze && Object.freeze(childArray), props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type == "function" ? type.displayName || type.name || "Unknown" : type;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type, key, ref, self2, source3, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config2, children2) {
          if (element == null)
            throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          var propName, props = _assign({}, element.props), key = element.key, ref = element.ref, self2 = element._self, source3 = element._source, owner = element._owner;
          if (config2 != null) {
            hasValidRef(config2) && (ref = config2.ref, owner = ReactCurrentOwner.current), hasValidKey(config2) && (key = "" + config2.key);
            var defaultProps;
            element.type && element.type.defaultProps && (defaultProps = element.type.defaultProps);
            for (propName in config2)
              hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (config2[propName] === void 0 && defaultProps !== void 0 ? props[propName] = defaultProps[propName] : props[propName] = config2[propName]);
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1)
            props.children = children2;
          else if (childrenLength > 1) {
            for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
              childArray[i] = arguments[i + 2];
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source3, owner, props);
        }
        function isValidElement(object) {
          return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".", SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g, escaperLookup = {
            "=": "=0",
            ":": "=2"
          }, escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index2) {
          return typeof element == "object" && element !== null && element.key != null ? escape("" + element.key) : index2.toString(36);
        }
        function mapIntoArray(children2, array2, escapedPrefix, nameSoFar, callback) {
          var type = typeof children2;
          (type === "undefined" || type === "boolean") && (children2 = null);
          var invokeCallback = !1;
          if (children2 === null)
            invokeCallback = !0;
          else
            switch (type) {
              case "string":
              case "number":
                invokeCallback = !0;
                break;
              case "object":
                switch (children2.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = !0;
                }
            }
          if (invokeCallback) {
            var _child = children2, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              childKey != null && (escapedChildKey = escapeUserProvidedKey(childKey) + "/"), mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c3) {
                return c3;
              });
            } else
              mappedChild != null && (isValidElement(mappedChild) && (mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey)), array2.push(mappedChild));
            return 1;
          }
          var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children2))
            for (var i = 0; i < children2.length; i++)
              child = children2[i], nextName = nextNamePrefix + getElementKey(child, i), subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
          else {
            var iteratorFn = getIteratorFn(children2);
            if (typeof iteratorFn == "function") {
              var iterableChildren = children2;
              iteratorFn === iterableChildren.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
              for (var iterator = iteratorFn.call(iterableChildren), step, ii = 0; !(step = iterator.next()).done; )
                child = step.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
            } else if (type === "object") {
              var childrenString = "" + children2;
              throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children2, func, context) {
          if (children2 == null)
            return children2;
          var result = [], count = 0;
          return mapIntoArray(children2, result, "", "", function(child) {
            return func.call(context, child, count++);
          }), result;
        }
        function countChildren(children2) {
          var n = 0;
          return mapChildren(children2, function() {
            n++;
          }), n;
        }
        function forEachChildren(children2, forEachFunc, forEachContext) {
          mapChildren(children2, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray7(children2) {
          return mapChildren(children2, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children2) {
          if (!isValidElement(children2))
            throw Error("React.Children.only expected to receive a single React element child.");
          return children2;
        }
        function createContext(defaultValue, calculateChangedBits) {
          calculateChangedBits === void 0 ? calculateChangedBits = null : calculateChangedBits !== null && typeof calculateChangedBits != "function" && error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  return hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = !0, error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  return hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = !0, error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0);
                }
              }
            }), context.Consumer = Consumer;
          }
          return context._currentRenderer = null, context._currentRenderer2 = null, context;
        }
        var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
        function lazyInitializer(payload3) {
          if (payload3._status === Uninitialized) {
            var ctor = payload3._result, thenable = ctor(), pending = payload3;
            pending._status = Pending, pending._result = thenable, thenable.then(function(moduleObject) {
              if (payload3._status === Pending) {
                var defaultExport = moduleObject.default;
                defaultExport === void 0 && error(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject);
                var resolved = payload3;
                resolved._status = Resolved, resolved._result = defaultExport;
              }
            }, function(error2) {
              if (payload3._status === Pending) {
                var rejected = payload3;
                rejected._status = Rejected, rejected._result = error2;
              }
            });
          }
          if (payload3._status === Resolved)
            return payload3._result;
          throw payload3._result;
        }
        function lazy(ctor) {
          var payload3 = {
            _status: -1,
            _result: ctor
          }, lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload3,
            _init: lazyInitializer
          };
          {
            var defaultProps, propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: !0,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps = newDefaultProps, Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: !0
                  });
                }
              },
              propTypes: {
                configurable: !0,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType, "propTypes", {
                    enumerable: !0
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render2) {
          render2 != null && render2.$$typeof === REACT_MEMO_TYPE ? error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render2 != "function" ? error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2) : render2.length !== 0 && render2.length !== 2 && error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), render2 != null && (render2.defaultProps != null || render2.propTypes != null) && error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: !1,
              configurable: !0,
              get: function() {
                return ownName;
              },
              set: function(name2) {
                ownName = name2, render2.displayName == null && (render2.displayName = name2);
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = !1;
        function isValidElementType(type) {
          return !!(typeof type == "string" || typeof type == "function" || type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI || typeof type == "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE));
        }
        function memo(type, compare) {
          isValidElementType(type) || error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: !1,
              configurable: !0,
              get: function() {
                return ownName;
              },
              set: function(name2) {
                ownName = name2, type.displayName == null && (type.displayName = name2);
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (dispatcher === null)
            throw Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
          return dispatcher;
        }
        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          if (unstable_observedBits !== void 0 && error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits == "number" && Array.isArray(arguments[2]) ? `

Did you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks` : ""), Context._context !== void 0) {
            var realContext = Context._context;
            realContext.Consumer === Context ? error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer3(reducer3, initialArg, init3) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer3, initialArg, init3);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create12, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create12, deps);
        }
        function useLayoutEffect(create12, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create12, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create12, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create12, deps);
        }
        function useImperativeHandle(ref, create12, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create12, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = !0;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
              var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            if (disabledDepth--, disabledDepth === 0) {
              var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix;
        function describeBuiltInComponentFrame(name2, source3, ownerFn) {
          {
            if (prefix === void 0)
              try {
                throw Error();
              } catch (x5) {
                var match = x5.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            return `
` + prefix + name2;
          }
        }
        var reentry = !1, componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry)
            return "";
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0)
              return frame2;
          }
          var control;
          reentry = !0;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              if (Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              }), typeof Reflect == "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x5) {
                  control = x5;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x5) {
                  control = x5;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x5) {
                control = x5;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack == "string") {
              for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s2 = sampleLines.length - 1, c3 = controlLines.length - 1; s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]; )
                c3--;
              for (; s2 >= 1 && c3 >= 0; s2--, c3--)
                if (sampleLines[s2] !== controlLines[c3]) {
                  if (s2 !== 1 || c3 !== 1)
                    do
                      if (s2--, c3--, c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                        var _frame = `
` + sampleLines[s2].replace(" at new ", " at ");
                        return typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                      }
                    while (s2 >= 1 && c3 >= 0);
                  break;
                }
            }
          } finally {
            reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn ? fn.displayName || fn.name : "", syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source3, ownerFn) {
          return describeNativeComponentFrame(fn, !1);
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
          if (type == null)
            return "";
          if (typeof type == "function")
            return describeNativeComponentFrame(type, shouldConstruct(type));
          if (typeof type == "string")
            return describeBuiltInComponentFrame(type);
          switch (type) {
            case exports.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type == "object")
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type, payload3 = lazyComponent._payload, init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload3), source3, ownerFn);
                } catch {
                }
              }
            }
          return "";
        }
        var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          if (element) {
            var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has8 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs)
              if (has8(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] != "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    throw err.name = "Invariant Violation", err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
              }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          if (element) {
            var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else
            setExtraStackFrame(null);
        }
        var propTypesMisspellWarningShown;
        propTypesMisspellWarningShown = !1;
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name2 = getComponentName(ReactCurrentOwner.current.type);
            if (name2)
              return `

Check the render method of \`` + name2 + "`.";
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source3) {
          if (source3 !== void 0) {
            var fileName = source3.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source3.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          return elementProps != null ? getSourceInfoErrorAddendum(elementProps.__source) : "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!(!element._store || element._store.validated || element.key != null)) {
            element._store.validated = !0;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (!ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
              var childOwner = "";
              element && element._owner && element._owner !== ReactCurrentOwner.current && (childOwner = " It was passed a child from " + getComponentName(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node == "object") {
            if (Array.isArray(node))
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                isValidElement(child) && validateExplicitKey(child, parentType);
              }
            else if (isValidElement(node))
              node._store && (node._store.validated = !0);
            else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
                for (var iterator = iteratorFn.call(node), step; !(step = iterator.next()).done; )
                  isValidElement(step.value) && validateExplicitKey(step.value, parentType);
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type == null || typeof type == "string")
              return;
            var propTypes;
            if (typeof type == "function")
              propTypes = type.propTypes;
            else if (typeof type == "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE))
              propTypes = type.propTypes;
            else
              return;
            if (propTypes) {
              var name2 = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name2, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = !0;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            typeof type.getDefaultProps == "function" && !type.getDefaultProps.isReactClassApproved && error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
        function validateFragmentProps(fragment) {
          {
            for (var keys = Object.keys(fragment.props), i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment), error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
          }
        }
        function createElementWithValidation(type, props, children2) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type === null ? typeString = "null" : Array.isArray(type) ? typeString = "array" : type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentName(type.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type, error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = createElement6.apply(this, arguments);
          if (element == null)
            return element;
          if (validType)
            for (var i = 2; i < arguments.length; i++)
              validateChildKeys(arguments[i], type);
          return type === exports.Fragment ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
        var didWarnAboutDeprecatedCreateFactory = !1;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          return validatedFactory.type = type, didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(validatedFactory, "type", {
            enumerable: !1,
            get: function() {
              return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
                value: type
              }), type;
            }
          }), validatedFactory;
        }
        function cloneElementWithValidation(element, props, children2) {
          for (var newElement = cloneElement.apply(this, arguments), i = 2; i < arguments.length; i++)
            validateChildKeys(arguments[i], newElement.type);
          return validatePropTypes(newElement), newElement;
        }
        try {
          var frozenObject = Object.freeze({});
          new Map([[frozenObject, null]]), new Set([frozenObject]);
        } catch {
        }
        var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray7,
          only: onlyChild
        };
        exports.Children = Children, exports.Component = Component, exports.PureComponent = PureComponent, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.cloneElement = cloneElement$1, exports.createContext = createContext, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef, exports.forwardRef = forwardRef, exports.isValidElement = isValidElement, exports.lazy = lazy, exports.memo = memo, exports.useCallback = useCallback, exports.useContext = useContext, exports.useDebugValue = useDebugValue, exports.useEffect = useEffect, exports.useImperativeHandle = useImperativeHandle, exports.useLayoutEffect = useLayoutEffect, exports.useMemo = useMemo, exports.useReducer = useReducer3, exports.useRef = useRef, exports.useState = useState, exports.version = ReactVersion;
      })();
    }
  });

  // ../react-d3-graph/node_modules/react/index.js
  var require_react2 = __commonJS({
    "../react-d3-graph/node_modules/react/index.js"(exports, module) {
      "use strict";
      module.exports = require_react_development2();
    }
  });

  // ../react-d3-graph/node_modules/d3-dispatch/src/dispatch.js
  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
        throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }
  function Dispatch(_) {
    this._ = _;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name2 = "", i = t.indexOf(".");
      if (i >= 0 && (name2 = t.slice(i + 1), t = t.slice(0, i)), t && !types.hasOwnProperty(t))
        throw new Error("unknown type: " + t);
      return { type: t, name: name2 };
    });
  }
  function get9(type, name2) {
    for (var i = 0, n = type.length, c3; i < n; ++i)
      if ((c3 = type[i]).name === name2)
        return c3.value;
  }
  function set4(type, name2, callback) {
    for (var i = 0, n = type.length; i < n; ++i)
      if (type[i].name === name2) {
        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    return callback != null && type.push({ name: name2, value: callback }), type;
  }
  var noop, dispatch_default, init_dispatch = __esm({
    "../react-d3-graph/node_modules/d3-dispatch/src/dispatch.js"() {
      noop = { value: () => {
      } };
      Dispatch.prototype = dispatch.prototype = {
        constructor: Dispatch,
        on: function(typename, callback) {
          var _ = this._, T2 = parseTypenames(typename + "", _), t, i = -1, n = T2.length;
          if (arguments.length < 2) {
            for (; ++i < n; )
              if ((t = (typename = T2[i]).type) && (t = get9(_[t], typename.name)))
                return t;
            return;
          }
          if (callback != null && typeof callback != "function")
            throw new Error("invalid callback: " + callback);
          for (; ++i < n; )
            if (t = (typename = T2[i]).type)
              _[t] = set4(_[t], typename.name, callback);
            else if (callback == null)
              for (t in _)
                _[t] = set4(_[t], typename.name, null);
          return this;
        },
        copy: function() {
          var copy = {}, _ = this._;
          for (var t in _)
            copy[t] = _[t].slice();
          return new Dispatch(copy);
        },
        call: function(type, that) {
          if ((n = arguments.length - 2) > 0)
            for (var args = new Array(n), i = 0, n, t; i < n; ++i)
              args[i] = arguments[i + 2];
          if (!this._.hasOwnProperty(type))
            throw new Error("unknown type: " + type);
          for (t = this._[type], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
        },
        apply: function(type, that, args) {
          if (!this._.hasOwnProperty(type))
            throw new Error("unknown type: " + type);
          for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
        }
      };
      dispatch_default = dispatch;
    }
  });

  // ../react-d3-graph/node_modules/d3-dispatch/src/index.js
  var init_src = __esm({
    "../react-d3-graph/node_modules/d3-dispatch/src/index.js"() {
      init_dispatch();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/namespaces.js
  var xhtml, namespaces_default, init_namespaces = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/namespaces.js"() {
      xhtml = "http://www.w3.org/1999/xhtml", namespaces_default = {
        svg: "http://www.w3.org/2000/svg",
        xhtml,
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/namespace.js
  function namespace_default(name2) {
    var prefix = name2 += "", i = prefix.indexOf(":");
    return i >= 0 && (prefix = name2.slice(0, i)) !== "xmlns" && (name2 = name2.slice(i + 1)), namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name2 } : name2;
  }
  var init_namespace = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/namespace.js"() {
      init_namespaces();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/creator.js
  function creatorInherit(name2) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name2) : document2.createElementNS(uri, name2);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name2) {
    var fullname = namespace_default(name2);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }
  var init_creator = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/creator.js"() {
      init_namespace();
      init_namespaces();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selector.js
  function none() {
  }
  function selector_default(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }
  var init_selector = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selector.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/select.js
  function select_default(select) {
    typeof select != "function" && (select = selector_default(select));
    for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j)
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i)
        (node = group[i]) && (subnode = select.call(node, node.__data__, i, group)) && ("__data__" in node && (subnode.__data__ = node.__data__), subgroup[i] = subnode);
    return new Selection(subgroups, this._parents);
  }
  var init_select = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/select.js"() {
      init_selection();
      init_selector();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/array.js
  function array(x5) {
    return x5 == null ? [] : Array.isArray(x5) ? x5 : Array.from(x5);
  }
  var init_array = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/array.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selectorAll.js
  function empty3() {
    return [];
  }
  function selectorAll_default(selector) {
    return selector == null ? empty3 : function() {
      return this.querySelectorAll(selector);
    };
  }
  var init_selectorAll = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selectorAll.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/selectAll.js
  function arrayAll(select) {
    return function() {
      return array(select.apply(this, arguments));
    };
  }
  function selectAll_default(select) {
    typeof select == "function" ? select = arrayAll(select) : select = selectorAll_default(select);
    for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j)
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i)
        (node = group[i]) && (subgroups.push(select.call(node, node.__data__, i, group)), parents.push(node));
    return new Selection(subgroups, parents);
  }
  var init_selectAll = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/selectAll.js"() {
      init_selection();
      init_array();
      init_selectorAll();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/matcher.js
  function matcher_default(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }
  var init_matcher = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/matcher.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/selectChild.js
  function childFind(match) {
    return function() {
      return find2.call(this.children, match);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match) {
    return this.select(match == null ? childFirst : childFind(typeof match == "function" ? match : childMatcher(match)));
  }
  var find2, init_selectChild = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/selectChild.js"() {
      init_matcher();
      find2 = Array.prototype.find;
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/selectChildren.js
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(match) {
    return function() {
      return filter3.call(this.children, match);
    };
  }
  function selectChildren_default(match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match == "function" ? match : childMatcher(match)));
  }
  var filter3, init_selectChildren = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/selectChildren.js"() {
      init_matcher();
      filter3 = Array.prototype.filter;
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/filter.js
  function filter_default(match) {
    typeof match != "function" && (match = matcher_default(match));
    for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j)
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i)
        (node = group[i]) && match.call(node, node.__data__, i, group) && subgroup.push(node);
    return new Selection(subgroups, this._parents);
  }
  var init_filter = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/filter.js"() {
      init_selection();
      init_matcher();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/sparse.js
  function sparse_default(update2) {
    return new Array(update2.length);
  }
  var init_sparse = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/sparse.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/enter.js
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent, datum2) {
    this.ownerDocument = parent.ownerDocument, this.namespaceURI = parent.namespaceURI, this._next = null, this._parent = parent, this.__data__ = datum2;
  }
  var init_enter = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/enter.js"() {
      init_sparse();
      init_selection();
      EnterNode.prototype = {
        constructor: EnterNode,
        appendChild: function(child) {
          return this._parent.insertBefore(child, this._next);
        },
        insertBefore: function(child, next) {
          return this._parent.insertBefore(child, next);
        },
        querySelector: function(selector) {
          return this._parent.querySelector(selector);
        },
        querySelectorAll: function(selector) {
          return this._parent.querySelectorAll(selector);
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/constant.js
  function constant_default(x5) {
    return function() {
      return x5;
    };
  }
  var init_constant = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/constant.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/data.js
  function bindIndex(parent, group, enter, update2, exit, data4) {
    for (var i = 0, node, groupLength = group.length, dataLength = data4.length; i < dataLength; ++i)
      (node = group[i]) ? (node.__data__ = data4[i], update2[i] = node) : enter[i] = new EnterNode(parent, data4[i]);
    for (; i < groupLength; ++i)
      (node = group[i]) && (exit[i] = node);
  }
  function bindKey(parent, group, enter, update2, exit, data4, key) {
    var i, node, nodeByKeyValue = new Map(), groupLength = group.length, dataLength = data4.length, keyValues = new Array(groupLength), keyValue;
    for (i = 0; i < groupLength; ++i)
      (node = group[i]) && (keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "", nodeByKeyValue.has(keyValue) ? exit[i] = node : nodeByKeyValue.set(keyValue, node));
    for (i = 0; i < dataLength; ++i)
      keyValue = key.call(parent, data4[i], i, data4) + "", (node = nodeByKeyValue.get(keyValue)) ? (update2[i] = node, node.__data__ = data4[i], nodeByKeyValue.delete(keyValue)) : enter[i] = new EnterNode(parent, data4[i]);
    for (i = 0; i < groupLength; ++i)
      (node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node && (exit[i] = node);
  }
  function datum(node) {
    return node.__data__;
  }
  function data_default(value, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    typeof value != "function" && (value = constant_default(value));
    for (var m2 = groups.length, update2 = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
      var parent = parents[j], group = groups[j], groupLength = group.length, data4 = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data4.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update2[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
      bind(parent, group, enterGroup, updateGroup, exitGroup, data4, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0)
        if (previous = enterGroup[i0]) {
          for (i0 >= i1 && (i1 = i0 + 1); !(next = updateGroup[i1]) && ++i1 < dataLength; )
            ;
          previous._next = next || null;
        }
    }
    return update2 = new Selection(update2, parents), update2._enter = enter, update2._exit = exit, update2;
  }
  function arraylike(data4) {
    return typeof data4 == "object" && "length" in data4 ? data4 : Array.from(data4);
  }
  var init_data = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/data.js"() {
      init_selection();
      init_enter();
      init_constant();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/exit.js
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }
  var init_exit = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/exit.js"() {
      init_sparse();
      init_selection();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/join.js
  function join_default(onenter, onupdate, onexit) {
    var enter = this.enter(), update2 = this, exit = this.exit();
    return typeof onenter == "function" ? (enter = onenter(enter), enter && (enter = enter.selection())) : enter = enter.append(onenter + ""), onupdate != null && (update2 = onupdate(update2), update2 && (update2 = update2.selection())), onexit == null ? exit.remove() : onexit(exit), enter && update2 ? enter.merge(update2).order() : update2;
  }
  var init_join = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/join.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/merge.js
  function merge_default(context) {
    for (var selection3 = context.selection ? context.selection() : context, groups0 = this._groups, groups1 = selection3._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j)
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge2 = merges[j] = new Array(n), node, i = 0; i < n; ++i)
        (node = group0[i] || group1[i]) && (merge2[i] = node);
    for (; j < m0; ++j)
      merges[j] = groups0[j];
    return new Selection(merges, this._parents);
  }
  var init_merge = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/merge.js"() {
      init_selection();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/order.js
  function order_default() {
    for (var groups = this._groups, j = -1, m2 = groups.length; ++j < m2; )
      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; )
        (node = group[i]) && (next && node.compareDocumentPosition(next) ^ 4 && next.parentNode.insertBefore(node, next), next = node);
    return this;
  }
  var init_order = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/order.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/sort.js
  function sort_default(compare) {
    compare || (compare = ascending);
    function compareNode(a3, b) {
      return a3 && b ? compare(a3.__data__, b.__data__) : !a3 - !b;
    }
    for (var groups = this._groups, m2 = groups.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i)
        (node = group[i]) && (sortgroup[i] = node);
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending(a3, b) {
    return a3 < b ? -1 : a3 > b ? 1 : a3 >= b ? 0 : NaN;
  }
  var init_sort = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/sort.js"() {
      init_selection();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/call.js
  function call_default() {
    var callback = arguments[0];
    return arguments[0] = this, callback.apply(null, arguments), this;
  }
  var init_call = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/call.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/nodes.js
  function nodes_default() {
    return Array.from(this);
  }
  var init_nodes = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/nodes.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/node.js
  function node_default() {
    for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j)
      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
        var node = group[i];
        if (node)
          return node;
      }
    return null;
  }
  var init_node = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/node.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/size.js
  function size_default() {
    let size7 = 0;
    for (let node of this)
      ++size7;
    return size7;
  }
  var init_size = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/size.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/empty.js
  function empty_default() {
    return !this.node();
  }
  var init_empty = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/empty.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/each.js
  function each_default(callback) {
    for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j)
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i)
        (node = group[i]) && callback.call(node, node.__data__, i, group);
    return this;
  }
  var init_each = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/each.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/attr.js
  function attrRemove(name2) {
    return function() {
      this.removeAttribute(name2);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name2, value) {
    return function() {
      this.setAttribute(name2, value);
    };
  }
  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }
  function attrFunction(name2, value) {
    return function() {
      var v = value.apply(this, arguments);
      v == null ? this.removeAttribute(name2) : this.setAttribute(name2, v);
    };
  }
  function attrFunctionNS(fullname, value) {
    return function() {
      var v = value.apply(this, arguments);
      v == null ? this.removeAttributeNS(fullname.space, fullname.local) : this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }
  function attr_default(name2, value) {
    var fullname = namespace_default(name2);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value == "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
  }
  var init_attr = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/attr.js"() {
      init_namespace();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/window.js
  function window_default(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }
  var init_window = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/window.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/style.js
  function styleRemove(name2) {
    return function() {
      this.style.removeProperty(name2);
    };
  }
  function styleConstant(name2, value, priority) {
    return function() {
      this.style.setProperty(name2, value, priority);
    };
  }
  function styleFunction(name2, value, priority) {
    return function() {
      var v = value.apply(this, arguments);
      v == null ? this.style.removeProperty(name2) : this.style.setProperty(name2, v, priority);
    };
  }
  function style_default(name2, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value == "function" ? styleFunction : styleConstant)(name2, value, priority ?? "")) : styleValue(this.node(), name2);
  }
  function styleValue(node, name2) {
    return node.style.getPropertyValue(name2) || window_default(node).getComputedStyle(node, null).getPropertyValue(name2);
  }
  var init_style = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/style.js"() {
      init_window();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/property.js
  function propertyRemove(name2) {
    return function() {
      delete this[name2];
    };
  }
  function propertyConstant(name2, value) {
    return function() {
      this[name2] = value;
    };
  }
  function propertyFunction(name2, value) {
    return function() {
      var v = value.apply(this, arguments);
      v == null ? delete this[name2] : this[name2] = v;
    };
  }
  function property_default(name2, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value == "function" ? propertyFunction : propertyConstant)(name2, value)) : this.node()[name2];
  }
  var init_property = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/property.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/classed.js
  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList(node) {
    return node.classList || new ClassList(node);
  }
  function ClassList(node) {
    this._node = node, this._names = classArray(node.getAttribute("class") || "");
  }
  function classedAdd(node, names) {
    for (var list = classList(node), i = -1, n = names.length; ++i < n; )
      list.add(names[i]);
  }
  function classedRemove(node, names) {
    for (var list = classList(node), i = -1, n = names.length; ++i < n; )
      list.remove(names[i]);
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name2, value) {
    var names = classArray(name2 + "");
    if (arguments.length < 2) {
      for (var list = classList(this.node()), i = -1, n = names.length; ++i < n; )
        if (!list.contains(names[i]))
          return !1;
      return !0;
    }
    return this.each((typeof value == "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
  }
  var init_classed = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/classed.js"() {
      ClassList.prototype = {
        add: function(name2) {
          var i = this._names.indexOf(name2);
          i < 0 && (this._names.push(name2), this._node.setAttribute("class", this._names.join(" ")));
        },
        remove: function(name2) {
          var i = this._names.indexOf(name2);
          i >= 0 && (this._names.splice(i, 1), this._node.setAttribute("class", this._names.join(" ")));
        },
        contains: function(name2) {
          return this._names.indexOf(name2) >= 0;
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/text.js
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.textContent = v ?? "";
    };
  }
  function text_default(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value == "function" ? textFunction : textConstant)(value)) : this.node().textContent;
  }
  var init_text = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/text.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/html.js
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }
  function htmlFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v ?? "";
    };
  }
  function html_default(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value == "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
  }
  var init_html = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/html.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/raise.js
  function raise() {
    this.nextSibling && this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }
  var init_raise = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/raise.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/lower.js
  function lower() {
    this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }
  var init_lower = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/lower.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/append.js
  function append_default(name2) {
    var create12 = typeof name2 == "function" ? name2 : creator_default(name2);
    return this.select(function() {
      return this.appendChild(create12.apply(this, arguments));
    });
  }
  var init_append = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/append.js"() {
      init_creator();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/insert.js
  function constantNull() {
    return null;
  }
  function insert_default(name2, before) {
    var create12 = typeof name2 == "function" ? name2 : creator_default(name2), select = before == null ? constantNull : typeof before == "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create12.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }
  var init_insert = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/insert.js"() {
      init_creator();
      init_selector();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/remove.js
  function remove4() {
    var parent = this.parentNode;
    parent && parent.removeChild(this);
  }
  function remove_default() {
    return this.each(remove4);
  }
  var init_remove = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/remove.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/clone.js
  function selection_cloneShallow() {
    var clone = this.cloneNode(!1), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }
  function selection_cloneDeep() {
    var clone = this.cloneNode(!0), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }
  var init_clone = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/clone.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/datum.js
  function datum_default(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }
  var init_datum = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/datum.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/on.js
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name2 = "", i = t.indexOf(".");
      return i >= 0 && (name2 = t.slice(i + 1), t = t.slice(0, i)), { type: t, name: name2 };
    });
  }
  function onRemove(typename) {
    return function() {
      var on = this.__on;
      if (!!on) {
        for (var j = 0, i = -1, m2 = on.length, o; j < m2; ++j)
          o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name ? this.removeEventListener(o.type, o.listener, o.options) : on[++i] = o;
        ++i ? on.length = i : delete this.__on;
      }
    };
  }
  function onAdd(typename, value, options) {
    return function() {
      var on = this.__on, o, listener = contextListener(value);
      if (on) {
        for (var j = 0, m2 = on.length; j < m2; ++j)
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options), this.addEventListener(o.type, o.listener = listener, o.options = options), o.value = value;
            return;
          }
      }
      this.addEventListener(typename.type, listener, options), o = { type: typename.type, name: typename.name, value, listener, options }, on ? on.push(o) : this.__on = [o];
    };
  }
  function on_default(typename, value, options) {
    var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t;
    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on) {
        for (var j = 0, m2 = on.length, o; j < m2; ++j)
          for (i = 0, o = on[j]; i < n; ++i)
            if ((t = typenames[i]).type === o.type && t.name === o.name)
              return o.value;
      }
      return;
    }
    for (on = value ? onAdd : onRemove, i = 0; i < n; ++i)
      this.each(on(typenames[i], value, options));
    return this;
  }
  var init_on = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/on.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/dispatch.js
  function dispatchEvent(node, type, params) {
    var window2 = window_default(node), event = window2.CustomEvent;
    typeof event == "function" ? event = new event(type, params) : (event = window2.document.createEvent("Event"), params ? (event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail) : event.initEvent(type, !1, !1)), node.dispatchEvent(event);
  }
  function dispatchConstant(type, params) {
    return function() {
      return dispatchEvent(this, type, params);
    };
  }
  function dispatchFunction(type, params) {
    return function() {
      return dispatchEvent(this, type, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type, params) {
    return this.each((typeof params == "function" ? dispatchFunction : dispatchConstant)(type, params));
  }
  var init_dispatch2 = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/dispatch.js"() {
      init_window();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/iterator.js
  function* iterator_default() {
    for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j)
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i)
        (node = group[i]) && (yield node);
  }
  var init_iterator = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/iterator.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selection/index.js
  function Selection(groups, parents) {
    this._groups = groups, this._parents = parents;
  }
  function selection() {
    return new Selection([[document.documentElement]], root);
  }
  function selection_selection() {
    return this;
  }
  var root, selection_default, init_selection = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/index.js"() {
      init_select();
      init_selectAll();
      init_selectChild();
      init_selectChildren();
      init_filter();
      init_data();
      init_enter();
      init_exit();
      init_join();
      init_merge();
      init_order();
      init_sort();
      init_call();
      init_nodes();
      init_node();
      init_size();
      init_empty();
      init_each();
      init_attr();
      init_style();
      init_property();
      init_classed();
      init_text();
      init_html();
      init_raise();
      init_lower();
      init_append();
      init_insert();
      init_remove();
      init_clone();
      init_datum();
      init_on();
      init_dispatch2();
      init_iterator();
      root = [null];
      Selection.prototype = selection.prototype = {
        constructor: Selection,
        select: select_default,
        selectAll: selectAll_default,
        selectChild: selectChild_default,
        selectChildren: selectChildren_default,
        filter: filter_default,
        data: data_default,
        enter: enter_default,
        exit: exit_default,
        join: join_default,
        merge: merge_default,
        selection: selection_selection,
        order: order_default,
        sort: sort_default,
        call: call_default,
        nodes: nodes_default,
        node: node_default,
        size: size_default,
        empty: empty_default,
        each: each_default,
        attr: attr_default,
        style: style_default,
        property: property_default,
        classed: classed_default,
        text: text_default,
        html: html_default,
        raise: raise_default,
        lower: lower_default,
        append: append_default,
        insert: insert_default,
        remove: remove_default,
        clone: clone_default,
        datum: datum_default,
        on: on_default,
        dispatch: dispatch_default2,
        [Symbol.iterator]: iterator_default
      };
      selection_default = selection;
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/select.js
  function select_default2(selector) {
    return typeof selector == "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
  }
  var init_select2 = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/select.js"() {
      init_selection();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/create.js
  function create_default(name2) {
    return select_default2(creator_default(name2).call(document.documentElement));
  }
  var init_create = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/create.js"() {
      init_creator();
      init_select2();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/local.js
  function local() {
    return new Local();
  }
  function Local() {
    this._ = "@" + (++nextId).toString(36);
  }
  var nextId, init_local = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/local.js"() {
      nextId = 0;
      Local.prototype = local.prototype = {
        constructor: Local,
        get: function(node) {
          for (var id7 = this._; !(id7 in node); )
            if (!(node = node.parentNode))
              return;
          return node[id7];
        },
        set: function(node, value) {
          return node[this._] = value;
        },
        remove: function(node) {
          return this._ in node && delete node[this._];
        },
        toString: function() {
          return this._;
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/sourceEvent.js
  function sourceEvent_default(event) {
    let sourceEvent;
    for (; sourceEvent = event.sourceEvent; )
      event = sourceEvent;
    return event;
  }
  var init_sourceEvent = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/sourceEvent.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/pointer.js
  function pointer_default(event, node) {
    if (event = sourceEvent_default(event), node === void 0 && (node = event.currentTarget), node) {
      var svg = node.ownerSVGElement || node;
      if (svg.createSVGPoint) {
        var point5 = svg.createSVGPoint();
        return point5.x = event.clientX, point5.y = event.clientY, point5 = point5.matrixTransform(node.getScreenCTM().inverse()), [point5.x, point5.y];
      }
      if (node.getBoundingClientRect) {
        var rect = node.getBoundingClientRect();
        return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
      }
    }
    return [event.pageX, event.pageY];
  }
  var init_pointer = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/pointer.js"() {
      init_sourceEvent();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/pointers.js
  function pointers_default(events, node) {
    return events.target && (events = sourceEvent_default(events), node === void 0 && (node = events.currentTarget), events = events.touches || [events]), Array.from(events, (event) => pointer_default(event, node));
  }
  var init_pointers = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/pointers.js"() {
      init_pointer();
      init_sourceEvent();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/selectAll.js
  function selectAll_default2(selector) {
    return typeof selector == "string" ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([array(selector)], root);
  }
  var init_selectAll2 = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selectAll.js"() {
      init_array();
      init_selection();
    }
  });

  // ../react-d3-graph/node_modules/d3-selection/src/index.js
  var src_exports = {};
  __export(src_exports, {
    create: () => create_default,
    creator: () => creator_default,
    local: () => local,
    matcher: () => matcher_default,
    namespace: () => namespace_default,
    namespaces: () => namespaces_default,
    pointer: () => pointer_default,
    pointers: () => pointers_default,
    select: () => select_default2,
    selectAll: () => selectAll_default2,
    selection: () => selection_default,
    selector: () => selector_default,
    selectorAll: () => selectorAll_default,
    style: () => styleValue,
    window: () => window_default
  });
  var init_src2 = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/index.js"() {
      init_create();
      init_creator();
      init_local();
      init_matcher();
      init_namespace();
      init_namespaces();
      init_pointer();
      init_pointers();
      init_select2();
      init_selectAll2();
      init_selection();
      init_selector();
      init_selectorAll();
      init_style();
      init_window();
    }
  });

  // ../react-d3-graph/node_modules/d3-drag/src/noevent.js
  function nopropagation(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default(event) {
    event.preventDefault(), event.stopImmediatePropagation();
  }
  var nonpassive, nonpassivecapture, init_noevent = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/noevent.js"() {
      nonpassive = { passive: !1 }, nonpassivecapture = { capture: !0, passive: !1 };
    }
  });

  // ../react-d3-graph/node_modules/d3-drag/src/nodrag.js
  function nodrag_default(view) {
    var root2 = view.document.documentElement, selection3 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
    "onselectstart" in root2 ? selection3.on("selectstart.drag", noevent_default, nonpassivecapture) : (root2.__noselect = root2.style.MozUserSelect, root2.style.MozUserSelect = "none");
  }
  function yesdrag(view, noclick) {
    var root2 = view.document.documentElement, selection3 = select_default2(view).on("dragstart.drag", null);
    noclick && (selection3.on("click.drag", noevent_default, nonpassivecapture), setTimeout(function() {
      selection3.on("click.drag", null);
    }, 0)), "onselectstart" in root2 ? selection3.on("selectstart.drag", null) : (root2.style.MozUserSelect = root2.__noselect, delete root2.__noselect);
  }
  var init_nodrag = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/nodrag.js"() {
      init_src2();
      init_noevent();
    }
  });

  // ../react-d3-graph/node_modules/d3-drag/src/constant.js
  var constant_default2, init_constant2 = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/constant.js"() {
      constant_default2 = (x5) => () => x5;
    }
  });

  // ../react-d3-graph/node_modules/d3-drag/src/event.js
  function DragEvent(type, {
    sourceEvent,
    subject,
    target: target3,
    identifier,
    active,
    x: x5,
    y: y5,
    dx,
    dy,
    dispatch: dispatch5
  }) {
    Object.defineProperties(this, {
      type: { value: type, enumerable: !0, configurable: !0 },
      sourceEvent: { value: sourceEvent, enumerable: !0, configurable: !0 },
      subject: { value: subject, enumerable: !0, configurable: !0 },
      target: { value: target3, enumerable: !0, configurable: !0 },
      identifier: { value: identifier, enumerable: !0, configurable: !0 },
      active: { value: active, enumerable: !0, configurable: !0 },
      x: { value: x5, enumerable: !0, configurable: !0 },
      y: { value: y5, enumerable: !0, configurable: !0 },
      dx: { value: dx, enumerable: !0, configurable: !0 },
      dy: { value: dy, enumerable: !0, configurable: !0 },
      _: { value: dispatch5 }
    });
  }
  var init_event = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/event.js"() {
      DragEvent.prototype.on = function() {
        var value = this._.on.apply(this._, arguments);
        return value === this._ ? this : value;
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-drag/src/drag.js
  function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
  }
  function defaultContainer() {
    return this.parentNode;
  }
  function defaultSubject(event, d) {
    return d ?? { x: event.x, y: event.y };
  }
  function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function drag_default() {
    var filter4 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
    function drag(selection3) {
      selection3.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    function mousedowned(event, d) {
      if (!(touchending || !filter4.call(this, event, d))) {
        var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
        !gesture || (select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture), nodrag_default(event.view), nopropagation(event), mousemoving = !1, mousedownx = event.clientX, mousedowny = event.clientY, gesture("start", event));
      }
    }
    function mousemoved(event) {
      if (noevent_default(event), !mousemoving) {
        var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
        mousemoving = dx * dx + dy * dy > clickDistance2;
      }
      gestures.mouse("drag", event);
    }
    function mouseupped(event) {
      select_default2(event.view).on("mousemove.drag mouseup.drag", null), yesdrag(event.view, mousemoving), noevent_default(event), gestures.mouse("end", event);
    }
    function touchstarted(event, d) {
      if (!!filter4.call(this, event, d)) {
        var touches = event.changedTouches, c3 = container.call(this, event, d), n = touches.length, i, gesture;
        for (i = 0; i < n; ++i)
          (gesture = beforestart(this, c3, event, d, touches[i].identifier, touches[i])) && (nopropagation(event), gesture("start", event, touches[i]));
      }
    }
    function touchmoved(event) {
      var touches = event.changedTouches, n = touches.length, i, gesture;
      for (i = 0; i < n; ++i)
        (gesture = gestures[touches[i].identifier]) && (noevent_default(event), gesture("drag", event, touches[i]));
    }
    function touchended(event) {
      var touches = event.changedTouches, n = touches.length, i, gesture;
      for (touchending && clearTimeout(touchending), touchending = setTimeout(function() {
        touchending = null;
      }, 500), i = 0; i < n; ++i)
        (gesture = gestures[touches[i].identifier]) && (nopropagation(event), gesture("end", event, touches[i]));
    }
    function beforestart(that, container2, event, d, identifier, touch) {
      var dispatch5 = listeners.copy(), p = pointer_default(touch || event, container2), dx, dy, s2;
      if ((s2 = subject.call(that, new DragEvent("beforestart", {
        sourceEvent: event,
        target: drag,
        identifier,
        active,
        x: p[0],
        y: p[1],
        dx: 0,
        dy: 0,
        dispatch: dispatch5
      }), d)) != null)
        return dx = s2.x - p[0] || 0, dy = s2.y - p[1] || 0, function gesture(type, event2, touch2) {
          var p0 = p, n;
          switch (type) {
            case "start":
              gestures[identifier] = gesture, n = active++;
              break;
            case "end":
              delete gestures[identifier], --active;
            case "drag":
              p = pointer_default(touch2 || event2, container2), n = active;
              break;
          }
          dispatch5.call(type, that, new DragEvent(type, {
            sourceEvent: event2,
            subject: s2,
            target: drag,
            identifier,
            active: n,
            x: p[0] + dx,
            y: p[1] + dy,
            dx: p[0] - p0[0],
            dy: p[1] - p0[1],
            dispatch: dispatch5
          }), d);
        };
    }
    return drag.filter = function(_) {
      return arguments.length ? (filter4 = typeof _ == "function" ? _ : constant_default2(!!_), drag) : filter4;
    }, drag.container = function(_) {
      return arguments.length ? (container = typeof _ == "function" ? _ : constant_default2(_), drag) : container;
    }, drag.subject = function(_) {
      return arguments.length ? (subject = typeof _ == "function" ? _ : constant_default2(_), drag) : subject;
    }, drag.touchable = function(_) {
      return arguments.length ? (touchable = typeof _ == "function" ? _ : constant_default2(!!_), drag) : touchable;
    }, drag.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? drag : value;
    }, drag.clickDistance = function(_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
    }, drag;
  }
  var init_drag = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/drag.js"() {
      init_src();
      init_src2();
      init_nodrag();
      init_noevent();
      init_constant2();
      init_event();
    }
  });

  // ../react-d3-graph/node_modules/d3-drag/src/index.js
  var src_exports2 = {};
  __export(src_exports2, {
    drag: () => drag_default,
    dragDisable: () => nodrag_default,
    dragEnable: () => yesdrag
  });
  var init_src3 = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/index.js"() {
      init_drag();
      init_nodrag();
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/center.js
  function center_default(x5, y5) {
    var nodes3, strength = 1;
    x5 == null && (x5 = 0), y5 == null && (y5 = 0);
    function force() {
      var i, n = nodes3.length, node, sx = 0, sy = 0;
      for (i = 0; i < n; ++i)
        node = nodes3[i], sx += node.x, sy += node.y;
      for (sx = (sx / n - x5) * strength, sy = (sy / n - y5) * strength, i = 0; i < n; ++i)
        node = nodes3[i], node.x -= sx, node.y -= sy;
    }
    return force.initialize = function(_) {
      nodes3 = _;
    }, force.x = function(_) {
      return arguments.length ? (x5 = +_, force) : x5;
    }, force.y = function(_) {
      return arguments.length ? (y5 = +_, force) : y5;
    }, force.strength = function(_) {
      return arguments.length ? (strength = +_, force) : strength;
    }, force;
  }
  var init_center = __esm({
    "../react-d3-graph/node_modules/d3-force/src/center.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/add.js
  function add_default(d) {
    let x5 = +this._x.call(null, d), y5 = +this._y.call(null, d);
    return add4(this.cover(x5, y5), x5, y5, d);
  }
  function add4(tree, x5, y5, d) {
    if (isNaN(x5) || isNaN(y5))
      return tree;
    var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
    if (!node)
      return tree._root = leaf, tree;
    for (; node.length; )
      if ((right = x5 >= (xm = (x0 + x1) / 2)) ? x0 = xm : x1 = xm, (bottom = y5 >= (ym = (y0 + y1) / 2)) ? y0 = ym : y1 = ym, parent = node, !(node = node[i = bottom << 1 | right]))
        return parent[i] = leaf, tree;
    if (xp = +tree._x.call(null, node.data), yp = +tree._y.call(null, node.data), x5 === xp && y5 === yp)
      return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
    do
      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4), (right = x5 >= (xm = (x0 + x1) / 2)) ? x0 = xm : x1 = xm, (bottom = y5 >= (ym = (y0 + y1) / 2)) ? y0 = ym : y1 = ym;
    while ((i = bottom << 1 | right) == (j = (yp >= ym) << 1 | xp >= xm));
    return parent[j] = node, parent[i] = leaf, tree;
  }
  function addAll(data4) {
    var d, i, n = data4.length, x5, y5, xz = new Array(n), yz = new Array(n), x0 = 1 / 0, y0 = 1 / 0, x1 = -1 / 0, y1 = -1 / 0;
    for (i = 0; i < n; ++i)
      isNaN(x5 = +this._x.call(null, d = data4[i])) || isNaN(y5 = +this._y.call(null, d)) || (xz[i] = x5, yz[i] = y5, x5 < x0 && (x0 = x5), x5 > x1 && (x1 = x5), y5 < y0 && (y0 = y5), y5 > y1 && (y1 = y5));
    if (x0 > x1 || y0 > y1)
      return this;
    for (this.cover(x0, y0).cover(x1, y1), i = 0; i < n; ++i)
      add4(this, xz[i], yz[i], data4[i]);
    return this;
  }
  var init_add = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/add.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/cover.js
  function cover_default(x5, y5) {
    if (isNaN(x5 = +x5) || isNaN(y5 = +y5))
      return this;
    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
    if (isNaN(x0))
      x1 = (x0 = Math.floor(x5)) + 1, y1 = (y0 = Math.floor(y5)) + 1;
    else {
      for (var z = x1 - x0 || 1, node = this._root, parent, i; x0 > x5 || x5 >= x1 || y0 > y5 || y5 >= y1; )
        switch (i = (y5 < y0) << 1 | x5 < x0, parent = new Array(4), parent[i] = node, node = parent, z *= 2, i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;
          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;
          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;
          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      this._root && this._root.length && (this._root = node);
    }
    return this._x0 = x0, this._y0 = y0, this._x1 = x1, this._y1 = y1, this;
  }
  var init_cover = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/cover.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/data.js
  function data_default2() {
    var data4 = [];
    return this.visit(function(node) {
      if (!node.length)
        do
          data4.push(node.data);
        while (node = node.next);
    }), data4;
  }
  var init_data2 = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/data.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/extent.js
  function extent_default(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
  }
  var init_extent = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/extent.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/quad.js
  function quad_default(node, x0, y0, x1, y1) {
    this.node = node, this.x0 = x0, this.y0 = y0, this.x1 = x1, this.y1 = y1;
  }
  var init_quad = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/quad.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/find.js
  function find_default(x5, y5, radius) {
    var data4, x0 = this._x0, y0 = this._y0, x1, y1, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
    for (node && quads.push(new quad_default(node, x0, y0, x32, y32)), radius == null ? radius = 1 / 0 : (x0 = x5 - radius, y0 = y5 - radius, x32 = x5 + radius, y32 = y5 + radius, radius *= radius); q = quads.pop(); )
      if (!(!(node = q.node) || (x1 = q.x0) > x32 || (y1 = q.y0) > y32 || (x22 = q.x1) < x0 || (y22 = q.y1) < y0))
        if (node.length) {
          var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2;
          quads.push(new quad_default(node[3], xm, ym, x22, y22), new quad_default(node[2], x1, ym, xm, y22), new quad_default(node[1], xm, y1, x22, ym), new quad_default(node[0], x1, y1, xm, ym)), (i = (y5 >= ym) << 1 | x5 >= xm) && (q = quads[quads.length - 1], quads[quads.length - 1] = quads[quads.length - 1 - i], quads[quads.length - 1 - i] = q);
        } else {
          var dx = x5 - +this._x.call(null, node.data), dy = y5 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
          if (d2 < radius) {
            var d = Math.sqrt(radius = d2);
            x0 = x5 - d, y0 = y5 - d, x32 = x5 + d, y32 = y5 + d, data4 = node.data;
          }
        }
    return data4;
  }
  var init_find = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/find.js"() {
      init_quad();
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/remove.js
  function remove_default2(d) {
    if (isNaN(x5 = +this._x.call(null, d)) || isNaN(y5 = +this._y.call(null, d)))
      return this;
    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x5, y5, xm, ym, right, bottom, i, j;
    if (!node)
      return this;
    if (node.length)
      for (; ; ) {
        if ((right = x5 >= (xm = (x0 + x1) / 2)) ? x0 = xm : x1 = xm, (bottom = y5 >= (ym = (y0 + y1) / 2)) ? y0 = ym : y1 = ym, parent = node, !(node = node[i = bottom << 1 | right]))
          return this;
        if (!node.length)
          break;
        (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) && (retainer = parent, j = i);
      }
    for (; node.data !== d; )
      if (previous = node, !(node = node.next))
        return this;
    return (next = node.next) && delete node.next, previous ? (next ? previous.next = next : delete previous.next, this) : parent ? (next ? parent[i] = next : delete parent[i], (node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length && (retainer ? retainer[j] = node : this._root = node), this) : (this._root = next, this);
  }
  function removeAll(data4) {
    for (var i = 0, n = data4.length; i < n; ++i)
      this.remove(data4[i]);
    return this;
  }
  var init_remove2 = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/remove.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/root.js
  function root_default() {
    return this._root;
  }
  var init_root = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/root.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/size.js
  function size_default2() {
    var size7 = 0;
    return this.visit(function(node) {
      if (!node.length)
        do
          ++size7;
        while (node = node.next);
    }), size7;
  }
  var init_size2 = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/size.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/visit.js
  function visit_default(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    for (node && quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1)); q = quads.pop(); )
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        (child = node[3]) && quads.push(new quad_default(child, xm, ym, x1, y1)), (child = node[2]) && quads.push(new quad_default(child, x0, ym, xm, y1)), (child = node[1]) && quads.push(new quad_default(child, xm, y0, x1, ym)), (child = node[0]) && quads.push(new quad_default(child, x0, y0, xm, ym));
      }
    return this;
  }
  var init_visit = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/visit.js"() {
      init_quad();
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/visitAfter.js
  function visitAfter_default(callback) {
    var quads = [], next = [], q;
    for (this._root && quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1)); q = quads.pop(); ) {
      var node = q.node;
      if (node.length) {
        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        (child = node[0]) && quads.push(new quad_default(child, x0, y0, xm, ym)), (child = node[1]) && quads.push(new quad_default(child, xm, y0, x1, ym)), (child = node[2]) && quads.push(new quad_default(child, x0, ym, xm, y1)), (child = node[3]) && quads.push(new quad_default(child, xm, ym, x1, y1));
      }
      next.push(q);
    }
    for (; q = next.pop(); )
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    return this;
  }
  var init_visitAfter = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/visitAfter.js"() {
      init_quad();
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/x.js
  function defaultX(d) {
    return d[0];
  }
  function x_default(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }
  var init_x = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/x.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/y.js
  function defaultY(d) {
    return d[1];
  }
  function y_default(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }
  var init_y = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/y.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/quadtree.js
  function quadtree(nodes3, x5, y5) {
    var tree = new Quadtree(x5 ?? defaultX, y5 ?? defaultY, NaN, NaN, NaN, NaN);
    return nodes3 == null ? tree : tree.addAll(nodes3);
  }
  function Quadtree(x5, y5, x0, y0, x1, y1) {
    this._x = x5, this._y = y5, this._x0 = x0, this._y0 = y0, this._x1 = x1, this._y1 = y1, this._root = void 0;
  }
  function leaf_copy(leaf) {
    for (var copy = { data: leaf.data }, next = copy; leaf = leaf.next; )
      next = next.next = { data: leaf.data };
    return copy;
  }
  var treeProto, init_quadtree = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/quadtree.js"() {
      init_add();
      init_cover();
      init_data2();
      init_extent();
      init_find();
      init_remove2();
      init_root();
      init_size2();
      init_visit();
      init_visitAfter();
      init_x();
      init_y();
      treeProto = quadtree.prototype = Quadtree.prototype;
      treeProto.copy = function() {
        var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes3, child;
        if (!node)
          return copy;
        if (!node.length)
          return copy._root = leaf_copy(node), copy;
        for (nodes3 = [{ source: node, target: copy._root = new Array(4) }]; node = nodes3.pop(); )
          for (var i = 0; i < 4; ++i)
            (child = node.source[i]) && (child.length ? nodes3.push({ source: child, target: node.target[i] = new Array(4) }) : node.target[i] = leaf_copy(child));
        return copy;
      };
      treeProto.add = add_default;
      treeProto.addAll = addAll;
      treeProto.cover = cover_default;
      treeProto.data = data_default2;
      treeProto.extent = extent_default;
      treeProto.find = find_default;
      treeProto.remove = remove_default2;
      treeProto.removeAll = removeAll;
      treeProto.root = root_default;
      treeProto.size = size_default2;
      treeProto.visit = visit_default;
      treeProto.visitAfter = visitAfter_default;
      treeProto.x = x_default;
      treeProto.y = y_default;
    }
  });

  // ../react-d3-graph/node_modules/d3-quadtree/src/index.js
  var init_src4 = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/index.js"() {
      init_quadtree();
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/constant.js
  function constant_default3(x5) {
    return function() {
      return x5;
    };
  }
  var init_constant3 = __esm({
    "../react-d3-graph/node_modules/d3-force/src/constant.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/jiggle.js
  function jiggle_default(random) {
    return (random() - 0.5) * 1e-6;
  }
  var init_jiggle = __esm({
    "../react-d3-graph/node_modules/d3-force/src/jiggle.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/collide.js
  function x2(d) {
    return d.x + d.vx;
  }
  function y2(d) {
    return d.y + d.vy;
  }
  function collide_default(radius) {
    var nodes3, radii, random, strength = 1, iterations = 1;
    typeof radius != "function" && (radius = constant_default3(radius == null ? 1 : +radius));
    function force() {
      for (var i, n = nodes3.length, tree, node, xi, yi, ri, ri2, k2 = 0; k2 < iterations; ++k2)
        for (tree = quadtree(nodes3, x2, y2).visitAfter(prepare), i = 0; i < n; ++i)
          node = nodes3[i], ri = radii[node.index], ri2 = ri * ri, xi = node.x + node.vx, yi = node.y + node.vy, tree.visit(apply);
      function apply(quad, x0, y0, x1, y1) {
        var data4 = quad.data, rj = quad.r, r = ri + rj;
        if (data4) {
          if (data4.index > node.index) {
            var x5 = xi - data4.x - data4.vx, y5 = yi - data4.y - data4.vy, l = x5 * x5 + y5 * y5;
            l < r * r && (x5 === 0 && (x5 = jiggle_default(random), l += x5 * x5), y5 === 0 && (y5 = jiggle_default(random), l += y5 * y5), l = (r - (l = Math.sqrt(l))) / l * strength, node.vx += (x5 *= l) * (r = (rj *= rj) / (ri2 + rj)), node.vy += (y5 *= l) * r, data4.vx -= x5 * (r = 1 - r), data4.vy -= y5 * r);
          }
          return;
        }
        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
      }
    }
    function prepare(quad) {
      if (quad.data)
        return quad.r = radii[quad.data.index];
      for (var i = quad.r = 0; i < 4; ++i)
        quad[i] && quad[i].r > quad.r && (quad.r = quad[i].r);
    }
    function initialize() {
      if (!!nodes3) {
        var i, n = nodes3.length, node;
        for (radii = new Array(n), i = 0; i < n; ++i)
          node = nodes3[i], radii[node.index] = +radius(node, i, nodes3);
      }
    }
    return force.initialize = function(_nodes, _random) {
      nodes3 = _nodes, random = _random, initialize();
    }, force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    }, force.strength = function(_) {
      return arguments.length ? (strength = +_, force) : strength;
    }, force.radius = function(_) {
      return arguments.length ? (radius = typeof _ == "function" ? _ : constant_default3(+_), initialize(), force) : radius;
    }, force;
  }
  var init_collide = __esm({
    "../react-d3-graph/node_modules/d3-force/src/collide.js"() {
      init_src4();
      init_constant3();
      init_jiggle();
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/link.js
  function index(d) {
    return d.index;
  }
  function find3(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node)
      throw new Error("node not found: " + nodeId);
    return node;
  }
  function link_default(links2) {
    var id7 = index, strength = defaultStrength, strengths, distance = constant_default3(30), distances, nodes3, count, bias, random, iterations = 1;
    links2 == null && (links2 = []);
    function defaultStrength(link2) {
      return 1 / Math.min(count[link2.source.index], count[link2.target.index]);
    }
    function force(alpha) {
      for (var k2 = 0, n = links2.length; k2 < iterations; ++k2)
        for (var i = 0, link2, source3, target3, x5, y5, l, b; i < n; ++i)
          link2 = links2[i], source3 = link2.source, target3 = link2.target, x5 = target3.x + target3.vx - source3.x - source3.vx || jiggle_default(random), y5 = target3.y + target3.vy - source3.y - source3.vy || jiggle_default(random), l = Math.sqrt(x5 * x5 + y5 * y5), l = (l - distances[i]) / l * alpha * strengths[i], x5 *= l, y5 *= l, target3.vx -= x5 * (b = bias[i]), target3.vy -= y5 * b, source3.vx += x5 * (b = 1 - b), source3.vy += y5 * b;
    }
    function initialize() {
      if (!!nodes3) {
        var i, n = nodes3.length, m2 = links2.length, nodeById = new Map(nodes3.map((d, i2) => [id7(d, i2, nodes3), d])), link2;
        for (i = 0, count = new Array(n); i < m2; ++i)
          link2 = links2[i], link2.index = i, typeof link2.source != "object" && (link2.source = find3(nodeById, link2.source)), typeof link2.target != "object" && (link2.target = find3(nodeById, link2.target)), count[link2.source.index] = (count[link2.source.index] || 0) + 1, count[link2.target.index] = (count[link2.target.index] || 0) + 1;
        for (i = 0, bias = new Array(m2); i < m2; ++i)
          link2 = links2[i], bias[i] = count[link2.source.index] / (count[link2.source.index] + count[link2.target.index]);
        strengths = new Array(m2), initializeStrength(), distances = new Array(m2), initializeDistance();
      }
    }
    function initializeStrength() {
      if (!!nodes3)
        for (var i = 0, n = links2.length; i < n; ++i)
          strengths[i] = +strength(links2[i], i, links2);
    }
    function initializeDistance() {
      if (!!nodes3)
        for (var i = 0, n = links2.length; i < n; ++i)
          distances[i] = +distance(links2[i], i, links2);
    }
    return force.initialize = function(_nodes, _random) {
      nodes3 = _nodes, random = _random, initialize();
    }, force.links = function(_) {
      return arguments.length ? (links2 = _, initialize(), force) : links2;
    }, force.id = function(_) {
      return arguments.length ? (id7 = _, force) : id7;
    }, force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    }, force.strength = function(_) {
      return arguments.length ? (strength = typeof _ == "function" ? _ : constant_default3(+_), initializeStrength(), force) : strength;
    }, force.distance = function(_) {
      return arguments.length ? (distance = typeof _ == "function" ? _ : constant_default3(+_), initializeDistance(), force) : distance;
    }, force;
  }
  var init_link = __esm({
    "../react-d3-graph/node_modules/d3-force/src/link.js"() {
      init_constant3();
      init_jiggle();
    }
  });

  // ../react-d3-graph/node_modules/d3-timer/src/timer.js
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  function timer(callback, delay, time) {
    var t = new Timer();
    return t.restart(callback, delay, time), t;
  }
  function timerFlush() {
    now(), ++frame;
    for (var t = taskHead, e2; t; )
      (e2 = clockNow - t._time) >= 0 && t._call.call(void 0, e2), t = t._next;
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew, frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0, nap(), clockNow = 0;
    }
  }
  function poke() {
    var now2 = clock.now(), delay = now2 - clockLast;
    delay > pokeDelay && (clockSkew -= delay, clockLast = now2);
  }
  function nap() {
    for (var t0, t1 = taskHead, t2, time = 1 / 0; t1; )
      t1._call ? (time > t1._time && (time = t1._time), t0 = t1, t1 = t1._next) : (t2 = t1._next, t1._next = null, t1 = t0 ? t0._next = t2 : taskHead = t2);
    taskTail = t0, sleep(time);
  }
  function sleep(time) {
    if (!frame) {
      timeout && (timeout = clearTimeout(timeout));
      var delay = time - clockNow;
      delay > 24 ? (time < 1 / 0 && (timeout = setTimeout(wake, time - clock.now() - clockSkew)), interval && (interval = clearInterval(interval))) : (interval || (clockLast = clock.now(), interval = setInterval(poke, pokeDelay)), frame = 1, setFrame(wake));
    }
  }
  var frame, timeout, interval, pokeDelay, taskHead, taskTail, clockLast, clockNow, clockSkew, clock, setFrame, init_timer = __esm({
    "../react-d3-graph/node_modules/d3-timer/src/timer.js"() {
      frame = 0, timeout = 0, interval = 0, pokeDelay = 1e3, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance == "object" && performance.now ? performance : Date, setFrame = typeof window == "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
        setTimeout(f, 17);
      };
      Timer.prototype = timer.prototype = {
        constructor: Timer,
        restart: function(callback, delay, time) {
          if (typeof callback != "function")
            throw new TypeError("callback is not a function");
          time = (time == null ? now() : +time) + (delay == null ? 0 : +delay), !this._next && taskTail !== this && (taskTail ? taskTail._next = this : taskHead = this, taskTail = this), this._call = callback, this._time = time, sleep();
        },
        stop: function() {
          this._call && (this._call = null, this._time = 1 / 0, sleep());
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-timer/src/timeout.js
  function timeout_default(callback, delay, time) {
    var t = new Timer();
    return delay = delay == null ? 0 : +delay, t.restart((elapsed) => {
      t.stop(), callback(elapsed + delay);
    }, delay, time), t;
  }
  var init_timeout = __esm({
    "../react-d3-graph/node_modules/d3-timer/src/timeout.js"() {
      init_timer();
    }
  });

  // ../react-d3-graph/node_modules/d3-timer/src/index.js
  var init_src5 = __esm({
    "../react-d3-graph/node_modules/d3-timer/src/index.js"() {
      init_timer();
      init_timeout();
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/lcg.js
  function lcg_default() {
    let s2 = 1;
    return () => (s2 = (a * s2 + c) % m) / m;
  }
  var a, c, m, init_lcg = __esm({
    "../react-d3-graph/node_modules/d3-force/src/lcg.js"() {
      a = 1664525, c = 1013904223, m = 4294967296;
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/simulation.js
  function x3(d) {
    return d.x;
  }
  function y3(d) {
    return d.y;
  }
  function simulation_default(nodes3) {
    var simulation, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = timer(step), event = dispatch_default("tick", "end"), random = lcg_default();
    nodes3 == null && (nodes3 = []);
    function step() {
      tick(), event.call("tick", simulation), alpha < alphaMin && (stepper.stop(), event.call("end", simulation));
    }
    function tick(iterations) {
      var i, n = nodes3.length, node;
      iterations === void 0 && (iterations = 1);
      for (var k2 = 0; k2 < iterations; ++k2)
        for (alpha += (alphaTarget - alpha) * alphaDecay, forces.forEach(function(force) {
          force(alpha);
        }), i = 0; i < n; ++i)
          node = nodes3[i], node.fx == null ? node.x += node.vx *= velocityDecay : (node.x = node.fx, node.vx = 0), node.fy == null ? node.y += node.vy *= velocityDecay : (node.y = node.fy, node.vy = 0);
      return simulation;
    }
    function initializeNodes() {
      for (var i = 0, n = nodes3.length, node; i < n; ++i) {
        if (node = nodes3[i], node.index = i, node.fx != null && (node.x = node.fx), node.fy != null && (node.y = node.fy), isNaN(node.x) || isNaN(node.y)) {
          var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
          node.x = radius * Math.cos(angle), node.y = radius * Math.sin(angle);
        }
        (isNaN(node.vx) || isNaN(node.vy)) && (node.vx = node.vy = 0);
      }
    }
    function initializeForce(force) {
      return force.initialize && force.initialize(nodes3, random), force;
    }
    return initializeNodes(), simulation = {
      tick,
      restart: function() {
        return stepper.restart(step), simulation;
      },
      stop: function() {
        return stepper.stop(), simulation;
      },
      nodes: function(_) {
        return arguments.length ? (nodes3 = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes3;
      },
      alpha: function(_) {
        return arguments.length ? (alpha = +_, simulation) : alpha;
      },
      alphaMin: function(_) {
        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
      },
      alphaDecay: function(_) {
        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
      },
      alphaTarget: function(_) {
        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
      },
      velocityDecay: function(_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
      },
      randomSource: function(_) {
        return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
      },
      force: function(name2, _) {
        return arguments.length > 1 ? (_ == null ? forces.delete(name2) : forces.set(name2, initializeForce(_)), simulation) : forces.get(name2);
      },
      find: function(x5, y5, radius) {
        var i = 0, n = nodes3.length, dx, dy, d2, node, closest;
        for (radius == null ? radius = 1 / 0 : radius *= radius, i = 0; i < n; ++i)
          node = nodes3[i], dx = x5 - node.x, dy = y5 - node.y, d2 = dx * dx + dy * dy, d2 < radius && (closest = node, radius = d2);
        return closest;
      },
      on: function(name2, _) {
        return arguments.length > 1 ? (event.on(name2, _), simulation) : event.on(name2);
      }
    };
  }
  var initialRadius, initialAngle, init_simulation = __esm({
    "../react-d3-graph/node_modules/d3-force/src/simulation.js"() {
      init_src();
      init_src5();
      init_lcg();
      initialRadius = 10, initialAngle = Math.PI * (3 - Math.sqrt(5));
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/manyBody.js
  function manyBody_default() {
    var nodes3, node, random, alpha, strength = constant_default3(-30), strengths, distanceMin2 = 1, distanceMax2 = 1 / 0, theta2 = 0.81;
    function force(_) {
      var i, n = nodes3.length, tree = quadtree(nodes3, x3, y3).visitAfter(accumulate);
      for (alpha = _, i = 0; i < n; ++i)
        node = nodes3[i], tree.visit(apply);
    }
    function initialize() {
      if (!!nodes3) {
        var i, n = nodes3.length, node2;
        for (strengths = new Array(n), i = 0; i < n; ++i)
          node2 = nodes3[i], strengths[node2.index] = +strength(node2, i, nodes3);
      }
    }
    function accumulate(quad) {
      var strength2 = 0, q, c3, weight = 0, x5, y5, i;
      if (quad.length) {
        for (x5 = y5 = i = 0; i < 4; ++i)
          (q = quad[i]) && (c3 = Math.abs(q.value)) && (strength2 += q.value, weight += c3, x5 += c3 * q.x, y5 += c3 * q.y);
        quad.x = x5 / weight, quad.y = y5 / weight;
      } else {
        q = quad, q.x = q.data.x, q.y = q.data.y;
        do
          strength2 += strengths[q.data.index];
        while (q = q.next);
      }
      quad.value = strength2;
    }
    function apply(quad, x1, _, x22) {
      if (!quad.value)
        return !0;
      var x5 = quad.x - node.x, y5 = quad.y - node.y, w = x22 - x1, l = x5 * x5 + y5 * y5;
      if (w * w / theta2 < l)
        return l < distanceMax2 && (x5 === 0 && (x5 = jiggle_default(random), l += x5 * x5), y5 === 0 && (y5 = jiggle_default(random), l += y5 * y5), l < distanceMin2 && (l = Math.sqrt(distanceMin2 * l)), node.vx += x5 * quad.value * alpha / l, node.vy += y5 * quad.value * alpha / l), !0;
      if (quad.length || l >= distanceMax2)
        return;
      (quad.data !== node || quad.next) && (x5 === 0 && (x5 = jiggle_default(random), l += x5 * x5), y5 === 0 && (y5 = jiggle_default(random), l += y5 * y5), l < distanceMin2 && (l = Math.sqrt(distanceMin2 * l)));
      do
        quad.data !== node && (w = strengths[quad.data.index] * alpha / l, node.vx += x5 * w, node.vy += y5 * w);
      while (quad = quad.next);
    }
    return force.initialize = function(_nodes, _random) {
      nodes3 = _nodes, random = _random, initialize();
    }, force.strength = function(_) {
      return arguments.length ? (strength = typeof _ == "function" ? _ : constant_default3(+_), initialize(), force) : strength;
    }, force.distanceMin = function(_) {
      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    }, force.distanceMax = function(_) {
      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    }, force.theta = function(_) {
      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    }, force;
  }
  var init_manyBody = __esm({
    "../react-d3-graph/node_modules/d3-force/src/manyBody.js"() {
      init_src4();
      init_constant3();
      init_jiggle();
      init_simulation();
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/radial.js
  function radial_default(radius, x5, y5) {
    var nodes3, strength = constant_default3(0.1), strengths, radiuses;
    typeof radius != "function" && (radius = constant_default3(+radius)), x5 == null && (x5 = 0), y5 == null && (y5 = 0);
    function force(alpha) {
      for (var i = 0, n = nodes3.length; i < n; ++i) {
        var node = nodes3[i], dx = node.x - x5 || 1e-6, dy = node.y - y5 || 1e-6, r = Math.sqrt(dx * dx + dy * dy), k2 = (radiuses[i] - r) * strengths[i] * alpha / r;
        node.vx += dx * k2, node.vy += dy * k2;
      }
    }
    function initialize() {
      if (!!nodes3) {
        var i, n = nodes3.length;
        for (strengths = new Array(n), radiuses = new Array(n), i = 0; i < n; ++i)
          radiuses[i] = +radius(nodes3[i], i, nodes3), strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes3[i], i, nodes3);
      }
    }
    return force.initialize = function(_) {
      nodes3 = _, initialize();
    }, force.strength = function(_) {
      return arguments.length ? (strength = typeof _ == "function" ? _ : constant_default3(+_), initialize(), force) : strength;
    }, force.radius = function(_) {
      return arguments.length ? (radius = typeof _ == "function" ? _ : constant_default3(+_), initialize(), force) : radius;
    }, force.x = function(_) {
      return arguments.length ? (x5 = +_, force) : x5;
    }, force.y = function(_) {
      return arguments.length ? (y5 = +_, force) : y5;
    }, force;
  }
  var init_radial = __esm({
    "../react-d3-graph/node_modules/d3-force/src/radial.js"() {
      init_constant3();
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/x.js
  function x_default2(x5) {
    var strength = constant_default3(0.1), nodes3, strengths, xz;
    typeof x5 != "function" && (x5 = constant_default3(x5 == null ? 0 : +x5));
    function force(alpha) {
      for (var i = 0, n = nodes3.length, node; i < n; ++i)
        node = nodes3[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
    function initialize() {
      if (!!nodes3) {
        var i, n = nodes3.length;
        for (strengths = new Array(n), xz = new Array(n), i = 0; i < n; ++i)
          strengths[i] = isNaN(xz[i] = +x5(nodes3[i], i, nodes3)) ? 0 : +strength(nodes3[i], i, nodes3);
      }
    }
    return force.initialize = function(_) {
      nodes3 = _, initialize();
    }, force.strength = function(_) {
      return arguments.length ? (strength = typeof _ == "function" ? _ : constant_default3(+_), initialize(), force) : strength;
    }, force.x = function(_) {
      return arguments.length ? (x5 = typeof _ == "function" ? _ : constant_default3(+_), initialize(), force) : x5;
    }, force;
  }
  var init_x2 = __esm({
    "../react-d3-graph/node_modules/d3-force/src/x.js"() {
      init_constant3();
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/y.js
  function y_default2(y5) {
    var strength = constant_default3(0.1), nodes3, strengths, yz;
    typeof y5 != "function" && (y5 = constant_default3(y5 == null ? 0 : +y5));
    function force(alpha) {
      for (var i = 0, n = nodes3.length, node; i < n; ++i)
        node = nodes3[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
    function initialize() {
      if (!!nodes3) {
        var i, n = nodes3.length;
        for (strengths = new Array(n), yz = new Array(n), i = 0; i < n; ++i)
          strengths[i] = isNaN(yz[i] = +y5(nodes3[i], i, nodes3)) ? 0 : +strength(nodes3[i], i, nodes3);
      }
    }
    return force.initialize = function(_) {
      nodes3 = _, initialize();
    }, force.strength = function(_) {
      return arguments.length ? (strength = typeof _ == "function" ? _ : constant_default3(+_), initialize(), force) : strength;
    }, force.y = function(_) {
      return arguments.length ? (y5 = typeof _ == "function" ? _ : constant_default3(+_), initialize(), force) : y5;
    }, force;
  }
  var init_y2 = __esm({
    "../react-d3-graph/node_modules/d3-force/src/y.js"() {
      init_constant3();
    }
  });

  // ../react-d3-graph/node_modules/d3-force/src/index.js
  var src_exports3 = {};
  __export(src_exports3, {
    forceCenter: () => center_default,
    forceCollide: () => collide_default,
    forceLink: () => link_default,
    forceManyBody: () => manyBody_default,
    forceRadial: () => radial_default,
    forceSimulation: () => simulation_default,
    forceX: () => x_default2,
    forceY: () => y_default2
  });
  var init_src6 = __esm({
    "../react-d3-graph/node_modules/d3-force/src/index.js"() {
      init_center();
      init_collide();
      init_link();
      init_manyBody();
      init_radial();
      init_simulation();
      init_x2();
      init_y2();
    }
  });

  // ../react-d3-graph/node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype, prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }
  var init_define = __esm({
    "../react-d3-graph/node_modules/d3-color/src/define.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-color/src/color.js
  function Color() {
  }
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format) {
    var m2, l;
    return format = (format + "").trim().toLowerCase(), (m2 = reHex.exec(format)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba(r, g, b, a3) {
    return a3 <= 0 && (r = g = b = NaN), new Rgb(r, g, b, a3);
  }
  function rgbConvert(o) {
    return o instanceof Color || (o = color(o)), o ? (o = o.rgb(), new Rgb(o.r, o.g, o.b, o.opacity)) : new Rgb();
  }
  function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity ?? 1);
  }
  function Rgb(r, g, b, opacity) {
    this.r = +r, this.g = +g, this.b = +b, this.opacity = +opacity;
  }
  function rgb_formatHex() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  }
  function rgb_formatRgb() {
    var a3 = this.opacity;
    return a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3)), (a3 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a3 === 1 ? ")" : ", " + a3 + ")");
  }
  function hex(value) {
    return value = Math.max(0, Math.min(255, Math.round(value) || 0)), (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h, s2, l, a3) {
    return a3 <= 0 ? h = s2 = l = NaN : l <= 0 || l >= 1 ? h = s2 = NaN : s2 <= 0 && (h = NaN), new Hsl(h, s2, l, a3);
  }
  function hslConvert(o) {
    if (o instanceof Hsl)
      return new Hsl(o.h, o.s, o.l, o.opacity);
    if (o instanceof Color || (o = color(o)), !o)
      return new Hsl();
    if (o instanceof Hsl)
      return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min3 = Math.min(r, g, b), max3 = Math.max(r, g, b), h = NaN, s2 = max3 - min3, l = (max3 + min3) / 2;
    return s2 ? (r === max3 ? h = (g - b) / s2 + (g < b) * 6 : g === max3 ? h = (b - r) / s2 + 2 : h = (r - g) / s2 + 4, s2 /= l < 0.5 ? max3 + min3 : 2 - max3 - min3, h *= 60) : s2 = l > 0 && l < 1 ? 0 : h, new Hsl(h, s2, l, o.opacity);
  }
  function hsl(h, s2, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity ?? 1);
  }
  function Hsl(h, s2, l, opacity) {
    this.h = +h, this.s = +s2, this.l = +l, this.opacity = +opacity;
  }
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }
  var darker, brighter, reI, reN, reP, reHex, reRgbInteger, reRgbPercent, reRgbaInteger, reRgbaPercent, reHslPercent, reHslaPercent, named, init_color = __esm({
    "../react-d3-graph/node_modules/d3-color/src/color.js"() {
      init_define();
      darker = 0.7, brighter = 1 / darker, reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"), reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"), reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"), reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"), reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"), reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$"), named = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
      };
      define_default(Color, color, {
        copy: function(channels) {
          return Object.assign(new this.constructor(), this, channels);
        },
        displayable: function() {
          return this.rgb().displayable();
        },
        hex: color_formatHex,
        formatHex: color_formatHex,
        formatHsl: color_formatHsl,
        formatRgb: color_formatRgb,
        toString: color_formatRgb
      });
      define_default(Rgb, rgb, extend(Color, {
        brighter: function(k2) {
          return k2 = k2 == null ? brighter : Math.pow(brighter, k2), new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
        },
        darker: function(k2) {
          return k2 = k2 == null ? darker : Math.pow(darker, k2), new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
        },
        rgb: function() {
          return this;
        },
        displayable: function() {
          return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
        },
        hex: rgb_formatHex,
        formatHex: rgb_formatHex,
        formatRgb: rgb_formatRgb,
        toString: rgb_formatRgb
      }));
      define_default(Hsl, hsl, extend(Color, {
        brighter: function(k2) {
          return k2 = k2 == null ? brighter : Math.pow(brighter, k2), new Hsl(this.h, this.s, this.l * k2, this.opacity);
        },
        darker: function(k2) {
          return k2 = k2 == null ? darker : Math.pow(darker, k2), new Hsl(this.h, this.s, this.l * k2, this.opacity);
        },
        rgb: function() {
          var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
          return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
        },
        displayable: function() {
          return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
        },
        formatHsl: function() {
          var a3 = this.opacity;
          return a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3)), (a3 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a3 === 1 ? ")" : ", " + a3 + ")");
        }
      }));
    }
  });

  // ../react-d3-graph/node_modules/d3-color/src/index.js
  var init_src7 = __esm({
    "../react-d3-graph/node_modules/d3-color/src/index.js"() {
      init_color();
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/basis.js
  function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis_default(values) {
    var n = values.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  var init_basis = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/basis.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default(values) {
    var n = values.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  var init_basisClosed = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/basisClosed.js"() {
      init_basis();
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/constant.js
  var constant_default4, init_constant4 = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/constant.js"() {
      constant_default4 = (x5) => () => x5;
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/color.js
  function linear(a3, d) {
    return function(t) {
      return a3 + t * d;
    };
  }
  function exponential(a3, b, y5) {
    return a3 = Math.pow(a3, y5), b = Math.pow(b, y5) - a3, y5 = 1 / y5, function(t) {
      return Math.pow(a3 + t * b, y5);
    };
  }
  function gamma(y5) {
    return (y5 = +y5) == 1 ? nogamma : function(a3, b) {
      return b - a3 ? exponential(a3, b, y5) : constant_default4(isNaN(a3) ? b : a3);
    };
  }
  function nogamma(a3, b) {
    var d = b - a3;
    return d ? linear(a3, d) : constant_default4(isNaN(a3) ? b : a3);
  }
  var init_color2 = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/color.js"() {
      init_constant4();
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/rgb.js
  function rgbSpline(spline) {
    return function(colors) {
      var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
      for (i = 0; i < n; ++i)
        color2 = rgb(colors[i]), r[i] = color2.r || 0, g[i] = color2.g || 0, b[i] = color2.b || 0;
      return r = spline(r), g = spline(g), b = spline(b), color2.opacity = 1, function(t) {
        return color2.r = r(t), color2.g = g(t), color2.b = b(t), color2 + "";
      };
    };
  }
  var rgb_default, rgbBasis, rgbBasisClosed, init_rgb = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/rgb.js"() {
      init_src7();
      init_basis();
      init_basisClosed();
      init_color2();
      rgb_default = function rgbGamma(y5) {
        var color2 = gamma(y5);
        function rgb2(start2, end) {
          var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
          return function(t) {
            return start2.r = r(t), start2.g = g(t), start2.b = b(t), start2.opacity = opacity(t), start2 + "";
          };
        }
        return rgb2.gamma = rgbGamma, rgb2;
      }(1);
      rgbBasis = rgbSpline(basis_default), rgbBasisClosed = rgbSpline(basisClosed_default);
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/number.js
  function number_default(a3, b) {
    return a3 = +a3, b = +b, function(t) {
      return a3 * (1 - t) + b * t;
    };
  }
  var init_number = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/number.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/string.js
  function zero(b) {
    return function() {
      return b;
    };
  }
  function one(b) {
    return function(t) {
      return b(t) + "";
    };
  }
  function string_default(a3, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
    for (a3 = a3 + "", b = b + ""; (am = reA.exec(a3)) && (bm = reB.exec(b)); )
      (bs = bm.index) > bi && (bs = b.slice(bi, bs), s2[i] ? s2[i] += bs : s2[++i] = bs), (am = am[0]) === (bm = bm[0]) ? s2[i] ? s2[i] += bm : s2[++i] = bm : (s2[++i] = null, q.push({ i, x: number_default(am, bm) })), bi = reB.lastIndex;
    return bi < b.length && (bs = b.slice(bi), s2[i] ? s2[i] += bs : s2[++i] = bs), s2.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
      for (var i2 = 0, o; i2 < b; ++i2)
        s2[(o = q[i2]).i] = o.x(t);
      return s2.join("");
    });
  }
  var reA, reB, init_string = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/string.js"() {
      init_number();
      reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/transform/decompose.js
  function decompose_default(a3, b, c3, d, e2, f) {
    var scaleX, scaleY, skewX;
    return (scaleX = Math.sqrt(a3 * a3 + b * b)) && (a3 /= scaleX, b /= scaleX), (skewX = a3 * c3 + b * d) && (c3 -= a3 * skewX, d -= b * skewX), (scaleY = Math.sqrt(c3 * c3 + d * d)) && (c3 /= scaleY, d /= scaleY, skewX /= scaleY), a3 * d < b * c3 && (a3 = -a3, b = -b, skewX = -skewX, scaleX = -scaleX), {
      translateX: e2,
      translateY: f,
      rotate: Math.atan2(b, a3) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX,
      scaleY
    };
  }
  var degrees, identity, init_decompose = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/transform/decompose.js"() {
      degrees = 180 / Math.PI, identity = {
        translateX: 0,
        translateY: 0,
        rotate: 0,
        skewX: 0,
        scaleX: 1,
        scaleY: 1
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/transform/parse.js
  function parseCss(value) {
    let m2 = new (typeof DOMMatrix == "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m2.isIdentity ? identity : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
  }
  function parseSvg(value) {
    return value == null ? identity : (svgNode || (svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g")), svgNode.setAttribute("transform", value), (value = svgNode.transform.baseVal.consolidate()) ? (value = value.matrix, decompose_default(value.a, value.b, value.c, value.d, value.e, value.f)) : identity);
  }
  var svgNode, init_parse = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/transform/parse.js"() {
      init_decompose();
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/transform/index.js
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s2) {
      return s2.length ? s2.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s2, q) {
      if (xa !== xb || ya !== yb) {
        var i = s2.push("translate(", null, pxComma, null, pxParen);
        q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
      } else
        (xb || yb) && s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
    function rotate(a3, b, s2, q) {
      a3 !== b ? (a3 - b > 180 ? b += 360 : b - a3 > 180 && (a3 += 360), q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default(a3, b) })) : b && s2.push(pop(s2) + "rotate(" + b + degParen);
    }
    function skewX(a3, b, s2, q) {
      a3 !== b ? q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default(a3, b) }) : b && s2.push(pop(s2) + "skewX(" + b + degParen);
    }
    function scale(xa, ya, xb, yb, s2, q) {
      if (xa !== xb || ya !== yb) {
        var i = s2.push(pop(s2) + "scale(", null, ",", null, ")");
        q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
      } else
        (xb !== 1 || yb !== 1) && s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
    return function(a3, b) {
      var s2 = [], q = [];
      return a3 = parse(a3), b = parse(b), translate(a3.translateX, a3.translateY, b.translateX, b.translateY, s2, q), rotate(a3.rotate, b.rotate, s2, q), skewX(a3.skewX, b.skewX, s2, q), scale(a3.scaleX, a3.scaleY, b.scaleX, b.scaleY, s2, q), a3 = b = null, function(t) {
        for (var i = -1, n = q.length, o; ++i < n; )
          s2[(o = q[i]).i] = o.x(t);
        return s2.join("");
      };
    };
  }
  var interpolateTransformCss, interpolateTransformSvg, init_transform = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/transform/index.js"() {
      init_number();
      init_parse();
      interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)"), interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/zoom.js
  function cosh(x5) {
    return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
  }
  function sinh(x5) {
    return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
  }
  function tanh(x5) {
    return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
  }
  var epsilon2, zoom_default, init_zoom = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/zoom.js"() {
      epsilon2 = 1e-12;
      zoom_default = function zoomRho(rho, rho2, rho4) {
        function zoom(p0, p1) {
          var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
          if (d2 < epsilon2)
            S = Math.log(w1 / w0) / rho, i = function(t) {
              return [
                ux0 + t * dx,
                uy0 + t * dy,
                w0 * Math.exp(rho * t * S)
              ];
            };
          else {
            var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho, i = function(t) {
              var s2 = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
              return [
                ux0 + u * dx,
                uy0 + u * dy,
                w0 * coshr0 / cosh(rho * s2 + r0)
              ];
            };
          }
          return i.duration = S * 1e3 * rho / Math.SQRT2, i;
        }
        return zoom.rho = function(_) {
          var _13 = Math.max(1e-3, +_), _22 = _13 * _13, _4 = _22 * _22;
          return zoomRho(_13, _22, _4);
        }, zoom;
      }(Math.SQRT2, 2, 4);
    }
  });

  // ../react-d3-graph/node_modules/d3-interpolate/src/index.js
  var init_src8 = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/index.js"() {
      init_number();
      init_string();
      init_transform();
      init_zoom();
      init_rgb();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/schedule.js
  function schedule_default(node, name2, id7, index2, group, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id7 in schedules)
      return;
    create9(node, id7, {
      name: name2,
      index: index2,
      group,
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id7) {
    var schedule = get10(node, id7);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set5(node, id7) {
    var schedule = get10(node, id7);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get10(node, id7) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id7]))
      throw new Error("transition not found");
    return schedule;
  }
  function create9(node, id7, self2) {
    var schedules = node.__transition, tween;
    schedules[id7] = self2, self2.timer = timer(schedule, 0, self2.time);
    function schedule(elapsed) {
      self2.state = SCHEDULED, self2.timer.restart(start2, self2.delay, self2.time), self2.delay <= elapsed && start2(elapsed - self2.delay);
    }
    function start2(elapsed) {
      var i, j, n, o;
      if (self2.state !== SCHEDULED)
        return stop();
      for (i in schedules)
        if (o = schedules[i], o.name === self2.name) {
          if (o.state === STARTED)
            return timeout_default(start2);
          o.state === RUNNING ? (o.state = ENDED, o.timer.stop(), o.on.call("interrupt", node, node.__data__, o.index, o.group), delete schedules[i]) : +i < id7 && (o.state = ENDED, o.timer.stop(), o.on.call("cancel", node, node.__data__, o.index, o.group), delete schedules[i]);
        }
      if (timeout_default(function() {
        self2.state === STARTED && (self2.state = RUNNING, self2.timer.restart(tick, self2.delay, self2.time), tick(elapsed));
      }), self2.state = STARTING, self2.on.call("start", node, node.__data__, self2.index, self2.group), self2.state === STARTING) {
        for (self2.state = STARTED, tween = new Array(n = self2.tween.length), i = 0, j = -1; i < n; ++i)
          (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) && (tween[++j] = o);
        tween.length = j + 1;
      }
    }
    function tick(elapsed) {
      for (var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length; ++i < n; )
        tween[i].call(node, t);
      self2.state === ENDING && (self2.on.call("end", node, node.__data__, self2.index, self2.group), stop());
    }
    function stop() {
      self2.state = ENDED, self2.timer.stop(), delete schedules[id7];
      for (var i in schedules)
        return;
      delete node.__transition;
    }
  }
  var emptyOn, emptyTween, CREATED, SCHEDULED, STARTING, STARTED, RUNNING, ENDING, ENDED, init_schedule = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/schedule.js"() {
      init_src();
      init_src5();
      emptyOn = dispatch_default("start", "end", "cancel", "interrupt"), emptyTween = [], CREATED = 0, SCHEDULED = 1, STARTING = 2, STARTED = 3, RUNNING = 4, ENDING = 5, ENDED = 6;
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/interrupt.js
  function interrupt_default(node, name2) {
    var schedules = node.__transition, schedule, active, empty8 = !0, i;
    if (!!schedules) {
      name2 = name2 == null ? null : name2 + "";
      for (i in schedules) {
        if ((schedule = schedules[i]).name !== name2) {
          empty8 = !1;
          continue;
        }
        active = schedule.state > STARTING && schedule.state < ENDING, schedule.state = ENDED, schedule.timer.stop(), schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group), delete schedules[i];
      }
      empty8 && delete node.__transition;
    }
  }
  var init_interrupt = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/interrupt.js"() {
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/selection/interrupt.js
  function interrupt_default2(name2) {
    return this.each(function() {
      interrupt_default(this, name2);
    });
  }
  var init_interrupt2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/selection/interrupt.js"() {
      init_interrupt();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/tween.js
  function tweenRemove(id7, name2) {
    var tween0, tween1;
    return function() {
      var schedule = set5(this, id7), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i = 0, n = tween1.length; i < n; ++i)
          if (tween1[i].name === name2) {
            tween1 = tween1.slice(), tween1.splice(i, 1);
            break;
          }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id7, name2, value) {
    var tween0, tween1;
    if (typeof value != "function")
      throw new Error();
    return function() {
      var schedule = set5(this, id7), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = { name: name2, value }, i = 0, n = tween1.length; i < n; ++i)
          if (tween1[i].name === name2) {
            tween1[i] = t;
            break;
          }
        i === n && tween1.push(t);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name2, value) {
    var id7 = this._id;
    if (name2 += "", arguments.length < 2) {
      for (var tween = get10(this.node(), id7).tween, i = 0, n = tween.length, t; i < n; ++i)
        if ((t = tween[i]).name === name2)
          return t.value;
      return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id7, name2, value));
  }
  function tweenValue(transition2, name2, value) {
    var id7 = transition2._id;
    return transition2.each(function() {
      var schedule = set5(this, id7);
      (schedule.value || (schedule.value = {}))[name2] = value.apply(this, arguments);
    }), function(node) {
      return get10(node, id7).value[name2];
    };
  }
  var init_tween = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/tween.js"() {
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/interpolate.js
  function interpolate_default(a3, b) {
    var c3;
    return (typeof b == "number" ? number_default : b instanceof color ? rgb_default : (c3 = color(b)) ? (b = c3, rgb_default) : string_default)(a3, b);
  }
  var init_interpolate = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/interpolate.js"() {
      init_src7();
      init_src8();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/attr.js
  function attrRemove2(name2) {
    return function() {
      this.removeAttribute(name2);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name2, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name2);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction2(name2, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      return value1 == null ? void this.removeAttribute(name2) : (string0 = this.getAttribute(name2), string1 = value1 + "", string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1)));
    };
  }
  function attrFunctionNS2(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      return value1 == null ? void this.removeAttributeNS(fullname.space, fullname.local) : (string0 = this.getAttributeNS(fullname.space, fullname.local), string1 = value1 + "", string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1)));
    };
  }
  function attr_default2(name2, value) {
    var fullname = namespace_default(name2), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name2, typeof value == "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name2, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
  }
  var init_attr2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/attr.js"() {
      init_src8();
      init_src2();
      init_tween();
      init_interpolate();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/attrTween.js
  function attrInterpolate(name2, i) {
    return function(t) {
      this.setAttribute(name2, i.call(this, t));
    };
  }
  function attrInterpolateNS(fullname, i) {
    return function(t) {
      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
  }
  function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      return i !== i0 && (t0 = (i0 = i) && attrInterpolateNS(fullname, i)), t0;
    }
    return tween._value = value, tween;
  }
  function attrTween(name2, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      return i !== i0 && (t0 = (i0 = i) && attrInterpolate(name2, i)), t0;
    }
    return tween._value = value, tween;
  }
  function attrTween_default(name2, value) {
    var key = "attr." + name2;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value != "function")
      throw new Error();
    var fullname = namespace_default(name2);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }
  var init_attrTween = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/attrTween.js"() {
      init_src2();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/delay.js
  function delayFunction(id7, value) {
    return function() {
      init(this, id7).delay = +value.apply(this, arguments);
    };
  }
  function delayConstant(id7, value) {
    return value = +value, function() {
      init(this, id7).delay = value;
    };
  }
  function delay_default(value) {
    var id7 = this._id;
    return arguments.length ? this.each((typeof value == "function" ? delayFunction : delayConstant)(id7, value)) : get10(this.node(), id7).delay;
  }
  var init_delay = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/delay.js"() {
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/duration.js
  function durationFunction(id7, value) {
    return function() {
      set5(this, id7).duration = +value.apply(this, arguments);
    };
  }
  function durationConstant(id7, value) {
    return value = +value, function() {
      set5(this, id7).duration = value;
    };
  }
  function duration_default(value) {
    var id7 = this._id;
    return arguments.length ? this.each((typeof value == "function" ? durationFunction : durationConstant)(id7, value)) : get10(this.node(), id7).duration;
  }
  var init_duration = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/duration.js"() {
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/ease.js
  function easeConstant(id7, value) {
    if (typeof value != "function")
      throw new Error();
    return function() {
      set5(this, id7).ease = value;
    };
  }
  function ease_default(value) {
    var id7 = this._id;
    return arguments.length ? this.each(easeConstant(id7, value)) : get10(this.node(), id7).ease;
  }
  var init_ease = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/ease.js"() {
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/easeVarying.js
  function easeVarying(id7, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (typeof v != "function")
        throw new Error();
      set5(this, id7).ease = v;
    };
  }
  function easeVarying_default(value) {
    if (typeof value != "function")
      throw new Error();
    return this.each(easeVarying(this._id, value));
  }
  var init_easeVarying = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/easeVarying.js"() {
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/filter.js
  function filter_default2(match) {
    typeof match != "function" && (match = matcher_default(match));
    for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j)
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i)
        (node = group[i]) && match.call(node, node.__data__, i, group) && subgroup.push(node);
    return new Transition(subgroups, this._parents, this._name, this._id);
  }
  var init_filter2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/filter.js"() {
      init_src2();
      init_transition2();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/merge.js
  function merge_default2(transition2) {
    if (transition2._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j)
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge2 = merges[j] = new Array(n), node, i = 0; i < n; ++i)
        (node = group0[i] || group1[i]) && (merge2[i] = node);
    for (; j < m0; ++j)
      merges[j] = groups0[j];
    return new Transition(merges, this._parents, this._name, this._id);
  }
  var init_merge2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/merge.js"() {
      init_transition2();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/on.js
  function start(name2) {
    return (name2 + "").trim().split(/^|\s+/).every(function(t) {
      var i = t.indexOf(".");
      return i >= 0 && (t = t.slice(0, i)), !t || t === "start";
    });
  }
  function onFunction(id7, name2, listener) {
    var on0, on1, sit = start(name2) ? init : set5;
    return function() {
      var schedule = sit(this, id7), on = schedule.on;
      on !== on0 && (on1 = (on0 = on).copy()).on(name2, listener), schedule.on = on1;
    };
  }
  function on_default2(name2, listener) {
    var id7 = this._id;
    return arguments.length < 2 ? get10(this.node(), id7).on.on(name2) : this.each(onFunction(id7, name2, listener));
  }
  var init_on2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/on.js"() {
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/remove.js
  function removeFunction(id7) {
    return function() {
      var parent = this.parentNode;
      for (var i in this.__transition)
        if (+i !== id7)
          return;
      parent && parent.removeChild(this);
    };
  }
  function remove_default3() {
    return this.on("end.remove", removeFunction(this._id));
  }
  var init_remove3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/remove.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/select.js
  function select_default3(select) {
    var name2 = this._name, id7 = this._id;
    typeof select != "function" && (select = selector_default(select));
    for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j)
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i)
        (node = group[i]) && (subnode = select.call(node, node.__data__, i, group)) && ("__data__" in node && (subnode.__data__ = node.__data__), subgroup[i] = subnode, schedule_default(subgroup[i], name2, id7, i, subgroup, get10(node, id7)));
    return new Transition(subgroups, this._parents, name2, id7);
  }
  var init_select3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/select.js"() {
      init_src2();
      init_transition2();
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/selectAll.js
  function selectAll_default3(select) {
    var name2 = this._name, id7 = this._id;
    typeof select != "function" && (select = selectorAll_default(select));
    for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j)
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i)
        if (node = group[i]) {
          for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get10(node, id7), k2 = 0, l = children2.length; k2 < l; ++k2)
            (child = children2[k2]) && schedule_default(child, name2, id7, k2, children2, inherit2);
          subgroups.push(children2), parents.push(node);
        }
    return new Transition(subgroups, parents, name2, id7);
  }
  var init_selectAll3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/selectAll.js"() {
      init_src2();
      init_transition2();
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/selection.js
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }
  var Selection2, init_selection2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/selection.js"() {
      init_src2();
      Selection2 = selection_default.prototype.constructor;
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/style.js
  function styleNull(name2, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name2), string1 = (this.style.removeProperty(name2), styleValue(this, name2));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name2) {
    return function() {
      this.style.removeProperty(name2);
    };
  }
  function styleConstant2(name2, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name2);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction2(name2, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name2), value1 = value(this), string1 = value1 + "";
      return value1 == null && (string1 = value1 = (this.style.removeProperty(name2), styleValue(this, name2))), string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id7, name2) {
    var on0, on1, listener0, key = "style." + name2, event = "end." + key, remove5;
    return function() {
      var schedule = set5(this, id7), on = schedule.on, listener = schedule.value[key] == null ? remove5 || (remove5 = styleRemove2(name2)) : void 0;
      (on !== on0 || listener0 !== listener) && (on1 = (on0 = on).copy()).on(event, listener0 = listener), schedule.on = on1;
    };
  }
  function style_default2(name2, value, priority) {
    var i = (name2 += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value == null ? this.styleTween(name2, styleNull(name2, i)).on("end.style." + name2, styleRemove2(name2)) : typeof value == "function" ? this.styleTween(name2, styleFunction2(name2, i, tweenValue(this, "style." + name2, value))).each(styleMaybeRemove(this._id, name2)) : this.styleTween(name2, styleConstant2(name2, i, value), priority).on("end.style." + name2, null);
  }
  var init_style2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/style.js"() {
      init_src8();
      init_src2();
      init_schedule();
      init_tween();
      init_interpolate();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/styleTween.js
  function styleInterpolate(name2, i, priority) {
    return function(t) {
      this.style.setProperty(name2, i.call(this, t), priority);
    };
  }
  function styleTween(name2, value, priority) {
    var t, i0;
    function tween() {
      var i = value.apply(this, arguments);
      return i !== i0 && (t = (i0 = i) && styleInterpolate(name2, i, priority)), t;
    }
    return tween._value = value, tween;
  }
  function styleTween_default(name2, value, priority) {
    var key = "style." + (name2 += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value != "function")
      throw new Error();
    return this.tween(key, styleTween(name2, value, priority ?? ""));
  }
  var init_styleTween = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/styleTween.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/text.js
  function textConstant2(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction2(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 ?? "";
    };
  }
  function text_default2(value) {
    return this.tween("text", typeof value == "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
  }
  var init_text2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/text.js"() {
      init_tween();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/textTween.js
  function textInterpolate(i) {
    return function(t) {
      this.textContent = i.call(this, t);
    };
  }
  function textTween(value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      return i !== i0 && (t0 = (i0 = i) && textInterpolate(i)), t0;
    }
    return tween._value = value, tween;
  }
  function textTween_default(value) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value != "function")
      throw new Error();
    return this.tween(key, textTween(value));
  }
  var init_textTween = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/textTween.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/transition.js
  function transition_default() {
    for (var name2 = this._name, id0 = this._id, id1 = newId(), groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j)
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i)
        if (node = group[i]) {
          var inherit2 = get10(node, id0);
          schedule_default(node, name2, id1, i, group, {
            time: inherit2.time + inherit2.delay + inherit2.duration,
            delay: 0,
            duration: inherit2.duration,
            ease: inherit2.ease
          });
        }
    return new Transition(groups, this._parents, name2, id1);
  }
  var init_transition = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/transition.js"() {
      init_transition2();
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/end.js
  function end_default() {
    var on0, on1, that = this, id7 = that._id, size7 = that.size();
    return new Promise(function(resolve2, reject) {
      var cancel = { value: reject }, end = { value: function() {
        --size7 == 0 && resolve2();
      } };
      that.each(function() {
        var schedule = set5(this, id7), on = schedule.on;
        on !== on0 && (on1 = (on0 = on).copy(), on1._.cancel.push(cancel), on1._.interrupt.push(cancel), on1._.end.push(end)), schedule.on = on1;
      }), size7 === 0 && resolve2();
    });
  }
  var init_end = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/end.js"() {
      init_schedule();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/transition/index.js
  function Transition(groups, parents, name2, id7) {
    this._groups = groups, this._parents = parents, this._name = name2, this._id = id7;
  }
  function transition(name2) {
    return selection_default().transition(name2);
  }
  function newId() {
    return ++id5;
  }
  var id5, selection_prototype, init_transition2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/index.js"() {
      init_src2();
      init_attr2();
      init_attrTween();
      init_delay();
      init_duration();
      init_ease();
      init_easeVarying();
      init_filter2();
      init_merge2();
      init_on2();
      init_remove3();
      init_select3();
      init_selectAll3();
      init_selection2();
      init_style2();
      init_styleTween();
      init_text2();
      init_textTween();
      init_transition();
      init_tween();
      init_end();
      id5 = 0;
      selection_prototype = selection_default.prototype;
      Transition.prototype = transition.prototype = {
        constructor: Transition,
        select: select_default3,
        selectAll: selectAll_default3,
        selectChild: selection_prototype.selectChild,
        selectChildren: selection_prototype.selectChildren,
        filter: filter_default2,
        merge: merge_default2,
        selection: selection_default2,
        transition: transition_default,
        call: selection_prototype.call,
        nodes: selection_prototype.nodes,
        node: selection_prototype.node,
        size: selection_prototype.size,
        empty: selection_prototype.empty,
        each: selection_prototype.each,
        on: on_default2,
        attr: attr_default2,
        attrTween: attrTween_default,
        style: style_default2,
        styleTween: styleTween_default,
        text: text_default2,
        textTween: textTween_default,
        remove: remove_default3,
        tween: tween_default,
        delay: delay_default,
        duration: duration_default,
        ease: ease_default,
        easeVarying: easeVarying_default,
        end: end_default,
        [Symbol.iterator]: selection_prototype[Symbol.iterator]
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-ease/src/cubic.js
  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }
  var init_cubic = __esm({
    "../react-d3-graph/node_modules/d3-ease/src/cubic.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-ease/src/index.js
  var init_src9 = __esm({
    "../react-d3-graph/node_modules/d3-ease/src/index.js"() {
      init_cubic();
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/selection/transition.js
  function inherit(node, id7) {
    for (var timing; !(timing = node.__transition) || !(timing = timing[id7]); )
      if (!(node = node.parentNode))
        throw new Error(`transition ${id7} not found`);
    return timing;
  }
  function transition_default2(name2) {
    var id7, timing;
    name2 instanceof Transition ? (id7 = name2._id, name2 = name2._name) : (id7 = newId(), (timing = defaultTiming).time = now(), name2 = name2 == null ? null : name2 + "");
    for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j)
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i)
        (node = group[i]) && schedule_default(node, name2, id7, i, group, timing || inherit(node, id7));
    return new Transition(groups, this._parents, name2, id7);
  }
  var defaultTiming, init_transition3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/selection/transition.js"() {
      init_transition2();
      init_schedule();
      init_src9();
      init_src5();
      defaultTiming = {
        time: null,
        delay: 0,
        duration: 250,
        ease: cubicInOut
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/selection/index.js
  var init_selection3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/selection/index.js"() {
      init_src2();
      init_interrupt2();
      init_transition3();
      selection_default.prototype.interrupt = interrupt_default2;
      selection_default.prototype.transition = transition_default2;
    }
  });

  // ../react-d3-graph/node_modules/d3-transition/src/index.js
  var init_src10 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/index.js"() {
      init_selection3();
      init_interrupt();
    }
  });

  // ../react-d3-graph/node_modules/d3-zoom/src/constant.js
  var constant_default5, init_constant5 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/constant.js"() {
      constant_default5 = (x5) => () => x5;
    }
  });

  // ../react-d3-graph/node_modules/d3-zoom/src/event.js
  function ZoomEvent(type, {
    sourceEvent,
    target: target3,
    transform: transform2,
    dispatch: dispatch5
  }) {
    Object.defineProperties(this, {
      type: { value: type, enumerable: !0, configurable: !0 },
      sourceEvent: { value: sourceEvent, enumerable: !0, configurable: !0 },
      target: { value: target3, enumerable: !0, configurable: !0 },
      transform: { value: transform2, enumerable: !0, configurable: !0 },
      _: { value: dispatch5 }
    });
  }
  var init_event2 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/event.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-zoom/src/transform.js
  function Transform(k2, x5, y5) {
    this.k = k2, this.x = x5, this.y = y5;
  }
  function transform(node) {
    for (; !node.__zoom; )
      if (!(node = node.parentNode))
        return identity2;
    return node.__zoom;
  }
  var identity2, init_transform2 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/transform.js"() {
      Transform.prototype = {
        constructor: Transform,
        scale: function(k2) {
          return k2 === 1 ? this : new Transform(this.k * k2, this.x, this.y);
        },
        translate: function(x5, y5) {
          return x5 === 0 & y5 === 0 ? this : new Transform(this.k, this.x + this.k * x5, this.y + this.k * y5);
        },
        apply: function(point5) {
          return [point5[0] * this.k + this.x, point5[1] * this.k + this.y];
        },
        applyX: function(x5) {
          return x5 * this.k + this.x;
        },
        applyY: function(y5) {
          return y5 * this.k + this.y;
        },
        invert: function(location) {
          return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
        },
        invertX: function(x5) {
          return (x5 - this.x) / this.k;
        },
        invertY: function(y5) {
          return (y5 - this.y) / this.k;
        },
        rescaleX: function(x5) {
          return x5.copy().domain(x5.range().map(this.invertX, this).map(x5.invert, x5));
        },
        rescaleY: function(y5) {
          return y5.copy().domain(y5.range().map(this.invertY, this).map(y5.invert, y5));
        },
        toString: function() {
          return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
        }
      };
      identity2 = new Transform(1, 0, 0);
      transform.prototype = Transform.prototype;
    }
  });

  // ../react-d3-graph/node_modules/d3-zoom/src/noevent.js
  function nopropagation2(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default2(event) {
    event.preventDefault(), event.stopImmediatePropagation();
  }
  var init_noevent2 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/noevent.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-zoom/src/zoom.js
  function defaultFilter2(event) {
    return (!event.ctrlKey || event.type === "wheel") && !event.button;
  }
  function defaultExtent() {
    var e2 = this;
    return e2 instanceof SVGElement ? (e2 = e2.ownerSVGElement || e2, e2.hasAttribute("viewBox") ? (e2 = e2.viewBox.baseVal, [[e2.x, e2.y], [e2.x + e2.width, e2.y + e2.height]]) : [[0, 0], [e2.width.baseVal.value, e2.height.baseVal.value]]) : [[0, 0], [e2.clientWidth, e2.clientHeight]];
  }
  function defaultTransform() {
    return this.__zoom || identity2;
  }
  function defaultWheelDelta(event) {
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
  }
  function defaultTouchable2() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function defaultConstrain(transform2, extent, translateExtent) {
    var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
    return transform2.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
  }
  function zoom_default2() {
    var filter4 = defaultFilter2, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, 1 / 0], translateExtent = [[-1 / 0, -1 / 0], [1 / 0, 1 / 0]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
    function zoom(selection3) {
      selection3.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: !1 }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    zoom.transform = function(collection, transform2, point5, event) {
      var selection3 = collection.selection ? collection.selection() : collection;
      selection3.property("__zoom", defaultTransform), collection !== selection3 ? schedule(collection, transform2, point5, event) : selection3.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 == "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }, zoom.scaleBy = function(selection3, k2, p, event) {
      zoom.scaleTo(selection3, function() {
        var k0 = this.__zoom.k, k1 = typeof k2 == "function" ? k2.apply(this, arguments) : k2;
        return k0 * k1;
      }, p, event);
    }, zoom.scaleTo = function(selection3, k2, p, event) {
      zoom.transform(selection3, function() {
        var e2 = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e2) : typeof p == "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k2 == "function" ? k2.apply(this, arguments) : k2;
        return constrain(translate(scale(t0, k1), p0, p1), e2, translateExtent);
      }, p, event);
    }, zoom.translateBy = function(selection3, x5, y5, event) {
      zoom.transform(selection3, function() {
        return constrain(this.__zoom.translate(typeof x5 == "function" ? x5.apply(this, arguments) : x5, typeof y5 == "function" ? y5.apply(this, arguments) : y5), extent.apply(this, arguments), translateExtent);
      }, null, event);
    }, zoom.translateTo = function(selection3, x5, y5, p, event) {
      zoom.transform(selection3, function() {
        var e2 = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e2) : typeof p == "function" ? p.apply(this, arguments) : p;
        return constrain(identity2.translate(p0[0], p0[1]).scale(t.k).translate(typeof x5 == "function" ? -x5.apply(this, arguments) : -x5, typeof y5 == "function" ? -y5.apply(this, arguments) : -y5), e2, translateExtent);
      }, p, event);
    };
    function scale(transform2, k2) {
      return k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k2)), k2 === transform2.k ? transform2 : new Transform(k2, transform2.x, transform2.y);
    }
    function translate(transform2, p0, p1) {
      var x5 = p0[0] - p1[0] * transform2.k, y5 = p0[1] - p1[1] * transform2.k;
      return x5 === transform2.x && y5 === transform2.y ? transform2 : new Transform(transform2.k, x5, y5);
    }
    function centroid(extent2) {
      return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
    }
    function schedule(transition2, transform2, point5, event) {
      transition2.on("start.zoom", function() {
        gesture(this, arguments).event(event).start();
      }).on("interrupt.zoom end.zoom", function() {
        gesture(this, arguments).event(event).end();
      }).tween("zoom", function() {
        var that = this, args = arguments, g = gesture(that, args).event(event), e2 = extent.apply(that, args), p = point5 == null ? centroid(e2) : typeof point5 == "function" ? point5.apply(that, args) : point5, w = Math.max(e2[1][0] - e2[0][0], e2[1][1] - e2[0][1]), a3 = that.__zoom, b = typeof transform2 == "function" ? transform2.apply(that, args) : transform2, i = interpolate(a3.invert(p).concat(w / a3.k), b.invert(p).concat(w / b.k));
        return function(t) {
          if (t === 1)
            t = b;
          else {
            var l = i(t), k2 = w / l[2];
            t = new Transform(k2, p[0] - l[0] * k2, p[1] - l[1] * k2);
          }
          g.zoom(null, t);
        };
      });
    }
    function gesture(that, args, clean) {
      return !clean && that.__zooming || new Gesture(that, args);
    }
    function Gesture(that, args) {
      this.that = that, this.args = args, this.active = 0, this.sourceEvent = null, this.extent = extent.apply(that, args), this.taps = 0;
    }
    Gesture.prototype = {
      event: function(event) {
        return event && (this.sourceEvent = event), this;
      },
      start: function() {
        return ++this.active == 1 && (this.that.__zooming = this, this.emit("start")), this;
      },
      zoom: function(key, transform2) {
        return this.mouse && key !== "mouse" && (this.mouse[1] = transform2.invert(this.mouse[0])), this.touch0 && key !== "touch" && (this.touch0[1] = transform2.invert(this.touch0[0])), this.touch1 && key !== "touch" && (this.touch1[1] = transform2.invert(this.touch1[0])), this.that.__zoom = transform2, this.emit("zoom"), this;
      },
      end: function() {
        return --this.active == 0 && (delete this.that.__zooming, this.emit("end")), this;
      },
      emit: function(type) {
        var d = select_default2(this.that).datum();
        listeners.call(type, this.that, new ZoomEvent(type, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type,
          transform: this.that.__zoom,
          dispatch: listeners
        }), d);
      }
    };
    function wheeled(event, ...args) {
      if (!filter4.apply(this, arguments))
        return;
      var g = gesture(this, args).event(event), t = this.__zoom, k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer_default(event);
      if (g.wheel)
        (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) && (g.mouse[1] = t.invert(g.mouse[0] = p)), clearTimeout(g.wheel);
      else {
        if (t.k === k2)
          return;
        g.mouse = [p, t.invert(p)], interrupt_default(this), g.start();
      }
      noevent_default2(event), g.wheel = setTimeout(wheelidled, wheelDelay), g.zoom("mouse", constrain(translate(scale(t, k2), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
      function wheelidled() {
        g.wheel = null, g.end();
      }
    }
    function mousedowned(event, ...args) {
      if (touchending || !filter4.apply(this, arguments))
        return;
      var currentTarget = event.currentTarget, g = gesture(this, args, !0).event(event), v = select_default2(event.view).on("mousemove.zoom", mousemoved, !0).on("mouseup.zoom", mouseupped, !0), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
      nodrag_default(event.view), nopropagation2(event), g.mouse = [p, this.__zoom.invert(p)], interrupt_default(this), g.start();
      function mousemoved(event2) {
        if (noevent_default2(event2), !g.moved) {
          var dx = event2.clientX - x0, dy = event2.clientY - y0;
          g.moved = dx * dx + dy * dy > clickDistance2;
        }
        g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
      }
      function mouseupped(event2) {
        v.on("mousemove.zoom mouseup.zoom", null), yesdrag(event2.view, g.moved), noevent_default2(event2), g.event(event2).end();
      }
    }
    function dblclicked(event, ...args) {
      if (!!filter4.apply(this, arguments)) {
        var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
        noevent_default2(event), duration > 0 ? select_default2(this).transition().duration(duration).call(schedule, t1, p0, event) : select_default2(this).call(zoom.transform, t1, p0, event);
      }
    }
    function touchstarted(event, ...args) {
      if (!!filter4.apply(this, arguments)) {
        var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
        for (nopropagation2(event), i = 0; i < n; ++i)
          t = touches[i], p = pointer_default(t, this), p = [p, this.__zoom.invert(p), t.identifier], g.touch0 ? !g.touch1 && g.touch0[2] !== p[2] && (g.touch1 = p, g.taps = 0) : (g.touch0 = p, started = !0, g.taps = 1 + !!touchstarting);
        touchstarting && (touchstarting = clearTimeout(touchstarting)), started && (g.taps < 2 && (touchfirst = p[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay)), interrupt_default(this), g.start());
      }
    }
    function touchmoved(event, ...args) {
      if (!!this.__zooming) {
        var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
        for (noevent_default2(event), i = 0; i < n; ++i)
          t = touches[i], p = pointer_default(t, this), g.touch0 && g.touch0[2] === t.identifier ? g.touch0[0] = p : g.touch1 && g.touch1[2] === t.identifier && (g.touch1[0] = p);
        if (t = g.that.__zoom, g.touch1) {
          var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
          t = scale(t, Math.sqrt(dp / dl)), p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2], l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
        } else if (g.touch0)
          p = g.touch0[0], l = g.touch0[1];
        else
          return;
        g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
      }
    }
    function touchended(event, ...args) {
      if (!!this.__zooming) {
        var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
        for (nopropagation2(event), touchending && clearTimeout(touchending), touchending = setTimeout(function() {
          touchending = null;
        }, touchDelay), i = 0; i < n; ++i)
          t = touches[i], g.touch0 && g.touch0[2] === t.identifier ? delete g.touch0 : g.touch1 && g.touch1[2] === t.identifier && delete g.touch1;
        if (g.touch1 && !g.touch0 && (g.touch0 = g.touch1, delete g.touch1), g.touch0)
          g.touch0[1] = this.__zoom.invert(g.touch0[0]);
        else if (g.end(), g.taps === 2 && (t = pointer_default(t, this), Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance)) {
          var p = select_default2(this).on("dblclick.zoom");
          p && p.apply(this, arguments);
        }
      }
    }
    return zoom.wheelDelta = function(_) {
      return arguments.length ? (wheelDelta = typeof _ == "function" ? _ : constant_default5(+_), zoom) : wheelDelta;
    }, zoom.filter = function(_) {
      return arguments.length ? (filter4 = typeof _ == "function" ? _ : constant_default5(!!_), zoom) : filter4;
    }, zoom.touchable = function(_) {
      return arguments.length ? (touchable = typeof _ == "function" ? _ : constant_default5(!!_), zoom) : touchable;
    }, zoom.extent = function(_) {
      return arguments.length ? (extent = typeof _ == "function" ? _ : constant_default5([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
    }, zoom.scaleExtent = function(_) {
      return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
    }, zoom.translateExtent = function(_) {
      return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
    }, zoom.constrain = function(_) {
      return arguments.length ? (constrain = _, zoom) : constrain;
    }, zoom.duration = function(_) {
      return arguments.length ? (duration = +_, zoom) : duration;
    }, zoom.interpolate = function(_) {
      return arguments.length ? (interpolate = _, zoom) : interpolate;
    }, zoom.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? zoom : value;
    }, zoom.clickDistance = function(_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
    }, zoom.tapDistance = function(_) {
      return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
    }, zoom;
  }
  var init_zoom2 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/zoom.js"() {
      init_src();
      init_src3();
      init_src8();
      init_src2();
      init_src10();
      init_constant5();
      init_event2();
      init_transform2();
      init_noevent2();
    }
  });

  // ../react-d3-graph/node_modules/d3-zoom/src/index.js
  var src_exports4 = {};
  __export(src_exports4, {
    ZoomTransform: () => Transform,
    zoom: () => zoom_default2,
    zoomIdentity: () => identity2,
    zoomTransform: () => transform
  });
  var init_src11 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/index.js"() {
      init_zoom2();
      init_transform2();
    }
  });

  // ../react-d3-graph/lib/const.js
  var require_const = __commonJS({
    "../react-d3-graph/lib/const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _default = {
        SYMBOLS: {
          CIRCLE: "circle",
          CROSS: "cross",
          DIAMOND: "diamond",
          SQUARE: "square",
          STAR: "star",
          TRIANGLE: "triangle",
          WYE: "wye"
        }
      };
      exports.default = _default;
    }
  });

  // ../react-d3-graph/lib/components/graph/graph.const.js
  var require_graph_const = __commonJS({
    "../react-d3-graph/lib/components/graph/graph.const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _const = _interopRequireDefault(require_const());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target3) {
        for (var i = 1; i < arguments.length; i++) {
          var source3 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source3), !0).forEach(function(key) {
            _defineProperty(target3, key, source3[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target3, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key) {
            Object.defineProperty(target3, key, Object.getOwnPropertyDescriptor(source3, key));
          });
        }
        return target3;
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      var _default = _objectSpread({
        COORDS_SEPARATOR: ",",
        FORCE_X: 0.06,
        FORCE_Y: 0.06,
        GRAPH_CONTAINER_ID: "graph-container-zoomable",
        GRAPH_WRAPPER_ID: "graph-wrapper",
        KEYWORDS: {
          SAME: "SAME"
        },
        LINK_CLASS_NAME: "link",
        NODE_CLASS_NAME: "node",
        TTL_DOUBLE_CLICK_IN_MS: 280
      }, _const.default);
      exports.default = _default;
    }
  });

  // ../react-d3-graph/lib/components/graph/graph.config.js
  var require_graph_config = __commonJS({
    "../react-d3-graph/lib/components/graph/graph.config.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _default = {
        automaticRearrangeAfterDropNode: !1,
        collapsible: !1,
        directed: !1,
        focusAnimationDuration: 0.75,
        focusZoom: 1,
        freezeAllDragEvents: !1,
        height: 400,
        highlightDegree: 1,
        highlightOpacity: 1,
        linkHighlightBehavior: !1,
        maxZoom: 8,
        minZoom: 0.1,
        initialZoom: null,
        nodeHighlightBehavior: !1,
        panAndZoom: !1,
        staticGraph: !1,
        staticGraphWithDragAndDrop: !1,
        bounded: !1,
        width: 800,
        d3: {
          alphaTarget: 0.05,
          gravity: -100,
          linkLength: 100,
          linkStrength: 1,
          disableLinkForce: !1
        },
        node: {
          color: "#d3d3d3",
          fontColor: "black",
          fontSize: 8,
          fontWeight: "normal",
          highlightColor: "SAME",
          highlightFontSize: 8,
          highlightFontWeight: "normal",
          highlightStrokeColor: "SAME",
          highlightStrokeWidth: "SAME",
          labelProperty: "id",
          labelPosition: null,
          labelClass: "",
          mouseCursor: "pointer",
          opacity: 1,
          renderLabel: !0,
          size: 200,
          strokeColor: "none",
          strokeWidth: 1.5,
          svg: "",
          symbolType: "circle",
          viewGenerator: null
        },
        link: {
          color: "#d3d3d3",
          fontColor: "black",
          fontSize: 8,
          fontWeight: "normal",
          highlightColor: "SAME",
          highlightFontSize: 8,
          highlightFontWeight: "normal",
          labelProperty: "label",
          mouseCursor: "pointer",
          opacity: 1,
          renderLabel: !1,
          semanticStrokeWidth: !1,
          strokeWidth: 1.5,
          markerHeight: 6,
          markerWidth: 6,
          type: "STRAIGHT",
          selfLinkDirection: "TOP_RIGHT",
          strokeDasharray: 0,
          strokeDashoffset: 0,
          strokeLinecap: "butt",
          offsetSource: {
            dx: 0,
            dy: 0
          },
          offsetTarget: {
            dx: 0,
            dy: 0
          },
          parallelSpread: 0.25
        }
      };
      exports.default = _default;
    }
  });

  // ../react-d3-graph/lib/err.js
  var require_err = __commonJS({
    "../react-d3-graph/lib/err.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _default = {
        GRAPH_NO_ID_PROP: "id prop not defined! id property is mandatory and it should be unique.",
        INSUFFICIENT_LINKS: "you are passing invalid data to react-d3-graph. You must include a links array, even if empty, in the data object you're passing down to the <Graph> component.",
        INVALID_LINKS: "you provided a invalid links data structure. Links source and target attributes must point to an existent node",
        INSUFFICIENT_DATA: "you have not provided enough data for react-d3-graph to render something. You need to provide at least one node",
        INVALID_LINK_VALUE: "links 'value' attribute must be of type number"
      };
      exports.default = _default;
    }
  });

  // ../react-d3-graph/lib/utils.js
  var require_utils = __commonJS({
    "../react-d3-graph/lib/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.antiPick = antiPick;
      exports.debounce = debounce;
      exports.deepClone = deepClone;
      exports.isDeepEqual = isDeepEqual;
      exports.isEmptyObject = isEmptyObject;
      exports.isNil = isNil;
      exports.logError = logError;
      exports.logWarning = logWarning;
      exports.merge = merge2;
      exports.pick = pick;
      exports.throwErr = throwErr;
      function _typeof(obj) {
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      var MAX_DEPTH = 20;
      function _isPropertyNestedObject(o, k2) {
        return !!o && Object.prototype.hasOwnProperty.call(o, k2) && _typeof(o[k2]) === "object" && o[k2] !== null && !isEmptyObject(o[k2]);
      }
      function isDeepEqual(o1, o2) {
        var _depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, diffs = [];
        if (_depth === 0 && o1 === o2)
          return !0;
        if (isEmptyObject(o1) && !isEmptyObject(o2) || !isEmptyObject(o1) && isEmptyObject(o2))
          return !1;
        var o1Keys = Object.keys(o1), o2Keys = Object.keys(o2);
        if (o1Keys.length !== o2Keys.length)
          return !1;
        for (var _i = 0, _o1Keys = o1Keys; _i < _o1Keys.length; _i++) {
          var k2 = _o1Keys[_i], nestedO = _isPropertyNestedObject(o1, k2) && _isPropertyNestedObject(o2, k2);
          if (nestedO && _depth < MAX_DEPTH)
            diffs.push(isDeepEqual(o1[k2], o2[k2], _depth + 1));
          else {
            var r = isEmptyObject(o1[k2]) && isEmptyObject(o2[k2]) || Object.prototype.hasOwnProperty.call(o2, k2) && o2[k2] === o1[k2];
            if (diffs.push(r), !r)
              break;
          }
        }
        return diffs.indexOf(!1) === -1;
      }
      function isEmptyObject(o) {
        return !!o && _typeof(o) === "object" && !Object.keys(o).length;
      }
      function isNil(o) {
        return o == null;
      }
      function deepClone(o) {
        for (var _clone = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, oKeys = Object.keys(o), _i2 = 0, _oKeys = oKeys; _i2 < _oKeys.length; _i2++) {
          var k2 = _oKeys[_i2], nested = _isPropertyNestedObject(o, k2);
          _clone[k2] = nested && _depth < MAX_DEPTH ? deepClone(o[k2], {}, _depth + 1) : o[k2];
        }
        return _clone;
      }
      function merge2() {
        var o1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, o2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0, o = {};
        if (Object.keys(o1 || {}).length === 0)
          return o2 && !isEmptyObject(o2) ? o2 : {};
        for (var _i3 = 0, _Object$keys = Object.keys(o1); _i3 < _Object$keys.length; _i3++) {
          var k2 = _Object$keys[_i3], nestedO = !!(o2[k2] && _typeof(o2[k2]) === "object" && _typeof(o1[k2]) === "object" && _depth < MAX_DEPTH);
          nestedO ? function() {
            var r = merge2(o1[k2], o2[k2], _depth + 1);
            o[k2] = Object.prototype.hasOwnProperty.call(o1[k2], "length") && Object.prototype.hasOwnProperty.call(o2[k2], "length") ? Object.keys(r).map(function(rk) {
              return r[rk];
            }) : r;
          }() : o[k2] = Object.prototype.hasOwnProperty.call(o2, k2) ? o2[k2] : o1[k2];
        }
        return o;
      }
      function pick(o) {
        var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        return props.reduce(function(acc, k2) {
          return Object.prototype.hasOwnProperty.call(o, k2) && (acc[k2] = o[k2]), acc;
        }, {});
      }
      function antiPick(o) {
        var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], wanted = Object.keys(o).filter(function(k2) {
          return !props.includes(k2);
        });
        return pick(o, wanted);
      }
      function debounce(fn, time) {
        var timer2;
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
            args[_key] = arguments[_key];
          var later = function() {
            clearTimeout(timer2), fn.apply(void 0, args);
          };
          timer2 && clearTimeout(timer2), timer2 = setTimeout(later, time);
        };
      }
      function buildFormattedErrorMessage() {
        var component = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "N/A", msg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "N/A";
        return "react-d3-graph :: ".concat(component, " :: ").concat(msg);
      }
      function throwErr(component, msg) {
        throw Error(buildFormattedErrorMessage(component, msg));
      }
      function logError(component, msg) {
        console.error(buildFormattedErrorMessage(component, msg));
      }
      function logWarning(component, msg) {
        var warning = "react-d3-graph :: ".concat(component, " :: ").concat(msg);
        console.warn(warning);
      }
    }
  });

  // ../react-d3-graph/lib/components/graph/graph.helper.js
  var require_graph_helper = __commonJS({
    "../react-d3-graph/lib/components/graph/graph.helper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.checkForGraphConfigChanges = checkForGraphConfigChanges;
      exports.checkForGraphElementsChanges = checkForGraphElementsChanges;
      exports.getCenterAndZoomTransformation = getCenterAndZoomTransformation;
      exports.getId = getId;
      exports.getNormalizedNodeCoordinates = getNormalizedNodeCoordinates;
      exports.initializeGraphState = initializeGraphState;
      exports.initializeNodes = initializeNodes;
      exports.isPositionInBounds = isPositionInBounds;
      exports.updateNodeHighlightedValue = updateNodeHighlightedValue;
      var _d3Force = (init_src6(), src_exports3), _d3Selection = (init_src2(), src_exports), _d3Zoom = (init_src11(), src_exports4), _graph2 = _interopRequireDefault(require_graph_const()), _graph3 = _interopRequireDefault(require_graph_config()), _err = _interopRequireDefault(require_err()), _utils = require_utils(), _collapse = require_collapse_helper();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target3) {
        for (var i = 1; i < arguments.length; i++) {
          var source3 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source3), !0).forEach(function(key) {
            _defineProperty(target3, key, source3[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target3, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key) {
            Object.defineProperty(target3, key, Object.getOwnPropertyDescriptor(source3, key));
          });
        }
        return target3;
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      var NODE_PROPS_WHITELIST = ["id", "highlighted", "x", "y", "index", "vy", "vx"], LINK_PROPS_WHITELIST = ["index", "source", "target", "isHidden"];
      function _createForceSimulation(width, height, gravity) {
        var frx = (0, _d3Force.forceX)(width / 2).strength(_graph2.default.FORCE_X), fry = (0, _d3Force.forceY)(height / 2).strength(_graph2.default.FORCE_Y), forceStrength = gravity;
        return (0, _d3Force.forceSimulation)().force("charge", (0, _d3Force.forceManyBody)().strength(forceStrength)).force("x", frx).force("y", fry);
      }
      function _initializeLinks(graphLinks, config2) {
        return graphLinks.reduce(function(links2, l) {
          var source3 = getId(l.source), target3 = getId(l.target);
          links2[source3] || (links2[source3] = {}), links2[target3] || (links2[target3] = {});
          var value = config2.collapsible && l.isHidden ? 0 : l.value || 1;
          return links2[source3][target3] = value, config2.directed || (links2[target3][source3] = value), links2;
        }, {});
      }
      function initializeNodes(graphNodes) {
        for (var nodes3 = {}, n = graphNodes.length, i = 0; i < n; i++) {
          var node = graphNodes[i];
          node.highlighted = !1, Object.prototype.hasOwnProperty.call(node, "fx") ? node.x = node.fx : Object.prototype.hasOwnProperty.call(node, "x") || (node.x = 0), Object.prototype.hasOwnProperty.call(node, "fy") ? node.y = node.fy : Object.prototype.hasOwnProperty.call(node, "y") || (node.y = 0), nodes3[node.id.toString()] = node;
        }
        return nodes3;
      }
      function _mergeDataLinkWithD3Link(link2, index2) {
        var d3Links = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], config2 = arguments.length > 3 ? arguments[3] : void 0, state = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {}, tmp = d3Links.find(function(l) {
          return l.source.id === link2.source && l.target.id === link2.target;
        }), d3Link = tmp && (0, _utils.pick)(tmp, LINK_PROPS_WHITELIST), customProps = (0, _utils.antiPick)(link2, ["source", "target"]);
        if (d3Link) {
          var toggledDirected = state.config && Object.prototype.hasOwnProperty.call(state.config, "directed") && config2.directed !== state.config.directed, refinedD3Link = _objectSpread(_objectSpread({
            index: index2
          }, d3Link), customProps);
          return toggledDirected ? _objectSpread(_objectSpread({}, refinedD3Link), {}, {
            isHidden: !1
          }) : config2.collapsible ? refinedD3Link : _objectSpread(_objectSpread({}, refinedD3Link), {}, {
            isHidden: !1
          });
        }
        var highlighted = !1, source3 = {
          id: link2.source,
          highlighted
        }, target3 = {
          id: link2.target,
          highlighted
        };
        return _objectSpread({
          index: index2,
          source: source3,
          target: target3
        }, customProps);
      }
      function _tagOrphanNodes(nodes3, linksMatrix) {
        return Object.keys(nodes3).reduce(function(acc, nodeId) {
          var _computeNodeDegree = (0, _collapse.computeNodeDegree)(nodeId, linksMatrix), inDegree = _computeNodeDegree.inDegree, outDegree = _computeNodeDegree.outDegree, node = nodes3[nodeId], taggedNode = inDegree === 0 && outDegree === 0 ? _objectSpread(_objectSpread({}, node), {}, {
            _orphan: !0
          }) : node;
          return acc[nodeId] = taggedNode, acc;
        }, {});
      }
      function _validateGraphData(data4) {
        (!data4.nodes || !data4.nodes.length) && ((0, _utils.logWarning)("Graph", _err.default.INSUFFICIENT_DATA), data4.nodes = []), data4.links || ((0, _utils.logWarning)("Graph", _err.default.INSUFFICIENT_LINKS), data4.links = []);
        for (var n = data4.links.length, _loop = function(i2) {
          var l = data4.links[i2];
          data4.nodes.find(function(n2) {
            return n2.id === l.source;
          }) || (0, _utils.throwErr)("Graph", "".concat(_err.default.INVALID_LINKS, ' - "').concat(l.source, '" is not a valid source node id')), data4.nodes.find(function(n2) {
            return n2.id === l.target;
          }) || (0, _utils.throwErr)("Graph", "".concat(_err.default.INVALID_LINKS, ' - "').concat(l.target, '" is not a valid target node id')), l && l.value !== void 0 && typeof l.value != "number" && (0, _utils.throwErr)("Graph", "".concat(_err.default.INVALID_LINK_VALUE, ' - found in link with source "').concat(l.source, '" and target "').concat(l.target, '"'));
        }, i = 0; i < n; i++)
          _loop(i);
      }
      var NODE_PROPERTIES_DISCARD_TO_COMPARE = ["x", "y", "vx", "vy", "index"];
      function _pickId(o) {
        return (0, _utils.pick)(o, ["id"]);
      }
      function _pickSourceAndTarget(o) {
        return (0, _utils.pick)(o, ["source", "target"]);
      }
      function checkForGraphElementsChanges(nextProps, currentState) {
        var nextNodes = nextProps.data.nodes.map(function(n) {
          return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);
        }), nextLinks = nextProps.data.links, stateD3Nodes = currentState.d3Nodes.map(function(n) {
          return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);
        }), stateD3Links = currentState.d3Links.map(function(l) {
          return {
            source: getId(l.source),
            target: getId(l.target)
          };
        }), graphElementsUpdated = !((0, _utils.isDeepEqual)(nextNodes, stateD3Nodes) && (0, _utils.isDeepEqual)(nextLinks, stateD3Links)), newGraphElements = nextNodes.length !== stateD3Nodes.length || nextLinks.length !== stateD3Links.length || !(0, _utils.isDeepEqual)(nextNodes.map(_pickId), stateD3Nodes.map(_pickId)) || !(0, _utils.isDeepEqual)(nextLinks.map(_pickSourceAndTarget), stateD3Links.map(_pickSourceAndTarget));
        return {
          graphElementsUpdated,
          newGraphElements
        };
      }
      function checkForGraphConfigChanges(nextProps, currentState) {
        var newConfig = nextProps.config || {}, configUpdated = newConfig && !(0, _utils.isEmptyObject)(newConfig) && !(0, _utils.isDeepEqual)(newConfig, currentState.config), d3ConfigUpdated = newConfig && newConfig.d3 && !(0, _utils.isDeepEqual)(newConfig.d3, currentState.config.d3);
        return {
          configUpdated,
          d3ConfigUpdated
        };
      }
      function getCenterAndZoomTransformation(d3Node, config2, containerElId) {
        if (!!d3Node) {
          var width = config2.width, height = config2.height, focusZoom = config2.focusZoom, selector = (0, _d3Selection.select)("#".concat(containerElId));
          return selector.call((0, _d3Zoom.zoom)().transform, _d3Zoom.zoomIdentity.translate(width / 2, height / 2).scale(focusZoom).translate(-d3Node.x, -d3Node.y)), `
    translate(`.concat(width / 2, ", ").concat(height / 2, `)
    scale(`).concat(focusZoom, `)
    translate(`).concat(-d3Node.x, ", ").concat(-d3Node.y, `)
  `);
        }
      }
      function getId(sot) {
        return sot.id !== void 0 && sot.id !== null ? sot.id : sot;
      }
      function initializeGraphState(_ref, state) {
        var data4 = _ref.data, id7 = _ref.id, config2 = _ref.config;
        _validateGraphData(data4);
        var graph2;
        state && state.nodes ? graph2 = {
          nodes: data4.nodes.map(function(n) {
            return state.nodes[n.id] ? _objectSpread(_objectSpread({}, n), (0, _utils.pick)(state.nodes[n.id], NODE_PROPS_WHITELIST)) : _objectSpread({}, n);
          }),
          links: data4.links.map(function(l, index2) {
            return _mergeDataLinkWithD3Link(l, index2, state && state.d3Links, config2, state);
          })
        } : graph2 = {
          nodes: data4.nodes.map(function(n) {
            return _objectSpread({}, n);
          }),
          links: data4.links.map(function(l) {
            return _objectSpread({}, l);
          })
        };
        var newConfig = _objectSpread({}, (0, _utils.merge)(_graph3.default, config2 || {})), links2 = _initializeLinks(graph2.links, newConfig), nodes3 = _tagOrphanNodes(initializeNodes(graph2.nodes), links2), _graph = graph2, d3Nodes = _graph.nodes, d3Links = _graph.links, formatedId = id7.replace(/ /g, "_"), simulation = _createForceSimulation(newConfig.width, newConfig.height, newConfig.d3 && newConfig.d3.gravity), minZoom = newConfig.minZoom, maxZoom = newConfig.maxZoom, focusZoom = newConfig.focusZoom;
        return focusZoom > maxZoom ? newConfig.focusZoom = maxZoom : focusZoom < minZoom && (newConfig.focusZoom = minZoom), {
          id: formatedId,
          config: newConfig,
          links: links2,
          d3Links,
          nodes: nodes3,
          d3Nodes,
          highlightedNode: "",
          simulation,
          newGraphElements: !1,
          configUpdated: !1,
          transform: {
            x: 0,
            y: 0,
            k: 1
          },
          draggedNode: null
        };
      }
      function updateNodeHighlightedValue(nodes3, links2, config2, id7) {
        var value = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, highlightedNode = value ? id7 : "", node = _objectSpread(_objectSpread({}, nodes3[id7]), {}, {
          highlighted: value
        }), updatedNodes = _objectSpread(_objectSpread({}, nodes3), {}, _defineProperty({}, id7, node));
        return links2[id7] && config2.highlightDegree !== 0 && (updatedNodes = Object.keys(links2[id7]).reduce(function(acc, linkId) {
          var updatedNode = _objectSpread(_objectSpread({}, updatedNodes[linkId]), {}, {
            highlighted: value
          });
          return acc[linkId] = updatedNode, acc;
        }, updatedNodes)), {
          nodes: updatedNodes,
          highlightedNode
        };
      }
      function normalize(vector) {
        var norm = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
        return norm === 0 ? vector : {
          x: vector.x / norm,
          y: vector.y / norm
        };
      }
      var SYMBOLS_WITH_OPTIMIZED_POSITIONING = new Set([_graph2.default.SYMBOLS.CIRCLE]);
      function getNormalizedNodeCoordinates(_ref2, nodes3, config2, strokeWidth) {
        var _config$node, _config$node2, _config$node3, sourceId = _ref2.sourceId, targetId = _ref2.targetId, _ref2$sourceCoords = _ref2.sourceCoords, sourceCoords = _ref2$sourceCoords === void 0 ? {} : _ref2$sourceCoords, _ref2$targetCoords = _ref2.targetCoords, targetCoords = _ref2$targetCoords === void 0 ? {} : _ref2$targetCoords, sourceNode = nodes3 == null ? void 0 : nodes3[sourceId], targetNode = nodes3 == null ? void 0 : nodes3[targetId];
        if (!sourceNode || !targetNode)
          return {
            sourceCoords,
            targetCoords
          };
        if ((_config$node = config2.node) !== null && _config$node !== void 0 && _config$node.viewGenerator || sourceNode != null && sourceNode.viewGenerator || targetNode != null && targetNode.viewGenerator)
          return {
            sourceCoords,
            targetCoords
          };
        var sourceSymbolType = sourceNode.symbolType || ((_config$node2 = config2.node) === null || _config$node2 === void 0 ? void 0 : _config$node2.symbolType), targetSymbolType = targetNode.symbolType || ((_config$node3 = config2.node) === null || _config$node3 === void 0 ? void 0 : _config$node3.symbolType);
        if (!SYMBOLS_WITH_OPTIMIZED_POSITIONING.has(sourceSymbolType) && !SYMBOLS_WITH_OPTIMIZED_POSITIONING.has(targetSymbolType))
          return {
            sourceCoords,
            targetCoords
          };
        var x1 = sourceCoords.x, y1 = sourceCoords.y, x22 = targetCoords.x, y22 = targetCoords.y, directionVector = normalize({
          x: x22 - x1,
          y: y22 - y1
        });
        switch (sourceSymbolType) {
          case _graph2.default.SYMBOLS.CIRCLE: {
            var sourceNodeSize = (sourceNode == null ? void 0 : sourceNode.size) || config2.node.size;
            sourceNodeSize = Math.sqrt(sourceNodeSize / Math.PI) * 0.95, x1 += sourceNodeSize * directionVector.x, y1 += sourceNodeSize * directionVector.y;
            break;
          }
        }
        switch (targetSymbolType) {
          case _graph2.default.SYMBOLS.CIRCLE: {
            var _config$link, _config$link2, strokeSize = strokeWidth * Math.min(((_config$link = config2.link) === null || _config$link === void 0 ? void 0 : _config$link.markerWidth) || 0, ((_config$link2 = config2.link) === null || _config$link2 === void 0 ? void 0 : _config$link2.markerHeight) || 0), targetNodeSize = (targetNode == null ? void 0 : targetNode.size) || config2.node.size;
            targetNodeSize = Math.sqrt(targetNodeSize / Math.PI) * 0.95, x22 -= (targetNodeSize + (config2.directed ? strokeSize : 0)) * directionVector.x, y22 -= (targetNodeSize + (config2.directed ? strokeSize : 0)) * directionVector.y;
            break;
          }
        }
        return {
          sourceCoords: {
            x: x1,
            y: y1
          },
          targetCoords: {
            x: x22,
            y: y22
          }
        };
      }
      function isPositionInBounds(position, currentState) {
        var transform2 = currentState.transform, config2 = currentState.config, invertTransformZoom = 1 / transform2.k;
        return position.x > -transform2.x * invertTransformZoom && position.x < (config2.width - transform2.x) * invertTransformZoom && position.y > -transform2.y * invertTransformZoom && position.y < (config2.height - transform2.y) * invertTransformZoom;
      }
    }
  });

  // ../react-d3-graph/lib/components/graph/collapse.helper.js
  var require_collapse_helper = __commonJS({
    "../react-d3-graph/lib/components/graph/collapse.helper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.computeNodeDegree = computeNodeDegree;
      exports.getTargetLeafConnections = getTargetLeafConnections;
      exports.isNodeVisible = isNodeVisible;
      exports.toggleLinksConnections = toggleLinksConnections;
      exports.toggleLinksMatrixConnections = toggleLinksMatrixConnections;
      var _graph = require_graph_helper(), _utils = require_utils();
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target3) {
        for (var i = 1; i < arguments.length; i++) {
          var source3 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source3), !0).forEach(function(key) {
            _defineProperty(target3, key, source3[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target3, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key) {
            Object.defineProperty(target3, key, Object.getOwnPropertyDescriptor(source3, key));
          });
        }
        return target3;
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      function _isLeafDirected(inDegree, outDegree) {
        return inDegree <= 1 && outDegree < 1;
      }
      function _isLeafNotDirected(inDegree, outDegree) {
        return inDegree <= 1 && outDegree <= 1;
      }
      function _isLeaf(nodeId, linksMatrix, directed) {
        var _computeNodeDegree = computeNodeDegree(nodeId, linksMatrix), inDegree = _computeNodeDegree.inDegree, outDegree = _computeNodeDegree.outDegree, fn = directed ? _isLeafDirected : _isLeafNotDirected;
        return fn(inDegree, outDegree);
      }
      function computeNodeDegree(nodeId) {
        var linksMatrix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return Object.keys(linksMatrix).reduce(function(acc, source3) {
          if (!linksMatrix[source3])
            return acc;
          var currentNodeConnections = Object.keys(linksMatrix[source3]);
          return currentNodeConnections.reduce(function(_acc, target3) {
            return nodeId === source3 && (_acc.outDegree += linksMatrix[nodeId][target3]), nodeId === target3 && (_acc.inDegree += linksMatrix[source3][nodeId]), _acc;
          }, acc);
        }, {
          inDegree: 0,
          outDegree: 0
        });
      }
      function getTargetLeafConnections(rootNodeId) {
        var linksMatrix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref = arguments.length > 2 ? arguments[2] : void 0, directed = _ref.directed, rootConnectionsNodesIds = linksMatrix[rootNodeId] ? Object.keys(linksMatrix[rootNodeId]) : [];
        return rootConnectionsNodesIds.reduce(function(leafConnections, target3) {
          return _isLeaf(target3, linksMatrix, directed) && leafConnections.push({
            source: rootNodeId,
            target: target3
          }), leafConnections;
        }, []);
      }
      function isNodeVisible(nodeId, nodes3, linksMatrix) {
        var node = nodes3[nodeId];
        if (!node)
          return (0, _utils.logError)("graph/collapse.helper", "Trying to check if node ".concat(nodeId, " is visible but its not present in nodes: "), nodes3), !1;
        if (nodes3[nodeId]._orphan)
          return !0;
        var _computeNodeDegree2 = computeNodeDegree(nodeId, linksMatrix), inDegree = _computeNodeDegree2.inDegree, outDegree = _computeNodeDegree2.outDegree;
        return inDegree > 0 || outDegree > 0;
      }
      function toggleLinksConnections(d3Links, connectionMatrix) {
        return d3Links.map(function(d3Link) {
          var source3 = d3Link.source, target3 = d3Link.target, sourceId = (0, _graph.getId)(source3), targetId = (0, _graph.getId)(target3), connection = connectionMatrix && connectionMatrix[sourceId] && connectionMatrix[sourceId][targetId], isHidden = !connection;
          return _objectSpread(_objectSpread({}, d3Link), {}, {
            isHidden
          });
        });
      }
      function toggleLinksMatrixConnections(linksMatrix, connections, _ref2) {
        var directed = _ref2.directed;
        return connections.reduce(function(newMatrix, link2) {
          newMatrix[link2.source] || (newMatrix[link2.source] = {}), newMatrix[link2.source][link2.target] || (newMatrix[link2.source][link2.target] = 0);
          var newConnectionValue = newMatrix[link2.source][link2.target] === 0 ? 1 : 0;
          return newMatrix[link2.source][link2.target] = newConnectionValue, directed || (newMatrix[link2.target][link2.source] = newConnectionValue), newMatrix;
        }, _objectSpread({}, linksMatrix));
      }
    }
  });

  // ../react-d3-graph/lib/components/graph/selection.helper.js
  var require_selection_helper = __commonJS({
    "../react-d3-graph/lib/components/graph/selection.helper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.Selection = void 0;
      var _graph = require_graph_helper(), _utils = require_utils();
      function _defineProperties(target3, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target3, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", { writable: !1 }), Constructor;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      var Selection3 = /* @__PURE__ */ _createClass(function Selection4() {
        var _this = this;
        _classCallCheck(this, Selection4), _defineProperty(this, "nodes", void 0), _defineProperty(this, "links", void 0), _defineProperty(this, "linkIsSelected", function(linkId) {
          return _this.links.has(linkId);
        }), _defineProperty(this, "nodeIsSelected", function(nodeId) {
          return _this.nodes.has(nodeId);
        }), _defineProperty(this, "addLinks", function(linkIds) {
          linkIds.forEach(function(id7) {
            return _this.links.add(id7);
          });
        }), _defineProperty(this, "addLink", function(linkId) {
          _this.addLinks([linkId]);
        }), _defineProperty(this, "addNodes", function(nodeIds) {
          nodeIds.forEach(function(id7) {
            return _this.nodes.add(id7);
          });
        }), _defineProperty(this, "addNode", function(nodeId) {
          _this.addNodes([nodeId]);
        }), _defineProperty(this, "removeLink", function(linkId) {
          _this.links.delete(linkId);
        }), _defineProperty(this, "removeNode", function(nodeId) {
          _this.nodes.delete(nodeId);
        }), _defineProperty(this, "clear", function() {
          _this.nodes.clear(), _this.links.clear();
        }), _defineProperty(this, "freeze", function() {
          return {
            nodes: Array.from(_this.nodes),
            links: Array.from(_this.links)
          };
        }), this.nodes = new Set(), this.links = new Set();
      });
      exports.Selection = Selection3;
    }
  });

  // ../react-d3-graph/lib/components/marker/marker.const.js
  var require_marker_const = __commonJS({
    "../react-d3-graph/lib/components/marker/marker.const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.SIZES = exports.MARKER_SMALL_SIZE = exports.MARKER_MEDIUM_OFFSET = exports.MARKER_LARGE_OFFSET = exports.MARKERS = exports.HIGHLIGHTED = void 0;
      var HIGHLIGHTED = "H";
      exports.HIGHLIGHTED = HIGHLIGHTED;
      var MARKER_SMALL_SIZE = 16;
      exports.MARKER_SMALL_SIZE = MARKER_SMALL_SIZE;
      var MARKER_MEDIUM_OFFSET = 2;
      exports.MARKER_MEDIUM_OFFSET = MARKER_MEDIUM_OFFSET;
      var MARKER_LARGE_OFFSET = 4;
      exports.MARKER_LARGE_OFFSET = MARKER_LARGE_OFFSET;
      var MARKERS = {
        MARKER_S: "marker-small",
        MARKER_SH: "marker-small-highlighted",
        MARKER_M: "marker-medium",
        MARKER_MH: "marker-medium-highlighted",
        MARKER_L: "marker-large",
        MARKER_LH: "marker-large-highlighted"
      };
      exports.MARKERS = MARKERS;
      var SIZES = {
        S: "S",
        M: "M",
        L: "L"
      };
      exports.SIZES = SIZES;
    }
  });

  // ../react-d3-graph/lib/components/link/Link.js
  var require_Link = __commonJS({
    "../react-d3-graph/lib/components/link/Link.js"(exports) {
      "use strict";
      function _typeof(obj) {
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _react = _interopRequireDefault(require_react2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _extends() {
        return _extends = Object.assign || function(target3) {
          for (var i = 1; i < arguments.length; i++) {
            var source3 = arguments[i];
            for (var key in source3)
              Object.prototype.hasOwnProperty.call(source3, key) && (target3[key] = source3[key]);
          }
          return target3;
        }, _extends.apply(this, arguments);
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(target3, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target3, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", { writable: !1 }), Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass != "function" && superClass !== null)
          throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: !0, configurable: !0 } }), Object.defineProperty(subClass, "prototype", { writable: !1 }), superClass && _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        return _setPrototypeOf = Object.setPrototypeOf || function(o2, p2) {
          return o2.__proto__ = p2, o2;
        }, _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else
            result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call == "function"))
          return call;
        if (call !== void 0)
          throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(self2);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham)
          return !1;
        if (typeof Proxy == "function")
          return !0;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          })), !0;
        } catch {
          return !1;
        }
      }
      function _getPrototypeOf(o) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        }, _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      var Link = /* @__PURE__ */ function(_React$Component) {
        _inherits(Link2, _React$Component);
        var _super = _createSuper(Link2);
        function Link2() {
          var _this;
          _classCallCheck(this, Link2);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
            args[_key] = arguments[_key];
          return _this = _super.call.apply(_super, [this].concat(args)), _defineProperty(_assertThisInitialized(_this), "handleOnClickLink", function(event) {
            return _this.props.onClickLink && _this.props.onClickLink(event, _this.props);
          }), _defineProperty(_assertThisInitialized(_this), "handleOnRightClickLink", function(event) {
            return _this.props.onRightClickLink && _this.props.onRightClickLink(event, _this.props.source, _this.props.target);
          }), _defineProperty(_assertThisInitialized(_this), "handleOnMouseOverLink", function(event) {
            return _this.props.onMouseOverLink && _this.props.onMouseOverLink(event, _this.props.source, _this.props.target);
          }), _defineProperty(_assertThisInitialized(_this), "handleOnMouseOutLink", function(event) {
            return _this.props.onMouseOutLink && _this.props.onMouseOutLink(event, _this.props.source, _this.props.target);
          }), _this;
        }
        return _createClass(Link2, [{
          key: "render",
          value: function() {
            var lineStyle = {
              strokeWidth: this.props.strokeWidth,
              stroke: this.props.stroke,
              opacity: this.props.opacity,
              fill: "none",
              cursor: this.props.mouseCursor,
              strokeDasharray: this.props.strokeDasharray,
              strokeDashoffset: this.props.strokeDasharray,
              strokeLinecap: this.props.strokeLinecap
            }, lineProps = {
              className: this.props.className,
              d: this.props.d,
              onClick: this.handleOnClickLink,
              onContextMenu: this.handleOnRightClickLink,
              onMouseOut: this.handleOnMouseOutLink,
              onMouseOver: this.handleOnMouseOverLink,
              style: lineStyle
            };
            this.props.markerId && (lineProps.markerEnd = "url(#".concat(this.props.markerId, ")"));
            var _this$props = this.props, label = _this$props.label, id7 = _this$props.id, textProps = {
              dy: -1,
              style: {
                fill: this.props.fontColor,
                fontSize: this.props.fontSize,
                fontWeight: this.props.fontWeight
              }
            };
            return /* @__PURE__ */ _react.default.createElement("g", null, /* @__PURE__ */ _react.default.createElement("path", _extends({}, lineProps, {
              id: id7
            })), label && /* @__PURE__ */ _react.default.createElement("text", _extends({
              style: {
                textAnchor: "middle"
              }
            }, textProps), /* @__PURE__ */ _react.default.createElement("textPath", {
              href: "#".concat(id7),
              startOffset: "50%"
            }, label)));
          }
        }]), Link2;
      }(_react.default.Component);
      exports.default = Link;
    }
  });

  // ../react-d3-graph/node_modules/d3-path/src/path.js
  function Path() {
    this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = "";
  }
  function path() {
    return new Path();
  }
  var pi, tau, epsilon, tauEpsilon, path_default, init_path = __esm({
    "../react-d3-graph/node_modules/d3-path/src/path.js"() {
      pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
      Path.prototype = path.prototype = {
        constructor: Path,
        moveTo: function(x5, y5) {
          this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y5);
        },
        closePath: function() {
          this._x1 !== null && (this._x1 = this._x0, this._y1 = this._y0, this._ += "Z");
        },
        lineTo: function(x5, y5) {
          this._ += "L" + (this._x1 = +x5) + "," + (this._y1 = +y5);
        },
        quadraticCurveTo: function(x1, y1, x5, y5) {
          this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x5) + "," + (this._y1 = +y5);
        },
        bezierCurveTo: function(x1, y1, x22, y22, x5, y5) {
          this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x5) + "," + (this._y1 = +y5);
        },
        arcTo: function(x1, y1, x22, y22, r) {
          x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r = +r;
          var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
          if (r < 0)
            throw new Error("negative radius: " + r);
          if (this._x1 === null)
            this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
          else if (l01_2 > epsilon)
            if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r)
              this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
            else {
              var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
              Math.abs(t01 - 1) > epsilon && (this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01)), this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
            }
        },
        arc: function(x5, y5, r, a0, a1, ccw) {
          x5 = +x5, y5 = +y5, r = +r, ccw = !!ccw;
          var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x5 + dx, y0 = y5 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
          if (r < 0)
            throw new Error("negative radius: " + r);
          this._x1 === null ? this._ += "M" + x0 + "," + y0 : (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) && (this._ += "L" + x0 + "," + y0), !!r && (da < 0 && (da = da % tau + tau), da > tauEpsilon ? this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x5 - dx) + "," + (y5 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0) : da > epsilon && (this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x5 + r * Math.cos(a1)) + "," + (this._y1 = y5 + r * Math.sin(a1))));
        },
        rect: function(x5, y5, w, h) {
          this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y5) + "h" + +w + "v" + +h + "h" + -w + "Z";
        },
        toString: function() {
          return this._;
        }
      };
      path_default = path;
    }
  });

  // ../react-d3-graph/node_modules/d3-path/src/index.js
  var init_src12 = __esm({
    "../react-d3-graph/node_modules/d3-path/src/index.js"() {
      init_path();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/constant.js
  function constant_default6(x5) {
    return function() {
      return x5;
    };
  }
  var init_constant6 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/constant.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/math.js
  function acos(x5) {
    return x5 > 1 ? 0 : x5 < -1 ? pi2 : Math.acos(x5);
  }
  function asin(x5) {
    return x5 >= 1 ? halfPi : x5 <= -1 ? -halfPi : Math.asin(x5);
  }
  var abs, atan2, cos, max2, min2, sin, sqrt, epsilon3, pi2, halfPi, tau2, init_math = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/math.js"() {
      abs = Math.abs, atan2 = Math.atan2, cos = Math.cos, max2 = Math.max, min2 = Math.min, sin = Math.sin, sqrt = Math.sqrt, epsilon3 = 1e-12, pi2 = Math.PI, halfPi = pi2 / 2, tau2 = 2 * pi2;
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/arc.js
  function arcInnerRadius(d) {
    return d.innerRadius;
  }
  function arcOuterRadius(d) {
    return d.outerRadius;
  }
  function arcStartAngle(d) {
    return d.startAngle;
  }
  function arcEndAngle(d) {
    return d.endAngle;
  }
  function arcPadAngle(d) {
    return d && d.padAngle;
  }
  function intersect3(x0, y0, x1, y1, x22, y22, x32, y32) {
    var x10 = x1 - x0, y10 = y1 - y0, x322 = x32 - x22, y322 = y32 - y22, t = y322 * x10 - x322 * y10;
    if (!(t * t < epsilon3))
      return t = (x322 * (y0 - y22) - y322 * (x0 - x22)) / t, [x0 + t * x10, y0 + t * y10];
  }
  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt(max2(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
    return dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1 && (cx0 = cx1, cy0 = cy1), {
      cx: cx0,
      cy: cy0,
      x01: -ox,
      y01: -oy,
      x11: cx0 * (r1 / r - 1),
      y11: cy0 * (r1 / r - 1)
    };
  }
  function arc_default() {
    var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default6(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
    function arc() {
      var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
      if (context || (context = buffer = path_default()), r1 < r0 && (r = r1, r1 = r0, r0 = r), !(r1 > epsilon3))
        context.moveTo(0, 0);
      else if (da > tau2 - epsilon3)
        context.moveTo(r1 * cos(a0), r1 * sin(a0)), context.arc(0, 0, r1, a0, a1, !cw), r0 > epsilon3 && (context.moveTo(r0 * cos(a1), r0 * sin(a1)), context.arc(0, 0, r0, a1, a0, cw));
      else {
        var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon3 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min2(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
        if (rp > epsilon3) {
          var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
          (da0 -= p0 * 2) > epsilon3 ? (p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0) : (da0 = 0, a00 = a10 = (a0 + a1) / 2), (da1 -= p1 * 2) > epsilon3 ? (p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1) : (da1 = 0, a01 = a11 = (a0 + a1) / 2);
        }
        var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
        if (rc > epsilon3) {
          var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
          if (da < pi2 && (oc = intersect3(x01, y01, x00, y00, x11, y11, x10, y10))) {
            var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min2(rc, (r0 - lc) / (kc - 1)), rc1 = min2(rc, (r1 - lc) / (kc + 1));
          }
        }
        da1 > epsilon3 ? rc1 > epsilon3 ? (t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw), t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw), context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01), rc1 < rc ? context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw) : (context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw), context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw), context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw))) : (context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw)) : context.moveTo(x01, y01), !(r0 > epsilon3) || !(da0 > epsilon3) ? context.lineTo(x10, y10) : rc0 > epsilon3 ? (t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw), t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw), context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01), rc0 < rc ? context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw) : (context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw), context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw), context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw))) : context.arc(0, 0, r0, a10, a00, cw);
      }
      if (context.closePath(), buffer)
        return context = null, buffer + "" || null;
    }
    return arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a3 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
      return [cos(a3) * r, sin(a3) * r];
    }, arc.innerRadius = function(_) {
      return arguments.length ? (innerRadius = typeof _ == "function" ? _ : constant_default6(+_), arc) : innerRadius;
    }, arc.outerRadius = function(_) {
      return arguments.length ? (outerRadius = typeof _ == "function" ? _ : constant_default6(+_), arc) : outerRadius;
    }, arc.cornerRadius = function(_) {
      return arguments.length ? (cornerRadius = typeof _ == "function" ? _ : constant_default6(+_), arc) : cornerRadius;
    }, arc.padRadius = function(_) {
      return arguments.length ? (padRadius = _ == null ? null : typeof _ == "function" ? _ : constant_default6(+_), arc) : padRadius;
    }, arc.startAngle = function(_) {
      return arguments.length ? (startAngle = typeof _ == "function" ? _ : constant_default6(+_), arc) : startAngle;
    }, arc.endAngle = function(_) {
      return arguments.length ? (endAngle = typeof _ == "function" ? _ : constant_default6(+_), arc) : endAngle;
    }, arc.padAngle = function(_) {
      return arguments.length ? (padAngle = typeof _ == "function" ? _ : constant_default6(+_), arc) : padAngle;
    }, arc.context = function(_) {
      return arguments.length ? (context = _ ?? null, arc) : context;
    }, arc;
  }
  var init_arc = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/arc.js"() {
      init_src12();
      init_constant6();
      init_math();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/array.js
  function array_default(x5) {
    return typeof x5 == "object" && "length" in x5 ? x5 : Array.from(x5);
  }
  var slice2, init_array2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/array.js"() {
      slice2 = Array.prototype.slice;
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/linear.js
  function Linear(context) {
    this._context = context;
  }
  function linear_default(context) {
    return new Linear(context);
  }
  var init_linear = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/linear.js"() {
      Linear.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._point = 0;
        },
        lineEnd: function() {
          (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0:
              this._point = 1, this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
            default:
              this._context.lineTo(x5, y5);
              break;
          }
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/point.js
  function x4(p) {
    return p[0];
  }
  function y4(p) {
    return p[1];
  }
  var init_point = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/point.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/line.js
  function line_default(x5, y5) {
    var defined = constant_default6(!0), context = null, curve = linear_default, output = null;
    x5 = typeof x5 == "function" ? x5 : x5 === void 0 ? x4 : constant_default6(x5), y5 = typeof y5 == "function" ? y5 : y5 === void 0 ? y4 : constant_default6(y5);
    function line(data4) {
      var i, n = (data4 = array_default(data4)).length, d, defined0 = !1, buffer;
      for (context == null && (output = curve(buffer = path_default())), i = 0; i <= n; ++i)
        !(i < n && defined(d = data4[i], i, data4)) === defined0 && ((defined0 = !defined0) ? output.lineStart() : output.lineEnd()), defined0 && output.point(+x5(d, i, data4), +y5(d, i, data4));
      if (buffer)
        return output = null, buffer + "" || null;
    }
    return line.x = function(_) {
      return arguments.length ? (x5 = typeof _ == "function" ? _ : constant_default6(+_), line) : x5;
    }, line.y = function(_) {
      return arguments.length ? (y5 = typeof _ == "function" ? _ : constant_default6(+_), line) : y5;
    }, line.defined = function(_) {
      return arguments.length ? (defined = typeof _ == "function" ? _ : constant_default6(!!_), line) : defined;
    }, line.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    }, line.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    }, line;
  }
  var init_line = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/line.js"() {
      init_src12();
      init_array2();
      init_constant6();
      init_linear();
      init_point();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/area.js
  function area_default(x0, y0, y1) {
    var x1 = null, defined = constant_default6(!0), context = null, curve = linear_default, output = null;
    x0 = typeof x0 == "function" ? x0 : x0 === void 0 ? x4 : constant_default6(+x0), y0 = typeof y0 == "function" ? y0 : y0 === void 0 ? constant_default6(0) : constant_default6(+y0), y1 = typeof y1 == "function" ? y1 : y1 === void 0 ? y4 : constant_default6(+y1);
    function area(data4) {
      var i, j, k2, n = (data4 = array_default(data4)).length, d, defined0 = !1, buffer, x0z = new Array(n), y0z = new Array(n);
      for (context == null && (output = curve(buffer = path_default())), i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data4[i], i, data4)) === defined0)
          if (defined0 = !defined0)
            j = i, output.areaStart(), output.lineStart();
          else {
            for (output.lineEnd(), output.lineStart(), k2 = i - 1; k2 >= j; --k2)
              output.point(x0z[k2], y0z[k2]);
            output.lineEnd(), output.areaEnd();
          }
        defined0 && (x0z[i] = +x0(d, i, data4), y0z[i] = +y0(d, i, data4), output.point(x1 ? +x1(d, i, data4) : x0z[i], y1 ? +y1(d, i, data4) : y0z[i]));
      }
      if (buffer)
        return output = null, buffer + "" || null;
    }
    function arealine() {
      return line_default().defined(defined).curve(curve).context(context);
    }
    return area.x = function(_) {
      return arguments.length ? (x0 = typeof _ == "function" ? _ : constant_default6(+_), x1 = null, area) : x0;
    }, area.x0 = function(_) {
      return arguments.length ? (x0 = typeof _ == "function" ? _ : constant_default6(+_), area) : x0;
    }, area.x1 = function(_) {
      return arguments.length ? (x1 = _ == null ? null : typeof _ == "function" ? _ : constant_default6(+_), area) : x1;
    }, area.y = function(_) {
      return arguments.length ? (y0 = typeof _ == "function" ? _ : constant_default6(+_), y1 = null, area) : y0;
    }, area.y0 = function(_) {
      return arguments.length ? (y0 = typeof _ == "function" ? _ : constant_default6(+_), area) : y0;
    }, area.y1 = function(_) {
      return arguments.length ? (y1 = _ == null ? null : typeof _ == "function" ? _ : constant_default6(+_), area) : y1;
    }, area.lineX0 = area.lineY0 = function() {
      return arealine().x(x0).y(y0);
    }, area.lineY1 = function() {
      return arealine().x(x0).y(y1);
    }, area.lineX1 = function() {
      return arealine().x(x1).y(y0);
    }, area.defined = function(_) {
      return arguments.length ? (defined = typeof _ == "function" ? _ : constant_default6(!!_), area) : defined;
    }, area.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    }, area.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    }, area;
  }
  var init_area = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/area.js"() {
      init_src12();
      init_array2();
      init_constant6();
      init_linear();
      init_line();
      init_point();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/descending.js
  function descending_default(a3, b) {
    return b < a3 ? -1 : b > a3 ? 1 : b >= a3 ? 0 : NaN;
  }
  var init_descending = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/descending.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/identity.js
  function identity_default(d) {
    return d;
  }
  var init_identity = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/identity.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/pie.js
  function pie_default() {
    var value = identity_default, sortValues = descending_default, sort2 = null, startAngle = constant_default6(0), endAngle = constant_default6(tau2), padAngle = constant_default6(0);
    function pie(data4) {
      var i, n = (data4 = array_default(data4)).length, j, k2, sum2 = 0, index2 = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
      for (i = 0; i < n; ++i)
        (v = arcs[index2[i] = i] = +value(data4[i], i, data4)) > 0 && (sum2 += v);
      for (sortValues != null ? index2.sort(function(i2, j2) {
        return sortValues(arcs[i2], arcs[j2]);
      }) : sort2 != null && index2.sort(function(i2, j2) {
        return sort2(data4[i2], data4[j2]);
      }), i = 0, k2 = sum2 ? (da - n * pa) / sum2 : 0; i < n; ++i, a0 = a1)
        j = index2[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k2 : 0) + pa, arcs[j] = {
          data: data4[j],
          index: i,
          value: v,
          startAngle: a0,
          endAngle: a1,
          padAngle: p
        };
      return arcs;
    }
    return pie.value = function(_) {
      return arguments.length ? (value = typeof _ == "function" ? _ : constant_default6(+_), pie) : value;
    }, pie.sortValues = function(_) {
      return arguments.length ? (sortValues = _, sort2 = null, pie) : sortValues;
    }, pie.sort = function(_) {
      return arguments.length ? (sort2 = _, sortValues = null, pie) : sort2;
    }, pie.startAngle = function(_) {
      return arguments.length ? (startAngle = typeof _ == "function" ? _ : constant_default6(+_), pie) : startAngle;
    }, pie.endAngle = function(_) {
      return arguments.length ? (endAngle = typeof _ == "function" ? _ : constant_default6(+_), pie) : endAngle;
    }, pie.padAngle = function(_) {
      return arguments.length ? (padAngle = typeof _ == "function" ? _ : constant_default6(+_), pie) : padAngle;
    }, pie;
  }
  var init_pie = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/pie.js"() {
      init_array2();
      init_constant6();
      init_descending();
      init_identity();
      init_math();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/radial.js
  function Radial(curve) {
    this._curve = curve;
  }
  function curveRadial(curve) {
    function radial(context) {
      return new Radial(curve(context));
    }
    return radial._curve = curve, radial;
  }
  var curveRadialLinear, init_radial2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/radial.js"() {
      init_linear();
      curveRadialLinear = curveRadial(linear_default);
      Radial.prototype = {
        areaStart: function() {
          this._curve.areaStart();
        },
        areaEnd: function() {
          this._curve.areaEnd();
        },
        lineStart: function() {
          this._curve.lineStart();
        },
        lineEnd: function() {
          this._curve.lineEnd();
        },
        point: function(a3, r) {
          this._curve.point(r * Math.sin(a3), r * -Math.cos(a3));
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/lineRadial.js
  function lineRadial(l) {
    var c3 = l.curve;
    return l.angle = l.x, delete l.x, l.radius = l.y, delete l.y, l.curve = function(_) {
      return arguments.length ? c3(curveRadial(_)) : c3()._curve;
    }, l;
  }
  function lineRadial_default() {
    return lineRadial(line_default().curve(curveRadialLinear));
  }
  var init_lineRadial = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/lineRadial.js"() {
      init_radial2();
      init_line();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/areaRadial.js
  function areaRadial_default() {
    var a3 = area_default().curve(curveRadialLinear), c3 = a3.curve, x0 = a3.lineX0, x1 = a3.lineX1, y0 = a3.lineY0, y1 = a3.lineY1;
    return a3.angle = a3.x, delete a3.x, a3.startAngle = a3.x0, delete a3.x0, a3.endAngle = a3.x1, delete a3.x1, a3.radius = a3.y, delete a3.y, a3.innerRadius = a3.y0, delete a3.y0, a3.outerRadius = a3.y1, delete a3.y1, a3.lineStartAngle = function() {
      return lineRadial(x0());
    }, delete a3.lineX0, a3.lineEndAngle = function() {
      return lineRadial(x1());
    }, delete a3.lineX1, a3.lineInnerRadius = function() {
      return lineRadial(y0());
    }, delete a3.lineY0, a3.lineOuterRadius = function() {
      return lineRadial(y1());
    }, delete a3.lineY1, a3.curve = function(_) {
      return arguments.length ? c3(curveRadial(_)) : c3()._curve;
    }, a3;
  }
  var init_areaRadial = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/areaRadial.js"() {
      init_radial2();
      init_area();
      init_lineRadial();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/pointRadial.js
  function pointRadial_default(x5, y5) {
    return [(y5 = +y5) * Math.cos(x5 -= Math.PI / 2), y5 * Math.sin(x5)];
  }
  var init_pointRadial = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/pointRadial.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/bump.js
  function bumpX(context) {
    return new Bump(context, !0);
  }
  function bumpY(context) {
    return new Bump(context, !1);
  }
  function bumpRadial(context) {
    return new BumpRadial(context);
  }
  var Bump, BumpRadial, init_bump = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/bump.js"() {
      init_pointRadial();
      Bump = class {
        constructor(context, x5) {
          this._context = context, this._x = x5;
        }
        areaStart() {
          this._line = 0;
        }
        areaEnd() {
          this._line = NaN;
        }
        lineStart() {
          this._point = 0;
        }
        lineEnd() {
          (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
        }
        point(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0: {
              this._point = 1, this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            }
            case 1:
              this._point = 2;
            default: {
              this._x ? this._context.bezierCurveTo(this._x0 = (this._x0 + x5) / 2, this._y0, this._x0, y5, x5, y5) : this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y5) / 2, x5, this._y0, x5, y5);
              break;
            }
          }
          this._x0 = x5, this._y0 = y5;
        }
      }, BumpRadial = class {
        constructor(context) {
          this._context = context;
        }
        lineStart() {
          this._point = 0;
        }
        lineEnd() {
        }
        point(x5, y5) {
          if (x5 = +x5, y5 = +y5, this._point++ == 0)
            this._x0 = x5, this._y0 = y5;
          else {
            let p0 = pointRadial_default(this._x0, this._y0), p1 = pointRadial_default(this._x0, this._y0 = (this._y0 + y5) / 2), p2 = pointRadial_default(x5, this._y0), p3 = pointRadial_default(x5, y5);
            this._context.moveTo(...p0), this._context.bezierCurveTo(...p1, ...p2, ...p3);
          }
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/link.js
  function linkSource(d) {
    return d.source;
  }
  function linkTarget(d) {
    return d.target;
  }
  function link(curve) {
    let source3 = linkSource, target3 = linkTarget, x5 = x4, y5 = y4, context = null, output = null;
    function link2() {
      let buffer, argv = slice2.call(arguments), s2 = source3.apply(this, argv), t = target3.apply(this, argv);
      if (context == null && (output = curve(buffer = path_default())), output.lineStart(), argv[0] = s2, output.point(+x5.apply(this, argv), +y5.apply(this, argv)), argv[0] = t, output.point(+x5.apply(this, argv), +y5.apply(this, argv)), output.lineEnd(), buffer)
        return output = null, buffer + "" || null;
    }
    return link2.source = function(_) {
      return arguments.length ? (source3 = _, link2) : source3;
    }, link2.target = function(_) {
      return arguments.length ? (target3 = _, link2) : target3;
    }, link2.x = function(_) {
      return arguments.length ? (x5 = typeof _ == "function" ? _ : constant_default6(+_), link2) : x5;
    }, link2.y = function(_) {
      return arguments.length ? (y5 = typeof _ == "function" ? _ : constant_default6(+_), link2) : y5;
    }, link2.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link2) : context;
    }, link2;
  }
  function linkHorizontal() {
    return link(bumpX);
  }
  function linkVertical() {
    return link(bumpY);
  }
  function linkRadial() {
    let l = link(bumpRadial);
    return l.angle = l.x, delete l.x, l.radius = l.y, delete l.y, l;
  }
  var init_link2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/link.js"() {
      init_src12();
      init_array2();
      init_constant6();
      init_bump();
      init_point();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/asterisk.js
  var sqrt3, asterisk_default, init_asterisk = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/asterisk.js"() {
      init_math();
      sqrt3 = sqrt(3), asterisk_default = {
        draw(context, size7) {
          let r = sqrt(size7 + min2(size7 / 28, 0.75)) * 0.59436, t = r / 2, u = t * sqrt3;
          context.moveTo(0, r), context.lineTo(0, -r), context.moveTo(-u, -t), context.lineTo(u, t), context.moveTo(-u, t), context.lineTo(u, -t);
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/circle.js
  var circle_default, init_circle = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/circle.js"() {
      init_math();
      circle_default = {
        draw(context, size7) {
          let r = sqrt(size7 / pi2);
          context.moveTo(r, 0), context.arc(0, 0, r, 0, tau2);
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/cross.js
  var cross_default, init_cross = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/cross.js"() {
      init_math();
      cross_default = {
        draw(context, size7) {
          let r = sqrt(size7 / 5) / 2;
          context.moveTo(-3 * r, -r), context.lineTo(-r, -r), context.lineTo(-r, -3 * r), context.lineTo(r, -3 * r), context.lineTo(r, -r), context.lineTo(3 * r, -r), context.lineTo(3 * r, r), context.lineTo(r, r), context.lineTo(r, 3 * r), context.lineTo(-r, 3 * r), context.lineTo(-r, r), context.lineTo(-3 * r, r), context.closePath();
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/diamond.js
  var tan30, tan30_2, diamond_default, init_diamond = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/diamond.js"() {
      init_math();
      tan30 = sqrt(1 / 3), tan30_2 = tan30 * 2, diamond_default = {
        draw(context, size7) {
          let y5 = sqrt(size7 / tan30_2), x5 = y5 * tan30;
          context.moveTo(0, -y5), context.lineTo(x5, 0), context.lineTo(0, y5), context.lineTo(-x5, 0), context.closePath();
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/diamond2.js
  var diamond2_default, init_diamond2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/diamond2.js"() {
      init_math();
      diamond2_default = {
        draw(context, size7) {
          let r = sqrt(size7) * 0.62625;
          context.moveTo(0, -r), context.lineTo(r, 0), context.lineTo(0, r), context.lineTo(-r, 0), context.closePath();
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/plus.js
  var plus_default, init_plus = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/plus.js"() {
      init_math();
      plus_default = {
        draw(context, size7) {
          let r = sqrt(size7 - min2(size7 / 7, 2)) * 0.87559;
          context.moveTo(-r, 0), context.lineTo(r, 0), context.moveTo(0, r), context.lineTo(0, -r);
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/square.js
  var square_default, init_square = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/square.js"() {
      init_math();
      square_default = {
        draw(context, size7) {
          let w = sqrt(size7), x5 = -w / 2;
          context.rect(x5, x5, w, w);
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/square2.js
  var square2_default, init_square2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/square2.js"() {
      init_math();
      square2_default = {
        draw(context, size7) {
          let r = sqrt(size7) * 0.4431;
          context.moveTo(r, r), context.lineTo(r, -r), context.lineTo(-r, -r), context.lineTo(-r, r), context.closePath();
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/star.js
  var ka, kr, kx, ky, star_default, init_star = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/star.js"() {
      init_math();
      ka = 0.8908130915292852, kr = sin(pi2 / 10) / sin(7 * pi2 / 10), kx = sin(tau2 / 10) * kr, ky = -cos(tau2 / 10) * kr, star_default = {
        draw(context, size7) {
          let r = sqrt(size7 * ka), x5 = kx * r, y5 = ky * r;
          context.moveTo(0, -r), context.lineTo(x5, y5);
          for (let i = 1; i < 5; ++i) {
            let a3 = tau2 * i / 5, c3 = cos(a3), s2 = sin(a3);
            context.lineTo(s2 * r, -c3 * r), context.lineTo(c3 * x5 - s2 * y5, s2 * x5 + c3 * y5);
          }
          context.closePath();
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/triangle.js
  var sqrt32, triangle_default, init_triangle = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/triangle.js"() {
      init_math();
      sqrt32 = sqrt(3), triangle_default = {
        draw(context, size7) {
          let y5 = -sqrt(size7 / (sqrt32 * 3));
          context.moveTo(0, y5 * 2), context.lineTo(-sqrt32 * y5, -y5), context.lineTo(sqrt32 * y5, -y5), context.closePath();
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/triangle2.js
  var sqrt33, triangle2_default, init_triangle2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/triangle2.js"() {
      init_math();
      sqrt33 = sqrt(3), triangle2_default = {
        draw(context, size7) {
          let s2 = sqrt(size7) * 0.6824, t = s2 / 2, u = s2 * sqrt33 / 2;
          context.moveTo(0, -s2), context.lineTo(u, t), context.lineTo(-u, t), context.closePath();
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/wye.js
  var c2, s, k, a2, wye_default, init_wye = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/wye.js"() {
      init_math();
      c2 = -0.5, s = sqrt(3) / 2, k = 1 / sqrt(12), a2 = (k / 2 + 1) * 3, wye_default = {
        draw(context, size7) {
          let r = sqrt(size7 / a2), x0 = r / 2, y0 = r * k, x1 = x0, y1 = r * k + r, x22 = -x1, y22 = y1;
          context.moveTo(x0, y0), context.lineTo(x1, y1), context.lineTo(x22, y22), context.lineTo(c2 * x0 - s * y0, s * x0 + c2 * y0), context.lineTo(c2 * x1 - s * y1, s * x1 + c2 * y1), context.lineTo(c2 * x22 - s * y22, s * x22 + c2 * y22), context.lineTo(c2 * x0 + s * y0, c2 * y0 - s * x0), context.lineTo(c2 * x1 + s * y1, c2 * y1 - s * x1), context.lineTo(c2 * x22 + s * y22, c2 * y22 - s * x22), context.closePath();
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol/x.js
  var x_default3, init_x3 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/x.js"() {
      init_math();
      x_default3 = {
        draw(context, size7) {
          let r = sqrt(size7 - min2(size7 / 6, 1.7)) * 0.6189;
          context.moveTo(-r, -r), context.lineTo(r, r), context.moveTo(-r, r), context.lineTo(r, -r);
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/symbol.js
  function Symbol2(type, size7) {
    let context = null;
    type = typeof type == "function" ? type : constant_default6(type || circle_default), size7 = typeof size7 == "function" ? size7 : constant_default6(size7 === void 0 ? 64 : +size7);
    function symbol() {
      let buffer;
      if (context || (context = buffer = path_default()), type.apply(this, arguments).draw(context, +size7.apply(this, arguments)), buffer)
        return context = null, buffer + "" || null;
    }
    return symbol.type = function(_) {
      return arguments.length ? (type = typeof _ == "function" ? _ : constant_default6(_), symbol) : type;
    }, symbol.size = function(_) {
      return arguments.length ? (size7 = typeof _ == "function" ? _ : constant_default6(+_), symbol) : size7;
    }, symbol.context = function(_) {
      return arguments.length ? (context = _ ?? null, symbol) : context;
    }, symbol;
  }
  var symbolsFill, symbolsStroke, init_symbol = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol.js"() {
      init_src12();
      init_constant6();
      init_asterisk();
      init_circle();
      init_cross();
      init_diamond();
      init_diamond2();
      init_plus();
      init_square();
      init_square2();
      init_star();
      init_triangle();
      init_triangle2();
      init_wye();
      init_x3();
      symbolsFill = [
        circle_default,
        cross_default,
        diamond_default,
        square_default,
        star_default,
        triangle_default,
        wye_default
      ], symbolsStroke = [
        circle_default,
        plus_default,
        x_default3,
        triangle2_default,
        asterisk_default,
        square2_default,
        diamond2_default
      ];
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/noop.js
  function noop_default() {
  }
  var init_noop = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/noop.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/basis.js
  function point(that, x5, y5) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x5) / 6, (that._y0 + 4 * that._y1 + y5) / 6);
  }
  function Basis(context) {
    this._context = context;
  }
  function basis_default2(context) {
    return new Basis(context);
  }
  var init_basis2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/basis.js"() {
      Basis.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 3:
              point(this, this._x1, this._y1);
            case 2:
              this._context.lineTo(this._x1, this._y1);
              break;
          }
          (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0:
              this._point = 1, this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3, this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
            default:
              point(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = x5, this._y0 = this._y1, this._y1 = y5;
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/basisClosed.js
  function BasisClosed(context) {
    this._context = context;
  }
  function basisClosed_default2(context) {
    return new BasisClosed(context);
  }
  var init_basisClosed2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/basisClosed.js"() {
      init_noop();
      init_basis2();
      BasisClosed.prototype = {
        areaStart: noop_default,
        areaEnd: noop_default,
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN, this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 1: {
              this._context.moveTo(this._x2, this._y2), this._context.closePath();
              break;
            }
            case 2: {
              this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3), this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3), this._context.closePath();
              break;
            }
            case 3: {
              this.point(this._x2, this._y2), this.point(this._x3, this._y3), this.point(this._x4, this._y4);
              break;
            }
          }
        },
        point: function(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0:
              this._point = 1, this._x2 = x5, this._y2 = y5;
              break;
            case 1:
              this._point = 2, this._x3 = x5, this._y3 = y5;
              break;
            case 2:
              this._point = 3, this._x4 = x5, this._y4 = y5, this._context.moveTo((this._x0 + 4 * this._x1 + x5) / 6, (this._y0 + 4 * this._y1 + y5) / 6);
              break;
            default:
              point(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = x5, this._y0 = this._y1, this._y1 = y5;
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/basisOpen.js
  function BasisOpen(context) {
    this._context = context;
  }
  function basisOpen_default(context) {
    return new BasisOpen(context);
  }
  var init_basisOpen = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/basisOpen.js"() {
      init_basis2();
      BasisOpen.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;
        },
        lineEnd: function() {
          (this._line || this._line !== 0 && this._point === 3) && this._context.closePath(), this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0:
              this._point = 1;
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3;
              var x0 = (this._x0 + 4 * this._x1 + x5) / 6, y0 = (this._y0 + 4 * this._y1 + y5) / 6;
              this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
              break;
            case 3:
              this._point = 4;
            default:
              point(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = x5, this._y0 = this._y1, this._y1 = y5;
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/bundle.js
  function Bundle(context, beta) {
    this._basis = new Basis(context), this._beta = beta;
  }
  var bundle_default, init_bundle = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/bundle.js"() {
      init_basis2();
      Bundle.prototype = {
        lineStart: function() {
          this._x = [], this._y = [], this._basis.lineStart();
        },
        lineEnd: function() {
          var x5 = this._x, y5 = this._y, j = x5.length - 1;
          if (j > 0)
            for (var x0 = x5[0], y0 = y5[0], dx = x5[j] - x0, dy = y5[j] - y0, i = -1, t; ++i <= j; )
              t = i / j, this._basis.point(this._beta * x5[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y5[i] + (1 - this._beta) * (y0 + t * dy));
          this._x = this._y = null, this._basis.lineEnd();
        },
        point: function(x5, y5) {
          this._x.push(+x5), this._y.push(+y5);
        }
      };
      bundle_default = function custom(beta) {
        function bundle(context) {
          return beta === 1 ? new Basis(context) : new Bundle(context, beta);
        }
        return bundle.beta = function(beta2) {
          return custom(+beta2);
        }, bundle;
      }(0.85);
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/cardinal.js
  function point2(that, x5, y5) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x5), that._y2 + that._k * (that._y1 - y5), that._x2, that._y2);
  }
  function Cardinal(context, tension) {
    this._context = context, this._k = (1 - tension) / 6;
  }
  var cardinal_default, init_cardinal = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/cardinal.js"() {
      Cardinal.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 2:
              this._context.lineTo(this._x2, this._y2);
              break;
            case 3:
              point2(this, this._x1, this._y1);
              break;
          }
          (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0:
              this._point = 1, this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2, this._x1 = x5, this._y1 = y5;
              break;
            case 2:
              this._point = 3;
            default:
              point2(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5, this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      cardinal_default = function custom2(tension) {
        function cardinal(context) {
          return new Cardinal(context, tension);
        }
        return cardinal.tension = function(tension2) {
          return custom2(+tension2);
        }, cardinal;
      }(0);
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/cardinalClosed.js
  function CardinalClosed(context, tension) {
    this._context = context, this._k = (1 - tension) / 6;
  }
  var cardinalClosed_default, init_cardinalClosed = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/cardinalClosed.js"() {
      init_noop();
      init_cardinal();
      CardinalClosed.prototype = {
        areaStart: noop_default,
        areaEnd: noop_default,
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 1: {
              this._context.moveTo(this._x3, this._y3), this._context.closePath();
              break;
            }
            case 2: {
              this._context.lineTo(this._x3, this._y3), this._context.closePath();
              break;
            }
            case 3: {
              this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);
              break;
            }
          }
        },
        point: function(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0:
              this._point = 1, this._x3 = x5, this._y3 = y5;
              break;
            case 1:
              this._point = 2, this._context.moveTo(this._x4 = x5, this._y4 = y5);
              break;
            case 2:
              this._point = 3, this._x5 = x5, this._y5 = y5;
              break;
            default:
              point2(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5, this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      cardinalClosed_default = function custom3(tension) {
        function cardinal(context) {
          return new CardinalClosed(context, tension);
        }
        return cardinal.tension = function(tension2) {
          return custom3(+tension2);
        }, cardinal;
      }(0);
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/cardinalOpen.js
  function CardinalOpen(context, tension) {
    this._context = context, this._k = (1 - tension) / 6;
  }
  var cardinalOpen_default, init_cardinalOpen = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/cardinalOpen.js"() {
      init_cardinal();
      CardinalOpen.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;
        },
        lineEnd: function() {
          (this._line || this._line !== 0 && this._point === 3) && this._context.closePath(), this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0:
              this._point = 1;
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
              break;
            case 3:
              this._point = 4;
            default:
              point2(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5, this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      cardinalOpen_default = function custom4(tension) {
        function cardinal(context) {
          return new CardinalOpen(context, tension);
        }
        return cardinal.tension = function(tension2) {
          return custom4(+tension2);
        }, cardinal;
      }(0);
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/catmullRom.js
  function point3(that, x5, y5) {
    var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
    if (that._l01_a > epsilon3) {
      var a3 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
      x1 = (x1 * a3 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n, y1 = (y1 * a3 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > epsilon3) {
      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m2 = 3 * that._l23_a * (that._l23_a + that._l12_a);
      x22 = (x22 * b + that._x1 * that._l23_2a - x5 * that._l12_2a) / m2, y22 = (y22 * b + that._y1 * that._l23_2a - y5 * that._l12_2a) / m2;
    }
    that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
  }
  function CatmullRom(context, alpha) {
    this._context = context, this._alpha = alpha;
  }
  var catmullRom_default, init_catmullRom = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/catmullRom.js"() {
      init_math();
      init_cardinal();
      CatmullRom.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 2:
              this._context.lineTo(this._x2, this._y2);
              break;
            case 3:
              this.point(this._x2, this._y2);
              break;
          }
          (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          if (x5 = +x5, y5 = +y5, this._point) {
            var x23 = this._x2 - x5, y23 = this._y2 - y5;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
          }
          switch (this._point) {
            case 0:
              this._point = 1, this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3;
            default:
              point3(this, x5, y5);
              break;
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5, this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      catmullRom_default = function custom5(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
        }
        return catmullRom.alpha = function(alpha2) {
          return custom5(+alpha2);
        }, catmullRom;
      }(0.5);
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/catmullRomClosed.js
  function CatmullRomClosed(context, alpha) {
    this._context = context, this._alpha = alpha;
  }
  var catmullRomClosed_default, init_catmullRomClosed = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/catmullRomClosed.js"() {
      init_cardinalClosed();
      init_noop();
      init_catmullRom();
      CatmullRomClosed.prototype = {
        areaStart: noop_default,
        areaEnd: noop_default,
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 1: {
              this._context.moveTo(this._x3, this._y3), this._context.closePath();
              break;
            }
            case 2: {
              this._context.lineTo(this._x3, this._y3), this._context.closePath();
              break;
            }
            case 3: {
              this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);
              break;
            }
          }
        },
        point: function(x5, y5) {
          if (x5 = +x5, y5 = +y5, this._point) {
            var x23 = this._x2 - x5, y23 = this._y2 - y5;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
          }
          switch (this._point) {
            case 0:
              this._point = 1, this._x3 = x5, this._y3 = y5;
              break;
            case 1:
              this._point = 2, this._context.moveTo(this._x4 = x5, this._y4 = y5);
              break;
            case 2:
              this._point = 3, this._x5 = x5, this._y5 = y5;
              break;
            default:
              point3(this, x5, y5);
              break;
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5, this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      catmullRomClosed_default = function custom6(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
        }
        return catmullRom.alpha = function(alpha2) {
          return custom6(+alpha2);
        }, catmullRom;
      }(0.5);
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/catmullRomOpen.js
  function CatmullRomOpen(context, alpha) {
    this._context = context, this._alpha = alpha;
  }
  var catmullRomOpen_default, init_catmullRomOpen = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/catmullRomOpen.js"() {
      init_cardinalOpen();
      init_catmullRom();
      CatmullRomOpen.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
          (this._line || this._line !== 0 && this._point === 3) && this._context.closePath(), this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          if (x5 = +x5, y5 = +y5, this._point) {
            var x23 = this._x2 - x5, y23 = this._y2 - y5;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
          }
          switch (this._point) {
            case 0:
              this._point = 1;
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
              break;
            case 3:
              this._point = 4;
            default:
              point3(this, x5, y5);
              break;
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5, this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      catmullRomOpen_default = function custom7(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
        }
        return catmullRom.alpha = function(alpha2) {
          return custom7(+alpha2);
        }, catmullRom;
      }(0.5);
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/linearClosed.js
  function LinearClosed(context) {
    this._context = context;
  }
  function linearClosed_default(context) {
    return new LinearClosed(context);
  }
  var init_linearClosed = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/linearClosed.js"() {
      init_noop();
      LinearClosed.prototype = {
        areaStart: noop_default,
        areaEnd: noop_default,
        lineStart: function() {
          this._point = 0;
        },
        lineEnd: function() {
          this._point && this._context.closePath();
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5, this._point ? this._context.lineTo(x5, y5) : (this._point = 1, this._context.moveTo(x5, y5));
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/monotone.js
  function sign(x5) {
    return x5 < 0 ? -1 : 1;
  }
  function slope3(that, x22, y22) {
    var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  }
  function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  }
  function point4(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
  }
  function MonotoneX(context) {
    this._context = context;
  }
  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }
  function ReflectContext(context) {
    this._context = context;
  }
  function monotoneX(context) {
    return new MonotoneX(context);
  }
  function monotoneY(context) {
    return new MonotoneY(context);
  }
  var init_monotone = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/monotone.js"() {
      MonotoneX.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN, this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 2:
              this._context.lineTo(this._x1, this._y1);
              break;
            case 3:
              point4(this, this._t0, slope2(this, this._t0));
              break;
          }
          (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          var t1 = NaN;
          if (x5 = +x5, y5 = +y5, !(x5 === this._x1 && y5 === this._y1)) {
            switch (this._point) {
              case 0:
                this._point = 1, this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
                break;
              case 1:
                this._point = 2;
                break;
              case 2:
                this._point = 3, point4(this, slope2(this, t1 = slope3(this, x5, y5)), t1);
                break;
              default:
                point4(this, this._t0, t1 = slope3(this, x5, y5));
                break;
            }
            this._x0 = this._x1, this._x1 = x5, this._y0 = this._y1, this._y1 = y5, this._t0 = t1;
          }
        }
      };
      (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x5, y5) {
        MonotoneX.prototype.point.call(this, y5, x5);
      };
      ReflectContext.prototype = {
        moveTo: function(x5, y5) {
          this._context.moveTo(y5, x5);
        },
        closePath: function() {
          this._context.closePath();
        },
        lineTo: function(x5, y5) {
          this._context.lineTo(y5, x5);
        },
        bezierCurveTo: function(x1, y1, x22, y22, x5, y5) {
          this._context.bezierCurveTo(y1, x1, y22, x22, y5, x5);
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/natural.js
  function Natural(context) {
    this._context = context;
  }
  function controlPoints(x5) {
    var i, n = x5.length - 1, m2, a3 = new Array(n), b = new Array(n), r = new Array(n);
    for (a3[0] = 0, b[0] = 2, r[0] = x5[0] + 2 * x5[1], i = 1; i < n - 1; ++i)
      a3[i] = 1, b[i] = 4, r[i] = 4 * x5[i] + 2 * x5[i + 1];
    for (a3[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x5[n - 1] + x5[n], i = 1; i < n; ++i)
      m2 = a3[i] / b[i - 1], b[i] -= m2, r[i] -= m2 * r[i - 1];
    for (a3[n - 1] = r[n - 1] / b[n - 1], i = n - 2; i >= 0; --i)
      a3[i] = (r[i] - a3[i + 1]) / b[i];
    for (b[n - 1] = (x5[n] + a3[n - 1]) / 2, i = 0; i < n - 1; ++i)
      b[i] = 2 * x5[i + 1] - a3[i + 1];
    return [a3, b];
  }
  function natural_default(context) {
    return new Natural(context);
  }
  var init_natural = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/natural.js"() {
      Natural.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x = [], this._y = [];
        },
        lineEnd: function() {
          var x5 = this._x, y5 = this._y, n = x5.length;
          if (n)
            if (this._line ? this._context.lineTo(x5[0], y5[0]) : this._context.moveTo(x5[0], y5[0]), n === 2)
              this._context.lineTo(x5[1], y5[1]);
            else
              for (var px = controlPoints(x5), py = controlPoints(y5), i0 = 0, i1 = 1; i1 < n; ++i0, ++i1)
                this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x5[i1], y5[i1]);
          (this._line || this._line !== 0 && n === 1) && this._context.closePath(), this._line = 1 - this._line, this._x = this._y = null;
        },
        point: function(x5, y5) {
          this._x.push(+x5), this._y.push(+y5);
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/curve/step.js
  function Step(context, t) {
    this._context = context, this._t = t;
  }
  function step_default(context) {
    return new Step(context, 0.5);
  }
  function stepBefore(context) {
    return new Step(context, 0);
  }
  function stepAfter(context) {
    return new Step(context, 1);
  }
  var init_step = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/step.js"() {
      Step.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x = this._y = NaN, this._point = 0;
        },
        lineEnd: function() {
          0 < this._t && this._t < 1 && this._point === 2 && this._context.lineTo(this._x, this._y), (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line >= 0 && (this._t = 1 - this._t, this._line = 1 - this._line);
        },
        point: function(x5, y5) {
          switch (x5 = +x5, y5 = +y5, this._point) {
            case 0:
              this._point = 1, this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
            default: {
              if (this._t <= 0)
                this._context.lineTo(this._x, y5), this._context.lineTo(x5, y5);
              else {
                var x1 = this._x * (1 - this._t) + x5 * this._t;
                this._context.lineTo(x1, this._y), this._context.lineTo(x1, y5);
              }
              break;
            }
          }
          this._x = x5, this._y = y5;
        }
      };
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/offset/none.js
  function none_default(series, order) {
    if ((n = series.length) > 1)
      for (var i = 1, j, s0, s1 = series[order[0]], n, m2 = s1.length; i < n; ++i)
        for (s0 = s1, s1 = series[order[i]], j = 0; j < m2; ++j)
          s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
  }
  var init_none = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/none.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/order/none.js
  function none_default2(series) {
    for (var n = series.length, o = new Array(n); --n >= 0; )
      o[n] = n;
    return o;
  }
  var init_none2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/none.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/stack.js
  function stackValue(d, key) {
    return d[key];
  }
  function stackSeries(key) {
    let series = [];
    return series.key = key, series;
  }
  function stack_default() {
    var keys = constant_default6([]), order = none_default2, offset = none_default, value = stackValue;
    function stack(data4) {
      var sz = Array.from(keys.apply(this, arguments), stackSeries), i, n = sz.length, j = -1, oz;
      for (let d of data4)
        for (i = 0, ++j; i < n; ++i)
          (sz[i][j] = [0, +value(d, sz[i].key, j, data4)]).data = d;
      for (i = 0, oz = array_default(order(sz)); i < n; ++i)
        sz[oz[i]].index = i;
      return offset(sz, oz), sz;
    }
    return stack.keys = function(_) {
      return arguments.length ? (keys = typeof _ == "function" ? _ : constant_default6(Array.from(_)), stack) : keys;
    }, stack.value = function(_) {
      return arguments.length ? (value = typeof _ == "function" ? _ : constant_default6(+_), stack) : value;
    }, stack.order = function(_) {
      return arguments.length ? (order = _ == null ? none_default2 : typeof _ == "function" ? _ : constant_default6(Array.from(_)), stack) : order;
    }, stack.offset = function(_) {
      return arguments.length ? (offset = _ ?? none_default, stack) : offset;
    }, stack;
  }
  var init_stack = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/stack.js"() {
      init_array2();
      init_constant6();
      init_none();
      init_none2();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/offset/expand.js
  function expand_default(series, order) {
    if ((n = series.length) > 0) {
      for (var i, n, j = 0, m2 = series[0].length, y5; j < m2; ++j) {
        for (y5 = i = 0; i < n; ++i)
          y5 += series[i][j][1] || 0;
        if (y5)
          for (i = 0; i < n; ++i)
            series[i][j][1] /= y5;
      }
      none_default(series, order);
    }
  }
  var init_expand = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/expand.js"() {
      init_none();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/offset/diverging.js
  function diverging_default(series, order) {
    if ((n = series.length) > 0)
      for (var i, j = 0, d, dy, yp, yn, n, m2 = series[order[0]].length; j < m2; ++j)
        for (yp = yn = 0, i = 0; i < n; ++i)
          (dy = (d = series[order[i]][j])[1] - d[0]) > 0 ? (d[0] = yp, d[1] = yp += dy) : dy < 0 ? (d[1] = yn, d[0] = yn += dy) : (d[0] = 0, d[1] = dy);
  }
  var init_diverging = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/diverging.js"() {
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/offset/silhouette.js
  function silhouette_default(series, order) {
    if ((n = series.length) > 0) {
      for (var j = 0, s0 = series[order[0]], n, m2 = s0.length; j < m2; ++j) {
        for (var i = 0, y5 = 0; i < n; ++i)
          y5 += series[i][j][1] || 0;
        s0[j][1] += s0[j][0] = -y5 / 2;
      }
      none_default(series, order);
    }
  }
  var init_silhouette = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/silhouette.js"() {
      init_none();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/offset/wiggle.js
  function wiggle_default(series, order) {
    if (!(!((n = series.length) > 0) || !((m2 = (s0 = series[order[0]]).length) > 0))) {
      for (var y5 = 0, j = 1, s0, m2, n; j < m2; ++j) {
        for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
          for (var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2, k2 = 0; k2 < i; ++k2) {
            var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
            s3 += skj0 - skj1;
          }
          s1 += sij0, s2 += s3 * sij0;
        }
        s0[j - 1][1] += s0[j - 1][0] = y5, s1 && (y5 -= s2 / s1);
      }
      s0[j - 1][1] += s0[j - 1][0] = y5, none_default(series, order);
    }
  }
  var init_wiggle = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/wiggle.js"() {
      init_none();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/order/appearance.js
  function appearance_default(series) {
    var peaks = series.map(peak);
    return none_default2(series).sort(function(a3, b) {
      return peaks[a3] - peaks[b];
    });
  }
  function peak(series) {
    for (var i = -1, j = 0, n = series.length, vi, vj = -1 / 0; ++i < n; )
      (vi = +series[i][1]) > vj && (vj = vi, j = i);
    return j;
  }
  var init_appearance = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/appearance.js"() {
      init_none2();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/order/ascending.js
  function ascending_default(series) {
    var sums = series.map(sum);
    return none_default2(series).sort(function(a3, b) {
      return sums[a3] - sums[b];
    });
  }
  function sum(series) {
    for (var s2 = 0, i = -1, n = series.length, v; ++i < n; )
      (v = +series[i][1]) && (s2 += v);
    return s2;
  }
  var init_ascending = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/ascending.js"() {
      init_none2();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/order/descending.js
  function descending_default2(series) {
    return ascending_default(series).reverse();
  }
  var init_descending2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/descending.js"() {
      init_ascending();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/order/insideOut.js
  function insideOut_default(series) {
    var n = series.length, i, j, sums = series.map(sum), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
    for (i = 0; i < n; ++i)
      j = order[i], top < bottom ? (top += sums[j], tops.push(j)) : (bottom += sums[j], bottoms.push(j));
    return bottoms.reverse().concat(tops);
  }
  var init_insideOut = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/insideOut.js"() {
      init_appearance();
      init_ascending();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/order/reverse.js
  function reverse_default(series) {
    return none_default2(series).reverse();
  }
  var init_reverse = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/reverse.js"() {
      init_none2();
    }
  });

  // ../react-d3-graph/node_modules/d3-shape/src/index.js
  var src_exports5 = {};
  __export(src_exports5, {
    arc: () => arc_default,
    area: () => area_default,
    areaRadial: () => areaRadial_default,
    curveBasis: () => basis_default2,
    curveBasisClosed: () => basisClosed_default2,
    curveBasisOpen: () => basisOpen_default,
    curveBumpX: () => bumpX,
    curveBumpY: () => bumpY,
    curveBundle: () => bundle_default,
    curveCardinal: () => cardinal_default,
    curveCardinalClosed: () => cardinalClosed_default,
    curveCardinalOpen: () => cardinalOpen_default,
    curveCatmullRom: () => catmullRom_default,
    curveCatmullRomClosed: () => catmullRomClosed_default,
    curveCatmullRomOpen: () => catmullRomOpen_default,
    curveLinear: () => linear_default,
    curveLinearClosed: () => linearClosed_default,
    curveMonotoneX: () => monotoneX,
    curveMonotoneY: () => monotoneY,
    curveNatural: () => natural_default,
    curveStep: () => step_default,
    curveStepAfter: () => stepAfter,
    curveStepBefore: () => stepBefore,
    line: () => line_default,
    lineRadial: () => lineRadial_default,
    link: () => link,
    linkHorizontal: () => linkHorizontal,
    linkRadial: () => linkRadial,
    linkVertical: () => linkVertical,
    pie: () => pie_default,
    pointRadial: () => pointRadial_default,
    radialArea: () => areaRadial_default,
    radialLine: () => lineRadial_default,
    stack: () => stack_default,
    stackOffsetDiverging: () => diverging_default,
    stackOffsetExpand: () => expand_default,
    stackOffsetNone: () => none_default,
    stackOffsetSilhouette: () => silhouette_default,
    stackOffsetWiggle: () => wiggle_default,
    stackOrderAppearance: () => appearance_default,
    stackOrderAscending: () => ascending_default,
    stackOrderDescending: () => descending_default2,
    stackOrderInsideOut: () => insideOut_default,
    stackOrderNone: () => none_default2,
    stackOrderReverse: () => reverse_default,
    symbol: () => Symbol2,
    symbolAsterisk: () => asterisk_default,
    symbolCircle: () => circle_default,
    symbolCross: () => cross_default,
    symbolDiamond: () => diamond_default,
    symbolDiamond2: () => diamond2_default,
    symbolPlus: () => plus_default,
    symbolSquare: () => square_default,
    symbolSquare2: () => square2_default,
    symbolStar: () => star_default,
    symbolTriangle: () => triangle_default,
    symbolTriangle2: () => triangle2_default,
    symbolWye: () => wye_default,
    symbolX: () => x_default3,
    symbols: () => symbolsFill,
    symbolsFill: () => symbolsFill,
    symbolsStroke: () => symbolsStroke
  });
  var init_src13 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/index.js"() {
      init_arc();
      init_area();
      init_line();
      init_pie();
      init_areaRadial();
      init_lineRadial();
      init_pointRadial();
      init_link2();
      init_symbol();
      init_asterisk();
      init_circle();
      init_cross();
      init_diamond();
      init_diamond2();
      init_plus();
      init_square();
      init_square2();
      init_star();
      init_triangle();
      init_triangle2();
      init_wye();
      init_x3();
      init_basisClosed2();
      init_basisOpen();
      init_basis2();
      init_bump();
      init_bundle();
      init_cardinalClosed();
      init_cardinalOpen();
      init_cardinal();
      init_catmullRomClosed();
      init_catmullRomOpen();
      init_catmullRom();
      init_linearClosed();
      init_linear();
      init_monotone();
      init_natural();
      init_step();
      init_stack();
      init_expand();
      init_diverging();
      init_none();
      init_silhouette();
      init_wiggle();
      init_appearance();
      init_ascending();
      init_descending2();
      init_insideOut();
      init_none2();
      init_reverse();
    }
  });

  // ../react-d3-graph/lib/components/node/node.const.js
  var require_node_const = __commonJS({
    "../react-d3-graph/lib/components/node/node.const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _graph = _interopRequireDefault(require_graph_config()), _const = _interopRequireDefault(require_const());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target3) {
        for (var i = 1; i < arguments.length; i++) {
          var source3 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source3), !0).forEach(function(key) {
            _defineProperty(target3, key, source3[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target3, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key) {
            Object.defineProperty(target3, key, Object.getOwnPropertyDescriptor(source3, key));
          });
        }
        return target3;
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      var _default = _objectSpread({
        ARC: {
          START_ANGLE: 0,
          END_ANGLE: 2 * Math.PI
        },
        DEFAULT_NODE_SIZE: _graph.default.node.size,
        NODE_LABEL_DX: ".90em",
        NODE_LABEL_DY: ".35em"
      }, _const.default);
      exports.default = _default;
    }
  });

  // ../react-d3-graph/lib/components/node/node.helper.js
  var require_node_helper = __commonJS({
    "../react-d3-graph/lib/components/node/node.helper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _d3Shape = (init_src13(), src_exports5), _node = _interopRequireDefault(require_node_const());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _convertTypeToD3Symbol(typeName) {
        switch (typeName) {
          case _node.default.SYMBOLS.CIRCLE:
            return _d3Shape.symbolCircle;
          case _node.default.SYMBOLS.CROSS:
            return _d3Shape.symbolCross;
          case _node.default.SYMBOLS.DIAMOND:
            return _d3Shape.symbolDiamond;
          case _node.default.SYMBOLS.SQUARE:
            return _d3Shape.symbolSquare;
          case _node.default.SYMBOLS.STAR:
            return _d3Shape.symbolStar;
          case _node.default.SYMBOLS.TRIANGLE:
            return _d3Shape.symbolTriangle;
          case _node.default.SYMBOLS.WYE:
            return _d3Shape.symbolWye;
          default:
            return _d3Shape.symbolCircle;
        }
      }
      function buildSvgSymbol() {
        var size7 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _node.default.DEFAULT_NODE_SIZE, symbolTypeDesc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _node.default.SYMBOLS.CIRCLE;
        return (0, _d3Shape.symbol)().size(function() {
          return size7;
        }).type(function() {
          return _convertTypeToD3Symbol(symbolTypeDesc);
        })();
      }
      function getLabelPlacementProps(dx, labelPosition) {
        switch (labelPosition) {
          case "right":
            return {
              dx: dx ? "".concat(dx) : _node.default.NODE_LABEL_DX,
              dy: "0",
              dominantBaseline: "middle",
              textAnchor: "start"
            };
          case "left":
            return {
              dx: dx ? "".concat(-dx) : "-".concat(_node.default.NODE_LABEL_DX),
              dy: "0",
              dominantBaseline: "middle",
              textAnchor: "end"
            };
          case "top":
            return {
              dx: "0",
              dy: dx ? "".concat(-dx) : "-".concat(_node.default.NODE_LABEL_DX),
              dominantBaseline: "baseline",
              textAnchor: "middle"
            };
          case "bottom":
            return {
              dx: "0",
              dy: dx ? "".concat(dx) : _node.default.NODE_LABEL_DX,
              dominantBaseline: "hanging",
              textAnchor: "middle"
            };
          case "center":
            return {
              dx: "0",
              dy: "0",
              dominantBaseline: "middle",
              textAnchor: "middle"
            };
          default:
            return {
              dx: dx ? "".concat(dx) : _node.default.NODE_LABEL_DX,
              dy: _node.default.NODE_LABEL_DY
            };
        }
      }
      var _default = {
        buildSvgSymbol,
        getLabelPlacementProps
      };
      exports.default = _default;
    }
  });

  // ../react-d3-graph/lib/components/node/Node.js
  var require_Node = __commonJS({
    "../react-d3-graph/lib/components/node/Node.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _react = _interopRequireDefault(require_react2()), _node = _interopRequireDefault(require_node_helper()), _node2 = _interopRequireDefault(require_node_const()), _utils = require_utils();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _extends() {
        return _extends = Object.assign || function(target3) {
          for (var i = 1; i < arguments.length; i++) {
            var source3 = arguments[i];
            for (var key in source3)
              Object.prototype.hasOwnProperty.call(source3, key) && (target3[key] = source3[key]);
          }
          return target3;
        }, _extends.apply(this, arguments);
      }
      function _typeof(obj) {
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target3) {
        for (var i = 1; i < arguments.length; i++) {
          var source3 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source3), !0).forEach(function(key) {
            _defineProperty(target3, key, source3[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target3, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key) {
            Object.defineProperty(target3, key, Object.getOwnPropertyDescriptor(source3, key));
          });
        }
        return target3;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(target3, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target3, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", { writable: !1 }), Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass != "function" && superClass !== null)
          throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: !0, configurable: !0 } }), Object.defineProperty(subClass, "prototype", { writable: !1 }), superClass && _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        return _setPrototypeOf = Object.setPrototypeOf || function(o2, p2) {
          return o2.__proto__ = p2, o2;
        }, _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else
            result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call == "function"))
          return call;
        if (call !== void 0)
          throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(self2);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham)
          return !1;
        if (typeof Proxy == "function")
          return !0;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          })), !0;
        } catch {
          return !1;
        }
      }
      function _getPrototypeOf(o) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        }, _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      var Node = /* @__PURE__ */ function(_React$Component) {
        _inherits(Node2, _React$Component);
        var _super = _createSuper(Node2);
        function Node2() {
          var _this;
          _classCallCheck(this, Node2);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
            args[_key] = arguments[_key];
          return _this = _super.call.apply(_super, [this].concat(args)), _defineProperty(_assertThisInitialized(_this), "handleOnClickNode", function(event) {
            return _this.props.onClickNode && _this.props.onClickNode(event, _this.props.id);
          }), _defineProperty(_assertThisInitialized(_this), "handleOnRightClickNode", function(event) {
            return _this.props.onRightClickNode && _this.props.onRightClickNode(event, _this.props.id);
          }), _defineProperty(_assertThisInitialized(_this), "handleOnMouseOverNode", function(event) {
            return _this.props.onMouseOverNode && _this.props.onMouseOverNode(event, _this.props.id);
          }), _defineProperty(_assertThisInitialized(_this), "handleOnMouseOutNode", function(event) {
            return _this.props.onMouseOut && _this.props.onMouseOut(event, _this.props.id);
          }), _this;
        }
        return _createClass(Node2, [{
          key: "render",
          value: function() {
            var nodeProps = {
              cursor: this.props.cursor,
              onClick: this.handleOnClickNode,
              onContextMenu: this.handleOnRightClickNode,
              onMouseOut: this.handleOnMouseOutNode,
              onMouseOver: this.handleOnMouseOverNode,
              opacity: this.props.opacity
            }, textProps = _objectSpread(_objectSpread({}, _node.default.getLabelPlacementProps(this.props.dx, this.props.labelPosition)), {}, {
              fill: this.props.fontColor,
              fontSize: this.props.fontSize,
              fontWeight: this.props.fontWeight,
              opacity: this.props.opacity
            }, this.props.labelClass && {
              className: this.props.labelClass
            }), size7 = this.props.size, isSizeNumericalValue = _typeof(size7) !== "object", gtx = this.props.cx, gty = this.props.cy, label = null, node = null;
            if (this.props.svg || this.props.viewGenerator) {
              var height = isSizeNumericalValue ? size7 / 10 : size7.height / 10, width = isSizeNumericalValue ? size7 / 10 : size7.width / 10, tx = width / 2, ty = height / 2, transform2 = "translate(".concat(tx, ",").concat(ty, ")");
              label = /* @__PURE__ */ _react.default.createElement("text", _extends({}, textProps, {
                transform: transform2
              }), this.props.label), this.props.viewGenerator && !this.props.overrideGlobalViewGenerator ? node = /* @__PURE__ */ _react.default.createElement("svg", _extends({}, nodeProps, {
                width,
                height
              }), this.props.viewGenerator(this.props)) : node = /* @__PURE__ */ _react.default.createElement("image", _extends({}, nodeProps, {
                href: this.props.svg,
                width,
                height
              })), gtx -= tx, gty -= ty;
            } else
              isSizeNumericalValue || ((0, _utils.logWarning)("node.size should be a number when not using custom nodes."), size7 = _node2.default.DEFAULT_NODE_SIZE), nodeProps.d = _node.default.buildSvgSymbol(size7, this.props.type), nodeProps.fill = this.props.fill, nodeProps.stroke = this.props.stroke, nodeProps.strokeWidth = this.props.strokeWidth, label = /* @__PURE__ */ _react.default.createElement("text", textProps, this.props.label), node = /* @__PURE__ */ _react.default.createElement("path", nodeProps);
            var gProps = {
              className: this.props.className,
              cx: this.props.cx,
              cy: this.props.cy,
              id: this.props.id,
              transform: "translate(".concat(gtx, ",").concat(gty, ")")
            };
            return /* @__PURE__ */ _react.default.createElement("g", gProps, node, this.props.renderLabel && label);
          }
        }]), Node2;
      }(_react.default.Component);
      exports.default = Node;
    }
  });

  // ../react-d3-graph/lib/components/marker/Marker.js
  var require_Marker = __commonJS({
    "../react-d3-graph/lib/components/marker/Marker.js"(exports) {
      "use strict";
      function _typeof(obj) {
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _react = _interopRequireDefault(require_react2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(target3, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target3, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", { writable: !1 }), Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass != "function" && superClass !== null)
          throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: !0, configurable: !0 } }), Object.defineProperty(subClass, "prototype", { writable: !1 }), superClass && _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        return _setPrototypeOf = Object.setPrototypeOf || function(o2, p2) {
          return o2.__proto__ = p2, o2;
        }, _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else
            result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call == "function"))
          return call;
        if (call !== void 0)
          throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(self2);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham)
          return !1;
        if (typeof Proxy == "function")
          return !0;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          })), !0;
        } catch {
          return !1;
        }
      }
      function _getPrototypeOf(o) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        }, _getPrototypeOf(o);
      }
      var Marker = /* @__PURE__ */ function(_React$Component) {
        _inherits(Marker2, _React$Component);
        var _super = _createSuper(Marker2);
        function Marker2() {
          return _classCallCheck(this, Marker2), _super.apply(this, arguments);
        }
        return _createClass(Marker2, [{
          key: "render",
          value: function() {
            return /* @__PURE__ */ _react.default.createElement("marker", {
              className: "marker",
              id: this.props.id,
              viewBox: "0 -5 10 10",
              refX: this.props.refX,
              refY: "0",
              markerWidth: this.props.markerWidth,
              markerHeight: this.props.markerHeight,
              orient: "auto",
              fill: this.props.fill
            }, /* @__PURE__ */ _react.default.createElement("path", {
              d: "M0,-5L10,0L0,5"
            }));
          }
        }]), Marker2;
      }(_react.default.Component);
      exports.default = Marker;
    }
  });

  // ../react-d3-graph/lib/components/link/link.const.js
  var require_link_const = __commonJS({
    "../react-d3-graph/lib/components/link/link.const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.SELF_LINK_DIRECTION = exports.LINE_TYPES = void 0;
      var LINE_TYPES = {
        STRAIGHT: "STRAIGHT",
        CURVE_SMOOTH: "CURVE_SMOOTH",
        CURVE_FULL: "CURVE_FULL",
        CATMULL_ROM: "CATMULL_ROM"
      };
      exports.LINE_TYPES = LINE_TYPES;
      var SELF_LINK_DIRECTION = {
        TOP_LEFT: "TOP_LEFT",
        TOP_RIGHT: "TOP_RIGHT",
        BOTTOM_LEFT: "BOTTOM_LEFT",
        BOTTOM_RIGHT: "BOTTOM_RIGHT"
      };
      exports.SELF_LINK_DIRECTION = SELF_LINK_DIRECTION;
    }
  });

  // ../react-d3-graph/lib/components/link/link.helper.js
  var require_link_helper = __commonJS({
    "../react-d3-graph/lib/components/link/link.helper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.buildLinkPathDefinition = buildLinkPathDefinition;
      var _link = require_link_const(), _RADIUS_STRATEGIES;
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!!o) {
          if (typeof o == "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol != "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++)
          arr2[i] = arr[i];
        return arr2;
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      function straightLineRadius(points) {
        return points.map(function(point5, i) {
          var x5 = point5.x, y5 = point5.y;
          return i == 0 ? "M".concat(x5, ",").concat(y5) : "L".concat(x5, ",").concat(y5);
        }).join(" ");
      }
      function smoothCurveRadius(points) {
        return points.map(function(point5, i) {
          var x5 = point5.x, y5 = point5.y;
          if (i == 0)
            return "M".concat(x5, ",").concat(y5);
          var _points = points[i - 1], x1 = _points.x, y1 = _points.y, dx = x1 - x5, dy = y1 - y5, radius = Math.sqrt(dx * dx + dy * dy);
          return "A".concat(radius, ",").concat(radius, " 0 0,1 ").concat(x5, ",").concat(y5);
        }).join(" ");
      }
      function fullCurveRadius(points) {
        return points.map(function(point5, i) {
          var x5 = point5.x, y5 = point5.y;
          return i == 0 ? "M".concat(x5, ",").concat(y5) : "A1,1 0 0,1 ".concat(x5, ",").concat(y5);
        }).join(" ");
      }
      function smooth3(p0, p1, p2) {
        var length02 = Math.sqrt(Math.pow(p2.x - p0.x, 2) + Math.pow(p2.y - p0.y, 2)), length01 = Math.sqrt(Math.pow(p1.x - p0.x, 2) + Math.pow(p1.y - p0.y, 2)), length12 = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)), d = {
          x: (p2.x - p0.x) / length02,
          y: (p2.y - p0.y) / length02
        }, mid1 = {
          x: (p0.x + p1.x) / 2,
          y: (p0.y + p1.y) / 2
        }, mid2 = {
          x: (p1.x + p2.x) / 2,
          y: (p1.y + p2.y) / 2
        }, n1 = {
          x: (p0.y - p1.y) / length01,
          y: (p1.x - p0.x) / length01
        }, n2 = {
          x: (p1.y - p2.y) / length12,
          y: (p2.x - p1.x) / length12
        }, l1 = {
          x: p1.x - mid1.x,
          y: p1.y - mid1.y
        }, l2 = {
          x: p2.x - mid2.x,
          y: p2.y - mid2.y
        }, s1 = (n1.x * l1.y - n1.y * l1.x) / (d.x * n1.y - d.y * n1.x), s2 = (n2.x * l2.y - n2.y * l2.x) / (d.x * n2.y - d.y * n2.x), q1 = {
          x: p1.x + d.x * s1,
          y: p1.y + d.y * s1
        }, q2 = {
          x: p1.x - d.x * s2,
          y: p1.y - d.y * s2
        };
        return ["M".concat(p0.x, ",").concat(p0.y), "Q".concat(q1.x, ",").concat(q1.y, " ").concat(p1.x, ",").concat(p1.y), "Q".concat(q2.x, ",").concat(q2.y, " ").concat(p2.x, ",").concat(p2.y)].join(" ");
      }
      function catmullRom(points) {
        if (points.length === 2)
          return straightLineRadius(points);
        if (points.length === 3) {
          var p0 = points[0], p1 = points[1], p2 = points[2];
          return smooth3(p0, p1, p2);
        }
        for (var alpha = 0.5, fin = points.length - 1, knots = [0], i = 1; i < fin; i++)
          var _points$i = points[i], x1 = _points$i.x, y1 = _points$i.y, _points2 = points[i + 1], x22 = _points2.x, y22 = _points2.y, length3 = Math.sqrt(Math.pow(x22 - x1, 2) + Math.pow(y22 - y1, 2)), t = Math.pow(length3, alpha) + knots[knots.length - 1];
        return points.map(function(point5, i2) {
          var x5 = point5.x, y5 = point5.y;
          if (i2 == 0)
            return "M".concat(x5, ",").concat(y5);
          if (i2 == 1 || i2 == fin)
            return "T".concat(x5, ",").concat(y5);
          var _p = points[i2 - 2], _p2 = points[i2 - 1], _p3 = point5, p3 = points[i2 + 1], t0 = knots[i2 - 2], t1 = knots[i2 - 1], t2 = knots[i2], t3 = knotss[i2 + 1], c1 = (t2 - t1) / (t2 - t0), c22 = (t1 - t0) / (t2 - t0), d1 = (t3 - t2) / (t3 - t1), d2 = (t2 - t1) / (t3 - t1), m1 = {
            x: (t2 - t1) * (c1 * (_p2.x - _p.x) / (t1 - t0) + c22 * (_p3.x - _p2.x) / (t2 - t1)),
            y: (t2 - t1) * (c1 * (_p2.y - _p.y) / (t1 - t0) + c22 * (_p3.y - _p2.y) / (t2 - t1))
          }, m2 = {
            x: (t2 - t1) * (d1 * (_p3.x - _p2.x) / (t2 - t1) + d2 * (p3.x - _p3.x) / (t3 - t2)),
            y: (t2 - t1) * (d1 * (_p3.y - _p2.y) / (t2 - t1) + d2 * (p3.y - _p3.y) / (t3 - t2))
          }, q1 = {
            x: _p2.x + m1.x / 3,
            y: _p2.y + m1.y / 3
          }, q2 = {
            x: _p3.x - m2.x / 3,
            y: _p3.y - m2.y / 3
          };
          return "C".concat(q1.x, ",").concat(q1.y, " ").concat(q2.x, ",").concat(q2.y, " ").concat(x5).concat(y5);
        }).join(" ");
      }
      var RADIUS_STRATEGIES = (_RADIUS_STRATEGIES = {}, _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.STRAIGHT, straightLineRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CURVE_SMOOTH, smoothCurveRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CURVE_FULL, fullCurveRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CATMULL_ROM, catmullRom), _RADIUS_STRATEGIES);
      function getRadiusStrategy(type) {
        return RADIUS_STRATEGIES[type] || RADIUS_STRATEGIES[_link.LINE_TYPES.STRAIGHT];
      }
      function buildLinkPathDefinition() {
        var sourceCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, targetCoords = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _link.LINE_TYPES.STRAIGHT, breakPoints = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [], sourceId = arguments.length > 4 ? arguments[4] : void 0, targetId = arguments.length > 5 ? arguments[5] : void 0, parallelIdx = arguments.length > 6 ? arguments[6] : void 0, parallelCount = arguments.length > 7 ? arguments[7] : void 0, parallelSpread = arguments.length > 8 ? arguments[8] : void 0, selfLinkDirection = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : _link.SELF_LINK_DIRECTION.TOP_RIGHT, sx = sourceCoords.x, sy = sourceCoords.y, tx = targetCoords.x, ty = targetCoords.y;
        if (sourceId === targetId && sx === tx && sy === ty)
          switch (selfLinkDirection) {
            case _link.SELF_LINK_DIRECTION.TOP_LEFT:
              return "M".concat(sx, ",").concat(sy, " A40,30 45 1,1 ").concat(tx + 1, ",").concat(ty - 1);
            case _link.SELF_LINK_DIRECTION.BOTTOM_LEFT:
              return "M".concat(sx, ",").concat(sy, " A40,30 -45 1,1 ").concat(tx - 1, ",").concat(ty - 1);
            case _link.SELF_LINK_DIRECTION.BOTTOM_RIGHT:
              return "M".concat(sx, ",").concat(sy, " A40,30 45 1,1 ").concat(tx - 1, ",").concat(ty + 1);
            default:
              return "M".concat(sx, ",").concat(sy, " A40,30 -45 1,1 ").concat(tx + 1, ",").concat(ty + 1);
          }
        if (breakPoints.length === 0 && parallelCount > 1) {
          var length3 = Math.sqrt(Math.pow(Math.abs(sx - tx), 2) + Math.pow(Math.abs(sy - ty), 2)), tightestArcDeviation = length3 * parallelSpread * Math.pow(0.85, Math.floor(parallelCount / 2)), deviationSize = (parallelCount % 2 == 0 ? function() {
            var mid = parallelCount / 2;
            return parallelIdx - mid + 0.5;
          }() : function() {
            var mid = (parallelCount - 1) / 2;
            return parallelIdx - mid;
          }()) * tightestArcDeviation;
          if (Math.abs(deviationSize) < 1e-5)
            breakPoints = [];
          else {
            var midPt = {
              x: (sx + tx) / 2,
              y: (sy + ty) / 2
            }, dirVec = {
              x: (sy - ty) / length3,
              y: (tx - sx) / length3
            }, arcPt = {
              x: midPt.x + dirVec.x * deviationSize,
              y: midPt.y + dirVec.y * deviationSize
            };
            breakPoints = [arcPt];
          }
        }
        var validType = _link.LINE_TYPES[type] || _link.LINE_TYPES.STRAIGHT, calcPathFn = getRadiusStrategy(validType), linkPoints = [sourceCoords].concat(_toConsumableArray(breakPoints), [targetCoords]), linkPath = calcPathFn(linkPoints);
        return "".concat(linkPath);
      }
    }
  });

  // ../react-d3-graph/lib/components/marker/marker.helper.js
  var require_marker_helper = __commonJS({
    "../react-d3-graph/lib/components/marker/marker.helper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.getMarkerId = void 0;
      exports.getMarkerSize = getMarkerSize;
      var _marker = require_marker_const(), _graph = _interopRequireDefault(require_graph_const());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _markerKeyBuilder(size7, highlighted) {
        return "MARKER_".concat(size7).concat(highlighted);
      }
      function _getMarkerSize(transform2, mMax, lMax) {
        return transform2 < mMax ? _marker.SIZES.S : transform2 >= mMax && transform2 < lMax ? _marker.SIZES.M : _marker.SIZES.L;
      }
      function _computeMarkerId(highlight, transform2, _ref) {
        var maxZoom = _ref.maxZoom, mMax = maxZoom / 4, lMax = maxZoom / 2, size7 = _getMarkerSize(transform2, mMax, lMax), highlighted = highlight ? _marker.HIGHLIGHTED : "", markerKey = _markerKeyBuilder(size7, highlighted);
        return _marker.MARKERS[markerKey];
      }
      function _memoizedComputeMarkerId() {
        var cache = {};
        return function(highlight, transform2, _ref2) {
          var maxZoom = _ref2.maxZoom, cacheKey = "".concat(highlight, ";").concat(transform2, ";").concat(maxZoom);
          if (cache[cacheKey])
            return cache[cacheKey];
          var markerId = _computeMarkerId(highlight, transform2, {
            maxZoom
          });
          return cache[cacheKey] = markerId, markerId;
        };
      }
      var getMarkerId = _memoizedComputeMarkerId();
      exports.getMarkerId = getMarkerId;
      function getMarkerSize(config2) {
        var small = _marker.MARKER_SMALL_SIZE, medium = small + _marker.MARKER_MEDIUM_OFFSET * config2.maxZoom / 3, large = small + _marker.MARKER_LARGE_OFFSET * config2.maxZoom / 3;
        if (config2.node && !config2.node.viewGenerator)
          switch (config2.node.symbolType) {
            case _graph.default.SYMBOLS.CIRCLE:
              small = 0, medium = 0, large = 0;
              break;
          }
        return {
          small,
          medium,
          large
        };
      }
    }
  });

  // ../react-d3-graph/lib/components/graph/graph.builder.js
  var require_graph_builder = __commonJS({
    "../react-d3-graph/lib/components/graph/graph.builder.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.buildLinkProps = buildLinkProps;
      exports.buildNodeProps = buildNodeProps;
      var _graph = _interopRequireDefault(require_graph_const()), _utils = require_utils(), _link = require_link_helper(), _marker = require_marker_helper(), _graph2 = require_graph_helper();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target3) {
        for (var i = 1; i < arguments.length; i++) {
          var source3 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source3), !0).forEach(function(key) {
            _defineProperty(target3, key, source3[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target3, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key) {
            Object.defineProperty(target3, key, Object.getOwnPropertyDescriptor(source3, key));
          });
        }
        return target3;
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      function _typeof(obj) {
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      function _getNodeOpacity(node, highlightedNode, highlightedLink, config2) {
        var highlight = node.highlighted || node.id === (highlightedLink && highlightedLink.source) || node.id === (highlightedLink && highlightedLink.target), someLinkHighlighted = highlightedLink && highlightedLink.source && highlightedLink.target, someNodeHighlighted = !!(highlightedNode || someLinkHighlighted), opacity;
        return someNodeHighlighted && config2.highlightDegree === 0 || someNodeHighlighted ? opacity = highlight ? config2.node.opacity : config2.highlightOpacity : opacity = node.opacity || config2.node.opacity, opacity;
      }
      function buildLinkProps(link2, nodes3, links2, config2, linkCallbacks, highlightedNode, highlightedLink, transform2, selected2) {
        var _nodes$source, _nodes$source2, _nodes$target, _nodes$target2, source3 = link2.source, target3 = link2.target, offsetSource = link2.offsetSource || config2.link.offsetSource || {
          dx: 0,
          dy: 0
        }, offsetTarget = link2.offsetTarget || config2.link.offsetTarget || {
          dx: 0,
          dy: 0
        }, x1 = ((nodes3 == null || (_nodes$source = nodes3[source3]) === null || _nodes$source === void 0 ? void 0 : _nodes$source.x) || 0) + offsetSource.dx, y1 = ((nodes3 == null || (_nodes$source2 = nodes3[source3]) === null || _nodes$source2 === void 0 ? void 0 : _nodes$source2.y) || 0) + offsetSource.dy, x22 = ((nodes3 == null || (_nodes$target = nodes3[target3]) === null || _nodes$target === void 0 ? void 0 : _nodes$target.x) || 0) + offsetTarget.dx, y22 = ((nodes3 == null || (_nodes$target2 = nodes3[target3]) === null || _nodes$target2 === void 0 ? void 0 : _nodes$target2.y) || 0) + offsetTarget.dy, type = link2.type || config2.link.type, selfLinkDirection = link2.selfLinkDirection || config2.link.selfLinkDirection, parallelSpread = link2.parallelSpread || config2.link.parallelSpread, mainNodeParticipates = !1;
        switch (config2.highlightDegree) {
          case 0:
            break;
          case 2:
            mainNodeParticipates = !0;
            break;
          default:
            mainNodeParticipates = source3 === highlightedNode || target3 === highlightedNode;
            break;
        }
        var guiltyNode = mainNodeParticipates && nodes3[source3].highlighted && nodes3[target3].highlighted, guiltyLink = source3 === (highlightedLink && highlightedLink.source) && target3 === (highlightedLink && highlightedLink.target), highlight = guiltyNode || guiltyLink, opacity = link2.opacity || config2.link.opacity;
        (highlightedNode || highlightedLink && highlightedLink.source) && (opacity = highlight ? config2.link.opacity : config2.highlightOpacity);
        var stroke = link2.color || config2.link.color;
        highlight && (stroke = config2.link.highlightColor === _graph.default.KEYWORDS.SAME ? config2.link.color : config2.link.highlightColor);
        var strokeDasharray = link2.strokeDasharray || config2.link.strokeDasharray, strokeDashoffset = link2.strokeDashoffset || config2.link.strokeDashoffset, strokeLinecap = link2.strokeLinecap || config2.link.strokeLinecap, strokeWidth = (link2.strokeWidth || config2.link.strokeWidth) * (1 / transform2);
        if (config2.link.semanticStrokeWidth) {
          var linkValue = links2[source3][target3] || links2[target3][source3] || 1;
          strokeWidth += linkValue * strokeWidth / 10;
        }
        var markerId = config2.directed ? (0, _marker.getMarkerId)(highlight, transform2, config2) : null, t = 1 / transform2, fontSize = null, fontColor = null, fontWeight = null, label = null;
        config2.link.renderLabel && (typeof config2.link.labelProperty == "function" ? label = config2.link.labelProperty(link2) : label = link2[config2.link.labelProperty], fontSize = link2.fontSize || config2.link.fontSize, fontColor = link2.fontColor || config2.link.fontColor, fontWeight = highlight ? config2.link.highlightFontWeight : config2.link.fontWeight);
        var _getNormalizedNodeCoo = (0, _graph2.getNormalizedNodeCoordinates)({
          sourceId: source3,
          targetId: target3,
          sourceCoords: {
            x: x1,
            y: y1
          },
          targetCoords: {
            x: x22,
            y: y22
          }
        }, nodes3, config2, strokeWidth), sourceCoords = _getNormalizedNodeCoo.sourceCoords, targetCoords = _getNormalizedNodeCoo.targetCoords, d = (0, _link.buildLinkPathDefinition)(sourceCoords, targetCoords, type, link2.breakPoints, link2.source, link2.target, link2.parallelIdx, link2.parallelCount, parallelSpread, selfLinkDirection);
        return {
          className: _graph.default.LINK_CLASS_NAME,
          d,
          fontColor,
          fontSize: fontSize * t,
          fontWeight,
          label,
          markerId,
          mouseCursor: config2.link.mouseCursor,
          opacity,
          selected: selected2,
          source: source3,
          stroke,
          strokeWidth: strokeWidth / t,
          strokeDasharray,
          strokeDashoffset,
          strokeLinecap,
          target: target3,
          onClickLink: linkCallbacks.onClickLink,
          onMouseOutLink: linkCallbacks.onMouseOutLink,
          onMouseOverLink: linkCallbacks.onMouseOverLink,
          onRightClickLink: linkCallbacks.onRightClickLink
        };
      }
      function buildNodeProps(node, config2) {
        var nodeCallbacks = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, highlightedNode = arguments.length > 3 ? arguments[3] : void 0, highlightedLink = arguments.length > 4 ? arguments[4] : void 0, transform2 = arguments.length > 5 ? arguments[5] : void 0, selected2 = arguments.length > 6 ? arguments[6] : void 0, highlight = node.highlighted || node.id === (highlightedLink && highlightedLink.source) || node.id === (highlightedLink && highlightedLink.target), opacity = _getNodeOpacity(node, highlightedNode, highlightedLink, config2), fill2 = node.color || config2.node.color;
        highlight && config2.node.highlightColor !== _graph.default.KEYWORDS.SAME && (fill2 = config2.node.highlightColor);
        var stroke = node.strokeColor || config2.node.strokeColor;
        highlight && config2.node.highlightStrokeColor !== _graph.default.KEYWORDS.SAME && (stroke = config2.node.highlightStrokeColor);
        var label = node[config2.node.labelProperty] || node.id;
        typeof config2.node.labelProperty == "function" && (label = config2.node.labelProperty(node));
        var labelPosition = node.labelPosition || config2.node.labelPosition, strokeWidth = node.strokeWidth || config2.node.strokeWidth;
        highlight && config2.node.highlightStrokeWidth !== _graph.default.KEYWORDS.SAME && (strokeWidth = config2.node.highlightStrokeWidth);
        var t = 1 / transform2, nodeSize = node.size || config2.node.size, isSizeNumericValue = _typeof(nodeSize) !== "object", offset = 0;
        isSizeNumericValue ? offset = nodeSize : labelPosition === "top" || labelPosition === "bottom" ? offset = nodeSize.height : (labelPosition === "right" || labelPosition === "left") && (offset = nodeSize.width);
        var fontSize = node.fontSize || config2.node.fontSize, highlightFontSize = node.highlightFontSize || config2.node.highlightFontSize, finalFontSize = highlight ? highlightFontSize : fontSize, dx = finalFontSize * t + offset / 100 + 1.5, svg = node.svg || config2.node.svg, fontColor = node.fontColor || config2.node.fontColor, renderLabel = config2.node.renderLabel;
        !(0, _utils.isNil)(node.renderLabel) && typeof node.renderLabel == "boolean" && (renderLabel = node.renderLabel);
        var labelClass = config2.node.labelClass;
        return !(0, _utils.isNil)(node.labelClass) && typeof node.labelClass == "string" && (labelClass = node.labelClass), _objectSpread(_objectSpread({}, node), {}, {
          className: _graph.default.NODE_CLASS_NAME,
          cursor: config2.node.mouseCursor,
          cx: (node == null ? void 0 : node.x) || "0",
          cy: (node == null ? void 0 : node.y) || "0",
          dx,
          fill: fill2,
          fontColor,
          fontSize: finalFontSize * t,
          fontWeight: highlight ? config2.node.highlightFontWeight : config2.node.fontWeight,
          id: node.id,
          label,
          labelPosition,
          opacity,
          overrideGlobalViewGenerator: !node.viewGenerator && node.svg,
          renderLabel,
          labelClass,
          selected: selected2,
          size: isSizeNumericValue ? nodeSize * t : {
            height: nodeSize.height,
            width: nodeSize.width
          },
          stroke,
          strokeWidth: strokeWidth * t,
          svg,
          type: node.symbolType || config2.node.symbolType,
          viewGenerator: node.viewGenerator || config2.node.viewGenerator,
          onClickNode: nodeCallbacks.onClickNode,
          onMouseOut: nodeCallbacks.onMouseOut,
          onMouseOverNode: nodeCallbacks.onMouseOverNode,
          onRightClickNode: nodeCallbacks.onRightClickNode
        });
      }
    }
  });

  // ../react-d3-graph/lib/components/graph/graph.renderer.js
  var require_graph_renderer = __commonJS({
    "../react-d3-graph/lib/components/graph/graph.renderer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.renderGraph = renderGraph;
      var _react = _interopRequireDefault(require_react2()), _graph = _interopRequireDefault(require_graph_const()), _marker = require_marker_const(), _Link = _interopRequireDefault(require_Link()), _Node = _interopRequireDefault(require_Node()), _Marker = _interopRequireDefault(require_Marker()), _graph2 = require_graph_builder(), _graph3 = require_graph_helper(), _collapse = require_collapse_helper(), _marker2 = require_marker_helper();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _extends() {
        return _extends = Object.assign || function(target3) {
          for (var i = 1; i < arguments.length; i++) {
            var source3 = arguments[i];
            for (var key in source3)
              Object.prototype.hasOwnProperty.call(source3, key) && (target3[key] = source3[key]);
          }
          return target3;
        }, _extends.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target3) {
        for (var i = 1; i < arguments.length; i++) {
          var source3 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source3), !0).forEach(function(key) {
            _defineProperty(target3, key, source3[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target3, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key) {
            Object.defineProperty(target3, key, Object.getOwnPropertyDescriptor(source3, key));
          });
        }
        return target3;
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      function _renderLinks(nodes3, links2, linksMatrix, config2, linkCallbacks, highlightedNode, highlightedLink, transform2, selection3) {
        var outLinks = links2;
        config2.collapsible && (outLinks = outLinks.filter(function(_ref) {
          var isHidden = _ref.isHidden;
          return !isHidden;
        }));
        var parallels = outLinks.reduce(function(parallels2, link2) {
          var source3 = link2.source, target3 = link2.target, sourceId = (0, _graph3.getId)(source3), targetId = (0, _graph3.getId)(target3), connects = sourceId < targetId ? "".concat(sourceId).concat(_graph.default.COORDS_SEPARATOR).concat(targetId) : "".concat(targetId).concat(_graph.default.COORDS_SEPARATOR).concat(sourceId);
          return parallels2[connects] = parallels2[connects] || [], parallels2[connects].push(link2), parallels2;
        }, {}), result = [], _loop = function(key2) {
          var count = parallels[key2].length, idx = 0;
          result.push(parallels[key2].map(function(link2) {
            var myIdx = idx;
            idx++;
            var source3 = link2.source, target3 = link2.target, sourceId = (0, _graph3.getId)(source3), targetId = (0, _graph3.getId)(target3), isLoop = sourceId === targetId, trailer = count > 1 ? "".concat(_graph.default.COORDS_SEPARATOR).concat(myIdx) : "", key3 = link2.id ? link2.id : "".concat(sourceId).concat(_graph.default.COORDS_SEPARATOR).concat(targetId).concat(trailer);
            return _objectSpread(_objectSpread({}, link2), {}, {
              id: key3,
              parallelIdx: myIdx,
              parallelCount: count,
              isLoop
            });
          }));
        };
        for (var key in parallels)
          _loop(key);
        return outLinks = result.flat(), outLinks.map(function(link2) {
          var source3 = link2.source, target3 = link2.target, sourceId = (0, _graph3.getId)(source3), targetId = (0, _graph3.getId)(target3), key2 = link2.id, props = (0, _graph2.buildLinkProps)(_objectSpread(_objectSpread({}, link2), {}, {
            source: "".concat(sourceId),
            target: "".concat(targetId)
          }), nodes3, linksMatrix, config2, linkCallbacks, "".concat(highlightedNode), highlightedLink, transform2, selection3.linkIsSelected(key2));
          return /* @__PURE__ */ _react.default.createElement(_Link.default, _extends({
            key: key2,
            id: key2
          }, props));
        });
      }
      function _renderNodes(nodes3, nodeCallbacks, config2, highlightedNode, highlightedLink, transform2, selection3, linksMatrix) {
        var outNodes = Object.keys(nodes3);
        return config2.collapsible && (outNodes = outNodes.filter(function(nodeId) {
          return (0, _collapse.isNodeVisible)(nodeId, nodes3, linksMatrix);
        })), outNodes.map(function(nodeId) {
          var props = (0, _graph2.buildNodeProps)(_objectSpread(_objectSpread({}, nodes3[nodeId]), {}, {
            id: "".concat(nodeId)
          }), config2, nodeCallbacks, highlightedNode, highlightedLink, transform2, selection3.nodeIsSelected(nodeId));
          return /* @__PURE__ */ _react.default.createElement(_Node.default, _extends({
            key: nodeId
          }, props));
        });
      }
      function _renderDefs() {
        var markerCache = {};
        return function(config2) {
          var highlightColor = !config2.link.highlightColor || config2.link.highlightColor === "SAME" ? config2.link.color : config2.link.highlightColor, color2 = config2.link.color, key = "".concat(color2, "___").concat(highlightColor);
          if (!markerCache[key]) {
            var _getMarkerSize = (0, _marker2.getMarkerSize)(config2), small = _getMarkerSize.small, medium = _getMarkerSize.medium, large = _getMarkerSize.large, markerProps = {
              markerWidth: config2.link.markerWidth,
              markerHeight: config2.link.markerHeight
            };
            markerCache[key] = /* @__PURE__ */ _react.default.createElement("defs", null, /* @__PURE__ */ _react.default.createElement(_Marker.default, _extends({
              id: _marker.MARKERS.MARKER_S,
              refX: small,
              fill: color2
            }, markerProps)), /* @__PURE__ */ _react.default.createElement(_Marker.default, _extends({
              id: _marker.MARKERS.MARKER_SH,
              refX: small,
              fill: highlightColor
            }, markerProps)), /* @__PURE__ */ _react.default.createElement(_Marker.default, _extends({
              id: _marker.MARKERS.MARKER_M,
              refX: medium,
              fill: color2
            }, markerProps)), /* @__PURE__ */ _react.default.createElement(_Marker.default, _extends({
              id: _marker.MARKERS.MARKER_MH,
              refX: medium,
              fill: highlightColor
            }, markerProps)), /* @__PURE__ */ _react.default.createElement(_Marker.default, _extends({
              id: _marker.MARKERS.MARKER_L,
              refX: large,
              fill: color2
            }, markerProps)), /* @__PURE__ */ _react.default.createElement(_Marker.default, _extends({
              id: _marker.MARKERS.MARKER_LH,
              refX: large,
              fill: highlightColor
            }, markerProps)));
          }
          return markerCache[key];
        };
      }
      var _memoizedRenderDefs = _renderDefs();
      function renderGraph(nodes3, nodeCallbacks, links2, linksMatrix, linkCallbacks, config2, highlightedNode, highlightedLink, transform2, selection3) {
        return {
          nodes: _renderNodes(nodes3, nodeCallbacks, config2, highlightedNode, highlightedLink, transform2, selection3, linksMatrix),
          links: _renderLinks(nodes3, links2, linksMatrix, config2, linkCallbacks, highlightedNode, highlightedLink, transform2, selection3),
          defs: _memoizedRenderDefs(config2)
        };
      }
    }
  });

  // ../react-d3-graph/lib/components/graph/Graph.js
  var require_Graph = __commonJS({
    "../react-d3-graph/lib/components/graph/Graph.js"(exports) {
      "use strict";
      function _typeof(obj) {
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      exports.default = void 0;
      var _react = _interopRequireDefault(require_react2()), _d3Drag = (init_src3(), src_exports2), _d3Force = (init_src6(), src_exports3), _d3Selection = (init_src2(), src_exports), _d3Zoom = (init_src11(), src_exports4), _graph = _interopRequireDefault(require_graph_const()), _graph2 = _interopRequireDefault(require_graph_config()), _err = _interopRequireDefault(require_err()), _collapse = require_collapse_helper(), _selection = require_selection_helper(), _graph3 = require_graph_helper(), _graph4 = require_graph_renderer(), _utils = require_utils();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _extends() {
        return _extends = Object.assign || function(target3) {
          for (var i = 1; i < arguments.length; i++) {
            var source3 = arguments[i];
            for (var key in source3)
              Object.prototype.hasOwnProperty.call(source3, key) && (target3[key] = source3[key]);
          }
          return target3;
        }, _extends.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target3) {
        for (var i = 1; i < arguments.length; i++) {
          var source3 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source3), !0).forEach(function(key) {
            _defineProperty(target3, key, source3[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target3, Object.getOwnPropertyDescriptors(source3)) : ownKeys(Object(source3)).forEach(function(key) {
            Object.defineProperty(target3, key, Object.getOwnPropertyDescriptor(source3, key));
          });
        }
        return target3;
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol != "undefined" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length == "number") {
            it && (o = it);
            var i = 0, F = function() {
            };
            return { s: F, n: function() {
              return i >= o.length ? { done: !0 } : { done: !1, value: o[i++] };
            }, e: function(_e) {
              throw _e;
            }, f: F };
          }
          throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        }
        var normalCompletion = !0, didErr = !1, err;
        return { s: function() {
          it = it.call(o);
        }, n: function() {
          var step = it.next();
          return normalCompletion = step.done, step;
        }, e: function(_e2) {
          didErr = !0, err = _e2;
        }, f: function() {
          try {
            !normalCompletion && it.return != null && it.return();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!!o) {
          if (typeof o == "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor && (n = o.constructor.name), n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
      }
      function _arrayLikeToArray(arr, len) {
        (len == null || len > arr.length) && (len = arr.length);
        for (var i = 0, arr2 = new Array(len); i < len; i++)
          arr2[i] = arr[i];
        return arr2;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor))
          throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(target3, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target3, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Object.defineProperty(Constructor, "prototype", { writable: !1 }), Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass != "function" && superClass !== null)
          throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: !0, configurable: !0 } }), Object.defineProperty(subClass, "prototype", { writable: !1 }), superClass && _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        return _setPrototypeOf = Object.setPrototypeOf || function(o2, p2) {
          return o2.__proto__ = p2, o2;
        }, _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else
            result = Super.apply(this, arguments);
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call == "function"))
          return call;
        if (call !== void 0)
          throw new TypeError("Derived constructors may only return object or undefined");
        return _assertThisInitialized(self2);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect == "undefined" || !Reflect.construct || Reflect.construct.sham)
          return !1;
        if (typeof Proxy == "function")
          return !0;
        try {
          return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          })), !0;
        } catch {
          return !1;
        }
      }
      function _getPrototypeOf(o) {
        return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        }, _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        return key in obj ? Object.defineProperty(obj, key, { value, enumerable: !0, configurable: !0, writable: !0 }) : obj[key] = value, obj;
      }
      var Graph2 = /* @__PURE__ */ function(_React$Component) {
        _inherits(Graph3, _React$Component);
        var _super = _createSuper(Graph3);
        function Graph3(props) {
          var _this;
          return _classCallCheck(this, Graph3), _this = _super.call(this, props), _defineProperty(_assertThisInitialized(_this), "_generateFocusAnimationProps", function() {
            _this.state.enableFocusAnimation && (_this.focusAnimationTimeout && clearTimeout(_this.focusAnimationTimeout), _this.focusAnimationTimeout = setTimeout(function() {
              return _this.setState({
                enableFocusAnimation: !1
              });
            }, _this.state.config.focusAnimationDuration * 1e3));
            var transitionDuration = _this.state.enableFocusAnimation ? _this.state.config.focusAnimationDuration : 0;
            return {
              style: {
                transitionDuration: "".concat(transitionDuration, "s")
              },
              transform: _this.state.focusTransformation
            };
          }), _defineProperty(_assertThisInitialized(_this), "_nodeIdFromEvent", function(e2) {
            for (var target3 = e2.sourceEvent.target; target3 && !target3.classList.contains("node"); )
              target3 = target3.parentElement;
            return target3 && target3.id || null;
          }), _defineProperty(_assertThisInitialized(_this), "_onDragEnd", function(e2) {
            _this.isDraggingNode = !1, _this.state.draggedNodes && (_this.state.draggedNodes.forEach(function(node) {
              _this.onNodePositionChange(node);
            }), _this._tick({
              draggedNodes: null
            })), !_this.state.config.staticGraph && _this.state.config.automaticRearrangeAfterDropNode && _this.state.simulation.alphaTarget(_this.state.config.d3.alphaTarget).restart();
          }), _defineProperty(_assertThisInitialized(_this), "_onDragMove", function(e2) {
            var ids = Array.from(_this.selection.nodes);
            if (!_this.state.config.staticGraph) {
              var draggedNodes = ids.flatMap(function(id7) {
                var draggedNode = _this.state.nodes[id7];
                draggedNode.oldX = draggedNode.x, draggedNode.oldY = draggedNode.y;
                var newX = draggedNode.x + e2.dx, newY = draggedNode.y + e2.dy, shouldUpdateNode = !_this.state.config.bounded || (0, _graph3.isPositionInBounds)({
                  x: newX,
                  y: newY
                }, _this.state);
                return shouldUpdateNode ? (draggedNode.x = newX, draggedNode.y = newY, draggedNode.fx = draggedNode.x, draggedNode.fy = draggedNode.y, [draggedNode]) : [];
              });
              _this._tick({
                draggedNodes
              });
            }
          }), _defineProperty(_assertThisInitialized(_this), "_onDragStart", function(e2) {
            if (_this.isDraggingNode = !0, _this.pauseSimulation(), _this.state.enableFocusAnimation && _this.setState({
              enableFocusAnimation: !1
            }), !_this.state.config.staticGraph) {
              var id7 = _this._nodeIdFromEvent(e2), draggedNode = _this.state.nodes[id7];
              if (!_this.selection.nodeIsSelected(id7)) {
                var oldSelection = _this.selection.freeze();
                e2.sourceEvent.shiftKey || _this.selection.clear(), _this.selection.addNode(id7), _this.onSelectionChange(oldSelection, _this.selection.freeze());
              }
            }
          }), _defineProperty(_assertThisInitialized(_this), "_setNodeHighlightedValue", function(id7) {
            var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
            return _this._tick((0, _graph3.updateNodeHighlightedValue)(_this.state.nodes, _this.state.links, _this.state.config, id7, value));
          }), _defineProperty(_assertThisInitialized(_this), "_tick", function() {
            var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, cb = arguments.length > 1 ? arguments[1] : void 0;
            return cb ? _this.setState(state, cb) : _this.setState(state);
          }), _defineProperty(_assertThisInitialized(_this), "_zoomConfig", function() {
            var selector = (0, _d3Selection.select)("#".concat(_this.state.id, "-").concat(_graph.default.GRAPH_WRAPPER_ID)), zoomObject = (0, _d3Zoom.zoom)().scaleExtent([_this.state.config.minZoom, _this.state.config.maxZoom]);
            _this.state.config.freezeAllDragEvents || zoomObject.on("zoom", _this._zoomed), _this.state.config.initialZoom !== null && zoomObject.scaleTo(selector, _this.state.config.initialZoom), selector.call(zoomObject).on("dblclick.zoom", null);
          }), _defineProperty(_assertThisInitialized(_this), "_zoomed", function(e2) {
            var transform2 = e2.transform;
            (0, _d3Selection.selectAll)("#".concat(_this.state.id, "-").concat(_graph.default.GRAPH_CONTAINER_ID)).attr("transform", transform2), _this.setState({
              transform: transform2
            }), _this.debouncedOnZoomChange && _this.state.previousZoom !== transform2.k && !_this.state.config.panAndZoom && (_this.debouncedOnZoomChange(_this.state.previousZoom, transform2.k), _this.setState({
              previousZoom: transform2.k
            }));
          }), _defineProperty(_assertThisInitialized(_this), "onClickGraph", function(e2) {
            var _e$target, _e$target$attributes, _e$target$attributes$;
            if (_this.state.enableFocusAnimation && _this.setState({
              enableFocusAnimation: !1
            }), !e2.shiftKey) {
              var oldSelection = _this.selection.freeze();
              _this.selection.clear(), _this.onSelectionChange(oldSelection, _this.selection.freeze());
            }
            var tagName = e2.target && e2.target.tagName, name2 = e2 == null || (_e$target = e2.target) === null || _e$target === void 0 || (_e$target$attributes = _e$target.attributes) === null || _e$target$attributes === void 0 || (_e$target$attributes$ = _e$target$attributes.name) === null || _e$target$attributes$ === void 0 ? void 0 : _e$target$attributes$.value, svgContainerName = "svg-container-".concat(_this.state.id);
            tagName.toUpperCase() === "SVG" && name2 === svgContainerName && _this.props.onClickGraph && _this.props.onClickGraph(e2);
          }), _defineProperty(_assertThisInitialized(_this), "onClickNode", function(event, clickedNodeId) {
            var clickedNode = _this.state.nodes[clickedNodeId];
            if (_this.nodeClickTimer)
              _this.props.onDoubleClickNode && _this.props.onDoubleClickNode(event, clickedNodeId, clickedNode), _this.nodeClickTimer = clearTimeout(_this.nodeClickTimer);
            else {
              var ttl = _this.props.onDoubleClickNode ? _graph.default.TTL_DOUBLE_CLICK_IN_MS : 0;
              _this.nodeClickTimer = setTimeout(function() {
                if (_this.state.config.collapsible) {
                  var leafConnections = (0, _collapse.getTargetLeafConnections)(clickedNodeId, _this.state.links, _this.state.config), links2 = (0, _collapse.toggleLinksMatrixConnections)(_this.state.links, leafConnections, _this.state.config), d3Links = (0, _collapse.toggleLinksConnections)(_this.state.d3Links, links2), firstLeaf = leafConnections == null ? void 0 : leafConnections["0"], isExpanding = !1;
                  if (firstLeaf) {
                    var visibility = links2[firstLeaf.source][firstLeaf.target];
                    isExpanding = visibility === 1;
                  }
                  _this._tick({
                    links: links2,
                    d3Links
                  }, function() {
                    var oldSelection2 = _this.selection.freeze();
                    event.shiftKey || _this.selection.clear(), _this.selection.addNode(clickedNodeId), _this.onSelectionChange(oldSelection2, _this.selection.freeze()), _this.props.onClickNode && _this.props.onClickNode(event, clickedNodeId, clickedNode), isExpanding && _this._graphNodeDragConfig();
                  });
                } else {
                  var oldSelection = _this.selection.freeze();
                  event.shiftKey || _this.selection.clear(), _this.selection.addNode(clickedNodeId), _this.onSelectionChange(oldSelection, _this.selection.freeze()), _this.props.onClickNode && _this.props.onClickNode(event, clickedNodeId, clickedNode);
                }
                _this.nodeClickTimer = null;
              }, ttl);
            }
          }), _defineProperty(_assertThisInitialized(_this), "onRightClickNode", function(event, id7) {
            var clickedNode = _this.state.nodes[id7];
            _this.props.onRightClickNode && _this.props.onRightClickNode(event, id7, clickedNode);
          }), _defineProperty(_assertThisInitialized(_this), "onMouseOverNode", function(event, id7) {
            if (!_this.isDraggingNode) {
              var clickedNode = _this.state.nodes[id7];
              _this.props.onMouseOverNode && _this.props.onMouseOverNode(event, id7, clickedNode), _this.state.config.nodeHighlightBehavior && _this._setNodeHighlightedValue(id7, !0);
            }
          }), _defineProperty(_assertThisInitialized(_this), "onMouseOutNode", function(event, id7) {
            if (!_this.isDraggingNode) {
              var clickedNode = _this.state.nodes[id7];
              _this.props.onMouseOutNode && _this.props.onMouseOutNode(event, id7, clickedNode), _this.state.config.nodeHighlightBehavior && _this._setNodeHighlightedValue(id7, !1);
            }
          }), _defineProperty(_assertThisInitialized(_this), "onClickLink", function(event, link2) {
            var oldSelection = _this.selection.freeze();
            event.shiftKey || _this.selection.clear(), _this.selection.addLink(link2.id), _this.onSelectionChange(oldSelection, _this.selection.freeze()), _this.props.onClickLink && _this.props.onClickLink(link2.source, link2.target);
          }), _defineProperty(_assertThisInitialized(_this), "onMouseOverLink", function(event, source3, target3) {
            if (_this.props.onMouseOverLink && _this.props.onMouseOverLink(event, source3, target3), _this.state.config.linkHighlightBehavior) {
              var highlightedLink = {
                source: source3,
                target: target3
              };
              _this._tick({
                highlightedLink
              });
            }
          }), _defineProperty(_assertThisInitialized(_this), "onMouseOutLink", function(event, source3, target3) {
            if (_this.props.onMouseOutLink && _this.props.onMouseOutLink(source3, target3), _this.state.config.linkHighlightBehavior) {
              var highlightedLink = void 0;
              _this._tick({
                highlightedLink
              });
            }
          }), _defineProperty(_assertThisInitialized(_this), "onNodePositionChange", function(node) {
            if (!!_this.props.onNodePositionChange) {
              var id7 = node.id, x5 = node.x, y5 = node.y;
              _this.props.onNodePositionChange(id7, x5, y5);
            }
          }), _defineProperty(_assertThisInitialized(_this), "onSelectionChange", function(oldSelection, newSelection) {
            !_this.props.onSelectionChange || oldSelection != newSelection && _this.props.onSelectionChange(oldSelection, newSelection);
          }), _defineProperty(_assertThisInitialized(_this), "onKeyDown", function(ev) {
            if (!_this.props.keybindings || !_this.state.activeKeybindings)
              return;
            function keyname(e2) {
              var ctrl = e2.ctrlKey ? "Ctrl+" : "", alt = e2.altKey ? "Alt+" : "", shift = e2.shiftKey ? "Shift+" : "", letter = e2.key;
              return ctrl + alt + shift + letter;
            }
            (_this.props.keybindings[keyname(ev)] || function(_) {
            })(ev, _this.mousePosition[0], _this.mousePosition[1]);
          }), _defineProperty(_assertThisInitialized(_this), "enableKeybindings", function() {
            document.querySelector("#svg-container-".concat(_this.state.id)).focus(), _this.setState({
              activeKeybindings: !0
            });
          }), _defineProperty(_assertThisInitialized(_this), "disableKeybindings", function() {
            document.querySelector("#svg-container-".concat(_this.state.id)).blur(), _this.setState({
              activeKeybindings: !1
            });
          }), _defineProperty(_assertThisInitialized(_this), "updateMousePosition", function(event) {
            _this.mousePosition = (0, _d3Selection.pointer)(event);
          }), _defineProperty(_assertThisInitialized(_this), "pauseSimulation", function() {
            return _this.state.simulation.stop();
          }), _defineProperty(_assertThisInitialized(_this), "resetNodesPositions", function() {
            if (!_this.state.config.staticGraph) {
              var initialNodesState = (0, _graph3.initializeNodes)(_this.props.data.nodes);
              for (var nodeId in _this.state.nodes) {
                var node = _this.state.nodes[nodeId];
                if (node.fx && node.fy && (Reflect.deleteProperty(node, "fx"), Reflect.deleteProperty(node, "fy")), nodeId in initialNodesState) {
                  var initialNode = initialNodesState[nodeId];
                  node.x = initialNode.x, node.y = initialNode.y;
                }
              }
              _this.state.simulation.alphaTarget(_this.state.config.d3.alphaTarget).restart(), _this._tick();
            }
          }), _defineProperty(_assertThisInitialized(_this), "restartSimulation", function() {
            return !_this.state.config.staticGraph && _this.state.simulation.restart();
          }), _this.props.id || (0, _utils.throwErr)(_this.constructor.name, _err.default.GRAPH_NO_ID_PROP), _this.focusAnimationTimeout = null, _this.nodeClickTimer = null, _this.mousePosition = [0, 0], _this.isDraggingNode = !1, _this.selection = new _selection.Selection(), _this.state = {
            activeKeybindings: !1
          }, _this.state = (0, _graph3.initializeGraphState)(_this.props, _this.state), _this.debouncedOnZoomChange = _this.props.onZoomChange ? (0, _utils.debounce)(_this.props.onZoomChange, 100) : null, _this;
        }
        return _createClass(Graph3, [{
          key: "_graphLinkForceConfig",
          value: function() {
            var forceLink = (0, _d3Force.forceLink)(this.state.d3Links).id(function(l) {
              return l.id;
            }).distance(this.state.config.d3.linkLength).strength(this.state.config.d3.linkStrength);
            this.state.simulation.force(_graph.default.LINK_CLASS_NAME, forceLink);
          }
        }, {
          key: "_graphNodeDragConfig",
          value: function() {
            var customNodeDrag = (0, _d3Drag.drag)().on("start", this._onDragStart).on("drag", this._onDragMove).on("end", this._onDragEnd);
            (0, _d3Selection.select)("#".concat(this.state.id, "-").concat(_graph.default.GRAPH_WRAPPER_ID)).selectAll(".node").call(customNodeDrag);
          }
        }, {
          key: "_graphBindD3ToReactComponent",
          value: function() {
            var _this2 = this;
            this.state.config.d3.disableLinkForce || (this.state.simulation.nodes(this.state.d3Nodes).on("tick", function() {
              var newNodes = {}, _iterator = _createForOfIteratorHelper(_this2.state.d3Nodes), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var node = _step.value;
                  newNodes[node.id] = node;
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              _this2._tick({
                d3Nodes: _this2.state.d3Nodes,
                nodes: newNodes
              });
            }), this._graphLinkForceConfig()), this.state.config.freezeAllDragEvents || this._graphNodeDragConfig();
          }
        }, {
          key: "_mouseConfig",
          value: function() {
            (0, _d3Selection.select)("#svg-container-".concat(this.state.id)).on("mousemove", this.updateMousePosition).on("mouseover", this.enableKeybindings).on("mouseout", this.disableKeybindings);
          }
        }, {
          key: "UNSAFE_componentWillReceiveProps",
          value: function(nextProps) {
            var _checkForGraphElement = (0, _graph3.checkForGraphElementsChanges)(nextProps, this.state), graphElementsUpdated = _checkForGraphElement.graphElementsUpdated, newGraphElements = _checkForGraphElement.newGraphElements, state = graphElementsUpdated ? (0, _graph3.initializeGraphState)(nextProps, this.state) : this.state, newConfig = nextProps.config || {}, _checkForGraphConfigC = (0, _graph3.checkForGraphConfigChanges)(nextProps, this.state), configUpdated = _checkForGraphConfigC.configUpdated, d3ConfigUpdated = _checkForGraphConfigC.d3ConfigUpdated, config2 = configUpdated ? (0, _utils.merge)(_graph2.default, newConfig) : this.state.config;
            newGraphElements && this.pauseSimulation();
            var transform2 = newConfig.panAndZoom !== this.state.config.panAndZoom ? {
              x: 0,
              y: 0,
              k: 1
            } : this.state.transform, focusedNodeId = nextProps.data.focusedNodeId, d3FocusedNode = this.state.d3Nodes.find(function(node) {
              return "".concat(node.id) === "".concat(focusedNodeId);
            }), containerElId = "".concat(this.state.id, "-").concat(_graph.default.GRAPH_WRAPPER_ID), focusTransformation = (0, _graph3.getCenterAndZoomTransformation)(d3FocusedNode, this.state.config, containerElId) || this.state.focusTransformation, enableFocusAnimation = this.props.data.focusedNodeId !== nextProps.data.focusedNodeId;
            nextProps.onZoomChange && (this.debouncedOnZoomChange = (0, _utils.debounce)(nextProps.onZoomChange, 100)), this.setState(_objectSpread(_objectSpread({}, state), {}, {
              config: config2,
              configUpdated,
              d3ConfigUpdated,
              newGraphElements,
              transform: transform2,
              focusedNodeId,
              enableFocusAnimation,
              focusTransformation
            }));
          }
        }, {
          key: "componentDidUpdate",
          value: function() {
            var shouldPause = this.state.config.staticGraph || this.state.config.staticGraphWithDragAndDrop;
            shouldPause && this.pauseSimulation(), !this.state.config.staticGraph && (this.state.newGraphElements || this.state.d3ConfigUpdated) ? (this._graphBindD3ToReactComponent(), this.state.config.staticGraphWithDragAndDrop || this.restartSimulation(), this.setState({
              newGraphElements: !1,
              d3ConfigUpdated: !1
            })) : this.state.configUpdated && this._graphNodeDragConfig(), this.state.configUpdated && (this._zoomConfig(), this.setState({
              configUpdated: !1
            }));
          }
        }, {
          key: "componentDidMount",
          value: function() {
            this.state.config.staticGraph || this._graphBindD3ToReactComponent(), this._zoomConfig(), this._mouseConfig();
          }
        }, {
          key: "componentWillUnmount",
          value: function() {
            this.pauseSimulation(), this.nodeClickTimer && (clearTimeout(this.nodeClickTimer), this.nodeClickTimer = null), this.focusAnimationTimeout && (clearTimeout(this.focusAnimationTimeout), this.focusAnimationTimeout = null);
          }
        }, {
          key: "render",
          value: function() {
            var _renderGraph = (0, _graph4.renderGraph)(this.state.nodes, {
              onClickNode: this.onClickNode,
              onDoubleClickNode: this.onDoubleClickNode,
              onRightClickNode: this.onRightClickNode,
              onMouseOverNode: this.onMouseOverNode,
              onMouseOut: this.onMouseOutNode
            }, this.state.d3Links, this.state.links, {
              onClickLink: this.onClickLink,
              onRightClickLink: this.props.onRightClickLink,
              onMouseOverLink: this.onMouseOverLink,
              onMouseOutLink: this.onMouseOutLink
            }, this.state.config, this.state.highlightedNode, this.state.highlightedLink, this.state.transform.k, this.selection), nodes3 = _renderGraph.nodes, links2 = _renderGraph.links, defs = _renderGraph.defs, svgStyle = {
              outline: "none",
              height: this.state.config.height,
              width: this.state.config.width
            }, containerProps = this._generateFocusAnimationProps();
            return /* @__PURE__ */ _react.default.createElement("div", {
              id: "".concat(this.state.id, "-").concat(_graph.default.GRAPH_WRAPPER_ID),
              style: this.props.style
            }, /* @__PURE__ */ _react.default.createElement("svg", {
              name: "svg-container-".concat(this.state.id),
              id: "svg-container-".concat(this.state.id),
              style: svgStyle,
              tabIndex: "0",
              onClick: this.onClickGraph,
              onKeyDown: this.onKeyDown
            }, defs, /* @__PURE__ */ _react.default.createElement("g", _extends({
              id: "".concat(this.state.id, "-").concat(_graph.default.GRAPH_CONTAINER_ID)
            }, containerProps), links2, nodes3)));
          }
        }]), Graph3;
      }(_react.default.Component);
      exports.default = Graph2;
    }
  });

  // ../react-d3-graph/lib/index.js
  var require_lib = __commonJS({
    "../react-d3-graph/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: !0
      });
      Object.defineProperty(exports, "Graph", {
        enumerable: !0,
        get: function() {
          return _Graph.default;
        }
      });
      Object.defineProperty(exports, "Link", {
        enumerable: !0,
        get: function() {
          return _Link.default;
        }
      });
      Object.defineProperty(exports, "Node", {
        enumerable: !0,
        get: function() {
          return _Node.default;
        }
      });
      var _Graph = _interopRequireDefault(require_Graph()), _Node = _interopRequireDefault(require_Node()), _Link = _interopRequireDefault(require_Link());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      (function() {
        "use strict";
        var enableSchedulerDebugging = !1, enableProfiling = !1, requestHostCallback, requestHostTimeout, cancelHostTimeout, requestPaint, hasPerformanceNow = typeof performance == "object" && typeof performance.now == "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date, initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        if (typeof window == "undefined" || typeof MessageChannel != "function") {
          var _callback = null, _timeoutID = null, _flushCallback = function() {
            if (_callback !== null)
              try {
                var currentTime = exports.unstable_now(), hasRemainingTime = !0;
                _callback(hasRemainingTime, currentTime), _callback = null;
              } catch (e2) {
                throw setTimeout(_flushCallback, 0), e2;
              }
          };
          requestHostCallback = function(cb) {
            _callback !== null ? setTimeout(requestHostCallback, 0, cb) : (_callback = cb, setTimeout(_flushCallback, 0));
          }, requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          }, cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          }, exports.unstable_shouldYield = function() {
            return !1;
          }, requestPaint = exports.unstable_forceFrameRate = function() {
          };
        } else {
          var _setTimeout = window.setTimeout, _clearTimeout = window.clearTimeout;
          if (typeof console != "undefined") {
            var requestAnimationFrame = window.requestAnimationFrame, cancelAnimationFrame = window.cancelAnimationFrame;
            typeof requestAnimationFrame != "function" && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), typeof cancelAnimationFrame != "function" && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
          var isMessageLoopRunning = !1, scheduledHostCallback = null, taskTimeoutID = -1, yieldInterval = 5, deadline = 0;
          exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
          }, requestPaint = function() {
          }, exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            fps > 0 ? yieldInterval = Math.floor(1e3 / fps) : yieldInterval = 5;
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = !0;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                hasMoreWork ? port.postMessage(null) : (isMessageLoopRunning = !1, scheduledHostCallback = null);
              } catch (error) {
                throw port.postMessage(null), error;
              }
            } else
              isMessageLoopRunning = !1;
          }, channel = new MessageChannel(), port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline, requestHostCallback = function(callback) {
            scheduledHostCallback = callback, isMessageLoopRunning || (isMessageLoopRunning = !0, port.postMessage(null));
          }, requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }, cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID), taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index2 = heap.length;
          heap.push(node), siftUp(heap, node, index2);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            return last !== first && (heap[0] = last, siftDown(heap, last, 0)), first;
          } else
            return null;
        }
        function siftUp(heap, node, i) {
          for (var index2 = i; ; ) {
            var parentIndex = index2 - 1 >>> 1, parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0)
              heap[parentIndex] = node, heap[index2] = parent, index2 = parentIndex;
            else
              return;
          }
        }
        function siftDown(heap, node, i) {
          for (var index2 = i, length3 = heap.length; index2 < length3; ) {
            var leftIndex = (index2 + 1) * 2 - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0)
              right !== void 0 && compare(right, left) < 0 ? (heap[index2] = right, heap[rightIndex] = node, index2 = rightIndex) : (heap[index2] = left, heap[leftIndex] = node, index2 = leftIndex);
            else if (right !== void 0 && compare(right, node) < 0)
              heap[index2] = right, heap[rightIndex] = node, index2 = rightIndex;
            else
              return;
          }
        }
        function compare(a3, b) {
          var diff2 = a3.sortIndex - b.sortIndex;
          return diff2 !== 0 ? diff2 : a3.id - b.id;
        }
        var ImmediatePriority = 1, UserBlockingPriority = 2, NormalPriority = 3, LowPriority = 4, IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var maxSigned31BitInt = 1073741823, IMMEDIATE_PRIORITY_TIMEOUT = -1, USER_BLOCKING_PRIORITY_TIMEOUT = 250, NORMAL_PRIORITY_TIMEOUT = 5e3, LOW_PRIORITY_TIMEOUT = 1e4, IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt, taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = NormalPriority, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1;
        function advanceTimers(currentTime) {
          for (var timer2 = peek(timerQueue); timer2 !== null; ) {
            if (timer2.callback === null)
              pop(timerQueue);
            else if (timer2.startTime <= currentTime)
              pop(timerQueue), timer2.sortIndex = timer2.expirationTime, push(taskQueue, timer2);
            else
              return;
            timer2 = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          if (isHostTimeoutScheduled = !1, advanceTimers(currentTime), !isHostCallbackScheduled)
            if (peek(taskQueue) !== null)
              isHostCallbackScheduled = !0, requestHostCallback(flushWork);
            else {
              var firstTimer = peek(timerQueue);
              firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = !1, isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, cancelHostTimeout()), isPerformingWork = !0;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling)
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime), currentTask.isQueued = !1;
                }
                throw error;
              }
            else
              return workLoop(hasTimeRemaining, initialTime2);
          } finally {
            currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          for (advanceTimers(currentTime), currentTask = peek(taskQueue); currentTask !== null && !enableSchedulerDebugging && !(currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())); ) {
            var callback = currentTask.callback;
            if (typeof callback == "function") {
              currentTask.callback = null, currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime, continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now(), typeof continuationCallback == "function" ? currentTask.callback = continuationCallback : currentTask === peek(taskQueue) && pop(taskQueue), advanceTimers(currentTime);
            } else
              pop(taskQueue);
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null)
            return !0;
          var firstTimer = peek(timerQueue);
          return firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime), !1;
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now(), startTime;
          if (typeof options == "object" && options !== null) {
            var delay = options.delay;
            typeof delay == "number" && delay > 0 ? startTime = currentTime + delay : startTime = currentTime;
          } else
            startTime = currentTime;
          var timeout2;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout2 = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout2 = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout2 = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime + timeout2, newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          return startTime > currentTime ? (newTask.sortIndex = startTime, push(timerQueue, newTask), peek(taskQueue) === null && newTask === peek(timerQueue) && (isHostTimeoutScheduled ? cancelHostTimeout() : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, startTime - currentTime))) : (newTask.sortIndex = expirationTime, push(taskQueue, newTask), !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = !0, requestHostCallback(flushWork))), newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = !0, requestHostCallback(flushWork));
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var unstable_requestPaint = requestPaint, unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority, exports.unstable_ImmediatePriority = ImmediatePriority, exports.unstable_LowPriority = LowPriority, exports.unstable_NormalPriority = NormalPriority, exports.unstable_Profiling = unstable_Profiling, exports.unstable_UserBlockingPriority = UserBlockingPriority, exports.unstable_cancelCallback = unstable_cancelCallback, exports.unstable_continueExecution = unstable_continueExecution, exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel, exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode, exports.unstable_next = unstable_next, exports.unstable_pauseExecution = unstable_pauseExecution, exports.unstable_requestPaint = unstable_requestPaint, exports.unstable_runWithPriority = unstable_runWithPriority, exports.unstable_scheduleCallback = unstable_scheduleCallback, exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      module.exports = require_scheduler_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0, interactionIDCounter = 0, threadIDCounter = 0;
        exports.__interactionsRef = null, exports.__subscriberRef = null, exports.__interactionsRef = {
          current: new Set()
        }, exports.__subscriberRef = {
          current: null
        };
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          return exports.__interactionsRef.current;
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name2, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID, interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name2,
            timestamp
          }, prevInteractions = exports.__interactionsRef.current, interactions = new Set(prevInteractions);
          interactions.add(interaction), exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current, returnValue;
          try {
            subscriber !== null && subscriber.onInteractionTraced(interaction);
          } finally {
            try {
              subscriber !== null && subscriber.onWorkStarted(interactions, threadID);
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                try {
                  subscriber !== null && subscriber.onWorkStopped(interactions, threadID);
                } finally {
                  interaction.__count--, subscriber !== null && interaction.__count === 0 && subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID, wrappedInteractions = exports.__interactionsRef.current, subscriber = exports.__subscriberRef.current;
          subscriber !== null && subscriber.onWorkScheduled(wrappedInteractions, threadID), wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = !1;
          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions, subscriber = exports.__subscriberRef.current;
            try {
              var returnValue;
              try {
                subscriber !== null && subscriber.onWorkStarted(wrappedInteractions, threadID);
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions, subscriber !== null && subscriber.onWorkStopped(wrappedInteractions, threadID);
                }
              }
              return returnValue;
            } finally {
              hasRun || (hasRun = !0, wrappedInteractions.forEach(function(interaction) {
                interaction.__count--, subscriber !== null && interaction.__count === 0 && subscriber.onInteractionScheduledWorkCompleted(interaction);
              }));
            }
          }
          return wrapped.cancel = function() {
            subscriber = exports.__subscriberRef.current;
            try {
              subscriber !== null && subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--, subscriber && interaction.__count === 0 && subscriber.onInteractionScheduledWorkCompleted(interaction);
              });
            }
          }, wrapped;
        }
        var subscribers = null;
        subscribers = new Set();
        function unstable_subscribe(subscriber) {
          subscribers.add(subscriber), subscribers.size === 1 && (exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted,
            onInteractionTraced,
            onWorkCanceled,
            onWorkScheduled,
            onWorkStarted,
            onWorkStopped
          });
        }
        function unstable_unsubscribe(subscriber) {
          subscribers.delete(subscriber), subscribers.size === 0 && (exports.__subscriberRef.current = null);
        }
        function onInteractionTraced(interaction) {
          var didCatchError = !1, caughtError = null;
          if (subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              didCatchError || (didCatchError = !0, caughtError = error);
            }
          }), didCatchError)
            throw caughtError;
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = !1, caughtError = null;
          if (subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              didCatchError || (didCatchError = !0, caughtError = error);
            }
          }), didCatchError)
            throw caughtError;
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = !1, caughtError = null;
          if (subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              didCatchError || (didCatchError = !0, caughtError = error);
            }
          }), didCatchError)
            throw caughtError;
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = !1, caughtError = null;
          if (subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              didCatchError || (didCatchError = !0, caughtError = error);
            }
          }), didCatchError)
            throw caughtError;
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = !1, caughtError = null;
          if (subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              didCatchError || (didCatchError = !0, caughtError = error);
            }
          }), didCatchError)
            throw caughtError;
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = !1, caughtError = null;
          if (subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              didCatchError || (didCatchError = !0, caughtError = error);
            }
          }), didCatchError)
            throw caughtError;
        }
        exports.unstable_clear = unstable_clear, exports.unstable_getCurrent = unstable_getCurrent, exports.unstable_getThreadID = unstable_getThreadID, exports.unstable_subscribe = unstable_subscribe, exports.unstable_trace = unstable_trace, exports.unstable_unsubscribe = unstable_unsubscribe, exports.unstable_wrap = unstable_wrap;
      })();
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      module.exports = require_scheduler_tracing_development();
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      (function() {
        "use strict";
        var React6 = require_react(), _assign = require_object_assign(), Scheduler = require_scheduler(), tracing = require_tracing(), ReactSharedInternals = React6.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
              args[_key - 1] = arguments[_key];
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
              args[_key2 - 1] = arguments[_key2];
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
            stack !== "" && (format += "%s", args = args.concat([stack]));
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        if (!React6)
          throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
        var FunctionComponent = 0, ClassComponent = 1, IndeterminateComponent = 2, HostRoot = 3, HostPortal = 4, HostComponent = 5, HostText = 6, Fragment2 = 7, Mode = 8, ContextConsumer = 9, ContextProvider = 10, ForwardRef = 11, Profiler = 12, SuspenseComponent = 13, MemoComponent = 14, SimpleMemoComponent = 15, LazyComponent = 16, IncompleteClassComponent = 17, DehydratedFragment = 18, SuspenseListComponent = 19, FundamentalComponent = 20, ScopeComponent = 21, Block = 22, OffscreenComponent = 23, LegacyHiddenComponent = 24, enableProfilerTimer = !0, enableFundamentalAPI = !1, enableNewReconciler = !1, warnAboutStringRefs = !1, allNativeEvents = new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies), registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          registrationNameDependencies[registrationName] && error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName), registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName, registrationName === "onDoubleClick" && (possibleRegistrationNames.ondblclick = registrationName);
          }
          for (var i = 0; i < dependencies.length; i++)
            allNativeEvents.add(dependencies[i]);
        }
        var canUseDOM = typeof window != "undefined" && typeof window.document != "undefined" && typeof window.document.createElement != "undefined", RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", ROOT_ATTRIBUTE_NAME = "data-reactroot", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), hasOwnProperty = Object.prototype.hasOwnProperty, illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error("Invalid attribute name: `%s`", attributeName), !1);
        }
        function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
          return propertyInfo !== null ? propertyInfo.type === RESERVED : isCustomComponentTag ? !1 : name2.length > 2 && (name2[0] === "o" || name2[0] === "O") && (name2[1] === "n" || name2[1] === "N");
        }
        function shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED)
            return !1;
          switch (typeof value) {
            case "function":
            case "symbol":
              return !0;
            case "boolean": {
              if (isCustomComponentTag)
                return !1;
              if (propertyInfo !== null)
                return !propertyInfo.acceptsBooleans;
              var prefix2 = name2.toLowerCase().slice(0, 5);
              return prefix2 !== "data-" && prefix2 !== "aria-";
            }
            default:
              return !1;
          }
        }
        function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value == "undefined" || shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag))
            return !0;
          if (isCustomComponentTag)
            return !1;
          if (propertyInfo !== null)
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === !1;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          return !1;
        }
        function getPropertyInfo(name2) {
          return properties.hasOwnProperty(name2) ? properties[name2] : null;
        }
        function PropertyInfoRecord(name2, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name2, this.type = type, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
        }
        var properties = {}, reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, RESERVED, !1, name2, null, !1, !1);
        }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name2 = _ref[0], attributeName = _ref[1];
          properties[name2] = new PropertyInfoRecord(name2, STRING, !1, attributeName, null, !1, !1);
        }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEANISH_STRING, !1, name2.toLowerCase(), null, !1, !1);
        }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEANISH_STRING, !1, name2, null, !1, !1);
        }), [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEAN, !1, name2.toLowerCase(), null, !1, !1);
        }), [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEAN, !0, name2, null, !1, !1);
        }), [
          "capture",
          "download"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, OVERLOADED_BOOLEAN, !1, name2, null, !1, !1);
        }), [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, POSITIVE_NUMERIC, !1, name2, null, !1, !1);
        }), ["rowSpan", "start"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, NUMERIC, !1, name2.toLowerCase(), null, !1, !1);
        });
        var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, !1, attributeName, null, !1, !1);
        }), [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, !1, attributeName, "http://www.w3.org/1999/xlink", !1, !1);
        }), [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, !1, attributeName, "http://www.w3.org/XML/1998/namespace", !1, !1);
        }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, !1, attributeName.toLowerCase(), null, !1, !1);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, !1, attributeName.toLowerCase(), null, !0, !0);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
        function sanitizeURL(url) {
          !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
        }
        function getValueForProperty(node, name2, expected, propertyInfo) {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
          } else {
            propertyInfo.sanitizeURL && sanitizeURL("" + expected);
            var attributeName = propertyInfo.attributeName, stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName);
                return value === "" ? !0 : shouldRemoveAttribute(name2, expected, propertyInfo, !1) ? value : value === "" + expected ? expected : value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name2, expected, propertyInfo, !1))
                return node.getAttribute(attributeName);
              if (propertyInfo.type === BOOLEAN)
                return expected;
              stringValue = node.getAttribute(attributeName);
            }
            return shouldRemoveAttribute(name2, expected, propertyInfo, !1) ? stringValue === null ? expected : stringValue : stringValue === "" + expected ? expected : stringValue;
          }
        }
        function getValueForAttribute(node, name2, expected) {
          {
            if (!isAttributeNameSafe(name2))
              return;
            if (isOpaqueHydratingObject(expected))
              return expected;
            if (!node.hasAttribute(name2))
              return expected === void 0 ? void 0 : null;
            var value = node.getAttribute(name2);
            return value === "" + expected ? expected : value;
          }
        }
        function setValueForProperty(node, name2, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name2);
          if (!shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
            if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) && (value = null), isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name2)) {
                var _attributeName = name2;
                value === null ? node.removeAttribute(_attributeName) : node.setAttribute(_attributeName, "" + value);
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? !1 : "";
              } else
                node[propertyName] = value;
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null)
              node.removeAttribute(attributeName);
            else {
              var _type = propertyInfo.type, attributeValue;
              _type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === !0 ? attributeValue = "" : (attributeValue = "" + value, propertyInfo.sanitizeURL && sanitizeURL(attributeValue.toString())), attributeNamespace ? node.setAttributeNS(attributeNamespace, attributeName, attributeValue) : node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = 60103, REACT_PORTAL_TYPE = 60106, REACT_FRAGMENT_TYPE = 60107, REACT_STRICT_MODE_TYPE = 60108, REACT_PROFILER_TYPE = 60114, REACT_PROVIDER_TYPE = 60109, REACT_CONTEXT_TYPE = 60110, REACT_FORWARD_REF_TYPE = 60112, REACT_SUSPENSE_TYPE = 60113, REACT_SUSPENSE_LIST_TYPE = 60120, REACT_MEMO_TYPE = 60115, REACT_LAZY_TYPE = 60116, REACT_BLOCK_TYPE = 60121, REACT_SERVER_BLOCK_TYPE = 60122, REACT_FUNDAMENTAL_TYPE = 60117, REACT_SCOPE_TYPE = 60119, REACT_OPAQUE_ID_TYPE = 60128, REACT_DEBUG_TRACING_MODE_TYPE = 60129, REACT_OFFSCREEN_TYPE = 60130, REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol == "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element"), REACT_PORTAL_TYPE = symbolFor("react.portal"), REACT_FRAGMENT_TYPE = symbolFor("react.fragment"), REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode"), REACT_PROFILER_TYPE = symbolFor("react.profiler"), REACT_PROVIDER_TYPE = symbolFor("react.provider"), REACT_CONTEXT_TYPE = symbolFor("react.context"), REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref"), REACT_SUSPENSE_TYPE = symbolFor("react.suspense"), REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list"), REACT_MEMO_TYPE = symbolFor("react.memo"), REACT_LAZY_TYPE = symbolFor("react.lazy"), REACT_BLOCK_TYPE = symbolFor("react.block"), REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block"), REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental"), REACT_SCOPE_TYPE = symbolFor("react.scope"), REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id"), REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol == "function" && Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable != "object")
            return null;
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          return typeof maybeIterator == "function" ? maybeIterator : null;
        }
        var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = !0;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
              var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            if (disabledDepth--, disabledDepth === 0) {
              var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix;
        function describeBuiltInComponentFrame(name2, source3, ownerFn) {
          {
            if (prefix === void 0)
              try {
                throw Error();
              } catch (x5) {
                var match = x5.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            return `
` + prefix + name2;
          }
        }
        var reentry = !1, componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry)
            return "";
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0)
              return frame2;
          }
          var control;
          reentry = !0;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              if (Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              }), typeof Reflect == "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x5) {
                  control = x5;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x5) {
                  control = x5;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x5) {
                control = x5;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack == "string") {
              for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s2 = sampleLines.length - 1, c3 = controlLines.length - 1; s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]; )
                c3--;
              for (; s2 >= 1 && c3 >= 0; s2--, c3--)
                if (sampleLines[s2] !== controlLines[c3]) {
                  if (s2 !== 1 || c3 !== 1)
                    do
                      if (s2--, c3--, c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                        var _frame = `
` + sampleLines[s2].replace(" at new ", " at ");
                        return typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                      }
                    while (s2 >= 1 && c3 >= 0);
                  break;
                }
            }
          } finally {
            reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn ? fn.displayName || fn.name : "", syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source3, ownerFn) {
          return describeNativeComponentFrame(ctor, !0);
        }
        function describeFunctionComponentFrame(fn, source3, ownerFn) {
          return describeNativeComponentFrame(fn, !1);
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
          if (type == null)
            return "";
          if (typeof type == "function")
            return describeNativeComponentFrame(type, shouldConstruct(type));
          if (typeof type == "string")
            return describeBuiltInComponentFrame(type);
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type == "object")
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type, payload3 = lazyComponent._payload, init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload3), source3, ownerFn);
                } catch {
                }
              }
            }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null, source3 = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case Block:
              return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "", node = workInProgress2;
            do
              info += describeFiber(node), node = node.return;
            while (node);
            return info;
          } catch (x5) {
            return `
Error generating stack: ` + x5.message + `
` + x5.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null)
            return null;
          if (typeof type.tag == "number" && error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."), typeof type == "function")
            return type.displayName || type.name || null;
          if (typeof type == "string")
            return type;
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type == "object")
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type, payload3 = lazyComponent._payload, init3 = lazyComponent._init;
                try {
                  return getComponentName(init3(payload3));
                } catch {
                  return null;
                }
              }
            }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame, current = null, isRendering = !1;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null)
              return null;
            var owner = current._debugOwner;
            if (owner !== null && typeof owner != "undefined")
              return getComponentName(owner.type);
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          return current === null ? "" : getStackByFiberInDevAndProd(current);
        }
        function resetCurrentFiber() {
          ReactDebugCurrentFrame.getCurrentStack = null, current = null, isRendering = !1;
        }
        function setCurrentFiber(fiber) {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev, current = fiber, isRendering = !1;
        }
        function setIsRendering(rendering) {
          isRendering = rendering;
        }
        function getIsRendering() {
          return isRendering;
        }
        function toString7(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: !0,
          checkbox: !0,
          image: !0,
          hidden: !0,
          radio: !0,
          reset: !0,
          submit: !0
        };
        function checkControlledValueProps(tagName, props) {
          hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
        }
        function isCheckable(elem) {
          var type = elem.type, nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          return node && (isCheckable(node) ? value = node.checked ? "true" : "false" : value = node.value), value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField), currentValue = "" + node[valueField];
          if (!(node.hasOwnProperty(valueField) || typeof descriptor == "undefined" || typeof descriptor.get != "function" || typeof descriptor.set != "function")) {
            var get12 = descriptor.get, set7 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: !0,
              get: function() {
                return get12.call(this);
              },
              set: function(value) {
                currentValue = "" + value, set7.call(this, value);
              }
            }), Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node), delete node[valueField];
              }
            };
            return tracker;
          }
        }
        function track(node) {
          getTracker(node) || (node._valueTracker = trackValueOnNode(node));
        }
        function updateValueIfChanged(node) {
          if (!node)
            return !1;
          var tracker = getTracker(node);
          if (!tracker)
            return !0;
          var lastValue = tracker.getValue(), nextValue = getValueFromNode(node);
          return nextValue !== lastValue ? (tracker.setValue(nextValue), !0) : !1;
        }
        function getActiveElement(doc) {
          if (doc = doc || (typeof document != "undefined" ? document : void 0), typeof doc == "undefined")
            return null;
          try {
            return doc.activeElement || doc.body;
          } catch {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = !1, didWarnCheckedDefaultChecked = !1, didWarnControlledToUncontrolled = !1, didWarnUncontrolledToControlled = !1;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element, checked = props.checked, hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked ?? node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked && (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue && (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue = !0);
          var node = element, defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element, checked = props.checked;
          checked != null && setValueForProperty(node, "checked", checked, !1);
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            !node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled && (error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnUncontrolledToControlled = !0), node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled && (error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnControlledToUncontrolled = !0);
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value), type = props.type;
          if (value != null)
            type === "number" ? (value === 0 && node.value === "" || node.value != value) && (node.value = toString7(value)) : node.value !== toString7(value) && (node.value = toString7(value));
          else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          props.hasOwnProperty("value") ? setDefaultValue(node, props.type, value) : props.hasOwnProperty("defaultValue") && setDefaultValue(node, props.type, getToStringValue(props.defaultValue)), props.checked == null && props.defaultChecked != null && (node.defaultChecked = !!props.defaultChecked);
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type, isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null))
              return;
            var initialValue = toString7(node._wrapperState.initialValue);
            isHydrating2 || initialValue !== node.value && (node.value = initialValue), node.defaultValue = initialValue;
          }
          var name2 = node.name;
          name2 !== "" && (node.name = ""), node.defaultChecked = !node.defaultChecked, node.defaultChecked = !!node._wrapperState.initialChecked, name2 !== "" && (node.name = name2);
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props), updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name2 = props.name;
          if (props.type === "radio" && name2 != null) {
            for (var queryRoot = rootNode; queryRoot.parentNode; )
              queryRoot = queryRoot.parentNode;
            for (var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name2) + '][type="radio"]'), i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (!(otherNode === rootNode || otherNode.form !== rootNode.form)) {
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps)
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                updateValueIfChanged(otherNode), updateWrapper(otherNode, otherProps);
              }
            }
          }
        }
        function setDefaultValue(node, type, value) {
          (type !== "number" || getActiveElement(node.ownerDocument) !== node) && (value == null ? node.defaultValue = toString7(node._wrapperState.initialValue) : node.defaultValue !== toString7(value) && (node.defaultValue = toString7(value)));
        }
        var didWarnSelectedSetOnOption = !1, didWarnInvalidChild = !1;
        function flattenChildren(children2) {
          var content = "";
          return React6.Children.forEach(children2, function(child) {
            child != null && (content += child);
          }), content;
        }
        function validateProps(element, props) {
          typeof props.children == "object" && props.children !== null && React6.Children.forEach(props.children, function(child) {
            child != null && (typeof child == "string" || typeof child == "number" || typeof child.type == "string" && (didWarnInvalidChild || (didWarnInvalidChild = !0, error("Only strings and numbers are supported as <option> children."))));
          }), props.selected != null && !didWarnSelectedSetOnOption && (error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
        }
        function postMountWrapper$1(element, props) {
          props.value != null && element.setAttribute("value", toString7(getToStringValue(props.value)));
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props), content = flattenChildren(props.children);
          return content && (hostProps.children = content), hostProps;
        }
        var didWarnValueDefaultValue$1;
        didWarnValueDefaultValue$1 = !1;
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          return ownerName ? `

Check the render method of \`` + ownerName + "`." : "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] != null) {
                var isArray2 = Array.isArray(props[propName]);
                props.multiple && !isArray2 ? error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum()) : !props.multiple && isArray2 && error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            for (var selectedValues = propValue, selectedValue = {}, i = 0; i < selectedValues.length; i++)
              selectedValue["$" + selectedValues[i]] = !0;
            for (var _i = 0; _i < options2.length; _i++) {
              var selected2 = selectedValue.hasOwnProperty("$" + options2[_i].value);
              options2[_i].selected !== selected2 && (options2[_i].selected = selected2), selected2 && setDefaultSelected && (options2[_i].defaultSelected = !0);
            }
          } else {
            for (var _selectedValue = toString7(getToStringValue(propValue)), defaultSelected = null, _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = !0, setDefaultSelected && (options2[_i2].defaultSelected = !0);
                return;
              }
              defaultSelected === null && !options2[_i2].disabled && (defaultSelected = options2[_i2]);
            }
            defaultSelected !== null && (defaultSelected.selected = !0);
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          checkSelectPropTypes(props), node._wrapperState = {
            wasMultiple: !!props.multiple
          }, props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1 && (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnValueDefaultValue$1 = !0);
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          value != null ? updateOptions(node, !!props.multiple, value, !1) : props.defaultValue != null && updateOptions(node, !!props.multiple, props.defaultValue, !0);
        }
        function postUpdateWrapper(element, props) {
          var node = element, wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          value != null ? updateOptions(node, !!props.multiple, value, !1) : wasMultiple !== !!props.multiple && (props.defaultValue != null ? updateOptions(node, !!props.multiple, props.defaultValue, !0) : updateOptions(node, !!props.multiple, props.multiple ? [] : "", !1));
        }
        function restoreControlledState$1(element, props) {
          var node = element, value = props.value;
          value != null && updateOptions(node, !!props.multiple, value, !1);
        }
        var didWarnValDefaultVal = !1;
        function getHostProps$3(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null)
            throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString7(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal && (error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = !0);
          var initialValue = props.value;
          if (initialValue == null) {
            var children2 = props.children, defaultValue = props.defaultValue;
            if (children2 != null) {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              {
                if (defaultValue != null)
                  throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children2)) {
                  if (!(children2.length <= 1))
                    throw Error("<textarea> can only have at most one child.");
                  children2 = children2[0];
                }
                defaultValue = children2;
              }
            }
            defaultValue == null && (defaultValue = ""), initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element, value = getToStringValue(props.value), defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString7(value);
            newValue !== node.value && (node.value = newValue), props.defaultValue == null && node.defaultValue !== newValue && (node.defaultValue = newValue);
          }
          defaultValue != null && (node.defaultValue = toString7(defaultValue));
        }
        function postMountWrapper$3(element, props) {
          var node = element, textContent = node.textContent;
          textContent === node._wrapperState.initialValue && textContent !== "" && textContent !== null && (node.value = textContent);
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml", MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          return parentNamespace == null || parentNamespace === HTML_NAMESPACE ? getIntrinsicNamespace(type) : parentNamespace === SVG_NAMESPACE && type === "foreignObject" ? HTML_NAMESPACE : parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          return typeof MSApp != "undefined" && MSApp.execUnsafeLocalFunction ? function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          } : func;
        }, reusableSVGContainer, setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === Namespaces.svg && !("innerHTML" in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div"), reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            for (var svgNode2 = reusableSVGContainer.firstChild; node.firstChild; )
              node.removeChild(node.firstChild);
            for (; svgNode2.firstChild; )
              node.appendChild(svgNode2.firstChild);
            return;
          }
          node.innerHTML = html;
        }), ELEMENT_NODE = 1, TEXT_NODE = 3, COMMENT_NODE = 8, DOCUMENT_NODE = 9, DOCUMENT_FRAGMENT_NODE = 11, setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        }, shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        }, isUnitlessNumber = {
          animationIterationCount: !0,
          borderImageOutset: !0,
          borderImageSlice: !0,
          borderImageWidth: !0,
          boxFlex: !0,
          boxFlexGroup: !0,
          boxOrdinalGroup: !0,
          columnCount: !0,
          columns: !0,
          flex: !0,
          flexGrow: !0,
          flexPositive: !0,
          flexShrink: !0,
          flexNegative: !0,
          flexOrder: !0,
          gridArea: !0,
          gridRow: !0,
          gridRowEnd: !0,
          gridRowSpan: !0,
          gridRowStart: !0,
          gridColumn: !0,
          gridColumnEnd: !0,
          gridColumnSpan: !0,
          gridColumnStart: !0,
          fontWeight: !0,
          lineClamp: !0,
          lineHeight: !0,
          opacity: !0,
          order: !0,
          orphans: !0,
          tabSize: !0,
          widows: !0,
          zIndex: !0,
          zoom: !0,
          fillOpacity: !0,
          floodOpacity: !0,
          stopOpacity: !0,
          strokeDasharray: !0,
          strokeDashoffset: !0,
          strokeMiterlimit: !0,
          strokeOpacity: !0,
          strokeWidth: !0
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name2, value, isCustomProperty) {
          var isEmpty7 = value == null || typeof value == "boolean" || value === "";
          return isEmpty7 ? "" : !isCustomProperty && typeof value == "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2]) ? value + "px" : ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g, msPattern = /^ms-/;
        function hyphenateStyleName(name2) {
          return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern$1 = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          }, warnHyphenatedStyleName = function(name2) {
            warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2] || (warnedStyleNames[name2] = !0, error("Unsupported style property %s. Did you mean %s?", name2, camelize(name2.replace(msPattern$1, "ms-"))));
          }, warnBadVendoredStyleName = function(name2) {
            warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2] || (warnedStyleNames[name2] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name2, name2.charAt(0).toUpperCase() + name2.slice(1)));
          }, warnStyleValueWithSemicolon = function(name2, value) {
            warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name2, value.replace(badStyleValueWithSemicolonPattern, "")));
          }, warnStyleValueIsNaN = function(name2, value) {
            warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name2));
          }, warnStyleValueIsInfinity = function(name2, value) {
            warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name2));
          };
          warnValidStyle = function(name2, value) {
            name2.indexOf("-") > -1 ? warnHyphenatedStyleName(name2) : badVendoredStyleNamePattern.test(name2) ? warnBadVendoredStyleName(name2) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name2, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name2, value) : isFinite(value) || warnStyleValueIsInfinity(name2, value));
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "", delimiter = "";
            for (var styleName in styles)
              if (!!styles.hasOwnProperty(styleName)) {
                var styleValue2 = styles[styleName];
                if (styleValue2 != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":", serialized += dangerousStyleValue(styleName, styleValue2, isCustomProperty), delimiter = ";";
                }
              }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style3 = node.style;
          for (var styleName in styles)
            if (!!styles.hasOwnProperty(styleName)) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty || warnValidStyle$1(styleName, styles[styleName]);
              var styleValue2 = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              styleName === "float" && (styleName = "cssFloat"), isCustomProperty ? style3.setProperty(styleName, styleValue2) : style3[styleName] = styleValue2;
            }
        }
        function isValueEmpty(value) {
          return value == null || typeof value == "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles)
            for (var longhands = shorthandToLonghand[key] || [key], i = 0; i < longhands.length; i++)
              expanded[longhands[i]] = key;
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles)
              return;
            var expandedUpdates = expandShorthandMap(styleUpdates), expandedStyles = expandShorthandMap(nextStyles), warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key], correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey])
                  continue;
                warnedAbout[warningKey] = !0, error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: !0,
          base: !0,
          br: !0,
          col: !0,
          embed: !0,
          hr: !0,
          img: !0,
          input: !0,
          keygen: !0,
          link: !0,
          meta: !0,
          param: !0,
          source: !0,
          track: !0,
          wbr: !0
        }, voidElementTags = _assign({
          menuitem: !0
        }, omittedCloseTags), HTML = "__html";
        function assertValidProps(tag2, props) {
          if (!!props) {
            if (voidElementTags[tag2] && !(props.children == null && props.dangerouslySetInnerHTML == null))
              throw Error(tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null)
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              if (!(typeof props.dangerouslySetInnerHTML == "object" && HTML in props.dangerouslySetInnerHTML))
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), !(props.style == null || typeof props.style == "object"))
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1)
            return typeof props.is == "string";
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return !1;
            default:
              return !0;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        }, ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$"), hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name2) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name2) && warnedProperties[name2])
              return !0;
            if (rARIACamel.test(name2)) {
              var ariaName = "aria-" + name2.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null)
                return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name2), warnedProperties[name2] = !0, !0;
              if (name2 !== correctName)
                return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName), warnedProperties[name2] = !0, !0;
            }
            if (rARIA.test(name2)) {
              var lowerCasedName = name2.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null)
                return warnedProperties[name2] = !0, !1;
              if (name2 !== standardName)
                return error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName), warnedProperties[name2] = !0, !0;
            }
          }
          return !0;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              isValid || invalidProps.push(key);
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            invalidProps.length === 1 ? error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type) : invalidProps.length > 1 && error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
        function validateProperties(type, props) {
          isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = !1;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select")
              return;
            props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {}, _hasOwnProperty = Object.prototype.hasOwnProperty, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name2, value, eventRegistry) {
            if (_hasOwnProperty.call(warnedProperties$1, name2) && warnedProperties$1[name2])
              return !0;
            var lowerCasedName = name2.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
              return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name2] = !0, !0;
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name2))
                return !0;
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null)
                return error("Invalid event handler property `%s`. Did you mean `%s`?", name2, registrationName), warnedProperties$1[name2] = !0, !0;
              if (EVENT_NAME_REGEX.test(name2))
                return error("Unknown event handler property `%s`. It will be ignored.", name2), warnedProperties$1[name2] = !0, !0;
            } else if (EVENT_NAME_REGEX.test(name2))
              return INVALID_EVENT_NAME_REGEX.test(name2) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name2), warnedProperties$1[name2] = !0, !0;
            if (rARIA$1.test(name2) || rARIACamel$1.test(name2))
              return !0;
            if (lowerCasedName === "innerhtml")
              return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name2] = !0, !0;
            if (lowerCasedName === "aria")
              return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name2] = !0, !0;
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
              return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name2] = !0, !0;
            if (typeof value == "number" && isNaN(value))
              return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name2), warnedProperties$1[name2] = !0, !0;
            var propertyInfo = getPropertyInfo(name2), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name2)
                return error("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName), warnedProperties$1[name2] = !0, !0;
            } else if (!isReserved && name2 !== lowerCasedName)
              return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name2, lowerCasedName), warnedProperties$1[name2] = !0, !0;
            return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name2, value, propertyInfo, !1) ? (value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name2, name2, value, name2) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name2, name2, value, name2, name2, name2), warnedProperties$1[name2] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name2, value, propertyInfo, !1) ? (warnedProperties$1[name2] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name2, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name2, value), warnedProperties$1[name2] = !0), !0);
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              isValid || unknownProps.push(key);
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            unknownProps.length === 1 ? error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type) : unknownProps.length > 1 && error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1, IS_NON_DELEGATED = 1 << 1, IS_CAPTURE_PHASE = 1 << 2, IS_REPLAYED = 1 << 4, SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        function getEventTarget(nativeEvent) {
          var target3 = nativeEvent.target || nativeEvent.srcElement || window;
          return target3.correspondingUseElement && (target3 = target3.correspondingUseElement), target3.nodeType === TEXT_NODE ? target3.parentNode : target3;
        }
        var restoreImpl = null, restoreTarget = null, restoreQueue = null;
        function restoreStateOfTarget(target3) {
          var internalInstance = getInstanceFromNode(target3);
          if (!!internalInstance) {
            if (typeof restoreImpl != "function")
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target3) {
          restoreTarget ? restoreQueue ? restoreQueue.push(target3) : restoreQueue = [target3] : restoreTarget = target3;
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!!restoreTarget) {
            var target3 = restoreTarget, queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target3), queuedTargets)
              for (var i = 0; i < queuedTargets.length; i++)
                restoreStateOfTarget(queuedTargets[i]);
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        }, discreteUpdatesImpl = function(fn, a3, b, c3, d) {
          return fn(a3, b, c3, d);
        }, flushDiscreteUpdatesImpl = function() {
        }, batchedEventUpdatesImpl = batchedUpdatesImpl, isInsideEventHandler = !1, isBatchingEventUpdates = !1;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          controlledComponentsHavePendingUpdates && (flushDiscreteUpdatesImpl(), restoreStateIfNeeded());
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler)
            return fn(bookkeeping);
          isInsideEventHandler = !0;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = !1, finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a3, b) {
          if (isBatchingEventUpdates)
            return fn(a3, b);
          isBatchingEventUpdates = !0;
          try {
            return batchedEventUpdatesImpl(fn, a3, b);
          } finally {
            isBatchingEventUpdates = !1, finishEventHandler();
          }
        }
        function discreteUpdates(fn, a3, b, c3, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = !0;
          try {
            return discreteUpdatesImpl(fn, a3, b, c3, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler, isInsideEventHandler || finishEventHandler();
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          isInsideEventHandler || flushDiscreteUpdatesImpl();
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl, discreteUpdatesImpl = _discreteUpdatesImpl, flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl, batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        function isInteractive(tag2) {
          return tag2 === "button" || tag2 === "input" || tag2 === "select" || tag2 === "textarea";
        }
        function shouldPreventMouseEvent(name2, type, props) {
          switch (name2) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return !1;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null)
            return null;
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null)
            return null;
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props))
            return null;
          if (!(!listener || typeof listener == "function"))
            throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          return listener;
        }
        var passiveBrowserEventsSupported = !1;
        if (canUseDOM)
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = !0;
              }
            }), window.addEventListener("test", options, options), window.removeEventListener("test", options, options);
          } catch {
            passiveBrowserEventsSupported = !1;
          }
        function invokeGuardedCallbackProd(name2, func, context, a3, b, c3, d, e2, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        if (typeof window != "undefined" && typeof window.dispatchEvent == "function" && typeof document != "undefined" && typeof document.createEvent == "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function(name2, func, context, a3, b, c3, d, e2, f) {
            if (typeof document == "undefined")
              throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent("Event"), didCall = !1, didError = !0, windowEvent = window.event, windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, !1), typeof window.event != "undefined" && window.hasOwnProperty("event") && (window.event = windowEvent);
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = !0, restoreAfterDispatch(), func.apply(context, funcArgs), didError = !1;
            }
            var error2, didSetError = !1, isCrossOriginError = !1;
            function handleWindowError(event) {
              if (error2 = event.error, didSetError = !0, error2 === null && event.colno === 0 && event.lineno === 0 && (isCrossOriginError = !0), event.defaultPrevented && error2 != null && typeof error2 == "object")
                try {
                  error2._suppressLogging = !0;
                } catch {
                }
            }
            var evtType = "react-" + (name2 || "invokeguardedcallback");
            if (window.addEventListener("error", handleWindowError), fakeNode.addEventListener(evtType, callCallback2, !1), evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), windowEventDescriptor && Object.defineProperty(window, "event", windowEventDescriptor), didCall && didError && (didSetError ? isCrossOriginError && (error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(error2)), window.removeEventListener("error", handleWindowError), !didCall)
              return restoreAfterDispatch(), invokeGuardedCallbackProd.apply(this, arguments);
          };
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl, hasError = !1, caughtError = null, hasRethrowError = !1, rethrowError = null, reporter = {
          onError: function(error2) {
            hasError = !0, caughtError = error2;
          }
        };
        function invokeGuardedCallback(name2, func, context, a3, b, c3, d, e2, f) {
          hasError = !1, caughtError = null, invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name2, func, context, a3, b, c3, d, e2, f) {
          if (invokeGuardedCallback.apply(this, arguments), hasError) {
            var error2 = clearCaughtError();
            hasRethrowError || (hasRethrowError = !0, rethrowError = error2);
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            throw hasRethrowError = !1, rethrowError = null, error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            return hasError = !1, caughtError = null, error2;
          } else
            throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        }
        function get11(key) {
          return key._reactInternals;
        }
        function has8(key) {
          return key._reactInternals !== void 0;
        }
        function set6(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0, PerformedWork = 1, Placement = 2, Update = 4, PlacementAndUpdate = 6, Deletion = 8, ContentReset = 16, Callback = 32, DidCapture = 64, Ref = 128, Snapshot = 256, Passive = 512, PassiveUnmountPendingDev = 8192, Hydrating = 1024, HydratingAndUpdate = 1028, LifecycleEffectMask = 932, HostEffectMask = 2047, Incomplete = 2048, ShouldCapture = 4096, ForceUpdateForLegacySuspense = 16384, ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber, nearestMounted = fiber;
          if (fiber.alternate)
            for (; node.return; )
              node = node.return;
          else {
            var nextNode = node;
            do
              node = nextNode, (node.flags & (Placement | Hydrating)) !== NoFlags && (nearestMounted = node.return), nextNode = node.return;
            while (nextNode);
          }
          return node.tag === HostRoot ? nearestMounted : null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              current2 !== null && (suspenseState = current2.memoizedState);
            }
            if (suspenseState !== null)
              return suspenseState.dehydrated;
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner, instance = ownerFiber.stateNode;
              instance._warnedAboutRefsInRender || error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component"), instance._warnedAboutRefsInRender = !0;
            }
          }
          var fiber = get11(component);
          return fiber ? getNearestMountedFiber(fiber) === fiber : !1;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber)
            throw Error("Unable to find node on an unmounted component.");
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null)
              throw Error("Unable to find node on an unmounted component.");
            return nearestMounted !== fiber ? null : fiber;
          }
          for (var a3 = fiber, b = alternate; ; ) {
            var parentA = a3.return;
            if (parentA === null)
              break;
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a3 = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              for (var child = parentA.child; child; ) {
                if (child === a3)
                  return assertIsMounted(parentA), fiber;
                if (child === b)
                  return assertIsMounted(parentA), alternate;
                child = child.sibling;
              }
              throw Error("Unable to find node on an unmounted component.");
            }
            if (a3.return !== b.return)
              a3 = parentA, b = parentB;
            else {
              for (var didFindChild = !1, _child = parentA.child; _child; ) {
                if (_child === a3) {
                  didFindChild = !0, a3 = parentA, b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = !0, b = parentA, a3 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                for (_child = parentB.child; _child; ) {
                  if (_child === a3) {
                    didFindChild = !0, a3 = parentB, b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = !0, b = parentB, a3 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild)
                  throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
            if (a3.alternate !== b)
              throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
          if (a3.tag !== HostRoot)
            throw Error("Unable to find node on an unmounted component.");
          return a3.stateNode.current === a3 ? fiber : alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent)
            return null;
          for (var node = currentParent; ; ) {
            if (node.tag === HostComponent || node.tag === HostText)
              return node;
            if (node.child) {
              node.child.return = node, node = node.child;
              continue;
            }
            if (node === currentParent)
              return null;
            for (; !node.sibling; ) {
              if (!node.return || node.return === currentParent)
                return null;
              node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent)
            return null;
          for (var node = currentParent; ; ) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI)
              return node;
            if (node.child && node.tag !== HostPortal) {
              node.child.return = node, node = node.child;
              continue;
            }
            if (node === currentParent)
              return null;
            for (; !node.sibling; ) {
              if (!node.return || node.return === currentParent)
                return null;
              node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
          }
          return null;
        }
        function doesFiberContain(parentFiber, childFiber) {
          for (var node = childFiber, parentFiberAlternate = parentFiber.alternate; node !== null; ) {
            if (node === parentFiber || node === parentFiberAlternate)
              return !0;
            node = node.return;
          }
          return !1;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = !1, queuedDiscreteEvents = [], queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = new Map(), queuedPointerCaptures = new Map(), queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              _fiber2 !== null && attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          return targetContainer !== null && targetContainers.indexOf(targetContainer) === -1 && targetContainers.push(targetContainer), existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent), !0;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent), !0;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent), !0;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent, pointerId = pointerEvent.pointerId;
              return queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent)), !0;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent, _pointerId2 = _pointerEvent.pointerId;
              return queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent)), !0;
            }
          }
          return !1;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag2 = nearestMounted.tag;
              if (tag2 === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance, attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                  });
                  return;
                }
              } else if (tag2 === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (root3.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null)
            return !1;
          for (var targetContainers = queuedEvent.targetContainers; targetContainers.length > 0; ) {
            var targetContainer = targetContainers[0], nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              return _fiber3 !== null && attemptContinuousHydration(_fiber3), queuedEvent.blockedOn = nextBlockedOn, !1;
            }
            targetContainers.shift();
          }
          return !0;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map9) {
          attemptReplayContinuousQueuedEvent(queuedEvent) && map9.delete(key);
        }
        function replayUnblockedEvents() {
          for (hasScheduledReplayAttempt = !1; queuedDiscreteEvents.length > 0; ) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
              _fiber4 !== null && attemptUserBlockingHydration(_fiber4);
              break;
            }
            for (var targetContainers = nextDiscreteEvent.targetContainers; targetContainers.length > 0; ) {
              var targetContainer = targetContainers[0], nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                nextDiscreteEvent.blockedOn = nextBlockedOn;
                break;
              }
              targetContainers.shift();
            }
            nextDiscreteEvent.blockedOn === null && queuedDiscreteEvents.shift();
          }
          queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null), queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null), queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null), queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap), queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = !0, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null);
            }
          }
          queuedFocus !== null && scheduleCallbackIfUnblocked(queuedFocus, unblocked), queuedDrag !== null && scheduleCallbackIfUnblocked(queuedDrag, unblocked), queuedMouse !== null && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock), queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
          }
          for (; queuedExplicitHydrationTargets.length > 0; ) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null)
              break;
            attemptExplicitHydrationTarget(nextExplicitTarget), nextExplicitTarget.blockedOn === null && queuedExplicitHydrationTargets.shift();
          }
        }
        var DiscreteEvent = 0, UserBlockingEvent = 1, ContinuousEvent = 2;
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          return prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase(), prefixes2["Webkit" + styleProp] = "webkit" + eventName, prefixes2["Moz" + styleProp] = "moz" + eventName, prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        }, prefixedEventNames = {}, style2 = {};
        canUseDOM && (style2 = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName])
            return prefixedEventNames[eventName];
          if (!vendorPrefixes[eventName])
            return eventName;
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap)
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2)
              return prefixedEventNames[eventName] = prefixMap[styleProp];
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = new Map(), eventPriorities = new Map(), discreteEventPairsForSimpleEventPlugin = [
          "cancel",
          "cancel",
          "click",
          "click",
          "close",
          "close",
          "contextmenu",
          "contextMenu",
          "copy",
          "copy",
          "cut",
          "cut",
          "auxclick",
          "auxClick",
          "dblclick",
          "doubleClick",
          "dragend",
          "dragEnd",
          "dragstart",
          "dragStart",
          "drop",
          "drop",
          "focusin",
          "focus",
          "focusout",
          "blur",
          "input",
          "input",
          "invalid",
          "invalid",
          "keydown",
          "keyDown",
          "keypress",
          "keyPress",
          "keyup",
          "keyUp",
          "mousedown",
          "mouseDown",
          "mouseup",
          "mouseUp",
          "paste",
          "paste",
          "pause",
          "pause",
          "play",
          "play",
          "pointercancel",
          "pointerCancel",
          "pointerdown",
          "pointerDown",
          "pointerup",
          "pointerUp",
          "ratechange",
          "rateChange",
          "reset",
          "reset",
          "seeked",
          "seeked",
          "submit",
          "submit",
          "touchcancel",
          "touchCancel",
          "touchend",
          "touchEnd",
          "touchstart",
          "touchStart",
          "volumechange",
          "volumeChange"
        ], otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"], userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"], continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
        function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i += 2) {
            var topEvent = eventTypes[i], event = eventTypes[i + 1], capitalizedEvent = event[0].toUpperCase() + event.slice(1), reactName = "on" + capitalizedEvent;
            eventPriorities.set(topEvent, priority), topLevelEventsToReactNames.set(topEvent, reactName), registerTwoPhaseEvent(reactName, [topEvent]);
          }
        }
        function setEventPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i++)
            eventPriorities.set(eventTypes[i], priority);
        }
        function getEventPriorityForPluginSystem(domEventName) {
          var priority = eventPriorities.get(domEventName);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        function registerSimpleEvents() {
          registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent), registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent), registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent), setEventPriorities(otherDiscreteEvents, DiscreteEvent);
        }
        var Scheduler_now = Scheduler.unstable_now;
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null))
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        var ImmediatePriority = 99, UserBlockingPriority = 98, NormalPriority = 97, LowPriority = 96, IdlePriority = 95, NoPriority = 90, initialTimeMs = Scheduler_now(), SyncLanePriority = 15, SyncBatchedLanePriority = 14, InputDiscreteHydrationLanePriority = 13, InputDiscreteLanePriority = 12, InputContinuousHydrationLanePriority = 11, InputContinuousLanePriority = 10, DefaultHydrationLanePriority = 9, DefaultLanePriority = 8, TransitionHydrationPriority = 7, TransitionPriority = 6, RetryLanePriority = 5, SelectiveHydrationLanePriority = 4, IdleHydrationLanePriority = 3, IdleLanePriority = 2, OffscreenLanePriority = 1, NoLanePriority = 0, TotalLanes = 31, NoLanes = 0, NoLane = 0, SyncLane = 1, SyncBatchedLane = 2, InputDiscreteHydrationLane = 4, InputDiscreteLanes = 24, InputContinuousHydrationLane = 32, InputContinuousLanes = 192, DefaultHydrationLane = 256, DefaultLanes = 3584, TransitionHydrationLane = 4096, TransitionLanes = 4186112, RetryLanes = 62914560, SomeRetryLane = 33554432, SelectiveHydrationLane = 67108864, NonIdleLanes = 134217727, IdleHydrationLane = 134217728, IdleLanes = 805306368, OffscreenLane = 1073741824, NoTimestamp = -1;
        function setCurrentUpdateLanePriority(newLanePriority) {
        }
        var return_highestLanePriority = DefaultLanePriority;
        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes)
            return return_highestLanePriority = SyncLanePriority, SyncLane;
          if ((SyncBatchedLane & lanes) !== NoLanes)
            return return_highestLanePriority = SyncBatchedLanePriority, SyncBatchedLane;
          if ((InputDiscreteHydrationLane & lanes) !== NoLanes)
            return return_highestLanePriority = InputDiscreteHydrationLanePriority, InputDiscreteHydrationLane;
          var inputDiscreteLanes = InputDiscreteLanes & lanes;
          if (inputDiscreteLanes !== NoLanes)
            return return_highestLanePriority = InputDiscreteLanePriority, inputDiscreteLanes;
          if ((lanes & InputContinuousHydrationLane) !== NoLanes)
            return return_highestLanePriority = InputContinuousHydrationLanePriority, InputContinuousHydrationLane;
          var inputContinuousLanes = InputContinuousLanes & lanes;
          if (inputContinuousLanes !== NoLanes)
            return return_highestLanePriority = InputContinuousLanePriority, inputContinuousLanes;
          if ((lanes & DefaultHydrationLane) !== NoLanes)
            return return_highestLanePriority = DefaultHydrationLanePriority, DefaultHydrationLane;
          var defaultLanes = DefaultLanes & lanes;
          if (defaultLanes !== NoLanes)
            return return_highestLanePriority = DefaultLanePriority, defaultLanes;
          if ((lanes & TransitionHydrationLane) !== NoLanes)
            return return_highestLanePriority = TransitionHydrationPriority, TransitionHydrationLane;
          var transitionLanes = TransitionLanes & lanes;
          if (transitionLanes !== NoLanes)
            return return_highestLanePriority = TransitionPriority, transitionLanes;
          var retryLanes = RetryLanes & lanes;
          if (retryLanes !== NoLanes)
            return return_highestLanePriority = RetryLanePriority, retryLanes;
          if (lanes & SelectiveHydrationLane)
            return return_highestLanePriority = SelectiveHydrationLanePriority, SelectiveHydrationLane;
          if ((lanes & IdleHydrationLane) !== NoLanes)
            return return_highestLanePriority = IdleHydrationLanePriority, IdleHydrationLane;
          var idleLanes = IdleLanes & lanes;
          return idleLanes !== NoLanes ? (return_highestLanePriority = IdleLanePriority, idleLanes) : (OffscreenLane & lanes) !== NoLanes ? (return_highestLanePriority = OffscreenLanePriority, OffscreenLane) : (error("Should have found matching lanes. This is a bug in React."), return_highestLanePriority = DefaultLanePriority, lanes);
        }
        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;
            case UserBlockingPriority:
              return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
              return DefaultLanePriority;
            case IdlePriority:
              return IdleLanePriority;
            default:
              return NoLanePriority;
          }
        }
        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;
            case NoLanePriority:
              return NoPriority;
            default:
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
          }
        }
        function getNextLanes(root3, wipLanes) {
          var pendingLanes = root3.pendingLanes;
          if (pendingLanes === NoLanes)
            return return_highestLanePriority = NoLanePriority, NoLanes;
          var nextLanes = NoLanes, nextLanePriority = NoLanePriority, expiredLanes = root3.expiredLanes, suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes;
          if (expiredLanes !== NoLanes)
            nextLanes = expiredLanes, nextLanePriority = return_highestLanePriority = SyncLanePriority;
          else {
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes)
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes), nextLanePriority = return_highestLanePriority;
              else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                nonIdlePingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(nonIdlePingedLanes), nextLanePriority = return_highestLanePriority);
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              unblockedLanes !== NoLanes ? (nextLanes = getHighestPriorityLanes(unblockedLanes), nextLanePriority = return_highestLanePriority) : pingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(pingedLanes), nextLanePriority = return_highestLanePriority);
            }
          }
          if (nextLanes === NoLanes)
            return NoLanes;
          if (nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes), wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority)
              return wipLanes;
            return_highestLanePriority = nextLanePriority;
          }
          var entangledLanes = root3.entangledLanes;
          if (entangledLanes !== NoLanes)
            for (var entanglements = root3.entanglements, lanes = nextLanes & entangledLanes; lanes > 0; ) {
              var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3;
              nextLanes |= entanglements[index3], lanes &= ~lane;
            }
          return nextLanes;
        }
        function getMostRecentEventTime(root3, lanes) {
          for (var eventTimes = root3.eventTimes, mostRecentEventTime = NoTimestamp; lanes > 0; ) {
            var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3, eventTime = eventTimes[index3];
            eventTime > mostRecentEventTime && (mostRecentEventTime = eventTime), lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          getHighestPriorityLanes(lane);
          var priority = return_highestLanePriority;
          return priority >= InputContinuousLanePriority ? currentTime + 250 : priority >= TransitionPriority ? currentTime + 5e3 : NoTimestamp;
        }
        function markStarvedLanesAsExpired(root3, currentTime) {
          for (var pendingLanes = root3.pendingLanes, suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes, expirationTimes = root3.expirationTimes, lanes = pendingLanes; lanes > 0; ) {
            var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3, expirationTime = expirationTimes[index3];
            expirationTime === NoTimestamp ? ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) && (expirationTimes[index3] = computeExpirationTime(lane, currentTime)) : expirationTime <= currentTime && (root3.expiredLanes |= lane), lanes &= ~lane;
          }
        }
        function getLanesToRetrySynchronouslyOnError(root3) {
          var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
          return everythingButOffscreen !== NoLanes ? everythingButOffscreen : everythingButOffscreen & OffscreenLane ? OffscreenLane : NoLanes;
        }
        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;
            case SyncLanePriority:
              return SyncLane;
            case SyncBatchedLanePriority:
              return SyncBatchedLane;
            case InputDiscreteLanePriority: {
              var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
              return _lane === NoLane ? findUpdateLane(InputContinuousLanePriority, wipLanes) : _lane;
            }
            case InputContinuousLanePriority: {
              var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
              return _lane2 === NoLane ? findUpdateLane(DefaultLanePriority, wipLanes) : _lane2;
            }
            case DefaultLanePriority: {
              var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
              return _lane3 === NoLane && (_lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes), _lane3 === NoLane && (_lane3 = pickArbitraryLane(DefaultLanes))), _lane3;
            }
            case TransitionPriority:
            case RetryLanePriority:
              break;
            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
              return lane === NoLane && (lane = pickArbitraryLane(IdleLanes)), lane;
          }
          throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
        function findTransitionLane(wipLanes, pendingLanes) {
          var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
          return lane === NoLane && (lane = pickArbitraryLane(TransitionLanes & ~wipLanes), lane === NoLane && (lane = pickArbitraryLane(TransitionLanes))), lane;
        }
        function findRetryLane(wipLanes) {
          var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
          return lane === NoLane && (lane = pickArbitraryLane(RetryLanes)), lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function getLowestPriorityLane(lanes) {
          var index3 = 31 - clz32(lanes);
          return index3 < 0 ? NoLanes : 1 << index3;
        }
        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a3, b) {
          return (a3 & b) !== NoLanes;
        }
        function isSubsetOfLanes(set7, subset3) {
          return (set7 & subset3) === subset3;
        }
        function mergeLanes(a3, b) {
          return a3 | b;
        }
        function removeLanes(set7, subset3) {
          return set7 & ~subset3;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a3, b) {
          return a3 !== NoLane && a3 < b ? a3 : b;
        }
        function createLaneMap(initial) {
          for (var laneMap = [], i = 0; i < TotalLanes; i++)
            laneMap.push(initial);
          return laneMap;
        }
        function markRootUpdated(root3, updateLane, eventTime) {
          root3.pendingLanes |= updateLane;
          var higherPriorityLanes = updateLane - 1;
          root3.suspendedLanes &= higherPriorityLanes, root3.pingedLanes &= higherPriorityLanes;
          var eventTimes = root3.eventTimes, index3 = laneToIndex(updateLane);
          eventTimes[index3] = eventTime;
        }
        function markRootSuspended(root3, suspendedLanes) {
          root3.suspendedLanes |= suspendedLanes, root3.pingedLanes &= ~suspendedLanes;
          for (var expirationTimes = root3.expirationTimes, lanes = suspendedLanes; lanes > 0; ) {
            var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3;
            expirationTimes[index3] = NoTimestamp, lanes &= ~lane;
          }
        }
        function markRootPinged(root3, pingedLanes, eventTime) {
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        }
        function markDiscreteUpdatesExpired(root3) {
          root3.expiredLanes |= InputDiscreteLanes & root3.pendingLanes;
        }
        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }
        function markRootMutableRead(root3, updateLane) {
          root3.mutableReadLanes |= updateLane & root3.pendingLanes;
        }
        function markRootFinished(root3, remainingLanes) {
          var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
          root3.pendingLanes = remainingLanes, root3.suspendedLanes = 0, root3.pingedLanes = 0, root3.expiredLanes &= remainingLanes, root3.mutableReadLanes &= remainingLanes, root3.entangledLanes &= remainingLanes;
          for (var entanglements = root3.entanglements, eventTimes = root3.eventTimes, expirationTimes = root3.expirationTimes, lanes = noLongerPendingLanes; lanes > 0; ) {
            var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3;
            entanglements[index3] = NoLanes, eventTimes[index3] = NoTimestamp, expirationTimes[index3] = NoTimestamp, lanes &= ~lane;
          }
        }
        function markRootEntangled(root3, entangledLanes) {
          root3.entangledLanes |= entangledLanes;
          for (var entanglements = root3.entanglements, lanes = entangledLanes; lanes > 0; ) {
            var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3;
            entanglements[index3] |= entangledLanes, lanes &= ~lane;
          }
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
        function clz32Fallback(lanes) {
          return lanes === 0 ? 32 : 31 - (log(lanes) / LN2 | 0) | 0;
        }
        var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority, _enabled = !0;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriorityForPluginSystem(domEventName), listenerWrapper;
          switch (eventPriority) {
            case DiscreteEvent:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case UserBlockingEvent:
              listenerWrapper = dispatchUserBlockingUpdate;
              break;
            case ContinuousEvent:
            default:
              listenerWrapper = dispatchEvent2;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp), discreteUpdates(dispatchEvent2, domEventName, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
          runWithPriority(UserBlockingPriority$1, dispatchEvent2.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
        }
        function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!!_enabled) {
            var allowReplay = !0;
            if (allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) == 0, allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              allowReplay && clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent))
                return;
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
        }
        function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent), targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null)
              targetInst = null;
            else {
              var tag2 = nearestMounted.tag;
              if (tag2 === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null)
                  return instance;
                targetInst = null;
              } else if (tag2 === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (root3.hydrate)
                  return getContainerFromFiber(nearestMounted);
                targetInst = null;
              } else
                nearestMounted !== targetInst && (targetInst = null);
            }
          }
          return dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer), null;
        }
        function addEventBubbleListener(target3, eventType, listener) {
          return target3.addEventListener(eventType, listener, !1), listener;
        }
        function addEventCaptureListener(target3, eventType, listener) {
          return target3.addEventListener(eventType, listener, !0), listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target3, eventType, listener, passive) {
          return target3.addEventListener(eventType, listener, {
            capture: !0,
            passive
          }), listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target3, eventType, listener, passive) {
          return target3.addEventListener(eventType, listener, {
            passive
          }), listener;
        }
        var root2 = null, startText = null, fallbackText = null;
        function initialize(nativeEventTarget) {
          return root2 = nativeEventTarget, startText = getText(), !0;
        }
        function reset() {
          root2 = null, startText = null, fallbackText = null;
        }
        function getData() {
          if (fallbackText)
            return fallbackText;
          var start2, startValue = startText, startLength = startValue.length, end, endValue = getText(), endLength = endValue.length;
          for (start2 = 0; start2 < startLength && startValue[start2] === endValue[start2]; start2++)
            ;
          var minEnd = startLength - start2;
          for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++)
            ;
          var sliceTail = end > 1 ? 1 - end : void 0;
          return fallbackText = endValue.slice(start2, sliceTail), fallbackText;
        }
        function getText() {
          return "value" in root2 ? root2.value : root2.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode, keyCode = nativeEvent.keyCode;
          return "charCode" in nativeEvent ? (charCode = nativeEvent.charCode, charCode === 0 && keyCode === 13 && (charCode = 13)) : charCode = keyCode, charCode === 10 && (charCode = 13), charCode >= 32 || charCode === 13 ? charCode : 0;
        }
        function functionThatReturnsTrue() {
          return !0;
        }
        function functionThatReturnsFalse() {
          return !1;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName, this._targetInst = targetInst, this.type = reactEventType, this.nativeEvent = nativeEvent, this.target = nativeEventTarget, this.currentTarget = null;
            for (var _propName in Interface)
              if (!!Interface.hasOwnProperty(_propName)) {
                var normalize = Interface[_propName];
                normalize ? this[_propName] = normalize(nativeEvent) : this[_propName] = nativeEvent[_propName];
              }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === !1;
            return defaultPrevented ? this.isDefaultPrevented = functionThatReturnsTrue : this.isDefaultPrevented = functionThatReturnsFalse, this.isPropagationStopped = functionThatReturnsFalse, this;
          }
          return _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = !0;
              var event = this.nativeEvent;
              !event || (event.preventDefault ? event.preventDefault() : typeof event.returnValue != "unknown" && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              !event || (event.stopPropagation ? event.stopPropagation() : typeof event.cancelBubble != "unknown" && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          }), SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = _assign({}, EventInterface, {
          view: 0,
          detail: 0
        }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          event !== lastMouseEvent && (lastMouseEvent && event.type === "mousemove" ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : (lastMovementX = 0, lastMovementY = 0), lastMouseEvent = event);
        }
        var MouseEventInterface = _assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            return event.relatedTarget === void 0 ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
          },
          movementX: function(event) {
            return "movementX" in event ? event.movementX : (updateMouseMovementPolyfillState(event), lastMovementX);
          },
          movementY: function(event) {
            return "movementY" in event ? event.movementY : lastMovementY;
          }
        }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = _assign({}, MouseEventInterface, {
          dataTransfer: 0
        }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = _assign({}, UIEventInterface, {
          relatedTarget: 0
        }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = _assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = _assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = _assign({}, EventInterface, {
          data: 0
        }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        }, translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified")
              return key;
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          return nativeEvent.type === "keydown" || nativeEvent.type === "keyup" ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this, nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState)
            return nativeEvent.getModifierState(keyArg);
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : !1;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = _assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            return event.type === "keypress" ? getEventCharCode(event) : 0;
          },
          keyCode: function(event) {
            return event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
          },
          which: function(event) {
            return event.type === "keypress" ? getEventCharCode(event) : event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
          }
        }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = _assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = _assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = _assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = _assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
        canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = !1;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return !0;
            default:
              return !1;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          return typeof detail == "object" && "data" in detail ? detail.data : null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = !1;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType, fallbackData;
          if (canUseCompositionEvent ? eventType = getCompositionEventType(domEventName) : isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : isFallbackCompositionStart(domEventName, nativeEvent) && (eventType = "onCompositionStart"), !eventType)
            return null;
          useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) && (!isComposing && eventType === "onCompositionStart" ? isComposing = initialize(nativeEventTarget) : eventType === "onCompositionEnd" && isComposing && (fallbackData = getData()));
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            if (dispatchQueue.push({
              event,
              listeners
            }), fallbackData)
              event.data = fallbackData;
            else {
              var customData = getDataFromCustomEvent(nativeEvent);
              customData !== null && (event.data = customData);
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              return which !== SPACEBAR_CODE ? null : (hasSpaceKeypress = !0, SPACEBAR_CHAR);
            case "textInput":
              var chars = nativeEvent.data;
              return chars === SPACEBAR_CHAR && hasSpaceKeypress ? null : chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              return reset(), isComposing = !1, chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1)
                  return nativeEvent.char;
                if (nativeEvent.which)
                  return String.fromCharCode(nativeEvent.which);
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent ? chars = getNativeBeforeInputChars(domEventName, nativeEvent) : chars = getFallbackBeforeInputChars(domEventName, nativeEvent), !chars)
            return null;
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            }), event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: !0,
          date: !0,
          datetime: !0,
          "datetime-local": !0,
          email: !0,
          month: !0,
          number: !0,
          password: !0,
          range: !0,
          search: !0,
          tel: !0,
          text: !0,
          time: !0,
          url: !0,
          week: !0
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "input" ? !!supportedInputTypes[elem.type] : nodeName === "textarea";
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM)
            return !1;
          var eventName = "on" + eventNameSuffix, isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;"), isSupported = typeof element[eventName] == "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target3) {
          enqueueStateRestore(target3);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target3);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null, activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)), batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode))
            return targetInst;
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change")
            return targetInst;
        }
        var isInputEventSupported = !1;
        canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9));
        function startWatchingForValueChange(target3, targetInst) {
          activeElement = target3, activeElementInst = targetInst, activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          !activeElement || (activeElement.detachEvent("onpropertychange", handlePropertyChange), activeElement = null, activeElementInst = null);
        }
        function handlePropertyChange(nativeEvent) {
          nativeEvent.propertyName === "value" && getInstIfValueChanged(activeElementInst) && manualDispatchChangeEvent(nativeEvent);
        }
        function handleEventsForInputEventPolyfill(domEventName, target3, targetInst) {
          domEventName === "focusin" ? (stopWatchingForValueChange(), startWatchingForValueChange(target3, targetInst)) : domEventName === "focusout" && stopWatchingForValueChange();
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown")
            return getInstIfValueChanged(activeElementInst);
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click")
            return getInstIfValueChanged(targetInst);
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change")
            return getInstIfValueChanged(targetInst);
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          !state || !state.controlled || node.type !== "number" || setDefaultValue(node, "number", node.value);
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window, getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode) ? getTargetInstFunc = getTargetInstForChangeEvent : isTextInputElement(targetNode) ? isInputEventSupported ? getTargetInstFunc = getTargetInstForInputOrChangeEvent : (getTargetInstFunc = getTargetInstForInputEventPolyfill, handleEventFunc = handleEventsForInputEventPolyfill) : shouldUseClickEvent(targetNode) && (getTargetInstFunc = getTargetInstForClickEvent), getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          handleEventFunc && handleEventFunc(domEventName, targetNode, targetInst), domEventName === "focusout" && handleControlledInputBlur(targetNode);
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]), registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]), registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]), registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover", isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && (eventSystemFlags & IS_REPLAYED) == 0) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related && (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)))
              return;
          }
          if (!(!isOutEvent && !isOverEvent)) {
            var win;
            if (nativeEventTarget.window === nativeEventTarget)
              win = nativeEventTarget;
            else {
              var doc = nativeEventTarget.ownerDocument;
              doc ? win = doc.defaultView || doc.parentWindow : win = window;
            }
            var from, to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              if (from = targetInst, to = _related ? getClosestInstanceFromNode(_related) : null, to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) && (to = null);
              }
            } else
              from = null, to = targetInst;
            if (from !== to) {
              var SyntheticEventCtor = SyntheticMouseEvent, leaveEventType = "onMouseLeave", enterEventType = "onMouseEnter", eventTypePrefix = "mouse";
              (domEventName === "pointerout" || domEventName === "pointerover") && (SyntheticEventCtor = SyntheticPointerEvent, leaveEventType = "onPointerLeave", enterEventType = "onPointerEnter", eventTypePrefix = "pointer");
              var fromNode = from == null ? win : getNodeFromInstance(from), toNode = to == null ? win : getNodeFromInstance(to), leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
              leave.target = fromNode, leave.relatedTarget = toNode;
              var enter = null, nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
              if (nativeTargetInst === targetInst) {
                var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
                enterEvent.target = toNode, enterEvent.relatedTarget = fromNode, enter = enterEvent;
              }
              accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
            }
          }
        }
        function is(x5, y5) {
          return x5 === y5 && (x5 !== 0 || 1 / x5 == 1 / y5) || x5 !== x5 && y5 !== y5;
        }
        var objectIs = typeof Object.is == "function" ? Object.is : is, hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB))
            return !0;
          if (typeof objA != "object" || objA === null || typeof objB != "object" || objB === null)
            return !1;
          var keysA = Object.keys(objA), keysB = Object.keys(objB);
          if (keysA.length !== keysB.length)
            return !1;
          for (var i = 0; i < keysA.length; i++)
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]]))
              return !1;
          return !0;
        }
        function getLeafNode(node) {
          for (; node && node.firstChild; )
            node = node.firstChild;
          return node;
        }
        function getSiblingNode(node) {
          for (; node; ) {
            if (node.nextSibling)
              return node.nextSibling;
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset) {
          for (var node = getLeafNode(root3), nodeStart = 0, nodeEnd = 0; node; ) {
            if (node.nodeType === TEXT_NODE) {
              if (nodeEnd = nodeStart + node.textContent.length, nodeStart <= offset && nodeEnd >= offset)
                return {
                  node,
                  offset: offset - nodeStart
                };
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument, win = ownerDocument && ownerDocument.defaultView || window, selection3 = win.getSelection && win.getSelection();
          if (!selection3 || selection3.rangeCount === 0)
            return null;
          var anchorNode = selection3.anchorNode, anchorOffset = selection3.anchorOffset, focusNode = selection3.focusNode, focusOffset = selection3.focusOffset;
          try {
            anchorNode.nodeType, focusNode.nodeType;
          } catch {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length3 = 0, start2 = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = outerNode, parentNode = null;
          outer:
            for (; ; ) {
              for (var next = null; node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE) && (start2 = length3 + anchorOffset), node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE) && (end = length3 + focusOffset), node.nodeType === TEXT_NODE && (length3 += node.nodeValue.length), (next = node.firstChild) !== null; )
                parentNode = node, node = next;
              for (; ; ) {
                if (node === outerNode)
                  break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset && (start2 = length3), parentNode === focusNode && ++indexWithinFocus === focusOffset && (end = length3), (next = node.nextSibling) !== null)
                  break;
                node = parentNode, parentNode = node.parentNode;
              }
              node = next;
            }
          return start2 === -1 || end === -1 ? null : {
            start: start2,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document, win = doc && doc.defaultView || window;
          if (!!win.getSelection) {
            var selection3 = win.getSelection(), length3 = node.textContent.length, start2 = Math.min(offsets.start, length3), end = offsets.end === void 0 ? start2 : Math.min(offsets.end, length3);
            if (!selection3.extend && start2 > end) {
              var temp = end;
              end = start2, start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start2), endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection3.rangeCount === 1 && selection3.anchorNode === startMarker.node && selection3.anchorOffset === startMarker.offset && selection3.focusNode === endMarker.node && selection3.focusOffset === endMarker.offset)
                return;
              var range2 = doc.createRange();
              range2.setStart(startMarker.node, startMarker.offset), selection3.removeAllRanges(), start2 > end ? (selection3.addRange(range2), selection3.extend(endMarker.node, endMarker.offset)) : (range2.setEnd(endMarker.node, endMarker.offset), selection3.addRange(range2));
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          return !outerNode || !innerNode ? !1 : outerNode === innerNode ? !0 : isTextNode(outerNode) ? !1 : isTextNode(innerNode) ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : !1;
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href == "string";
          } catch {
            return !1;
          }
        }
        function getActiveElementDeep() {
          for (var win = window, element = getActiveElement(); element instanceof win.HTMLIFrameElement; ) {
            if (isSameOriginFrame(element))
              win = element.contentWindow;
            else
              return element;
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep(), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem) && setSelection2(priorFocusedElem, priorSelectionRange);
            for (var ancestors = [], ancestor = priorFocusedElem; ancestor = ancestor.parentNode; )
              ancestor.nodeType === ELEMENT_NODE && ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            typeof priorFocusedElem.focus == "function" && priorFocusedElem.focus();
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left, info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection3;
          return "selectionStart" in input ? selection3 = {
            start: input.selectionStart,
            end: input.selectionEnd
          } : selection3 = getOffsets(input), selection3 || {
            start: 0,
            end: 0
          };
        }
        function setSelection2(input, offsets) {
          var start2 = offsets.start, end = offsets.end;
          end === void 0 && (end = start2), "selectionStart" in input ? (input.selectionStart = start2, input.selectionEnd = Math.min(end, input.value.length)) : setOffsets(input, offsets);
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null, activeElementInst$1 = null, lastSelection = null, mouseDown = !1;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node))
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          var win = node.ownerDocument && node.ownerDocument.defaultView || window, selection3 = win.getSelection();
          return {
            anchorNode: selection3.anchorNode,
            anchorOffset: selection3.anchorOffset,
            focusNode: selection3.focusNode,
            focusOffset: selection3.focusOffset
          };
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (!(mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc))) {
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                }), event.target = activeElement$1;
              }
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              (isTextInputElement(targetNode) || targetNode.contentEditable === "true") && (activeElement$1 = targetNode, activeElementInst$1 = targetInst, lastSelection = null);
              break;
            case "focusout":
              activeElement$1 = null, activeElementInst$1 = null, lastSelection = null;
              break;
            case "mousedown":
              mouseDown = !0;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = !1, constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent)
                break;
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName !== void 0) {
            var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0)
                  return;
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus", SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur", SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2)
                  return;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) != 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll", _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
        }
        registerSimpleEvents(), registerEvents$2(), registerEvents$1(), registerEvents$3(), registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) == 0;
          shouldProcessPolyfillPlugins && (extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags), extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget));
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget, invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase)
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped())
                return;
              executeDispatch(event, listener, currentTarget), previousInstance = instance;
            }
          else
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped())
                return;
              executeDispatch(event, _listener, _currentTarget), previousInstance = _instance;
            }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          for (var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) != 0, i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags), processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          var isCapturePhaseListener = !1, listenerSet = getEventListenerSet(targetElement), listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener), listenerSet.add(listenerSetKey));
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          {
            if (rootContainerElement[listeningMarker])
              return;
            rootContainerElement[listeningMarker] = !0, allNativeEvents.forEach(function(domEventName) {
              nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, !1, rootContainerElement, null), listenToNativeEvent(domEventName, !0, rootContainerElement, null);
            });
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
          var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0, target3 = rootContainerElement;
          if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE && (target3 = rootContainerElement.ownerDocument), targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            if (domEventName !== "scroll")
              return;
            eventSystemFlags |= IS_NON_DELEGATED, target3 = targetElement;
          }
          var listenerSet = getEventListenerSet(target3), listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          listenerSet.has(listenerSetKey) || (isCapturePhaseListener && (eventSystemFlags |= IS_CAPTURE_PHASE), addTrappedEventListener(target3, domEventName, eventSystemFlags, isCapturePhaseListener), listenerSet.add(listenerSetKey));
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags), isPassiveListener = void 0;
          passiveBrowserEventsSupported && (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") && (isPassiveListener = !0), targetContainer = targetContainer;
          var unsubscribeListener;
          isCapturePhaseListener ? isPassiveListener !== void 0 ? unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener) : isPassiveListener !== void 0 ? unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) == 0 && (eventSystemFlags & IS_NON_DELEGATED) == 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                for (; ; ) {
                  if (node === null)
                    return;
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode))
                      break;
                    if (nodeTag === HostPortal)
                      for (var grandNode = node.return; grandNode !== null; ) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode))
                            return;
                        }
                        grandNode = grandNode.return;
                      }
                    for (; container !== null; ) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null)
                        return;
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
          for (var captureName = reactName !== null ? reactName + "Capture" : null, reactEventName = inCapturePhase ? captureName : reactName, listeners = [], instance = targetFiber, lastHostComponent = null; instance !== null; ) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag2 = _instance2.tag;
            if (tag2 === HostComponent && stateNode !== null && (lastHostComponent = stateNode, reactEventName !== null)) {
              var listener = getListener(instance, reactEventName);
              listener != null && listeners.push(createDispatchListener(instance, listener, lastHostComponent));
            }
            if (accumulateTargetOnly)
              break;
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          for (var captureName = reactName + "Capture", listeners = [], instance = targetFiber; instance !== null; ) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag2 = _instance3.tag;
            if (tag2 === HostComponent && stateNode !== null) {
              var currentTarget = stateNode, captureListener = getListener(instance, captureName);
              captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              var bubbleListener = getListener(instance, reactName);
              bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null)
            return null;
          do
            inst = inst.return;
          while (inst && inst.tag !== HostComponent);
          return inst || null;
        }
        function getLowestCommonAncestor(instA, instB) {
          for (var nodeA = instA, nodeB = instB, depthA = 0, tempA = nodeA; tempA; tempA = getParent(tempA))
            depthA++;
          for (var depthB = 0, tempB = nodeB; tempB; tempB = getParent(tempB))
            depthB++;
          for (; depthA - depthB > 0; )
            nodeA = getParent(nodeA), depthA--;
          for (; depthB - depthA > 0; )
            nodeB = getParent(nodeB), depthB--;
          for (var depth = depthA; depth--; ) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate)
              return nodeA;
            nodeA = getParent(nodeA), nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target3, common, inCapturePhase) {
          for (var registrationName = event._reactName, listeners = [], instance = target3; instance !== null && instance !== common; ) {
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag2 = _instance4.tag;
            if (alternate !== null && alternate === common)
              break;
            if (tag2 === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          listeners.length !== 0 && dispatchQueue.push({
            event,
            listeners
          });
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          from !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, !1), to !== null && enterEvent !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, !0);
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = !1, DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML", SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", AUTOFOCUS = "autoFocus", CHILDREN = "children", STYLE = "style", HTML$1 = "__html", HTML_NAMESPACE$1 = Namespaces.html, warnedUnknownTags, suppressHydrationWarning, validatePropertiesInDevelopment, warnForTextDifference, warnForPropDifference, warnForExtraAttributes, warnForInvalidEventListener, canDiffStyleForHydrationWarning, normalizeMarkupForTextOrAttribute, normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: !0,
            webview: !0
          }, validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props), validateProperties$1(type, props), validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          }, canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup == "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }, warnForTextDifference = function(serverText, clientText) {
            if (!didWarnInvalidHydration) {
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText), normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              normalizedServerText !== normalizedClientText && (didWarnInvalidHydration = !0, error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText));
            }
          }, warnForPropDifference = function(propName, serverValue, clientValue) {
            if (!didWarnInvalidHydration) {
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              normalizedServerValue !== normalizedClientValue && (didWarnInvalidHydration = !0, error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue)));
            }
          }, warnForExtraAttributes = function(attributeNames) {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = !0;
              var names = [];
              attributeNames.forEach(function(name2) {
                names.push(name2);
              }), error("Extra attributes from the server: %s", names);
            }
          }, warnForInvalidEventListener = function(registrationName, listener) {
            listener === !1 ? error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName) : error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }, normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            return testElement.innerHTML = html, testElement.innerHTML;
          };
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop2() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop2;
        }
        function setInitialDOMProperties(tag2, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps)
            if (!!nextProps.hasOwnProperty(propKey)) {
              var nextProp = nextProps[propKey];
              if (propKey === STYLE)
                nextProp && Object.freeze(nextProp), setValueForStyles(domElement, nextProp);
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                nextHtml != null && setInnerHTML(domElement, nextHtml);
              } else if (propKey === CHILDREN)
                if (typeof nextProp == "string") {
                  var canSetTextContent = tag2 !== "textarea" || nextProp !== "";
                  canSetTextContent && setTextContent(domElement, nextProp);
                } else
                  typeof nextProp == "number" && setTextContent(domElement, "" + nextProp);
              else
                propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)) : nextProp != null && setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag));
            }
        }
        function updateDOMProperties(domElement, updatePayload3, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload3.length; i += 2) {
            var propKey = updatePayload3[i], propValue = updatePayload3[i + 1];
            propKey === STYLE ? setValueForStyles(domElement, propValue) : propKey === DANGEROUSLY_SET_INNER_HTML ? setInnerHTML(domElement, propValue) : propKey === CHILDREN ? setTextContent(domElement, propValue) : setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
        function createElement6(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag, ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement), domElement, namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1 && (namespaceURI = getIntrinsicNamespace(type)), namespaceURI === HTML_NAMESPACE$1) {
            if (isCustomComponentTag = isCustomComponent(type, props), !isCustomComponentTag && type !== type.toLowerCase() && error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type), type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is == "string")
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            else if (domElement = ownerDocument.createElement(type), type === "select") {
              var node = domElement;
              props.multiple ? node.multiple = !0 : props.size && (node.size = props.size);
            }
          } else
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          return namespaceURI === HTML_NAMESPACE$1 && !isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type) && (warnedUnknownTags[type] = !0, error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type)), domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag2, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag2, rawProps);
          validatePropertiesInDevelopment(tag2, rawProps);
          var props;
          switch (tag2) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement), props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement), props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++)
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement), props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement), props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement), props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps), props = getHostProps(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps), props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps), props = getHostProps$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps), props = getHostProps$3(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          switch (assertValidProps(tag2, props), setInitialDOMProperties(tag2, domElement, rootContainerElement, props, isCustomComponentTag), tag2) {
            case "input":
              track(domElement), postMountWrapper(domElement, rawProps, !1);
              break;
            case "textarea":
              track(domElement), postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              typeof props.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
              break;
          }
        }
        function diffProperties(domElement, tag2, lastRawProps, nextRawProps, rootContainerElement) {
          validatePropertiesInDevelopment(tag2, nextRawProps);
          var updatePayload3 = null, lastProps, nextProps;
          switch (tag2) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps), nextProps = getHostProps(domElement, nextRawProps), updatePayload3 = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps), nextProps = getHostProps$1(domElement, nextRawProps), updatePayload3 = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps), nextProps = getHostProps$2(domElement, nextRawProps), updatePayload3 = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps), nextProps = getHostProps$3(domElement, nextRawProps), updatePayload3 = [];
              break;
            default:
              lastProps = lastRawProps, nextProps = nextRawProps, typeof lastProps.onClick != "function" && typeof nextProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
              break;
          }
          assertValidProps(tag2, nextProps);
          var propKey, styleName, styleUpdates = null;
          for (propKey in lastProps)
            if (!(nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null))
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle)
                  lastStyle.hasOwnProperty(styleName) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
              } else
                propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? updatePayload3 || (updatePayload3 = []) : (updatePayload3 = updatePayload3 || []).push(propKey, null));
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey], lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!(!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null))
              if (propKey === STYLE)
                if (nextProp && Object.freeze(nextProp), lastProp) {
                  for (styleName in lastProp)
                    lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName)) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
                  for (styleName in nextProp)
                    nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName] && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = nextProp[styleName]);
                } else
                  styleUpdates || (updatePayload3 || (updatePayload3 = []), updatePayload3.push(propKey, styleUpdates)), styleUpdates = nextProp;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0, lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                nextHtml != null && lastHtml !== nextHtml && (updatePayload3 = updatePayload3 || []).push(propKey, nextHtml);
              } else
                propKey === CHILDREN ? (typeof nextProp == "string" || typeof nextProp == "number") && (updatePayload3 = updatePayload3 || []).push(propKey, "" + nextProp) : propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || (registrationNameDependencies.hasOwnProperty(propKey) ? (nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)), !updatePayload3 && lastProp !== nextProp && (updatePayload3 = [])) : typeof nextProp == "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE ? nextProp.toString() : (updatePayload3 = updatePayload3 || []).push(propKey, nextProp));
          }
          return styleUpdates && (validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]), (updatePayload3 = updatePayload3 || []).push(STYLE, styleUpdates)), updatePayload3;
        }
        function updateProperties(domElement, updatePayload3, tag2, lastRawProps, nextRawProps) {
          tag2 === "input" && nextRawProps.type === "radio" && nextRawProps.name != null && updateChecked(domElement, nextRawProps);
          var wasCustomComponentTag = isCustomComponent(tag2, lastRawProps), isCustomComponentTag = isCustomComponent(tag2, nextRawProps);
          switch (updateDOMProperties(domElement, updatePayload3, wasCustomComponentTag, isCustomComponentTag), tag2) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            return possibleStandardNames.hasOwnProperty(lowerCasedName) && possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag2, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag, extraAttributeNames;
          switch (suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === !0, isCustomComponentTag = isCustomComponent(tag2, rawProps), validatePropertiesInDevelopment(tag2, rawProps), tag2) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++)
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag2, rawProps);
          {
            extraAttributeNames = new Set();
            for (var attributes = domElement.attributes, _i = 0; _i < attributes.length; _i++) {
              var name2 = attributes[_i].name.toLowerCase();
              switch (name2) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload3 = null;
          for (var propKey in rawProps)
            if (!!rawProps.hasOwnProperty(propKey)) {
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN)
                typeof nextProp == "string" ? domElement.textContent !== nextProp && (suppressHydrationWarning || warnForTextDifference(domElement.textContent, nextProp), updatePayload3 = [CHILDREN, nextProp]) : typeof nextProp == "number" && domElement.textContent !== "" + nextProp && (suppressHydrationWarning || warnForTextDifference(domElement.textContent, nextProp), updatePayload3 = [CHILDREN, "" + nextProp]);
              else if (registrationNameDependencies.hasOwnProperty(propKey))
                nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement));
              else if (typeof isCustomComponentTag == "boolean") {
                var serverValue = void 0, propertyInfo = getPropertyInfo(propKey);
                if (!suppressHydrationWarning) {
                  if (!(propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")) {
                    if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                      var serverHTML = domElement.innerHTML, nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                      if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        expectedHTML !== serverHTML && warnForPropDifference(propKey, serverHTML, expectedHTML);
                      }
                    } else if (propKey === STYLE) {
                      if (extraAttributeNames.delete(propKey), canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute("style"), expectedStyle !== serverValue && warnForPropDifference(propKey, serverValue, expectedStyle);
                      }
                    } else if (isCustomComponentTag)
                      extraAttributeNames.delete(propKey.toLowerCase()), serverValue = getValueForAttribute(domElement, propKey, nextProp), nextProp !== serverValue && warnForPropDifference(propKey, serverValue, nextProp);
                    else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                      var isMismatchDueToBadCasing = !1;
                      if (propertyInfo !== null)
                        extraAttributeNames.delete(propertyInfo.attributeName), serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                      else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1 && (ownNamespace = getIntrinsicNamespace(tag2)), ownNamespace === HTML_NAMESPACE$1)
                          extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                          var standardName = getPossibleStandardName(propKey);
                          standardName !== null && standardName !== propKey && (isMismatchDueToBadCasing = !0, extraAttributeNames.delete(standardName)), extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                      }
                      nextProp !== serverValue && !isMismatchDueToBadCasing && warnForPropDifference(propKey, serverValue, nextProp);
                    }
                  }
                }
              }
            }
          switch (extraAttributeNames.size > 0 && !suppressHydrationWarning && warnForExtraAttributes(extraAttributeNames), tag2) {
            case "input":
              track(domElement), postMountWrapper(domElement, rawProps, !0);
              break;
            case "textarea":
              track(domElement), postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              typeof rawProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
              break;
          }
          return updatePayload3;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          warnForTextDifference(textNode.nodeValue, text);
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration)
              return;
            didWarnInvalidHydration = !0, error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration)
              return;
            didWarnInvalidHydration = !0, error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag2, props) {
          {
            if (didWarnInvalidHydration)
              return;
            didWarnInvalidHydration = !0, error("Expected server HTML to contain a matching <%s> in <%s>.", tag2, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "" || didWarnInvalidHydration)
              return;
            didWarnInvalidHydration = !0, error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag2, props) {
          switch (tag2) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        }, updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ], buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag2) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo), info = {
              tag: tag2
            };
            return inScopeTags.indexOf(tag2) !== -1 && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null), buttonScopeTags.indexOf(tag2) !== -1 && (ancestorInfo.pTagInButtonScope = null), specialTags.indexOf(tag2) !== -1 && tag2 !== "address" && tag2 !== "div" && tag2 !== "p" && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null), ancestorInfo.current = info, tag2 === "form" && (ancestorInfo.formTag = info), tag2 === "a" && (ancestorInfo.aTagInScope = info), tag2 === "button" && (ancestorInfo.buttonTagInScope = info), tag2 === "nobr" && (ancestorInfo.nobrTagInScope = info), tag2 === "p" && (ancestorInfo.pTagInButtonScope = info), tag2 === "li" && (ancestorInfo.listItemTagAutoclosing = info), (tag2 === "dd" || tag2 === "dt") && (ancestorInfo.dlItemTagAutoclosing = info), ancestorInfo;
          };
          var isTagValidWithParent = function(tag2, parentTag) {
            switch (parentTag) {
              case "select":
                return tag2 === "option" || tag2 === "optgroup" || tag2 === "#text";
              case "optgroup":
                return tag2 === "option" || tag2 === "#text";
              case "option":
                return tag2 === "#text";
              case "tr":
                return tag2 === "th" || tag2 === "td" || tag2 === "style" || tag2 === "script" || tag2 === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag2 === "tr" || tag2 === "style" || tag2 === "script" || tag2 === "template";
              case "colgroup":
                return tag2 === "col" || tag2 === "template";
              case "table":
                return tag2 === "caption" || tag2 === "colgroup" || tag2 === "tbody" || tag2 === "tfoot" || tag2 === "thead" || tag2 === "style" || tag2 === "script" || tag2 === "template";
              case "head":
                return tag2 === "base" || tag2 === "basefont" || tag2 === "bgsound" || tag2 === "link" || tag2 === "meta" || tag2 === "title" || tag2 === "noscript" || tag2 === "noframes" || tag2 === "style" || tag2 === "script" || tag2 === "template";
              case "html":
                return tag2 === "head" || tag2 === "body" || tag2 === "frameset";
              case "frameset":
                return tag2 === "frame";
              case "#document":
                return tag2 === "html";
            }
            switch (tag2) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return !0;
          }, findInvalidAncestorForTag = function(tag2, ancestorInfo) {
            switch (tag2) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          }, didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current, parentTag = parentInfo && parentInfo.tag;
            childText != null && (childTag != null && error("validateDOMNesting: when childText is passed, childTag should be null"), childTag = "#text");
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo, invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo), invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!!invalidParentOrAncestor) {
              var ancestorTag = invalidParentOrAncestor.tag, warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (!didWarn$1[warnKey]) {
                didWarn$1[warnKey] = !0;
                var tagDisplayName = childTag, whitespaceInfo = "";
                if (childTag === "#text" ? /\S/.test(childText) ? tagDisplayName = "Text nodes" : (tagDisplayName = "Whitespace text nodes", whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : tagDisplayName = "<" + childTag + ">", invalidParent) {
                  var info = "";
                  ancestorTag === "table" && childTag === "tr" && (info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
                } else
                  error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", STYLE$1 = "style", eventsEnabled = null, selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return !1;
        }
        function getRootHostContext(rootContainerInstance) {
          var type, namespace, nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root3 = rootContainerInstance.documentElement;
              namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance, ownNamespace = container.namespaceURI || null;
              type = container.tagName, namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase(), ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext, namespace = getChildNamespace(parentHostContextDev.namespace, type), ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled(), selectionInformation = getSelectionInformation();
          var activeInstance = null;
          return setEnabled(!1), activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation), setEnabled(eventsEnabled), eventsEnabled = null, selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            if (validateDOMNesting(type, null, hostContextDev.ancestorInfo), typeof props.children == "string" || typeof props.children == "number") {
              var string = "" + props.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement6(type, props, rootContainerInstance, parentNamespace);
          return precacheFiberNode(internalInstanceHandle, domElement), updateFiberProps(domElement, props), domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          return setInitialProperties(domElement, type, props, rootContainerInstance), shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children != typeof oldProps.children && (typeof newProps.children == "string" || typeof newProps.children == "number")) {
              var string = "" + newProps.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children == "string" || typeof props.children == "number" || typeof props.dangerouslySetInnerHTML == "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          return precacheFiberNode(internalInstanceHandle, textNode), textNode;
        }
        var scheduleTimeout = typeof setTimeout == "function" ? setTimeout : void 0, cancelTimeout = typeof clearTimeout == "function" ? clearTimeout : void 0, noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          shouldAutoFocusHostComponent(type, newProps) && domElement.focus();
        }
        function commitUpdate(domElement, updatePayload3, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps), updateProperties(domElement, updatePayload3, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          container.nodeType === COMMENT_NODE ? (parentNode = container.parentNode, parentNode.insertBefore(child, container)) : (parentNode = container, parentNode.appendChild(child));
          var reactRootContainer = container._reactRootContainer;
          reactRootContainer == null && parentNode.onclick === null && trapClickOnNonInteractiveElement(parentNode);
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          container.nodeType === COMMENT_NODE ? container.parentNode.insertBefore(child, beforeChild) : container.insertBefore(child, beforeChild);
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          container.nodeType === COMMENT_NODE ? container.parentNode.removeChild(child) : container.removeChild(child);
        }
        function hideInstance(instance) {
          instance = instance;
          var style3 = instance.style;
          typeof style3.setProperty == "function" ? style3.setProperty("display", "none", "important") : style3.display = "none";
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1], display = styleProp != null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE)
            container.textContent = "";
          else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            body != null && (body.textContent = "");
          }
        }
        function canHydrateInstance(instance, type, props) {
          return instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase() ? null : instance;
        }
        function canHydrateTextInstance(instance, text) {
          return text === "" || instance.nodeType !== TEXT_NODE ? null : instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE)
              break;
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance), updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          return precacheFiberNode(internalInstanceHandle, textInstance), diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          for (var node = suspenseInstance.nextSibling, depth = 0; node; ) {
            if (node.nodeType === COMMENT_NODE) {
              var data4 = node.data;
              if (data4 === SUSPENSE_END_DATA) {
                if (depth === 0)
                  return getNextHydratableSibling(node);
                depth--;
              } else
                (data4 === SUSPENSE_START_DATA || data4 === SUSPENSE_FALLBACK_START_DATA || data4 === SUSPENSE_PENDING_START_DATA) && depth++;
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          for (var node = targetInstance.previousSibling, depth = 0; node; ) {
            if (node.nodeType === COMMENT_NODE) {
              var data4 = node.data;
              if (data4 === SUSPENSE_START_DATA || data4 === SUSPENSE_FALLBACK_START_DATA || data4 === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0)
                  return node;
                depth--;
              } else
                data4 === SUSPENSE_END_DATA && depth++;
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          warnForUnmatchedText(textInstance, text);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0 && warnForUnmatchedText(textInstance, text);
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentContainer, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentContainer, instance);
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0 && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentInstance, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentInstance, instance));
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          warnForInsertedHydratedElement(parentContainer, type);
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          warnForInsertedHydratedText(parentContainer, text);
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0 && warnForInsertedHydratedElement(parentInstance, type);
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0 && warnForInsertedHydratedText(parentInstance, text);
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0;
        }
        var clientId = 0;
        function makeClientIdInDEV(warnOnAccessInDEV) {
          var id7 = "r:" + (clientId++).toString(36);
          return {
            toString: function() {
              return warnOnAccessInDEV(), id7;
            },
            valueOf: function() {
              return warnOnAccessInDEV(), id7;
            }
          };
        }
        function isOpaqueHydratingObject(value) {
          return value !== null && typeof value == "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
        }
        function makeOpaqueHydratingObject(attemptToReadValue) {
          return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
          };
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst)
            return targetInst;
          for (var parentNode = targetNode.parentNode; parentNode; ) {
            if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey], targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null)
                for (var suspenseInstance = getParentSuspenseInstance(targetNode); suspenseInstance !== null; ) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst)
                    return targetSuspenseInst;
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              return targetInst;
            }
            targetNode = parentNode, parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          return inst && (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) ? inst : null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText)
            return inst.stateNode;
          throw Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          return elementListenerSet === void 0 && (elementListenerSet = node[internalEventHandlersKey] = new Set()), elementListenerSet;
        }
        var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          if (element) {
            var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has9 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs)
              if (has9(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] != "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    throw err.name = "Invariant Violation", err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
              }
          }
        }
        var valueStack = [], fiberStack;
        fiberStack = [];
        var index2 = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index2 < 0) {
            error("Unexpected pop.");
            return;
          }
          fiber !== fiberStack[index2] && error("Unexpected Fiber popped."), cursor.current = valueStack[index2], valueStack[index2] = null, fiberStack[index2] = null, index2--;
        }
        function push(cursor, value, fiber) {
          index2++, valueStack[index2] = cursor.current, fiberStack[index2] = fiber, cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        warnedAboutMissingGetChildContext = {};
        var emptyContextObject = {};
        Object.freeze(emptyContextObject);
        var contextStackCursor = createCursor(emptyContextObject), didPerformWorkStackCursor = createCursor(!1), previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          return didPushOwnContextIfProvider && isContextProvider(Component) ? previousContext : contextStackCursor.current;
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type, contextTypes = type.contextTypes;
            if (!contextTypes)
              return emptyContextObject;
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext)
              return instance.__reactInternalMemoizedMaskedChildContext;
            var context = {};
            for (var key in contextTypes)
              context[key] = unmaskedContext[key];
            {
              var name2 = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name2);
            }
            return instance && cacheContext(workInProgress2, unmaskedContext, context), context;
          }
        }
        function hasContextChanged() {
          return didPerformWorkStackCursor.current;
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes != null;
          }
        }
        function popContext(fiber) {
          pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
        }
        function popTopLevelContextObject(fiber) {
          pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject)
              throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode, childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext != "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext)
              if (!(contextKey in childContextTypes))
                throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            {
              var name2 = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name2);
            }
            return _assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode, memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress2), push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2), !0;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance)
              throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress2), pop(contextStackCursor, workInProgress2), push(contextStackCursor, mergedContext, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else
              pop(didPerformWorkStackCursor, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent))
              throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component))
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0, BlockingRoot = 1, ConcurrentRoot = 2, rendererID = null, injectedHook = null, hasLoggedError = !1, isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ != "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ == "undefined")
            return !1;
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled)
            return !0;
          if (!hook.supportsFiber)
            return error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
          try {
            rendererID = hook.inject(internals), injectedHook = hook;
          } catch (err) {
            error("React instrumentation encountered an error: %s.", err);
          }
          return !0;
        }
        function onScheduleRoot(root3, children2) {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot == "function")
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root3, children2);
            } catch (err) {
              hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
            }
        }
        function onCommitRoot(root3, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot == "function")
            try {
              var didError = (root3.current.flags & DidCapture) === DidCapture;
              enableProfilerTimer ? injectedHook.onCommitFiberRoot(rendererID, root3, priorityLevel, didError) : injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
            } catch (err) {
              hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
            }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount == "function")
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
            }
        }
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null))
          throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
        var fakeCallbackNode = {}, ImmediatePriority$1 = 99, UserBlockingPriority$2 = 98, NormalPriority$1 = 97, LowPriority$1 = 96, IdlePriority$1 = 95, NoPriority$1 = 90, shouldYield = Scheduler_shouldYield, requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        }, syncQueue = null, immediateQueueCallbackNode = null, isFlushingSyncQueue = !1, initialTimeMs$1 = Scheduler_now$1(), now2 = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
          return Scheduler_now$1() - initialTimeMs$1;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
              return NormalPriority$1;
            case Scheduler_LowPriority:
              return LowPriority$1;
            case Scheduler_IdlePriority:
              return IdlePriority$1;
            default:
              throw Error("Unknown priority level.");
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
              return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
              return Scheduler_NormalPriority;
            case LowPriority$1:
              return Scheduler_LowPriority;
            case IdlePriority$1:
              return Scheduler_IdlePriority;
            default:
              throw Error("Unknown priority level.");
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options2) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options2);
        }
        function scheduleSyncCallback(callback) {
          return syncQueue === null ? (syncQueue = [callback], immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl)) : syncQueue.push(callback), fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          callbackNode !== fakeCallbackNode && Scheduler_cancelCallback(callbackNode);
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null, Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = !0;
            var i = 0;
            try {
              var _isSync2 = !0, _queue = syncQueue;
              runWithPriority$1(ImmediatePriority$1, function() {
                for (; i < _queue.length; i++) {
                  var callback = _queue[i];
                  do
                    callback = callback(_isSync2);
                  while (callback !== null);
                }
              }), syncQueue = null;
            } catch (error2) {
              throw syncQueue !== null && (syncQueue = syncQueue.slice(i + 1)), Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue), error2;
            } finally {
              isFlushingSyncQueue = !1;
            }
          }
        }
        var ReactVersion = "17.0.2", NoMode = 0, StrictMode = 1, BlockingMode = 2, ConcurrentMode = 4, ProfileMode = 8, DebugTracingMode = 16, ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig, NoTransition = 0;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            for (var maybeStrictRoot = null, node = fiber; node !== null; )
              node.mode & StrictMode && (maybeStrictRoot = node), node = node.return;
            return maybeStrictRoot;
          }, setToSortedString = function(set7) {
            var array2 = [];
            return set7.forEach(function(value) {
              array2.push(value);
            }), array2.sort().join(", ");
          }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            didWarnAboutUnsafeLifecycles.has(fiber.type) || (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount == "function" && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps == "function" && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate == "function" && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
          }, ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            pendingComponentWillMountWarnings.length > 0 && (pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
            }), pendingComponentWillMountWarnings = []);
            var UNSAFE_componentWillMountUniqueNames = new Set();
            pendingUNSAFE_ComponentWillMountWarnings.length > 0 && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
            }), pendingUNSAFE_ComponentWillMountWarnings = []);
            var componentWillReceivePropsUniqueNames = new Set();
            pendingComponentWillReceivePropsWarnings.length > 0 && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
            }), pendingComponentWillReceivePropsWarnings = []);
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0 && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
            }), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
            var componentWillUpdateUniqueNames = new Set();
            pendingComponentWillUpdateWarnings.length > 0 && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
            }), pendingComponentWillUpdateWarnings = []);
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0 && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
            }), pendingUNSAFE_ComponentWillUpdateWarnings = []), UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map(), didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (!didWarnAboutLegacyContext.has(fiber.type)) {
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext == "function") && (warningsForRoot === void 0 && (warningsForRoot = [], pendingLegacyContextWarning.set(strictRoot, warningsForRoot)), warningsForRoot.push(fiber));
            }
          }, ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length !== 0) {
                var firstFiber = fiberArray[0], uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component"), didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber), error(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              }
            });
          }, ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], pendingLegacyContextWarning = new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = _assign({}, baseProps), defaultProps = Component.defaultProps;
            for (var propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
            return props;
          }
          return baseProps;
        }
        var MAX_SIGNED_31_BIT_INT = 1073741823, valueCursor = createCursor(null), rendererSigil;
        rendererSigil = {};
        var currentlyRenderingFiber = null, lastContextDependency = null, lastContextWithAllBitsObserved = null, isDisallowedContextReadInDEV = !1;
        function resetContextDependencies() {
          currentlyRenderingFiber = null, lastContextDependency = null, lastContextWithAllBitsObserved = null, isDisallowedContextReadInDEV = !1;
        }
        function enterDisallowedContextReadInDEV() {
          isDisallowedContextReadInDEV = !0;
        }
        function exitDisallowedContextReadInDEV() {
          isDisallowedContextReadInDEV = !1;
        }
        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          push(valueCursor, context._currentValue, providerFiber), context._currentValue = nextValue, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          context._currentValue = currentValue;
        }
        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue))
            return 0;
          var changedBits = typeof context._calculateChangedBits == "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
          return (changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits && error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits), changedBits | 0;
        }
        function scheduleWorkOnParentPath(parent, renderLanes2) {
          for (var node = parent; node !== null; ) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2))
              node.childLanes = mergeLanes(node.childLanes, renderLanes2), alternate !== null && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2));
            else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2))
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            else
              break;
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
          var fiber = workInProgress2.child;
          for (fiber !== null && (fiber.return = workInProgress2); fiber !== null; ) {
            var nextFiber = void 0, list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              for (var dependency = list.firstContext; dependency !== null; ) {
                if (dependency.context === context && (dependency.observedBits & changedBits) != 0) {
                  if (fiber.tag === ClassComponent) {
                    var update2 = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                    update2.tag = ForceUpdate, enqueueUpdate(fiber, update2);
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleWorkOnParentPath(fiber.return, renderLanes2), list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else
              fiber.tag === ContextProvider ? nextFiber = fiber.type === workInProgress2.type ? null : fiber.child : nextFiber = fiber.child;
            if (nextFiber !== null)
              nextFiber.return = fiber;
            else
              for (nextFiber = fiber; nextFiber !== null; ) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return, nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2, lastContextDependency = null, lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            firstContext !== null && (includesSomeLane(dependencies.lanes, renderLanes2) && markWorkInProgressReceivedUpdate(), dependencies.firstContext = null);
          }
        }
        function readContext(context, observedBits) {
          if (isDisallowedContextReadInDEV && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), lastContextWithAllBitsObserved !== context) {
            if (!(observedBits === !1 || observedBits === 0)) {
              var resolvedObservedBits;
              typeof observedBits != "number" || observedBits === MAX_SIGNED_31_BIT_INT ? (lastContextWithAllBitsObserved = context, resolvedObservedBits = MAX_SIGNED_31_BIT_INT) : resolvedObservedBits = observedBits;
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null)
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                lastContextDependency = contextItem, currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else
                lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context._currentValue;
        }
        var UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = !1, didWarnUpdateInsideUpdate, currentlyProcessingQueue;
        didWarnUpdateInsideUpdate = !1, currentlyProcessingQueue = null;
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue, currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update2 = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update2;
        }
        function enqueueUpdate(fiber, update2) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue !== null) {
            var sharedQueue = updateQueue.shared, pending = sharedQueue.pending;
            pending === null ? update2.next = update2 : (update2.next = pending.next, pending.next = update2), sharedQueue.pending = update2, currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate && (error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), didWarnUpdateInsideUpdate = !0);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null, newLast = null, firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update2 = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update2.eventTime,
                    lane: update2.lane,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  newLast === null ? newFirst = newLast = clone : (newLast.next = clone, newLast = clone), update2 = update2.next;
                } while (update2 !== null);
                newLast === null ? newFirst = newLast = capturedUpdate : (newLast.next = capturedUpdate, newLast = capturedUpdate);
              } else
                newFirst = newLast = capturedUpdate;
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              }, workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          lastBaseUpdate === null ? queue.firstBaseUpdate = capturedUpdate : lastBaseUpdate.next = capturedUpdate, queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update2, prevState, nextProps, instance) {
          switch (update2.tag) {
            case ReplaceState: {
              var payload3 = update2.payload;
              if (typeof payload3 == "function") {
                enterDisallowedContextReadInDEV();
                var nextState = payload3.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      payload3.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload3;
            }
            case CaptureUpdate:
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            case UpdateState: {
              var _payload = update2.payload, partialState;
              if (typeof _payload == "function") {
                enterDisallowedContextReadInDEV(), partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else
                partialState = _payload;
              return partialState == null ? prevState : _assign({}, prevState, partialState);
            }
            case ForceUpdate:
              return hasForceUpdate = !0, prevState;
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = !1, currentlyProcessingQueue = queue.shared;
          var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null, lastBaseUpdate === null ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate, lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue, currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              currentLastBaseUpdate !== lastBaseUpdate && (currentLastBaseUpdate === null ? currentQueue.firstBaseUpdate = firstPendingUpdate : currentLastBaseUpdate.next = firstPendingUpdate, currentQueue.lastBaseUpdate = lastPendingUpdate);
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState, newLanes = NoLanes, newBaseState = null, newFirstBaseUpdate = null, newLastBaseUpdate = null, update2 = firstBaseUpdate;
            do {
              var updateLane = update2.lane, updateEventTime = update2.eventTime;
              if (isSubsetOfLanes(renderLanes2, updateLane)) {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update2, newState, props, instance);
                var callback = update2.callback;
                if (callback !== null) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  effects === null ? queue.effects = [update2] : effects.push(update2);
                }
              } else {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update2.tag,
                  payload: update2.payload,
                  callback: update2.callback,
                  next: null
                };
                newLastBaseUpdate === null ? (newFirstBaseUpdate = newLastBaseUpdate = clone, newBaseState = newState) : newLastBaseUpdate = newLastBaseUpdate.next = clone, newLanes = mergeLanes(newLanes, updateLane);
              }
              if (update2 = update2.next, update2 === null) {
                if (pendingQueue = queue.shared.pending, pendingQueue === null)
                  break;
                var _lastPendingUpdate = pendingQueue, _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null, update2 = _firstPendingUpdate, queue.lastBaseUpdate = _lastPendingUpdate, queue.shared.pending = null;
              }
            } while (!0);
            newLastBaseUpdate === null && (newBaseState = newState), queue.baseState = newBaseState, queue.firstBaseUpdate = newFirstBaseUpdate, queue.lastBaseUpdate = newLastBaseUpdate, markSkippedUpdateLanes(newLanes), workInProgress2.lanes = newLanes, workInProgress2.memoizedState = newState;
          }
          currentlyProcessingQueue = null;
        }
        function callCallback(callback, context) {
          if (typeof callback != "function")
            throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = !1;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          if (finishedQueue.effects = null, effects !== null)
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i], callback = effect.callback;
              callback !== null && (effect.callback = null, callCallback(callback, instance));
            }
        }
        var fakeInternalInstance = {}, isArray = Array.isArray, emptyRefsObject = new React6.Component().refs, didWarnAboutStateAssignmentForComponent, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set(), didWarnAboutUninitializedState = new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = new Set(), didWarnAboutDirectlyAssigningPropsToState = new Set(), didWarnAboutUndefinedDerivedState = new Set(), didWarnAboutContextTypeAndContextTypes = new Set(), didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (!(callback === null || typeof callback == "function")) {
              var key = callerName + "_" + callback;
              didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
            }
          }, warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
            }
          }, Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: !1,
            value: function() {
              throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          }), Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              getDerivedStateFromProps(nextProps, prevState);
            } finally {
              reenableLogs();
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          warnOnUndefinedDerivedState(ctor, partialState);
          var memoizedState = partialState == null ? prevState : _assign({}, prevState, partialState);
          if (workInProgress2.memoizedState = memoizedState, workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload3, callback) {
            var fiber = get11(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update2 = createUpdate(eventTime, lane);
            update2.payload = payload3, callback != null && (warnOnInvalidCallback(callback, "setState"), update2.callback = callback), enqueueUpdate(fiber, update2), scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState: function(inst, payload3, callback) {
            var fiber = get11(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update2 = createUpdate(eventTime, lane);
            update2.tag = ReplaceState, update2.payload = payload3, callback != null && (warnOnInvalidCallback(callback, "replaceState"), update2.callback = callback), enqueueUpdate(fiber, update2), scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get11(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update2 = createUpdate(eventTime, lane);
            update2.tag = ForceUpdate, callback != null && (warnOnInvalidCallback(callback, "forceUpdate"), update2.callback = callback), enqueueUpdate(fiber, update2), scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate == "function") {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                reenableLogs();
              }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            return shouldUpdate === void 0 && error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component"), shouldUpdate;
          }
          return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name2 = getComponentName(ctor) || "Component", renderPresent = instance.render;
            renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name2) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name2)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name2), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name2), instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name2), instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name2), instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name2), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name2)), typeof instance.componentShouldUpdate == "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name2), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate != "undefined" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name2), typeof instance.componentDidReceiveProps == "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name2), typeof instance.componentWillRecieveProps == "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name2), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name2);
            var hasMutatedProps = instance.props !== newProps;
            instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name2, name2), instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name2, name2), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor))), typeof instance.getDerivedStateFromProps == "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2), typeof instance.getDerivedStateFromError == "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2), typeof ctor.getSnapshotBeforeUpdate == "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name2);
            var _state = instance.state;
            _state && (typeof _state != "object" || isArray(_state)) && error("%s.state: must be set to an object or null", name2), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name2);
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater, workInProgress2.stateNode = instance, set6(instance, workInProgress2), instance._reactInternalInstance = fakeInternalInstance;
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = !1, unmaskedContext = emptyContextObject, context = emptyContextObject, contextType = ctor.contextType;
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
            }
          }
          if (typeof contextType == "object" && contextType !== null)
            context = readContext(contextType);
          else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes != null, context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          if (workInProgress2.mode & StrictMode) {
            disableLogs();
            try {
              new ctor(props, context);
            } finally {
              reenableLogs();
            }
          }
          var instance = new ctor(props, context), state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps == "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
            }
            if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
              var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
              if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
              }
            }
          }
          return isLegacyContextConsumer && cacheContext(workInProgress2, unmaskedContext, context), instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps(newProps, nextContext), typeof instance.UNSAFE_componentWillReceiveProps == "function" && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext), instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              didWarnAboutStateAssignmentForComponent.has(componentName) || (didWarnAboutStateAssignmentForComponent.add(componentName), error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName));
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          checkClassInstance(workInProgress2, ctor, newProps);
          var instance = workInProgress2.stateNode;
          instance.props = newProps, instance.state = workInProgress2.memoizedState, instance.refs = emptyRefsObject, initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType == "object" && contextType !== null)
            instance.context = readContext(contextType);
          else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
            }
            workInProgress2.mode & StrictMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance), ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), instance.state = workInProgress2.memoizedState), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(workInProgress2, instance), processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), instance.state = workInProgress2.memoizedState), typeof instance.componentDidMount == "function" && (workInProgress2.flags |= Update);
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode, oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
          if (typeof contextType == "object" && contextType !== null)
            nextContext = readContext(contextType);
          else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
          !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (oldProps !== newProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
          if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing())
            return typeof instance.componentDidMount == "function" && (workInProgress2.flags |= Update), !1;
          typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          return shouldUpdate ? (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount()), typeof instance.componentDidMount == "function" && (workInProgress2.flags |= Update)) : (typeof instance.componentDidMount == "function" && (workInProgress2.flags |= Update), workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState), instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps, oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
          if (typeof contextType == "object" && contextType !== null)
            nextContext = readContext(contextType);
          else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
          !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
          if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing())
            return typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), !1;
          typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          return shouldUpdate ? (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate == "function" || typeof instance.componentWillUpdate == "function") && (typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate(newProps, newState, nextContext), typeof instance.UNSAFE_componentWillUpdate == "function" && instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext)), typeof instance.componentDidUpdate == "function" && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (workInProgress2.flags |= Snapshot)) : (typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState), instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
        }
        var didWarnAboutMaps, didWarnAboutGenerators, didWarnAboutStringRefs, ownerHasKeyUseWarning, ownerHasFunctionTypeWarning, warnForMissingKey = function(child, returnFiber) {
        };
        didWarnAboutMaps = !1, didWarnAboutGenerators = !1, didWarnAboutStringRefs = {}, ownerHasKeyUseWarning = {}, ownerHasFunctionTypeWarning = {}, warnForMissingKey = function(child, returnFiber) {
          if (!(child === null || typeof child != "object") && !(!child._store || child._store.validated || child.key != null)) {
            if (typeof child._store != "object")
              throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            child._store.validated = !0;
            var componentName = getComponentName(returnFiber.type) || "Component";
            ownerHasKeyUseWarning[componentName] || (ownerHasKeyUseWarning[componentName] = !0, error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
          }
        };
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef != "function" && typeof mixedRef != "object") {
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentName(returnFiber.type) || "Component";
              didWarnAboutStringRefs[componentName] || (error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef), didWarnAboutStringRefs[componentName] = !0);
            }
            if (element._owner) {
              var owner = element._owner, inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent)
                  throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                inst = ownerFiber.stateNode;
              }
              if (!inst)
                throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref == "function" && current2.ref._stringRef === stringRef)
                return current2.ref;
              var ref = function(value) {
                var refs = inst.refs;
                refs === emptyRefsObject && (refs = inst.refs = {}), value === null ? delete refs[stringRef] : refs[stringRef] = value;
              };
              return ref._stringRef = stringRef, ref;
            } else {
              if (typeof mixedRef != "string")
                throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              if (!element._owner)
                throw Error("Element ref was specified as a string (" + mixedRef + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea")
            throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasFunctionTypeWarning[componentName])
              return;
            ownerHasFunctionTypeWarning[componentName] = !0, error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!!shouldTrackSideEffects) {
              var last = returnFiber.lastEffect;
              last !== null ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete, childToDelete.nextEffect = null, childToDelete.flags = Deletion;
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects)
              return null;
            for (var childToDelete = currentFirstChild; childToDelete !== null; )
              deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            for (var existingChildren = new Map(), existingChild = currentFirstChild; existingChild !== null; )
              existingChild.key !== null ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            return clone.index = 0, clone.sibling = null, clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            if (newFiber.index = newIndex, !shouldTrackSideEffects)
              return lastPlacedIndex;
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              return oldIndex < lastPlacedIndex ? (newFiber.flags = Placement, lastPlacedIndex) : oldIndex;
            } else
              return newFiber.flags = Placement, lastPlacedIndex;
          }
          function placeSingleChild(newFiber) {
            return shouldTrackSideEffects && newFiber.alternate === null && (newFiber.flags = Placement), newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              return created.return = returnFiber, created;
            } else {
              var existing = useFiber(current2, textContent);
              return existing.return = returnFiber, existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            if (current2 !== null && (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element))) {
              var existing = useFiber(current2, element.props);
              return existing.ref = coerceRef(returnFiber, current2, element), existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            return created.ref = coerceRef(returnFiber, current2, element), created.return = returnFiber, created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              return created.return = returnFiber, created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              return existing.return = returnFiber, existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment2) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              return created.return = returnFiber, created;
            } else {
              var existing = useFiber(current2, fragment);
              return existing.return = returnFiber, existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild == "string" || typeof newChild == "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              return created.return = returnFiber, created;
            }
            if (typeof newChild == "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  return _created.ref = coerceRef(returnFiber, null, newChild), _created.return = returnFiber, _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  return _created2.return = returnFiber, _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                return _created3.return = returnFiber, _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild == "string" || typeof newChild == "number")
              return key !== null ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            if (typeof newChild == "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return newChild.key === key ? newChild.type === REACT_FRAGMENT_TYPE ? updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key) : updateElement(returnFiber, oldFiber, newChild, lanes) : null;
                case REACT_PORTAL_TYPE:
                  return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              }
              if (isArray$1(newChild) || getIteratorFn(newChild))
                return key !== null ? null : updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild == "string" || typeof newChild == "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild == "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return newChild.type === REACT_FRAGMENT_TYPE ? updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key) : updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child != "object" || child === null)
                return knownKeys;
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key != "string")
                    break;
                  if (knownKeys === null) {
                    knownKeys = new Set(), knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            for (var knownKeys = null, i = 0; i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                oldFiber === null && (oldFiber = nextOldFiber);
                break;
              }
              shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length)
              return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                _newFiber !== null && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
              }
              return resultingFirstChild;
            }
            for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              _newFiber2 !== null && (shouldTrackSideEffects && _newFiber2.alternate !== null && existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
            }
            return shouldTrackSideEffects && existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            }), resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn != "function")
              throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            {
              typeof Symbol == "function" && newChildrenIterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), newChildrenIterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren)
                for (var knownKeys = null, _step = _newChildren.next(); !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null)
              throw Error("An iterable object provided no iterator.");
            for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next(); oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                oldFiber === null && (oldFiber = nextOldFiber);
                break;
              }
              shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
            }
            if (step.done)
              return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                _newFiber3 !== null && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
              }
              return resultingFirstChild;
            }
            for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              _newFiber4 !== null && (shouldTrackSideEffects && _newFiber4.alternate !== null && existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
            }
            return shouldTrackSideEffects && existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            }), resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              return existing.return = returnFiber, existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            for (var key = element.key, child = currentFirstChild; child !== null; ) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment2: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      return existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      return _existing3.ref = coerceRef(returnFiber, child, element), _existing3.return = returnFiber, _existing3._debugSource = element._source, _existing3._debugOwner = element._owner, _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else
                deleteChild(returnFiber, child);
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              return created.return = returnFiber, created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              return _created4.ref = coerceRef(returnFiber, currentFirstChild, element), _created4.return = returnFiber, _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            for (var key = portal.key, child = currentFirstChild; child !== null; ) {
              if (child.key === key)
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  return existing.return = returnFiber, existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              else
                deleteChild(returnFiber, child);
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild == "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            isUnkeyedTopLevelFragment && (newChild = newChild.props.children);
            var isObject = typeof newChild == "object" && newChild !== null;
            if (isObject)
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            if (typeof newChild == "string" || typeof newChild == "number")
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            if (isArray$1(newChild))
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild))
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject && throwOnInvalidObjectType(returnFiber, newChild), typeof newChild == "function" && warnOnFunctionType(returnFiber), typeof newChild == "undefined" && !isUnkeyedTopLevelFragment)
              switch (returnFiber.tag) {
                case ClassComponent: {
                  var instance = returnFiber.stateNode;
                  if (instance.render._isMockFunction)
                    break;
                }
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                  throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
              }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(!0), mountChildFibers = ChildReconciler(!1);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child))
            throw Error("Resuming work not yet implemented.");
          if (workInProgress2.child !== null) {
            var currentChild = workInProgress2.child, newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            for (workInProgress2.child = newChild, newChild.return = workInProgress2; currentChild.sibling !== null; )
              currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps), newChild.return = workInProgress2;
            newChild.sibling = null;
          }
        }
        function resetChildFibers(workInProgress2, lanes) {
          for (var child = workInProgress2.child; child !== null; )
            resetWorkInProgress(child, lanes), child = child.sibling;
        }
        var NO_CONTEXT = {}, contextStackCursor$1 = createCursor(NO_CONTEXT), contextFiberStackCursor = createCursor(NO_CONTEXT), rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c3) {
          if (c3 === NO_CONTEXT)
            throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          return c3;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber), push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber), push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber), pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current), context = requiredContext(contextStackCursor$1.current), nextContext = getChildHostContext(context, fiber.type);
          context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
        }
        function popHostContext(fiber) {
          contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
        }
        var DefaultSuspenseContext = 0, SubtreeSuspenseContextMask = 1, InvisibleParentSuspenseContext = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) != 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null)
            return nextState.dehydrated !== null;
          var props = workInProgress2.memoizedProps;
          return props.fallback === void 0 ? !1 : props.unstable_avoidThisFallback !== !0 ? !0 : !hasInvisibleParent;
        }
        function findFirstSuspended(row) {
          for (var node = row; node !== null; ) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated))
                  return node;
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend)
                return node;
            } else if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
            if (node === row)
              return null;
            for (; node.sibling === null; ) {
              if (node.return === null || node.return === row)
                return null;
              node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0, HasEffect = 1, Layout = 2, Passive$1 = 4, hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          return nextHydratableInstance = getFirstHydratableChild(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, !0;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          switch (returnFiber.tag) {
            case HostRoot:
              didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
              break;
            case HostComponent:
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
              break;
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance, childToDelete.return = returnFiber, childToDelete.flags = Deletion, returnFiber.lastEffect !== null ? (returnFiber.lastEffect.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          switch (fiber.flags = fiber.flags & ~Hydrating | Placement, returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type, props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type, _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                  break;
                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;
                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps);
                  break;
              }
              break;
            }
            default:
              return;
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type, props = fiber.pendingProps, instance = canHydrateInstance(nextInstance, type);
              return instance !== null ? (fiber.stateNode = instance, !0) : !1;
            }
            case HostText: {
              var text = fiber.pendingProps, textInstance = canHydrateTextInstance(nextInstance, text);
              return textInstance !== null ? (fiber.stateNode = textInstance, !0) : !1;
            }
            case SuspenseComponent:
              return !1;
            default:
              return !1;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!!isHydrating) {
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (nextInstance = getNextHydratableSibling(firstAttemptedInstance), !nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode, updatePayload3 = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          return fiber.updateQueue = updatePayload3, updatePayload3 !== null;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode, textContent = fiber.memoizedProps, shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null)
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
              }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance)
            throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          for (var parent = fiber.return; parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent; )
            parent = parent.return;
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber)
            return !1;
          if (!isHydrating)
            return popToNextHostParent(fiber), isHydrating = !0, !1;
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps))
            for (var nextInstance = nextHydratableInstance; nextInstance; )
              deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
          return popToNextHostParent(fiber), fiber.tag === SuspenseComponent ? nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber) : nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, !0;
        }
        function resetHydrationState() {
          hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1;
        }
        function getIsHydrating() {
          return isHydrating;
        }
        var workInProgressSources = [], rendererSigil$1;
        rendererSigil$1 = {};
        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
          }
          workInProgressSources.length = 0;
        }
        function getWorkInProgressVersion(mutableSource) {
          return mutableSource._workInProgressVersionPrimary;
        }
        function setWorkInProgressVersion(mutableSource, version) {
          mutableSource._workInProgressVersionPrimary = version, workInProgressSources.push(mutableSource);
        }
        function warnAboutMultipleRenderersDEV(mutableSource) {
          mutableSource._currentPrimaryRenderer == null ? mutableSource._currentPrimaryRenderer = rendererSigil$1 : mutableSource._currentPrimaryRenderer !== rendererSigil$1 && error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig, didWarnAboutMismatchedHooksForComponent, didWarnAboutUseOpaqueIdentifier;
        didWarnAboutUseOpaqueIdentifier = {}, didWarnAboutMismatchedHooksForComponent = new Set();
        var renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = !1;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            hookTypesDev === null ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            hookTypesDev !== null && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName && warnOnHookMismatchInDev(hookName));
          }
        }
        function checkDepsAreArrayDev(deps) {
          deps != null && !Array.isArray(deps) && error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName) && (didWarnAboutMismatchedHooksForComponent.add(componentName), hookTypesDev !== null)) {
              for (var table = "", secondColumnStart = 30, i = 0; i <= hookTypesUpdateIndexDev; i++) {
                for (var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName, row = i + 1 + ". " + oldHookName; row.length < secondColumnStart; )
                  row += " ";
                row += newHookName + `
`, table += row;
              }
              error(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName, table);
            }
          }
        }
        function throwInvalidHookError() {
          throw Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (ignorePreviousDependencies)
            return !1;
          if (prevDeps === null)
            return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
          nextDeps.length !== prevDeps.length && error(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
            if (!objectIs(nextDeps[i], prevDeps[i]))
              return !1;
          return !0;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes, currentlyRenderingFiber$1 = workInProgress2, hookTypesDev = current2 !== null ? current2._debugHookTypes : null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.lanes = NoLanes, current2 !== null && current2.memoizedState !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV : hookTypesDev !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV : ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          var children2 = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              if (didScheduleRenderPhaseUpdateDuringThisPass = !1, !(numberOfReRenders < RE_RENDER_LIMIT))
                throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              numberOfReRenders += 1, ignorePreviousDependencies = !1, currentHook = null, workInProgressHook = null, workInProgress2.updateQueue = null, hookTypesUpdateIndexDev = -1, ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV, children2 = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, workInProgress2._debugHookTypes = hookTypesDev;
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          if (renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, didScheduleRenderPhaseUpdate = !1, didRenderTooFewHooks)
            throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          return children2;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue, workInProgress2.flags &= ~(Passive | Update), current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          if (ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, didScheduleRenderPhaseUpdate) {
            for (var hook = currentlyRenderingFiber$1.memoizedState; hook !== null; ) {
              var queue = hook.queue;
              queue !== null && (queue.pending = null), hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = !1;
          }
          renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, currentHookNameInDev = null, isUpdatingOpaqueValueInRenderPhase = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          return workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook, workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            current2 !== null ? nextCurrentHook = current2.memoizedState : nextCurrentHook = null;
          } else
            nextCurrentHook = currentHook.next;
          var nextWorkInProgressHook;
          if (workInProgressHook === null ? nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState : nextWorkInProgressHook = workInProgressHook.next, nextWorkInProgressHook !== null)
            workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook;
          else {
            if (nextCurrentHook === null)
              throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook : workInProgressHook = workInProgressHook.next = newHook;
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action == "function" ? action(state) : action;
        }
        function mountReducer(reducer3, initialArg, init3) {
          var hook = mountWorkInProgressHook(), initialState;
          init3 !== void 0 ? initialState = init3(initialArg) : initialState = initialArg, hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer3,
            lastRenderedState: initialState
          }, dispatch5 = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch5];
        }
        function updateReducer(reducer3, initialArg, init3) {
          var hook = updateWorkInProgressHook(), queue = hook.queue;
          if (queue === null)
            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          queue.lastRenderedReducer = reducer3;
          var current2 = currentHook, baseQueue = current2.baseQueue, pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next, pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst, pendingQueue.next = baseFirst;
            }
            current2.baseQueue !== baseQueue && error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), current2.baseQueue = baseQueue = pendingQueue, queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next, newState = current2.baseState, newBaseState = null, newBaseQueueFirst = null, newBaseQueueLast = null, update2 = first;
            do {
              var updateLane = update2.lane;
              if (isSubsetOfLanes(renderLanes, updateLane)) {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update2.action,
                    eagerReducer: update2.eagerReducer,
                    eagerState: update2.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update2.eagerReducer === reducer3)
                  newState = update2.eagerState;
                else {
                  var action = update2.action;
                  newState = reducer3(newState, action);
                }
              } else {
                var clone = {
                  lane: updateLane,
                  action: update2.action,
                  eagerReducer: update2.eagerReducer,
                  eagerState: update2.eagerState,
                  next: null
                };
                newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = clone, newBaseState = newState) : newBaseQueueLast = newBaseQueueLast.next = clone, currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane), markSkippedUpdateLanes(updateLane);
              }
              update2 = update2.next;
            } while (update2 !== null && update2 !== first);
            newBaseQueueLast === null ? newBaseState = newState : newBaseQueueLast.next = newBaseQueueFirst, objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseState = newBaseState, hook.baseQueue = newBaseQueueLast, queue.lastRenderedState = newState;
          }
          var dispatch5 = queue.dispatch;
          return [hook.memoizedState, dispatch5];
        }
        function rerenderReducer(reducer3, initialArg, init3) {
          var hook = updateWorkInProgressHook(), queue = hook.queue;
          if (queue === null)
            throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          queue.lastRenderedReducer = reducer3;
          var dispatch5 = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next, update2 = firstRenderPhaseUpdate;
            do {
              var action = update2.action;
              newState = reducer3(newState, action), update2 = update2.next;
            } while (update2 !== firstRenderPhaseUpdate);
            objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseQueue === null && (hook.baseState = newState), queue.lastRenderedState = newState;
          }
          return [newState, dispatch5];
        }
        function readFromUnsubcribedMutableSource(root3, source3, getSnapshot) {
          warnAboutMultipleRenderersDEV(source3);
          var getVersion = source3._getVersion, version = getVersion(source3._source), isSafeToReadFromSource = !1, currentRenderVersion = getWorkInProgressVersion(source3);
          if (currentRenderVersion !== null ? isSafeToReadFromSource = currentRenderVersion === version : (isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root3.mutableReadLanes), isSafeToReadFromSource && setWorkInProgressVersion(source3, version)), isSafeToReadFromSource) {
            var snapshot = getSnapshot(source3._source);
            return typeof snapshot == "function" && error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."), snapshot;
          } else
            throw markSourceAsDirty(source3), Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
        function useMutableSource(hook, source3, getSnapshot, subscribe) {
          var root3 = getWorkInProgressRoot();
          if (root3 === null)
            throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          var getVersion = source3._getVersion, version = getVersion(source3._source), dispatcher = ReactCurrentDispatcher$1.current, _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root3, source3, getSnapshot);
          }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1], snapshot = currentSnapshot, stateHook = workInProgressHook, memoizedState = hook.memoizedState, refs = memoizedState.refs, prevGetSnapshot = refs.getSnapshot, prevSource = memoizedState.source, prevSubscribe = memoizedState.subscribe, fiber = currentlyRenderingFiber$1;
          if (hook.memoizedState = {
            refs,
            source: source3,
            subscribe
          }, dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot, refs.setSnapshot = setSnapshot;
            var maybeNewVersion = getVersion(source3._source);
            if (!objectIs(version, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source3._source);
              if (typeof maybeNewSnapshot == "function" && error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."), !objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root3, lane);
              }
              markRootEntangled(root3, root3.mutableReadLanes);
            }
          }, [getSnapshot, source3, subscribe]), dispatcher.useEffect(function() {
            var handleChange = function() {
              var latestGetSnapshot = refs.getSnapshot, latestSetSnapshot = refs.setSnapshot;
              try {
                latestSetSnapshot(latestGetSnapshot(source3._source));
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root3, lane);
              } catch (error2) {
                latestSetSnapshot(function() {
                  throw error2;
                });
              }
            }, unsubscribe = subscribe(source3._source, handleChange);
            return typeof unsubscribe != "function" && error("Mutable source subscribe function must return an unsubscribe function."), unsubscribe;
          }, [source3, subscribe]), !objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source3) || !objectIs(prevSubscribe, subscribe)) {
            var newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue), stateHook.queue = newQueue, stateHook.baseQueue = null, snapshot = readFromUnsubcribedMutableSource(root3, source3, getSnapshot), stateHook.memoizedState = stateHook.baseState = snapshot;
          }
          return snapshot;
        }
        function mountMutableSource(source3, getSnapshot, subscribe) {
          var hook = mountWorkInProgressHook();
          return hook.memoizedState = {
            refs: {
              getSnapshot,
              setSnapshot: null
            },
            source: source3,
            subscribe
          }, useMutableSource(hook, source3, getSnapshot, subscribe);
        }
        function updateMutableSource(source3, getSnapshot, subscribe) {
          var hook = updateWorkInProgressHook();
          return useMutableSource(hook, source3, getSnapshot, subscribe);
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          typeof initialState == "function" && (initialState = initialState()), hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          }, dispatch5 = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch5];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag2, create12, destroy, deps) {
          var effect = {
            tag: tag2,
            create: create12,
            destroy,
            deps,
            next: null
          }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null)
            componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.lastEffect = effect.next = effect;
          else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null)
              componentUpdateQueue.lastEffect = effect.next = effect;
            else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect, effect.next = firstEffect, componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook(), ref = {
            current: initialValue
          };
          return Object.seal(ref), hook.memoizedState = ref, ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create12, deps) {
          var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create12, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create12, deps) {
          var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            if (destroy = prevEffect.destroy, nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create12, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create12, destroy, nextDeps);
        }
        function mountEffect(create12, deps) {
          return typeof jest != "undefined" && warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1), mountEffectImpl(Update | Passive, Passive$1, create12, deps);
        }
        function updateEffect(create12, deps) {
          return typeof jest != "undefined" && warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1), updateEffectImpl(Update | Passive, Passive$1, create12, deps);
        }
        function mountLayoutEffect(create12, deps) {
          return mountEffectImpl(Update, Layout, create12, deps);
        }
        function updateLayoutEffect(create12, deps) {
          return updateEffectImpl(Update, Layout, create12, deps);
        }
        function imperativeHandleEffect(create12, ref) {
          if (typeof ref == "function") {
            var refCallback = ref, _inst = create12();
            return refCallback(_inst), function() {
              refCallback(null);
            };
          } else if (ref != null) {
            var refObject = ref;
            refObject.hasOwnProperty("current") || error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            var _inst2 = create12();
            return refObject.current = _inst2, function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create12, deps) {
          typeof create12 != "function" && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create12 !== null ? typeof create12 : "null");
          var effectDeps = deps != null ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create12, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create12, deps) {
          typeof create12 != "function" && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create12 !== null ? typeof create12 : "null");
          var effectDeps = deps != null ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create12, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
          return hook.memoizedState = [callback, nextDeps], callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
          return hook.memoizedState = [callback, nextDeps], callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, nextValue = nextCreate();
          return hook.memoizedState = [nextValue, nextDeps], nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
          var nextValue = nextCreate();
          return hook.memoizedState = [nextValue, nextDeps], nextValue;
        }
        function mountDeferredValue(value) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          return mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]), prevValue;
        }
        function updateDeferredValue(value) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          return updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]), prevValue;
        }
        function rerenderDeferredValue(value) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          return updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]), prevValue;
        }
        function startTransition(setPending, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(!0);
          }), runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setPending(!1), callback();
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          });
        }
        function mountTransition() {
          var _mountState2 = mountState(!1), isPending = _mountState2[0], setPending = _mountState2[1], start2 = startTransition.bind(null, setPending);
          return mountRef(start2), [start2, isPending];
        }
        function updateTransition() {
          var _updateState2 = updateState(), isPending = _updateState2[0], startRef = updateRef(), start2 = startRef.current;
          return [start2, isPending];
        }
        function rerenderTransition() {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], startRef = updateRef(), start2 = startRef.current;
          return [start2, isPending];
        }
        var isUpdatingOpaqueValueInRenderPhase = !1;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          return isUpdatingOpaqueValueInRenderPhase;
        }
        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            var name2 = getComponentName(fiber.type) || "Unknown";
            getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name2] && (error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly."), didWarnAboutUseOpaqueIdentifier[name2] = !0);
          }
        }
        function mountOpaqueIdentifier() {
          var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
          if (getIsHydrating()) {
            var didUpgrade = !1, fiber = currentlyRenderingFiber$1, readValue = function() {
              throw didUpgrade || (didUpgrade = !0, isUpdatingOpaqueValueInRenderPhase = !0, setId(makeId()), isUpdatingOpaqueValueInRenderPhase = !1, warnOnOpaqueIdentifierAccessInDEV(fiber)), Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            }, id7 = makeOpaqueHydratingObject(readValue), setId = mountState(id7)[1];
            return (currentlyRenderingFiber$1.mode & BlockingMode) === NoMode && (currentlyRenderingFiber$1.flags |= Update | Passive, pushEffect(HasEffect | Passive$1, function() {
              setId(makeId());
            }, void 0, null)), id7;
          } else {
            var _id = makeId();
            return mountState(_id), _id;
          }
        }
        function updateOpaqueIdentifier() {
          var id7 = updateState()[0];
          return id7;
        }
        function rerenderOpaqueIdentifier() {
          var id7 = rerenderState()[0];
          return id7;
        }
        function dispatchAction(fiber, queue, action) {
          typeof arguments[3] == "function" && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          var eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update2 = {
            lane,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          }, pending = queue.pending;
          pending === null ? update2.next = update2 : (update2.next = pending.next, pending.next = update2), queue.pending = update2;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1)
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
          else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                prevDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  var currentState = queue.lastRenderedState, eagerState = lastRenderedReducer(currentState, action);
                  if (update2.eagerReducer = lastRenderedReducer, update2.eagerState = eagerState, objectIs(eagerState, currentState))
                    return;
                } catch {
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
            typeof jest != "undefined" && (warnIfNotScopedWithMatchingAct(fiber), warnIfNotCurrentlyActingUpdatesInDev(fiber)), scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }, warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              return currentHookNameInDev = "useCallback", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              return currentHookNameInDev = "useContext", mountHookTypesDev(), readContext(context, observedBits);
            },
            useEffect: function(create12, deps) {
              return currentHookNameInDev = "useEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountEffect(create12, deps);
            },
            useImperativeHandle: function(ref, create12, deps) {
              return currentHookNameInDev = "useImperativeHandle", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountImperativeHandle(ref, create12, deps);
            },
            useLayoutEffect: function(create12, deps) {
              return currentHookNameInDev = "useLayoutEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountLayoutEffect(create12, deps);
            },
            useMemo: function(create12, deps) {
              currentHookNameInDev = "useMemo", mountHookTypesDev(), checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create12, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer3, initialArg, init3) {
              currentHookNameInDev = "useReducer", mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer3, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              return currentHookNameInDev = "useRef", mountHookTypesDev(), mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState", mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              return currentHookNameInDev = "useDebugValue", mountHookTypesDev(), mountDebugValue();
            },
            useDeferredValue: function(value) {
              return currentHookNameInDev = "useDeferredValue", mountHookTypesDev(), mountDeferredValue(value);
            },
            useTransition: function() {
              return currentHookNameInDev = "useTransition", mountHookTypesDev(), mountTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              return currentHookNameInDev = "useMutableSource", mountHookTypesDev(), mountMutableSource(source3, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              return currentHookNameInDev = "useOpaqueIdentifier", mountHookTypesDev(), mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          }, HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              return currentHookNameInDev = "useCallback", updateHookTypesDev(), mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context, observedBits);
            },
            useEffect: function(create12, deps) {
              return currentHookNameInDev = "useEffect", updateHookTypesDev(), mountEffect(create12, deps);
            },
            useImperativeHandle: function(ref, create12, deps) {
              return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), mountImperativeHandle(ref, create12, deps);
            },
            useLayoutEffect: function(create12, deps) {
              return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), mountLayoutEffect(create12, deps);
            },
            useMemo: function(create12, deps) {
              currentHookNameInDev = "useMemo", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create12, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer3, initialArg, init3) {
              currentHookNameInDev = "useReducer", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer3, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              return currentHookNameInDev = "useRef", updateHookTypesDev(), mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), mountDebugValue();
            },
            useDeferredValue: function(value) {
              return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), mountDeferredValue(value);
            },
            useTransition: function() {
              return currentHookNameInDev = "useTransition", updateHookTypesDev(), mountTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), mountMutableSource(source3, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              return currentHookNameInDev = "useOpaqueIdentifier", updateHookTypesDev(), mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          }, HooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context, observedBits);
            },
            useEffect: function(create12, deps) {
              return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create12, deps);
            },
            useImperativeHandle: function(ref, create12, deps) {
              return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create12, deps);
            },
            useLayoutEffect: function(create12, deps) {
              return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create12, deps);
            },
            useMemo: function(create12, deps) {
              currentHookNameInDev = "useMemo", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create12, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer3, initialArg, init3) {
              currentHookNameInDev = "useReducer", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer3, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
            },
            useDeferredValue: function(value) {
              return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), updateDeferredValue(value);
            },
            useTransition: function() {
              return currentHookNameInDev = "useTransition", updateHookTypesDev(), updateTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), updateMutableSource(source3, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              return currentHookNameInDev = "useOpaqueIdentifier", updateHookTypesDev(), updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          }, HooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context, observedBits);
            },
            useEffect: function(create12, deps) {
              return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create12, deps);
            },
            useImperativeHandle: function(ref, create12, deps) {
              return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create12, deps);
            },
            useLayoutEffect: function(create12, deps) {
              return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create12, deps);
            },
            useMemo: function(create12, deps) {
              currentHookNameInDev = "useMemo", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create12, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer3, initialArg, init3) {
              currentHookNameInDev = "useReducer", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer3, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState", updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
            },
            useDeferredValue: function(value) {
              return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), rerenderDeferredValue(value);
            },
            useTransition: function() {
              return currentHookNameInDev = "useTransition", updateHookTypesDev(), rerenderTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), updateMutableSource(source3, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              return currentHookNameInDev = "useOpaqueIdentifier", updateHookTypesDev(), rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          }, InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              return warnInvalidContextAccess(), readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), mountHookTypesDev(), mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              return currentHookNameInDev = "useContext", warnInvalidHookAccess(), mountHookTypesDev(), readContext(context, observedBits);
            },
            useEffect: function(create12, deps) {
              return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountEffect(create12, deps);
            },
            useImperativeHandle: function(ref, create12, deps) {
              return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), mountHookTypesDev(), mountImperativeHandle(ref, create12, deps);
            },
            useLayoutEffect: function(create12, deps) {
              return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountLayoutEffect(create12, deps);
            },
            useMemo: function(create12, deps) {
              currentHookNameInDev = "useMemo", warnInvalidHookAccess(), mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create12, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer3, initialArg, init3) {
              currentHookNameInDev = "useReducer", warnInvalidHookAccess(), mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer3, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              return currentHookNameInDev = "useRef", warnInvalidHookAccess(), mountHookTypesDev(), mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState", warnInvalidHookAccess(), mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), mountHookTypesDev(), mountDebugValue();
            },
            useDeferredValue: function(value) {
              return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), mountHookTypesDev(), mountDeferredValue(value);
            },
            useTransition: function() {
              return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), mountHookTypesDev(), mountTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), mountHookTypesDev(), mountMutableSource(source3, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              return currentHookNameInDev = "useOpaqueIdentifier", warnInvalidHookAccess(), mountHookTypesDev(), mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          }, InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              return warnInvalidContextAccess(), readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context, observedBits);
            },
            useEffect: function(create12, deps) {
              return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create12, deps);
            },
            useImperativeHandle: function(ref, create12, deps) {
              return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create12, deps);
            },
            useLayoutEffect: function(create12, deps) {
              return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create12, deps);
            },
            useMemo: function(create12, deps) {
              currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create12, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer3, initialArg, init3) {
              currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer3, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
            },
            useDeferredValue: function(value) {
              return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDeferredValue(value);
            },
            useTransition: function() {
              return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), updateTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), updateMutableSource(source3, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              return currentHookNameInDev = "useOpaqueIdentifier", warnInvalidHookAccess(), updateHookTypesDev(), updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          }, InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              return warnInvalidContextAccess(), readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context, observedBits);
            },
            useEffect: function(create12, deps) {
              return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create12, deps);
            },
            useImperativeHandle: function(ref, create12, deps) {
              return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create12, deps);
            },
            useLayoutEffect: function(create12, deps) {
              return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create12, deps);
            },
            useMemo: function(create12, deps) {
              currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create12, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer3, initialArg, init3) {
              currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer3, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
            },
            useDeferredValue: function(value) {
              return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), rerenderDeferredValue(value);
            },
            useTransition: function() {
              return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), rerenderTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), updateMutableSource(source3, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              return currentHookNameInDev = "useOpaqueIdentifier", warnInvalidHookAccess(), updateHookTypesDev(), rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now, commitTime = 0, profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1(), fiber.actualStartTime < 0 && (fiber.actualStartTime = now$1());
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime, overrideBaseTime && (fiber.selfBaseDuration = elapsedTime), profilerStartTime = -1;
          }
        }
        function transferActualDuration(fiber) {
          for (var child = fiber.child; child; )
            fiber.actualDuration += child.actualDuration, child = child.sibling;
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, didReceiveUpdate = !1, didWarnAboutBadClass, didWarnAboutModulePatternComponent, didWarnAboutContextTypeOnFunctionComponent, didWarnAboutGetDerivedStateOnFunctionComponent, didWarnAboutFunctionRefs, didWarnAboutReassigningProps, didWarnAboutRevealOrder, didWarnAboutTailOptions;
        didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutFunctionRefs = {}, didWarnAboutReassigningProps = !1, didWarnAboutRevealOrder = {}, didWarnAboutTailOptions = {};
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          current2 === null ? workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            innerPropTypes && checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
          }
          var render3 = Component.render, ref = workInProgress2.ref, nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2), workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(!1);
          }
          return current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              return resolvedType = resolveFunctionForHotReloading(type), workInProgress2.tag = SimpleMemoComponent, workInProgress2.type = resolvedType, validateFunctionComponentInDev(workInProgress2, type), updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              innerPropTypes && checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            return child.ref = workInProgress2.ref, child.return = workInProgress2, workInProgress2.child = child, child;
          }
          {
            var _type = Component.type, _innerPropTypes = _type.propTypes;
            _innerPropTypes && checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
          }
          var currentChild = current2.child;
          if (!includesSomeLane(updateLanes, renderLanes2)) {
            var prevProps = currentChild.memoizedProps, compare = Component.compare;
            if (compare = compare !== null ? compare : shallowEqual, compare(prevProps, nextProps) && current2.ref === workInProgress2.ref)
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          return newChild.ref = workInProgress2.ref, newChild.return = workInProgress2, workInProgress2.child = newChild, newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType, payload3 = lazyComponent._payload, init3 = lazyComponent._init;
              try {
                outerMemoType = init3(payload3);
              } catch {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              outerPropTypes && checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type)
              if (didReceiveUpdate = !1, includesSomeLane(renderLanes2, updateLanes))
                (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags && (didReceiveUpdate = !0);
              else
                return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding")
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = nextState, pushRenderLanes(workInProgress2, renderLanes2);
            } else if (includesSomeLane(renderLanes2, OffscreenLane)) {
              var _nextState2 = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            } else {
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else
                nextBaseLanes = renderLanes2;
              markSpawnedWork(OffscreenLane), workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes
              };
              return workInProgress2.memoizedState = _nextState, pushRenderLanes(workInProgress2, nextBaseLanes), null;
            }
          else {
            var _subtreeRenderLanes;
            prevState !== null ? (_subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2), workInProgress2.memoizedState = null) : _subtreeRenderLanes = renderLanes2, pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
        }
        var updateLegacyHiddenComponent = updateOffscreenComponent;
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
          }
          var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children;
          return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) && (workInProgress2.flags |= Ref);
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            innerPropTypes && checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, !0);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2), workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(!1);
          }
          return current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            innerPropTypes && checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
          }
          var hasContext;
          isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode, shouldUpdate;
          instance === null ? (current2 !== null && (current2.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement), constructClassInstance(workInProgress2, Component, nextProps), mountClassInstance(workInProgress2, Component, nextProps, renderLanes2), shouldUpdate = !0) : current2 === null ? shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2) : shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            shouldUpdate && inst.props !== nextProps && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component"), didWarnAboutReassigningProps = !0);
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError)
            return hasContext && invalidateContextProvider(workInProgress2, Component, !1), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError != "function")
            nextChildren = null, stopProfilerTimerIfRunning();
          else {
            if (setIsRendering(!0), nextChildren = instance.render(), workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                instance.render();
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(!1);
          }
          return workInProgress2.flags |= PerformedWork, current2 !== null && didCaptureError ? forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.memoizedState = instance.state, hasContext && invalidateContextProvider(workInProgress2, Component, !0), workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          root3.pendingContext ? pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context) : root3.context && pushTopLevelContextObject(workInProgress2, root3.context, !1), pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null))
            throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
          var nextProps = workInProgress2.pendingProps, prevState = workInProgress2.memoizedState, prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState, nextChildren = nextState.element;
          if (nextChildren === prevChildren)
            return resetHydrationState(), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          var root3 = workInProgress2.stateNode;
          if (root3.hydrate && enterHydrationState(workInProgress2)) {
            {
              var mutableSourceEagerHydrationData = root3.mutableSourceEagerHydrationData;
              if (mutableSourceEagerHydrationData != null)
                for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                  var mutableSource = mutableSourceEagerHydrationData[i], version = mutableSourceEagerHydrationData[i + 1];
                  setWorkInProgressVersion(mutableSource, version);
                }
            }
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            for (var node = child; node; )
              node.flags = node.flags & ~Placement | Hydrating, node = node.sibling;
          } else
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), resetHydrationState();
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2), current2 === null && tryToClaimNextHydratableInstance(workInProgress2);
          var type = workInProgress2.type, nextProps = workInProgress2.pendingProps, prevProps = current2 !== null ? current2.memoizedProps : null, nextChildren = nextProps.children, isDirectTextChild = shouldSetTextContent(type, nextProps);
          return isDirectTextChild ? nextChildren = null : prevProps !== null && shouldSetTextContent(type, prevProps) && (workInProgress2.flags |= ContentReset), markRef(current2, workInProgress2), reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          return current2 === null && tryToClaimNextHydratableInstance(workInProgress2), null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
          _current !== null && (_current.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement);
          var props = workInProgress2.pendingProps, lazyComponent = elementType, payload3 = lazyComponent._payload, init3 = lazyComponent._init, Component = init3(payload3);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component), resolvedProps = resolveDefaultProps(Component, props), child;
          switch (resolvedTag) {
            case FunctionComponent:
              return validateFunctionComponentInDev(workInProgress2, Component), workInProgress2.type = Component = resolveFunctionForHotReloading(Component), child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
            case ClassComponent:
              return workInProgress2.type = Component = resolveClassForHotReloading(Component), child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
            case ForwardRef:
              return workInProgress2.type = Component = resolveForwardRefForHotReloading(Component), child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
            case MemoComponent: {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component.propTypes;
                outerPropTypes && checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
              }
              return child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2), child;
            }
          }
          var hint = "";
          throw Component !== null && typeof Component == "object" && Component.$$typeof === REACT_LAZY_TYPE && (hint = " Did you wrap a component in React.lazy() more than once?"), Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          _current !== null && (_current.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement), workInProgress2.tag = ClassComponent;
          var hasContext;
          return isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, prepareToReadContext(workInProgress2, renderLanes2), constructClassInstance(workInProgress2, Component, nextProps), mountClassInstance(workInProgress2, Component, nextProps, renderLanes2), finishClassComponent(null, workInProgress2, Component, !0, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          _current !== null && (_current.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement);
          var props = workInProgress2.pendingProps, context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, !1);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          {
            if (Component.prototype && typeof Component.prototype.render == "function") {
              var componentName = getComponentName(Component) || "Unknown";
              didWarnAboutBadClass[componentName] || (error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
            }
            workInProgress2.mode & StrictMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null), setIsRendering(!0), ReactCurrentOwner$1.current = workInProgress2, value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2), setIsRendering(!1);
          }
          if (workInProgress2.flags |= PerformedWork, typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
            var _componentName = getComponentName(Component) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
          }
          if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentName(Component) || "Unknown";
              didWarnAboutModulePatternComponent[_componentName2] || (error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
            }
            workInProgress2.tag = ClassComponent, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null;
            var hasContext = !1;
            isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null, initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            return typeof getDerivedStateFromProps == "function" && applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props), adoptClassInstance(workInProgress2, value), mountClassInstance(workInProgress2, Component, props, renderLanes2), finishClassComponent(null, workInProgress2, Component, !0, hasContext, renderLanes2);
          } else {
            if (workInProgress2.tag = FunctionComponent, workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            return reconcileChildren(null, workInProgress2, value, renderLanes2), validateFunctionComponentInDev(workInProgress2, Component), workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component && Component.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component"), workInProgress2.ref !== null) {
              var info = "", ownerName = getCurrentFiberOwnerNameInDevOrNull();
              ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
              var warningKey = ownerName || workInProgress2._debugID || "", debugSource = workInProgress2._debugSource;
              debugSource && (warningKey = debugSource.fileName + ":" + debugSource.lineNumber), didWarnAboutFunctionRefs[warningKey] || (didWarnAboutFunctionRefs[warningKey] = !0, error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info));
            }
            if (typeof Component.getDerivedStateFromProps == "function") {
              var _componentName3 = getComponentName(Component) || "Unknown";
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
            }
            if (typeof Component.contextType == "object" && Component.contextType !== null) {
              var _componentName4 = getComponentName(Component) || "Unknown";
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null)
              return !1;
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          shouldSuspend(workInProgress2) && (workInProgress2.flags |= DidCapture);
          var suspenseContext = suspenseStackCursor.current, showFallback = !1, didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2) ? (showFallback = !0, workInProgress2.flags &= ~DidCapture) : (current2 === null || current2.memoizedState !== null) && nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== !0 && (suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext)), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), current2 === null) {
            nextProps.fallback !== void 0 && tryToClaimNextHydratableInstance(workInProgress2);
            var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), primaryChildFragment = workInProgress2.child;
              return primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime == "number") {
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), _primaryChildFragment = workInProgress2.child;
              return _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2.lanes = SomeRetryLane, markSpawnedWork(SomeRetryLane), _fallbackFragment;
            } else
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null)
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback, _nextPrimaryChildren2 = nextProps.children, _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2), _primaryChildFragment3 = workInProgress2.child, prevOffscreenState = current2.child.memoizedState;
                return _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2), _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children, _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                return workInProgress2.memoizedState = null, _primaryChildFragment4;
              }
            else if (showFallback) {
              var _nextFallbackChildren3 = nextProps.fallback, _nextPrimaryChildren4 = nextProps.children, _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2), _primaryChildFragment5 = workInProgress2.child, _prevOffscreenState = current2.child.memoizedState;
              return _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2), _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, _fallbackChildFragment2;
            } else {
              var _nextPrimaryChildren5 = nextProps.children, _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
              return workInProgress2.memoizedState = null, _primaryChildFragment6;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode, primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          }, primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
          return primaryChildFragment.return = workInProgress2, workInProgress2.child = primaryChildFragment, primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode, progressedPrimaryFragment = workInProgress2.child, primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          }, primaryChildFragment, fallbackChildFragment;
          return (mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null ? (primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = 0, primaryChildFragment.treeBaseDuration = 0), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)) : (primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)), primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
        }
        function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          return (workInProgress2.mode & BlockingMode) === NoMode && (primaryChildFragment.lanes = renderLanes2), primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = null, currentFallbackChildFragment !== null && (currentFallbackChildFragment.nextEffect = null, currentFallbackChildFragment.flags = Deletion, workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment), workInProgress2.child = primaryChildFragment, primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode, currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          }, primaryChildFragment;
          if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration, primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration);
            var progressedLastEffect = primaryChildFragment.lastEffect;
            progressedLastEffect !== null ? (workInProgress2.firstEffect = primaryChildFragment.firstEffect, workInProgress2.lastEffect = progressedLastEffect, progressedLastEffect.nextEffect = null) : workInProgress2.firstEffect = workInProgress2.lastEffect = null;
          } else
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          var fallbackChildFragment;
          return currentFallbackChildFragment !== null ? fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren) : (fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null), fallbackChildFragment.flags |= Placement), fallbackChildFragment.return = workInProgress2, primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
        }
        function scheduleWorkOnFiber(fiber, renderLanes2) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleWorkOnParentPath(fiber.return, renderLanes2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          for (var node = firstChild; node !== null; ) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              state !== null && scheduleWorkOnFiber(node, renderLanes2);
            } else if (node.tag === SuspenseListComponent)
              scheduleWorkOnFiber(node, renderLanes2);
            else if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
            if (node === workInProgress2)
              return;
            for (; node.sibling === null; ) {
              if (node.return === null || node.return === workInProgress2)
                return;
              node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          for (var row = firstChild, lastContentRow = null; row !== null; ) {
            var currentRow = row.alternate;
            currentRow !== null && findFirstSuspended(currentRow) === null && (lastContentRow = row), row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder])
            if (didWarnAboutRevealOrder[revealOrder] = !0, typeof revealOrder == "string")
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            else
              error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
        function validateTailOptions(tailMode, revealOrder) {
          tailMode !== void 0 && !didWarnAboutTailOptions[tailMode] && (tailMode !== "collapsed" && tailMode !== "hidden" ? (didWarnAboutTailOptions[tailMode] = !0, error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode)) : revealOrder !== "forwards" && revealOrder !== "backwards" && (didWarnAboutTailOptions[tailMode] = !0, error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode)));
        }
        function validateSuspenseListNestedChild(childSlot, index3) {
          {
            var isArray2 = Array.isArray(childSlot), isIterable = !isArray2 && typeof getIteratorFn(childSlot) == "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              return error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type), !1;
            }
          }
          return !0;
        }
        function validateSuspenseListChildren(children2, revealOrder) {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== !1)
            if (Array.isArray(children2)) {
              for (var i = 0; i < children2.length; i++)
                if (!validateSuspenseListNestedChild(children2[i], i))
                  return;
            } else {
              var iteratorFn = getIteratorFn(children2);
              if (typeof iteratorFn == "function") {
                var childrenIterator = iteratorFn.call(children2);
                if (childrenIterator)
                  for (var step = childrenIterator.next(), _i = 0; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i))
                      return;
                    _i++;
                  }
              } else
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail2, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          renderState === null ? workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail2,
            tailMode,
            lastEffect: lastEffectBeforeRendering
          } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail2, renderState.tailMode = tailMode, renderState.lastEffect = lastEffectBeforeRendering);
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail, newChildren = nextProps.children;
          validateRevealOrder(revealOrder), validateTailOptions(tailMode, revealOrder), validateSuspenseListChildren(newChildren, revealOrder), reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current, shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback)
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback), workInProgress2.flags |= DidCapture;
          else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            didSuspendBefore && propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          if (pushSuspenseContext(workInProgress2, suspenseContext), (workInProgress2.mode & BlockingMode) === NoMode)
            workInProgress2.memoizedState = null;
          else
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child), tail2;
                lastContentRow === null ? (tail2 = workInProgress2.child, workInProgress2.child = null) : (tail2 = lastContentRow.sibling, lastContentRow.sibling = null), initSuspenseListRenderState(workInProgress2, !1, tail2, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null, row = workInProgress2.child;
                for (workInProgress2.child = null; row !== null; ) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail, _tail = row, row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, !0, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, !1, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default:
                workInProgress2.memoizedState = null;
            }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          return current2 === null ? workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = !1;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type, context = providerType._context, newProps = workInProgress2.pendingProps, oldProps = workInProgress2.memoizedProps, newValue = newProps.value;
          {
            "value" in newProps || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = !0, error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
            var providerPropTypes = workInProgress2.type.propTypes;
            providerPropTypes && checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
          if (pushProvider(workInProgress2, newValue), oldProps !== null) {
            var oldValue = oldProps.value, changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged())
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else
              propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
          }
          var newChildren = newProps.children;
          return reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = !1;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
          var newProps = workInProgress2.pendingProps, render3 = newProps.children;
          typeof render3 != "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context, newProps.unstable_observedBits), newChildren;
          return ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), newChildren = render3(newValue), setIsRendering(!1), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = !0;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          return current2 !== null && (workInProgress2.dependencies = current2.dependencies), stopProfilerTimerIfRunning(), markSkippedUpdateLanes(workInProgress2.lanes), includesSomeLane(renderLanes2, workInProgress2.childLanes) ? (cloneChildFibers(current2, workInProgress2), workInProgress2.child) : null;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null)
              throw new Error("Cannot swap the root fiber.");
            if (current2.alternate = null, oldWorkInProgress.alternate = null, newWorkInProgress.index = oldWorkInProgress.index, newWorkInProgress.sibling = oldWorkInProgress.sibling, newWorkInProgress.return = oldWorkInProgress.return, newWorkInProgress.ref = oldWorkInProgress.ref, oldWorkInProgress === returnFiber.child)
              returnFiber.child = newWorkInProgress;
            else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null)
                throw new Error("Expected parent to have a child.");
              for (; prevSibling.sibling !== oldWorkInProgress; )
                if (prevSibling = prevSibling.sibling, prevSibling === null)
                  throw new Error("Expected to find the previous sibling.");
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            return last !== null ? (last.nextEffect = current2, returnFiber.lastEffect = current2) : returnFiber.firstEffect = returnFiber.lastEffect = current2, current2.nextEffect = null, current2.flags = Deletion, newWorkInProgress.flags |= Placement, newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          var updateLanes = workInProgress2.lanes;
          if (workInProgress2._debugNeedsRemount && current2 !== null)
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          if (current2 !== null) {
            var oldProps = current2.memoizedProps, newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type)
              didReceiveUpdate = !0;
            else if (includesSomeLane(renderLanes2, updateLanes))
              (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags ? didReceiveUpdate = !0 : didReceiveUpdate = !1;
            else {
              switch (didReceiveUpdate = !1, workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2), resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  break;
                case ClassComponent: {
                  var Component = workInProgress2.type;
                  isContextProvider(Component) && pushContextProvider(workInProgress2);
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    hasChildWork && (workInProgress2.flags |= Update);
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child, primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes2, primaryChildLanes))
                      return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    return child !== null ? child.sibling : null;
                  } else
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags, _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (didSuspendBefore) {
                    if (_hasChildWork)
                      return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                    workInProgress2.flags |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null && (renderState.rendering = null, renderState.tail = null, renderState.lastEffect = null), pushSuspenseContext(workInProgress2, suspenseStackCursor.current), _hasChildWork)
                    break;
                  return null;
                }
                case OffscreenComponent:
                case LegacyHiddenComponent:
                  return workInProgress2.lanes = NoLanes, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          } else
            didReceiveUpdate = !1;
          switch (workInProgress2.lanes = NoLanes, workInProgress2.tag) {
            case IndeterminateComponent:
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type, unresolvedProps = workInProgress2.pendingProps, resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type, _unresolvedProps = workInProgress2.pendingProps, _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type, _unresolvedProps2 = workInProgress2.pendingProps, _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment2:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type, _unresolvedProps3 = workInProgress2.pendingProps, _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                outerPropTypes && checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
              }
              return _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3), updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
            }
            case SimpleMemoComponent:
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type, _unresolvedProps4 = workInProgress2.pendingProps, _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent:
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            case FundamentalComponent:
              break;
            case ScopeComponent:
              break;
            case Block:
              break;
            case OffscreenComponent:
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            case LegacyHiddenComponent:
              return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
          }
          throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
        }
        var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          for (var node = workInProgress2.child; node !== null; ) {
            if (node.tag === HostComponent || node.tag === HostText)
              appendInitialChild(parent, node.stateNode);
            else if (node.tag !== HostPortal) {
              if (node.child !== null) {
                node.child.return = node, node = node.child;
                continue;
              }
            }
            if (node === workInProgress2)
              return;
            for (; node.sibling === null; ) {
              if (node.return === null || node.return === workInProgress2)
                return;
              node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
          }
        }, updateHostContainer = function(workInProgress2) {
        }, updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps !== newProps) {
            var instance = workInProgress2.stateNode, currentHostContext = getHostContext(), updatePayload3 = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload3, updatePayload3 && markUpdate(workInProgress2);
          }
        }, updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          oldText !== newText && markUpdate(workInProgress2);
        };
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (!getIsHydrating())
            switch (renderState.tailMode) {
              case "hidden": {
                for (var tailNode = renderState.tail, lastTailNode = null; tailNode !== null; )
                  tailNode.alternate !== null && (lastTailNode = tailNode), tailNode = tailNode.sibling;
                lastTailNode === null ? renderState.tail = null : lastTailNode.sibling = null;
                break;
              }
              case "collapsed": {
                for (var _tailNode = renderState.tail, _lastTailNode = null; _tailNode !== null; )
                  _tailNode.alternate !== null && (_lastTailNode = _tailNode), _tailNode = _tailNode.sibling;
                _lastTailNode === null ? !hasRenderedATailFallback && renderState.tail !== null ? renderState.tail.sibling = null : renderState.tail = null : _lastTailNode.sibling = null;
                break;
              }
            }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment2:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              return isContextProvider(Component) && popContext(workInProgress2), null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions();
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                wasHydrated ? markUpdate(workInProgress2) : fiberRoot.hydrate || (workInProgress2.flags |= Snapshot);
              }
              return updateHostContainer(workInProgress2), null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer(), type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null)
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance), current2.ref !== workInProgress2.ref && markRef$1(workInProgress2);
              else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null)
                    throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  return null;
                }
                var currentHostContext = getHostContext(), _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated)
                  prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext) && markUpdate(workInProgress2);
                else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, !1, !1), workInProgress2.stateNode = instance, finalizeInitialChildren(instance, type, newProps, rootContainerInstance) && markUpdate(workInProgress2);
                }
                workInProgress2.ref !== null && markRef$1(workInProgress2);
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText != "string" && workInProgress2.stateNode === null)
                  throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                var _rootContainerInstance = getRootHostContainer(), _currentHostContext = getHostContext(), _wasHydrated2 = popHydrationState(workInProgress2);
                _wasHydrated2 ? prepareToHydrateHostTextInstance(workInProgress2) && markUpdate(workInProgress2) : workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.flags & DidCapture) !== NoFlags)
                return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
              var nextDidTimeout = nextState !== null, prevDidTimeout = !1;
              if (current2 === null)
                workInProgress2.memoizedProps.fallback !== void 0 && popHydrationState(workInProgress2);
              else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
              }
              if (nextDidTimeout && !prevDidTimeout && (workInProgress2.mode & BlockingMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== !0;
                hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext) ? renderDidSuspend() : renderDidSuspendDelayIfPossible();
              }
              return (nextDidTimeout || prevDidTimeout) && (workInProgress2.flags |= Update), null;
            }
            case HostPortal:
              return popHostContainer(workInProgress2), updateHostContainer(workInProgress2), current2 === null && preparePortalMount(workInProgress2.stateNode.containerInfo), null;
            case ContextProvider:
              return popProvider(workInProgress2), null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              return isContextProvider(_Component) && popContext(workInProgress2), null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null)
                return null;
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags, renderedTail = renderState.rendering;
              if (renderedTail === null)
                if (didSuspendAlready)
                  cutOffTailIfNeeded(renderState, !1);
                else {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended)
                    for (var row = workInProgress2.child; row !== null; ) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = !0, workInProgress2.flags |= DidCapture, cutOffTailIfNeeded(renderState, !1);
                        var newThennables = suspended.updateQueue;
                        return newThennables !== null && (workInProgress2.updateQueue = newThennables, workInProgress2.flags |= Update), renderState.lastEffect === null && (workInProgress2.firstEffect = null), workInProgress2.lastEffect = renderState.lastEffect, resetChildFibers(workInProgress2, renderLanes2), pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)), workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  renderState.tail !== null && now2() > getRenderTargetTime() && (workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane, markSpawnedWork(SomeRetryLane));
                }
              else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture, didSuspendAlready = !0;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null && (workInProgress2.updateQueue = _newThennables, workInProgress2.flags |= Update), cutOffTailIfNeeded(renderState, !0), renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      return lastEffect !== null && (lastEffect.nextEffect = null), null;
                    }
                  } else
                    now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane && (workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane, markSpawnedWork(SomeRetryLane));
                }
                if (renderState.isBackwards)
                  renderedTail.sibling = workInProgress2.child, workInProgress2.child = renderedTail;
                else {
                  var previousSibling = renderState.last;
                  previousSibling !== null ? previousSibling.sibling = renderedTail : workInProgress2.child = renderedTail, renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next, renderState.tail = next.sibling, renderState.lastEffect = workInProgress2.lastEffect, renderState.renderingStartTime = now2(), next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                return didSuspendAlready ? suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback) : suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), next;
              }
              return null;
            }
            case FundamentalComponent:
              break;
            case ScopeComponent:
              break;
            case Block:
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              if (popRenderLanes(workInProgress2), current2 !== null) {
                var _nextState = workInProgress2.memoizedState, _prevState = current2.memoizedState, prevIsHidden = _prevState !== null, nextIsHidden = _nextState !== null;
                prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding" && (workInProgress2.flags |= Update);
              }
              return null;
            }
          }
          throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              isContextProvider(Component) && popContext(workInProgress2);
              var flags = workInProgress2.flags;
              return flags & ShouldCapture ? (workInProgress2.flags = flags & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & DidCapture) !== NoFlags)
                throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
              return workInProgress2.flags = _flags & ~ShouldCapture | DidCapture, workInProgress2;
            }
            case HostComponent:
              return popHostContext(workInProgress2), null;
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _flags2 = workInProgress2.flags;
              return _flags2 & ShouldCapture ? (workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
            }
            case SuspenseListComponent:
              return popSuspenseContext(workInProgress2), null;
            case HostPortal:
              return popHostContainer(workInProgress2), null;
            case ContextProvider:
              return popProvider(workInProgress2), null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return popRenderLanes(workInProgress2), null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              childContextTypes != null && popContext(interruptedWork);
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork), popTopLevelContextObject(interruptedWork), resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source3) {
          return {
            value,
            source: source3,
            stack: getStackByFiberInDevAndProd(source3)
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return !0;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === !1)
              return;
            var error2 = errorInfo.value, source3 = errorInfo.source, stack = errorInfo.stack, componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent)
                return;
              console.error(error2);
            }
            var componentName = source3 ? getComponentName(source3.type) : null, componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:", errorBoundaryMessage, errorBoundaryName = getComponentName(boundary.type);
            errorBoundaryName ? errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".") : errorBoundaryMessage = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
            var combinedMessage = componentNameMessage + `
` + componentStack + `

` + ("" + errorBoundaryMessage);
            console.error(combinedMessage);
          } catch (e2) {
            setTimeout(function() {
              throw e2;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap == "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update2 = createUpdate(NoTimestamp, lane);
          update2.tag = CaptureUpdate, update2.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          return update2.callback = function() {
            onUncaughtError(error2), logCapturedError(fiber, errorInfo);
          }, update2;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update2 = createUpdate(NoTimestamp, lane);
          update2.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError == "function") {
            var error$1 = errorInfo.value;
            update2.payload = function() {
              return logCapturedError(fiber, errorInfo), getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          return inst !== null && typeof inst.componentDidCatch == "function" ? update2.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber), typeof getDerivedStateFromError != "function" && (markLegacyErrorBoundaryAsFailed(this), logCapturedError(fiber, errorInfo));
            var error$12 = errorInfo.value, stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            }), typeof getDerivedStateFromError != "function" && (includesSomeLane(fiber.lanes, SyncLane) || error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown"));
          } : update2.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
          }, update2;
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache, threadIDs;
          if (pingCache === null ? (pingCache = root3.pingCache = new PossiblyWeakMap$1(), threadIDs = new Set(), pingCache.set(wakeable, threadIDs)) : (threadIDs = pingCache.get(wakeable), threadIDs === void 0 && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs))), !threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }
        function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
          if (sourceFiber.flags |= Incomplete, sourceFiber.firstEffect = sourceFiber.lastEffect = null, value !== null && typeof value == "object" && typeof value.then == "function") {
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              currentSource ? (sourceFiber.updateQueue = currentSource.updateQueue, sourceFiber.memoizedState = currentSource.memoizedState, sourceFiber.lanes = currentSource.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null);
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext), _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var wakeables = _workInProgress.updateQueue;
                if (wakeables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(wakeable), _workInProgress.updateQueue = updateQueue;
                } else
                  wakeables.add(wakeable);
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  if (_workInProgress.flags |= DidCapture, sourceFiber.flags |= ForceUpdateForLegacySuspense, sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete), sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null)
                      sourceFiber.tag = IncompleteClassComponent;
                    else {
                      var update2 = createUpdate(NoTimestamp, SyncLane);
                      update2.tag = ForceUpdate, enqueueUpdate(sourceFiber, update2);
                    }
                  }
                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                  return;
                }
                attachPingListener(root3, wakeable, rootRenderLanes), _workInProgress.flags |= ShouldCapture, _workInProgress.lanes = rootRenderLanes;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + ` suspended while rendering, but no fallback UI was specified.

Add a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.`);
          }
          renderDidError(), value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value, ctor = workInProgress2.type, instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError == "function" || instance !== null && typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        var PossiblyWeakSet = typeof WeakSet == "function" ? WeakSet : Set, callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps, instance.state = current2.memoizedState, instance.componentWillUnmount();
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          if (invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance), hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current2, unmountError);
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null)
            if (typeof ref == "function") {
              if (invokeGuardedCallback(null, ref, null, null), hasCaughtError()) {
                var refError = clearCaughtError();
                captureCommitPhaseError(current2, refError);
              }
            } else
              ref.current = null;
        }
        function safelyCallDestroy(current2, destroy) {
          if (invokeGuardedCallback(null, destroy, null), hasCaughtError()) {
            var error2 = clearCaughtError();
            captureCommitPhaseError(current2, error2);
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
              return;
            case ClassComponent: {
              if (finishedWork.flags & Snapshot && current2 !== null) {
                var prevProps = current2.memoizedProps, prevState = current2.memoizedState, instance = finishedWork.stateNode;
                finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance"));
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  snapshot === void 0 && !didWarnSet.has(finishedWork.type) && (didWarnSet.add(finishedWork.type), error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type)));
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              return;
            }
            case HostRoot: {
              if (finishedWork.flags & Snapshot) {
                var root3 = finishedWork.stateNode;
                clearContainer(root3.containerInfo);
              }
              return;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        function commitHookEffectListUnmount(tag2, finishedWork) {
          var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next, effect = firstEffect;
            do {
              if ((effect.tag & tag2) === tag2) {
                var destroy = effect.destroy;
                effect.destroy = void 0, destroy !== void 0 && destroy();
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag2, finishedWork) {
          var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next, effect = firstEffect;
            do {
              if ((effect.tag & tag2) === tag2) {
                var create12 = effect.create;
                effect.destroy = create12();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy != "function") {
                    var addendum = void 0;
                    destroy === null ? addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof destroy.then == "function" ? addendum = `

It looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

useEffect(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : addendum = " You returned: " + destroy, error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function schedulePassiveEffects(finishedWork) {
          var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next, effect = firstEffect;
            do {
              var _effect = effect, next = _effect.next, tag2 = _effect.tag;
              (tag2 & Passive$1) !== NoFlags$1 && (tag2 & HasEffect) !== NoFlags$1 && (enqueuePendingPassiveHookEffectUnmount(finishedWork, effect), enqueuePendingPassiveHookEffectMount(finishedWork, effect)), effect = next;
            } while (effect !== firstEffect);
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListMount(Layout | HasEffect, finishedWork), schedulePassiveEffects(finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update)
                if (current2 === null)
                  finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance")), instance.componentDidMount();
                else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps), prevState = current2.memoizedState;
                  finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance")), instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              var updateQueue = finishedWork.updateQueue;
              updateQueue !== null && (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance"), instance.state !== finishedWork.memoizedState && error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance")), commitUpdateQueue(finishedWork, updateQueue, instance));
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null)
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type, props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText:
              return;
            case HostPortal:
              return;
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender, effectDuration = finishedWork.stateNode.effectDuration, commitTime2 = getCommitTime();
                typeof onRender == "function" && onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          for (var node = finishedWork; ; ) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode;
              isHidden ? hideInstance(instance) : unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode;
              isHidden ? hideTextInstance(_instance3) : unhideTextInstance(_instance3, node.memoizedProps);
            } else if (!((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)) {
              if (node.child !== null) {
                node.child.return = node, node = node.child;
                continue;
              }
            }
            if (node === finishedWork)
              return;
            for (; node.sibling === null; ) {
              if (node.return === null || node.return === finishedWork)
                return;
              node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode, instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            typeof ref == "function" ? ref(instanceToUse) : (ref.hasOwnProperty("current") || error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type)), ref.current = instanceToUse);
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          currentRef !== null && (typeof currentRef == "function" ? currentRef(null) : currentRef.current = null);
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          switch (onCommitUnmount(current2), current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next, effect = firstEffect;
                  do {
                    var _effect2 = effect, destroy = _effect2.destroy, tag2 = _effect2.tag;
                    destroy !== void 0 && ((tag2 & Passive$1) !== NoFlags$1 ? enqueuePendingPassiveHookEffectUnmount(current2, effect) : safelyCallDestroy(current2, destroy)), effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(current2, instance);
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              unmountHostComponents(finishedRoot, current2);
              return;
            }
            case FundamentalComponent:
              return;
            case DehydratedFragment:
              return;
            case ScopeComponent:
              return;
          }
        }
        function commitNestedUnmounts(finishedRoot, root3, renderPriorityLevel) {
          for (var node = root3; ; ) {
            if (commitUnmount(finishedRoot, node), node.child !== null && node.tag !== HostPortal) {
              node.child.return = node, node = node.child;
              continue;
            }
            if (node === root3)
              return;
            for (; node.sibling === null; ) {
              if (node.return === null || node.return === root3)
                return;
              node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
          }
        }
        function detachFiberMutation(fiber) {
          fiber.alternate = null, fiber.child = null, fiber.dependencies = null, fiber.firstEffect = null, fiber.lastEffect = null, fiber.memoizedProps = null, fiber.memoizedState = null, fiber.pendingProps = null, fiber.return = null, fiber.updateQueue = null, fiber._debugOwner = null;
        }
        function getHostParentFiber(fiber) {
          for (var parent = fiber.return; parent !== null; ) {
            if (isHostParent(parent))
              return parent;
            parent = parent.return;
          }
          throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            for (; ; ) {
              for (; node.sibling === null; ) {
                if (node.return === null || isHostParent(node.return))
                  return null;
                node = node.return;
              }
              for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment; ) {
                if (node.flags & Placement || node.child === null || node.tag === HostPortal)
                  continue siblings;
                node.child.return = node, node = node.child;
              }
              if (!(node.flags & Placement))
                return node.stateNode;
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork), parent, isContainer, parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode, isContainer = !1;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo, isContainer = !0;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo, isContainer = !0;
              break;
            case FundamentalComponent:
            default:
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
          parentFiber.flags & ContentReset && (resetTextContent(parent), parentFiber.flags &= ~ContentReset);
          var before = getHostSibling(finishedWork);
          isContainer ? insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent) : insertOrAppendPlacementNode(finishedWork, before, parent);
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag2 = node.tag, isHost = tag2 === HostComponent || tag2 === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            before ? insertInContainerBefore(parent, stateNode, before) : appendChildToContainer(parent, stateNode);
          } else if (tag2 !== HostPortal) {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              for (var sibling = child.sibling; sibling !== null; )
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent), sibling = sibling.sibling;
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag2 = node.tag, isHost = tag2 === HostComponent || tag2 === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            before ? insertBefore(parent, stateNode, before) : appendChild(parent, stateNode);
          } else if (tag2 !== HostPortal) {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              for (var sibling = child.sibling; sibling !== null; )
                insertOrAppendPlacementNode(sibling, before, parent), sibling = sibling.sibling;
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          for (var node = current2, currentParentIsValid = !1, currentParent, currentParentIsContainer; ; ) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent:
                for (; ; ) {
                  if (parent === null)
                    throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode, currentParentIsContainer = !1;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo, currentParentIsContainer = !0;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo, currentParentIsContainer = !0;
                      break findParent;
                  }
                  parent = parent.return;
                }
              currentParentIsValid = !0;
            }
            if (node.tag === HostComponent || node.tag === HostText)
              commitNestedUnmounts(finishedRoot, node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);
            else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo, currentParentIsContainer = !0, node.child.return = node, node = node.child;
                continue;
              }
            } else if (commitUnmount(finishedRoot, node), node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
            if (node === current2)
              return;
            for (; node.sibling === null; ) {
              if (node.return === null || node.return === current2)
                return;
              node = node.return, node.tag === HostPortal && (currentParentIsValid = !1);
            }
            node.sibling.return = node.return, node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          unmountHostComponents(finishedRoot, current2);
          var alternate = current2.alternate;
          detachFiberMutation(current2), alternate !== null && detachFiberMutation(alternate);
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent:
              return;
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps, oldProps = current2 !== null ? current2.memoizedProps : newProps, type = finishedWork.type, updatePayload3 = finishedWork.updateQueue;
                finishedWork.updateQueue = null, updatePayload3 !== null && commitUpdate(instance, updatePayload3, type, oldProps, newProps);
              }
              return;
            }
            case HostText: {
              if (finishedWork.stateNode === null)
                throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              var textInstance = finishedWork.stateNode, newText = finishedWork.memoizedProps, oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root = finishedWork.stateNode;
                _root.hydrate && (_root.hydrate = !1, commitHydratedContainer(_root.containerInfo));
              }
              return;
            }
            case Profiler:
              return;
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork), attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent:
              return;
            case FundamentalComponent:
              break;
            case ScopeComponent:
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              var newState = finishedWork.memoizedState, isHidden = newState !== null;
              hideOrUnhideAllChildren(finishedWork, isHidden);
              return;
            }
          }
          throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState !== null) {
            markCommitTimeOfFallback();
            {
              var primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, !0);
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                suspenseInstance !== null && commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            retryCache === null && (retryCache = finishedWork.stateNode = new PossiblyWeakSet()), wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              retryCache.has(wakeable) || (wakeable.__reactDoNotTraceInteractions !== !0 && (retry = tracing.unstable_wrap(retry)), retryCache.add(wakeable), wakeable.then(retry, retry));
            });
          }
        }
        function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
          if (current2 !== null) {
            var oldState = current2.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
              var newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }
          return !1;
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var COMPONENT_TYPE = 0, HAS_PSEUDO_CLASS_TYPE = 1, ROLE_TYPE = 2, TEST_NAME_TYPE = 3, TEXT_TYPE = 4;
        if (typeof Symbol == "function" && Symbol.for) {
          var symbolFor$1 = Symbol.for;
          COMPONENT_TYPE = symbolFor$1("selector.component"), HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class"), ROLE_TYPE = symbolFor$1("selector.role"), TEST_NAME_TYPE = symbolFor$1("selector.test_id"), TEXT_TYPE = symbolFor$1("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
        var ceil = Math.ceil, ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing, NoContext = 0, BatchedContext = 1, EventContext = 2, DiscreteEventContext = 4, LegacyUnbatchedContext = 8, RenderContext = 16, CommitContext = 32, RetryAfterError = 64, RootIncomplete = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootCompleted = 5, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes, subtreeRenderLanes = NoLanes, subtreeRenderLanesCursor = createCursor(NoLanes), workInProgressRootExitStatus = RootIncomplete, workInProgressRootFatalError = null, workInProgressRootIncludedLanes = NoLanes, workInProgressRootSkippedLanes = NoLanes, workInProgressRootUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, mostRecentlyUpdatedRoot = null, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 500, workInProgressRootRenderTargetTime = 1 / 0, RENDER_TIMEOUT_MS = 500;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var nextEffect = null, hasUncaughtError = !1, firstUncaughtError = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsRenderPriority = NoPriority$1, pendingPassiveEffectsLanes = NoLanes, pendingPassiveHookEffectsMount = [], pendingPassiveHookEffectsUnmount = [], rootsWithPendingDiscreteUpdates = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, spawnedWorkDuringRender = null, currentEventTime = NoTimestamp, currentEventWipLanes = NoLanes, currentEventPendingLanes = NoLanes, isFlushingPassiveEffects = !1, focusedInstanceHandle = null, shouldFireAfterActiveInstanceBlur = !1;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext ? now2() : (currentEventTime !== NoTimestamp || (currentEventTime = now2()), currentEventTime);
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode)
            return SyncLane;
          if ((mode & ConcurrentMode) === NoMode)
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          currentEventWipLanes === NoLanes && (currentEventWipLanes = workInProgressRootIncludedLanes);
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition)
            return currentEventPendingLanes !== NoLanes && (currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes), findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          var schedulerPriority = getCurrentPriorityLevel(), lane;
          if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2)
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }
          return lane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          return (mode & BlockingMode) === NoMode ? SyncLane : (mode & ConcurrentMode) === NoMode ? getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane : (currentEventWipLanes === NoLanes && (currentEventWipLanes = workInProgressRootIncludedLanes), findRetryLane(currentEventWipLanes));
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates(), warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root3 = markUpdateLaneFromFiberToRoot(fiber, lane);
          if (root3 === null)
            return warnAboutUpdateOnUnmountedFiberInDEV(fiber), null;
          markRootUpdated(root3, lane, eventTime), root3 === workInProgressRoot && (workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended$1(root3, workInProgressRootRenderLanes));
          var priorityLevel = getCurrentPriorityLevel();
          lane === SyncLane ? (executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext ? (schedulePendingInteractions(root3, lane), performSyncWorkOnRoot(root3)) : (ensureRootIsScheduled(root3, eventTime), schedulePendingInteractions(root3, lane), executionContext === NoContext && (resetRenderTimer(), flushSyncCallbackQueue())) : ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1) && (rootsWithPendingDiscreteUpdates === null ? rootsWithPendingDiscreteUpdates = new Set([root3]) : rootsWithPendingDiscreteUpdates.add(root3)), ensureRootIsScheduled(root3, eventTime), schedulePendingInteractions(root3, lane)), mostRecentlyUpdatedRoot = root3;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, lane)), alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          for (var node = sourceFiber, parent = sourceFiber.return; parent !== null; )
            parent.childLanes = mergeLanes(parent.childLanes, lane), alternate = parent.alternate, alternate !== null ? alternate.childLanes = mergeLanes(alternate.childLanes, lane) : (parent.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = parent.return;
          if (node.tag === HostRoot) {
            var root3 = node.stateNode;
            return root3;
          } else
            return null;
        }
        function ensureRootIsScheduled(root3, currentTime) {
          var existingCallbackNode = root3.callbackNode;
          markStarvedLanesAsExpired(root3, currentTime);
          var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes), newCallbackPriority = returnNextLanesPriority();
          if (nextLanes === NoLanes) {
            existingCallbackNode !== null && (cancelCallback(existingCallbackNode), root3.callbackNode = null, root3.callbackPriority = NoLanePriority);
            return;
          }
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority)
              return;
            cancelCallback(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLanePriority)
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
          else if (newCallbackPriority === SyncBatchedLanePriority)
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
          else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
          }
          root3.callbackPriority = newCallbackPriority, root3.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root3) {
          if (currentEventTime = NoTimestamp, currentEventWipLanes = NoLanes, currentEventPendingLanes = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          var originalCallbackNode = root3.callbackNode, didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects && root3.callbackNode !== originalCallbackNode)
            return null;
          var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes)
            return null;
          var exitStatus = renderRootConcurrent(root3, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes))
            prepareFreshStack(root3, NoLanes);
          else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored && (executionContext |= RetryAfterError, root3.hydrate && (root3.hydrate = !1, clearContainer(root3.containerInfo)), lanes = getLanesToRetrySynchronouslyOnError(root3), lanes !== NoLanes && (exitStatus = renderRootSync(root3, lanes))), exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              throw prepareFreshStack(root3, NoLanes), markRootSuspended$1(root3, lanes), ensureRootIsScheduled(root3, now2()), fatalError;
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork, root3.finishedLanes = lanes, finishConcurrentRender(root3, exitStatus, lanes);
          }
          return ensureRootIsScheduled(root3, now2()), root3.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root3) : null;
        }
        function finishConcurrentRender(root3, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored:
              throw Error("Root did not complete. This is a bug in React.");
            case RootErrored: {
              commitRoot(root3);
              break;
            }
            case RootSuspended: {
              if (markRootSuspended$1(root3, lanes), includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root3, NoLanes);
                  if (nextLanes !== NoLanes)
                    break;
                  var suspendedLanes = root3.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root3, suspendedLanes);
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            case RootSuspendedWithDelay: {
              if (markRootSuspended$1(root3, lanes), includesOnlyTransitions(lanes))
                break;
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root3, lanes), eventTimeMs = mostRecentEventTime, timeElapsedMs = now2() - eventTimeMs, _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            case RootCompleted: {
              commitRoot(root3);
              break;
            }
            default:
              throw Error("Unknown root exit status.");
          }
        }
        function markRootSuspended$1(root3, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes), suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes), markRootSuspended(root3, suspendedLanes);
        }
        function performSyncWorkOnRoot(root3) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          flushPassiveEffects();
          var lanes, exitStatus;
          if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes) ? (lanes = workInProgressRootRenderLanes, exitStatus = renderRootSync(root3, lanes), includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes) && (lanes = getNextLanes(root3, lanes), exitStatus = renderRootSync(root3, lanes))) : (lanes = getNextLanes(root3, NoLanes), exitStatus = renderRootSync(root3, lanes)), root3.tag !== LegacyRoot && exitStatus === RootErrored && (executionContext |= RetryAfterError, root3.hydrate && (root3.hydrate = !1, clearContainer(root3.containerInfo)), lanes = getLanesToRetrySynchronouslyOnError(root3), lanes !== NoLanes && (exitStatus = renderRootSync(root3, lanes))), exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            throw prepareFreshStack(root3, NoLanes), markRootSuspended$1(root3, lanes), ensureRootIsScheduled(root3, now2()), fatalError;
          }
          var finishedWork = root3.current.alternate;
          return root3.finishedWork = finishedWork, root3.finishedLanes = lanes, commitRoot(root3), ensureRootIsScheduled(root3, now2()), null;
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            (executionContext & RenderContext) !== NoContext && error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            return;
          }
          flushPendingDiscreteUpdates(), flushPassiveEffects();
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null, roots.forEach(function(root3) {
              markDiscreteUpdatesExpired(root3), ensureRootIsScheduled(root3, now2());
            });
          }
          flushSyncCallbackQueue();
        }
        function batchedUpdates$1(fn, a3) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a3);
          } finally {
            executionContext = prevExecutionContext, executionContext === NoContext && (resetRenderTimer(), flushSyncCallbackQueue());
          }
        }
        function batchedEventUpdates$1(fn, a3) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a3);
          } finally {
            executionContext = prevExecutionContext, executionContext === NoContext && (resetRenderTimer(), flushSyncCallbackQueue());
          }
        }
        function discreteUpdates$1(fn, a3, b, c3, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a3, b, c3, d));
          } finally {
            executionContext = prevExecutionContext, executionContext === NoContext && (resetRenderTimer(), flushSyncCallbackQueue());
          }
        }
        function unbatchedUpdates(fn, a3) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext, executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a3);
          } finally {
            executionContext = prevExecutionContext, executionContext === NoContext && (resetRenderTimer(), flushSyncCallbackQueue());
          }
        }
        function flushSync(fn, a3) {
          var prevExecutionContext = executionContext;
          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext)
            return error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."), fn(a3);
          executionContext |= BatchedContext;
          try {
            return fn ? runWithPriority$1(ImmediatePriority$1, fn.bind(null, a3)) : void 0;
          } finally {
            executionContext = prevExecutionContext, flushSyncCallbackQueue();
          }
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber), subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes), workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current, pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root3, lanes) {
          root3.finishedWork = null, root3.finishedLanes = NoLanes;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout && (root3.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle)), workInProgress !== null)
            for (var interruptedWork = workInProgress.return; interruptedWork !== null; )
              unwindInterruptedWork(interruptedWork), interruptedWork = interruptedWork.return;
          workInProgressRoot = root3, workInProgress = createWorkInProgress(root3.current, null), workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes, workInProgressRootExitStatus = RootIncomplete, workInProgressRootFatalError = null, workInProgressRootSkippedLanes = NoLanes, workInProgressRootUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, spawnedWorkDuringRender = null, ReactStrictModeWarnings.discardPendingWarnings();
        }
        function handleError(root3, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              if (resetContextDependencies(), resetHooksAfterThrow(), resetCurrentFiber(), ReactCurrentOwner$2.current = null, erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored, workInProgressRootFatalError = thrownValue, workInProgress = null;
                return;
              }
              enableProfilerTimer && erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDelta(erroredWork, !0), throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes), completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue, workInProgress === erroredWork && erroredWork !== null ? (erroredWork = erroredWork.return, workInProgress = erroredWork) : erroredWork = workInProgress;
              continue;
            }
            return;
          } while (!0);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          return ReactCurrentDispatcher$2.current = ContextOnlyDispatcher, prevDispatcher === null ? ContextOnlyDispatcher : prevDispatcher;
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function pushInteractions(root3) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            return tracing.__interactionsRef.current = root3.memoizedInteractions, prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          tracing.__interactionsRef.current = prevInteractions;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now2();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootSuspended);
        }
        function renderDidSuspendDelayIfPossible() {
          (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) && (workInProgressRootExitStatus = RootSuspendedWithDelay), workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes)) && markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
        function renderDidError() {
          workInProgressRootExitStatus !== RootCompleted && (workInProgressRootExitStatus = RootErrored);
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function renderRootSync(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) && (prepareFreshStack(root3, lanes), startWorkOnPendingInteractions(root3, lanes));
          var prevInteractions = pushInteractions(root3);
          do
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          while (!0);
          if (resetContextDependencies(), popInteractions(prevInteractions), executionContext = prevExecutionContext, popDispatcher(prevDispatcher), workInProgress !== null)
            throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          return workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus;
        }
        function workLoopSync() {
          for (; workInProgress !== null; )
            performUnitOfWork(workInProgress);
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) && (resetRenderTimer(), prepareFreshStack(root3, lanes), startWorkOnPendingInteractions(root3, lanes));
          var prevInteractions = pushInteractions(root3);
          do
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          while (!0);
          return resetContextDependencies(), popInteractions(prevInteractions), popDispatcher(prevDispatcher), executionContext = prevExecutionContext, workInProgress !== null ? RootIncomplete : (workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus);
        }
        function workLoopConcurrent() {
          for (; workInProgress !== null && !shouldYield(); )
            performUnitOfWork(workInProgress);
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, !0)) : next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), resetCurrentFiber(), unitOfWork.memoizedProps = unitOfWork.pendingProps, next === null ? completeUnitOfWork(unitOfWork) : workInProgress = next, ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate, returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode ? next = completeWork(current2, completedWork, subtreeRenderLanes) : (startProfilerTimer(completedWork), next = completeWork(current2, completedWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1)), resetCurrentFiber(), next !== null) {
                workInProgress = next;
                return;
              }
              if (resetChildLanes(completedWork), returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                returnFiber.firstEffect === null && (returnFiber.firstEffect = completedWork.firstEffect), completedWork.lastEffect !== null && (returnFiber.lastEffect !== null && (returnFiber.lastEffect.nextEffect = completedWork.firstEffect), returnFiber.lastEffect = completedWork.lastEffect);
                var flags = completedWork.flags;
                flags > PerformedWork && (returnFiber.lastEffect !== null ? returnFiber.lastEffect.nextEffect = completedWork : returnFiber.firstEffect = completedWork, returnFiber.lastEffect = completedWork);
              }
            } else {
              var _next = unwindWork(completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask, workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1);
                for (var actualDuration = completedWork.actualDuration, child = completedWork.child; child !== null; )
                  actualDuration += child.actualDuration, child = child.sibling;
                completedWork.actualDuration = actualDuration;
              }
              returnFiber !== null && (returnFiber.firstEffect = returnFiber.lastEffect = null, returnFiber.flags |= Incomplete);
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber, workInProgress = completedWork;
          } while (completedWork !== null);
          workInProgressRootExitStatus === RootIncomplete && (workInProgressRootExitStatus = RootCompleted);
        }
        function resetChildLanes(completedWork) {
          if (!((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes)) {
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              for (var actualDuration = completedWork.actualDuration, treeBaseDuration = completedWork.selfBaseDuration, shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child, child = completedWork.child; child !== null; )
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes)), shouldBubbleActualDurations && (actualDuration += child.actualDuration), treeBaseDuration += child.treeBaseDuration, child = child.sibling;
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                primaryChildFragment !== null && (treeBaseDuration -= primaryChildFragment.treeBaseDuration);
              }
              completedWork.actualDuration = actualDuration, completedWork.treeBaseDuration = treeBaseDuration;
            } else
              for (var _child = completedWork.child; _child !== null; )
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes)), _child = _child.sibling;
            completedWork.childLanes = newChildLanes;
          }
        }
        function commitRoot(root3) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          return runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel)), null;
        }
        function commitRootImpl(root3, renderPriorityLevel) {
          do
            flushPassiveEffects();
          while (rootWithPendingPassiveEffects !== null);
          if (flushRenderPhaseStrictModeWarningsInDEV(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Should not already be working.");
          var finishedWork = root3.finishedWork, lanes = root3.finishedLanes;
          if (finishedWork === null)
            return null;
          if (root3.finishedWork = null, root3.finishedLanes = NoLanes, finishedWork === root3.current)
            throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          root3.callbackNode = null;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root3, remainingLanes), rootsWithPendingDiscreteUpdates !== null && !hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3) && rootsWithPendingDiscreteUpdates.delete(root3), root3 === workInProgressRoot && (workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes);
          var firstEffect;
          if (finishedWork.flags > PerformedWork ? finishedWork.lastEffect !== null ? (finishedWork.lastEffect.nextEffect = finishedWork, firstEffect = finishedWork.firstEffect) : firstEffect = finishedWork : firstEffect = finishedWork.firstEffect, firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3);
            ReactCurrentOwner$2.current = null, focusedInstanceHandle = prepareForCommit(root3.containerInfo), shouldFireAfterActiveInstanceBlur = !1, nextEffect = firstEffect;
            do
              if (invokeGuardedCallback(null, commitBeforeMutationEffects, null), hasCaughtError()) {
                if (nextEffect === null)
                  throw Error("Should be working on an effect.");
                var error2 = clearCaughtError();
                captureCommitPhaseError(nextEffect, error2), nextEffect = nextEffect.nextEffect;
              }
            while (nextEffect !== null);
            focusedInstanceHandle = null, recordCommitTime(), nextEffect = firstEffect;
            do
              if (invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel), hasCaughtError()) {
                if (nextEffect === null)
                  throw Error("Should be working on an effect.");
                var _error = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error), nextEffect = nextEffect.nextEffect;
              }
            while (nextEffect !== null);
            resetAfterCommit(root3.containerInfo), root3.current = finishedWork, nextEffect = firstEffect;
            do
              if (invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes), hasCaughtError()) {
                if (nextEffect === null)
                  throw Error("Should be working on an effect.");
                var _error2 = clearCaughtError();
                captureCommitPhaseError(nextEffect, _error2), nextEffect = nextEffect.nextEffect;
              }
            while (nextEffect !== null);
            nextEffect = null, requestPaint(), popInteractions(prevInteractions), executionContext = prevExecutionContext;
          } else
            root3.current = finishedWork, recordCommitTime();
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects)
            rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root3, pendingPassiveEffectsLanes = lanes, pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          else
            for (nextEffect = firstEffect; nextEffect !== null; ) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null, nextEffect.flags & Deletion && detachFiberAfterEffects(nextEffect), nextEffect = nextNextEffect;
            }
          if (remainingLanes = root3.pendingLanes, remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender;
              spawnedWorkDuringRender = null;
              for (var i = 0; i < expirationTimes.length; i++)
                scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
            }
            schedulePendingInteractions(root3, remainingLanes);
          } else
            legacyErrorBoundariesThatAlreadyFailed = null;
          if (rootDidHavePassiveEffects || finishPendingInteractions(root3, lanes), remainingLanes === SyncLane ? root3 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root3) : nestedUpdateCount = 0, onCommitRoot(finishedWork.stateNode, renderPriorityLevel), onCommitRoot$1(), ensureRootIsScheduled(root3, now2()), hasUncaughtError) {
            hasUncaughtError = !1;
            var _error3 = firstUncaughtError;
            throw firstUncaughtError = null, _error3;
          }
          return (executionContext & LegacyUnbatchedContext) !== NoContext || flushSyncCallbackQueue(), null;
        }
        function commitBeforeMutationEffects() {
          for (; nextEffect !== null; ) {
            var current2 = nextEffect.alternate;
            !shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null && ((nextEffect.flags & Deletion) !== NoFlags ? doesFiberContain(nextEffect, focusedInstanceHandle) && (shouldFireAfterActiveInstanceBlur = !0) : nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle) && (shouldFireAfterActiveInstanceBlur = !0));
            var flags = nextEffect.flags;
            (flags & Snapshot) !== NoFlags && (setCurrentFiber(nextEffect), commitBeforeMutationLifeCycles(current2, nextEffect), resetCurrentFiber()), (flags & Passive) !== NoFlags && (rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback(NormalPriority$1, function() {
              return flushPassiveEffects(), null;
            }))), nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root3, renderPriorityLevel) {
          for (; nextEffect !== null; ) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset && commitResetTextContent(nextEffect), flags & Ref) {
              var current2 = nextEffect.alternate;
              current2 !== null && commitDetachRef(current2);
            }
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch (primaryFlags) {
              case Placement: {
                commitPlacement(nextEffect), nextEffect.flags &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect), nextEffect.flags &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.flags &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.flags &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root3, nextEffect);
                break;
              }
            }
            resetCurrentFiber(), nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root3, committedLanes) {
          for (; nextEffect !== null; ) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
              var current2 = nextEffect.alternate;
              commitLifeCycles(root3, current2, nextEffect);
            }
            flags & Ref && commitAttachRef(nextEffect), resetCurrentFiber(), nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            return pendingPassiveEffectsRenderPriority = NoPriority$1, runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
          }
          return !1;
        }
        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
          pendingPassiveHookEffectsMount.push(effect, fiber), rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback(NormalPriority$1, function() {
            return flushPassiveEffects(), null;
          }));
        }
        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
          pendingPassiveHookEffectsUnmount.push(effect, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            alternate !== null && (alternate.flags |= PassiveUnmountPendingDev);
          }
          rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback(NormalPriority$1, function() {
            return flushPassiveEffects(), null;
          }));
        }
        function invokePassiveEffectCreate(effect) {
          var create12 = effect.create;
          effect.destroy = create12();
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null)
            return !1;
          var root3 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
          if (rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
            throw Error("Cannot flush passive effects while already rendering.");
          isFlushingPassiveEffects = !0;
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root3), unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];
          for (var i = 0; i < unmountEffects.length; i += 2) {
            var _effect = unmountEffects[i], fiber = unmountEffects[i + 1], destroy = _effect.destroy;
            _effect.destroy = void 0;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              alternate !== null && (alternate.flags &= ~PassiveUnmountPendingDev);
            }
            if (typeof destroy == "function") {
              if (setCurrentFiber(fiber), invokeGuardedCallback(null, destroy, null), hasCaughtError()) {
                if (fiber === null)
                  throw Error("Should be working on an effect.");
                var error2 = clearCaughtError();
                captureCommitPhaseError(fiber, error2);
              }
              resetCurrentFiber();
            }
          }
          var mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];
          for (var _i = 0; _i < mountEffects.length; _i += 2) {
            var _effect2 = mountEffects[_i], _fiber = mountEffects[_i + 1];
            {
              if (setCurrentFiber(_fiber), invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2), hasCaughtError()) {
                if (_fiber === null)
                  throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
              }
              resetCurrentFiber();
            }
          }
          for (var effect = root3.current.firstEffect; effect !== null; ) {
            var nextNextEffect = effect.nextEffect;
            effect.nextEffect = null, effect.flags & Deletion && detachFiberAfterEffects(effect), effect = nextNextEffect;
          }
          return popInteractions(prevInteractions), finishPendingInteractions(root3, lanes), isFlushingPassiveEffects = !1, executionContext = prevExecutionContext, flushSyncCallbackQueue(), nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1, !0;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          legacyErrorBoundariesThatAlreadyFailed === null ? legacyErrorBoundariesThatAlreadyFailed = new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
        function prepareToThrowUncaughtError(error2) {
          hasUncaughtError || (hasUncaughtError = !0, firstUncaughtError = error2);
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber), update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update2);
          var eventTime = requestEventTime(), root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
          root3 !== null && (markRootUpdated(root3, SyncLane, eventTime), ensureRootIsScheduled(root3, eventTime), schedulePendingInteractions(root3, SyncLane));
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          for (var fiber = sourceFiber.return; fiber !== null; ) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type, instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError == "function" || typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber), update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update2);
                var eventTime = requestEventTime(), root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                if (root3 !== null)
                  markRootUpdated(root3, SyncLane, eventTime), ensureRootIsScheduled(root3, eventTime), schedulePendingInteractions(root3, SyncLane);
                else if (typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance))
                  try {
                    instance.componentDidCatch(error2, errorInfo);
                  } catch {
                  }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          pingCache !== null && pingCache.delete(wakeable);
          var eventTime = requestEventTime();
          markRootPinged(root3, pingedLanes), workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes) && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root3, NoLanes) : workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes)), ensureRootIsScheduled(root3, eventTime), schedulePendingInteractions(root3, pingedLanes);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          retryLane === NoLane && (retryLane = requestRetryLane(boundaryFiber));
          var eventTime = requestEventTime(), root3 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
          root3 !== null && (markRootUpdated(root3, retryLane, eventTime), ensureRootIsScheduled(root3, eventTime), schedulePendingInteractions(root3, retryLane));
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane, retryCache;
          retryCache = boundaryFiber.stateNode, retryCache !== null && retryCache.delete(wakeable), retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
            throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          ReactStrictModeWarnings.flushLegacyContextWarning(), ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext || !(fiber.mode & (BlockingMode | ConcurrentMode)))
              return;
            var tag2 = fiber.tag;
            if (tag2 !== IndeterminateComponent && tag2 !== HostRoot && tag2 !== ClassComponent && tag2 !== FunctionComponent && tag2 !== ForwardRef && tag2 !== MemoComponent && tag2 !== SimpleMemoComponent && tag2 !== Block)
              return;
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName))
                return;
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else
              didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            var previousFiber = current;
            try {
              setCurrentFiber(fiber), error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag2 = fiber.tag;
            if (tag2 !== HostRoot && tag2 !== ClassComponent && tag2 !== FunctionComponent && tag2 !== ForwardRef && tag2 !== MemoComponent && tag2 !== SimpleMemoComponent && tag2 !== Block || (fiber.flags & PassiveUnmountPendingDev) !== NoFlags)
              return;
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName))
                return;
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            if (!isFlushingPassiveEffects) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber), error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag2 === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
              } finally {
                previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError == "object" && typeof originalError.then == "function")
                throw originalError;
              if (resetContextDependencies(), resetHooksAfterThrow(), unwindInterruptedWork(unitOfWork), assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy), unitOfWork.mode & ProfileMode && startProfilerTimer(unitOfWork), invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes), hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else
                throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = !1, didWarnAboutUpdateInRenderForAnotherComponent;
        didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV())
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown", dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                didWarnAboutUpdateInRender || (error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = !0);
                break;
              }
            }
        }
        var IsThisRendererActing = {
          current: !1
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          if (IsSomeRendererActing.current === !0 && IsThisRendererActing.current !== !0) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber), error(`It looks like you're using the wrong act() around your test interactions.
Be sure to use the matching version of act() corresponding to your renderer:

// for react-dom:
import {act} from 'react-dom/test-utils';
// ...
act(() => ...);

// for react-test-renderer:
import TestRenderer from react-test-renderer';
const {act} = TestRenderer;
// ...
act(() => ...);`);
            } finally {
              previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === !1 && IsThisRendererActing.current === !1 && error(`An update to %s ran an effect, but was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, getComponentName(fiber.type));
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          if (executionContext === NoContext && IsSomeRendererActing.current === !1 && IsThisRendererActing.current === !1) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber), error(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, getComponentName(fiber.type));
            } finally {
              previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV, didWarnAboutUnmockedScheduler = !1;
        function warnIfUnmockedScheduler(fiber) {
          didWarnAboutUnmockedScheduler === !1 && Scheduler.unstable_flushAllWithoutAsserting === void 0 && (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) && (didWarnAboutUnmockedScheduler = !0, error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`));
        }
        function computeThreadID(root3, lane) {
          return lane * 1e3 + root3.interactionThreadID;
        }
        function markSpawnedWork(lane) {
          spawnedWorkDuringRender === null ? spawnedWorkDuringRender = [lane] : spawnedWorkDuringRender.push(lane);
        }
        function scheduleInteractions(root3, lane, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root3.pendingInteractionMap, pendingInteractions = pendingInteractionMap.get(lane);
            pendingInteractions != null ? interactions.forEach(function(interaction) {
              pendingInteractions.has(interaction) || interaction.__count++, pendingInteractions.add(interaction);
            }) : (pendingInteractionMap.set(lane, new Set(interactions)), interactions.forEach(function(interaction) {
              interaction.__count++;
            }));
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root3, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root3, lane) {
          scheduleInteractions(root3, lane, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root3, lanes) {
          var interactions = new Set();
          if (root3.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            includesSomeLane(lanes, scheduledLane) && scheduledInteractions.forEach(function(interaction) {
              return interactions.add(interaction);
            });
          }), root3.memoizedInteractions = interactions, interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root3, lanes);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority$1, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root3, committedLanes) {
          var remainingLanesAfterCommit = root3.pendingLanes, subscriber;
          try {
            if (subscriber = tracing.__subscriberRef.current, subscriber !== null && root3.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root3, committedLanes);
              subscriber.onWorkStopped(root3.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority$1, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root3.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
              includesSomeLane(remainingLanesAfterCommit, lane) || (pendingInteractionMap.delete(lane), scheduledInteractions.forEach(function(interaction) {
                if (interaction.__count--, subscriber !== null && interaction.__count === 0)
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error2) {
                    scheduleCallback(ImmediatePriority$1, function() {
                      throw error2;
                    });
                  }
              }));
            });
          }
        }
        function shouldForceFlushFallbacksInDEV() {
          return actingUpdatesScopeDepth > 0;
        }
        var actingUpdatesScopeDepth = 0;
        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null, fiber.stateNode = null;
        }
        var resolveFamily = null, failedBoundaries = null, setRefreshHandler = function(handler) {
          resolveFamily = handler;
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null)
              return type;
            var family = resolveFamily(type);
            return family === void 0 ? type : family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null)
              return type;
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type != null && typeof type.render == "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  return type.displayName !== void 0 && (syntheticType.displayName = type.displayName), syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null)
              return !1;
            var prevType = fiber.elementType, nextType = element.type, needsCompareFamilies = !1, $$typeofNextType = typeof nextType == "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                typeof nextType == "function" && (needsCompareFamilies = !0);
                break;
              }
              case FunctionComponent: {
                (typeof nextType == "function" || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
                break;
              }
              case ForwardRef: {
                ($$typeofNextType === REACT_FORWARD_REF_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                ($$typeofNextType === REACT_MEMO_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
                break;
              }
              default:
                return !1;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType))
                return !0;
            }
            return !1;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null || typeof WeakSet != "function")
              return;
            failedBoundaries === null && (failedBoundaries = new WeakSet()), failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root3, update2) {
          {
            if (resolveFamily === null)
              return;
            var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
            flushPassiveEffects(), flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
            });
          }
        }, scheduleRoot = function(root3, element) {
          {
            if (root3.context !== emptyContextObject)
              return;
            flushPassiveEffects(), flushSync(function() {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type, candidateType = null;
            switch (tag2) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null)
              throw new Error("Expected resolveFamily to be set during hot reload.");
            var needsRender = !1, needsRemount = !1;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              family !== void 0 && (staleFamilies.has(family) ? needsRemount = !0 : updatedFamilies.has(family) && (tag2 === ClassComponent ? needsRemount = !0 : needsRender = !0));
            }
            failedBoundaries !== null && (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) && (needsRemount = !0), needsRemount && (fiber._debugNeedsRemount = !0), (needsRemount || needsRender) && scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp), child !== null && !needsRemount && scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies), sibling !== null && scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
        var findHostInstancesForRefresh = function(root3, families) {
          {
            var hostInstances = new Set(), types = new Set(families.map(function(family) {
              return family.current;
            }));
            return findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances), hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type, candidateType = null;
            switch (tag2) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = !1;
            candidateType !== null && types.has(candidateType) && (didMatch = !0), didMatch ? findHostInstancesForFiberShallowly(fiber, hostInstances) : child !== null && findHostInstancesForMatchingFibersRecursively(child, types, hostInstances), sibling !== null && findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances)
              return;
            for (var node = fiber; ; ) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null)
                throw new Error("Expected to reach root first.");
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          for (var node = fiber, foundHostInstances = !1; ; ) {
            if (node.tag === HostComponent)
              foundHostInstances = !0, hostInstances.add(node.stateNode);
            else if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
            if (node === fiber)
              return foundHostInstances;
            for (; node.sibling === null; ) {
              if (node.return === null || node.return === fiber)
                return foundHostInstances;
              node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
          }
          return !1;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = !1;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            new Map([[nonExtensibleObject, null]]), new Set([nonExtensibleObject]);
          } catch {
            hasBadMapPolyfill = !0;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag2, pendingProps, key, mode) {
          this.tag = tag2, this.key = key, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = pendingProps, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = mode, this.flags = NoFlags, this.nextEffect = null, this.firstEffect = null, this.lastEffect = null, this.lanes = NoLanes, this.childLanes = NoLanes, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugID = debugCounter++, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !hasBadMapPolyfill && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
        }
        var createFiber = function(tag2, pendingProps, key, mode) {
          return new FiberNode(tag2, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type == "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component == "function")
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          if (Component != null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE)
              return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE)
              return MemoComponent;
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          workInProgress2 === null ? (workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugID = current2._debugID, workInProgress2._debugSource = current2._debugSource, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = NoFlags, workInProgress2.nextEffect = null, workInProgress2.firstEffect = null, workInProgress2.lastEffect = null, workInProgress2.actualDuration = 0, workInProgress2.actualStartTime = -1), workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          switch (workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          }, workInProgress2.sibling = current2.sibling, workInProgress2.index = current2.index, workInProgress2.ref = current2.ref, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration, workInProgress2._debugNeedsRemount = current2._debugNeedsRemount, workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= Placement, workInProgress2.nextEffect = null, workInProgress2.firstEffect = null, workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null)
            workInProgress2.childLanes = NoLanes, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0;
          else {
            workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag2) {
          var mode;
          return tag2 === ConcurrentRoot ? mode = ConcurrentMode | BlockingMode | StrictMode : tag2 === BlockingRoot ? mode = BlockingMode | StrictMode : mode = NoMode, isDevToolsPresent && (mode |= ProfileMode), createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent, resolvedType = type;
          if (typeof type == "function")
            shouldConstruct$1(type) ? (fiberTag = ClassComponent, resolvedType = resolveClassForHotReloading(resolvedType)) : resolvedType = resolveFunctionForHotReloading(resolvedType);
          else if (typeof type == "string")
            fiberTag = HostComponent;
          else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_DEBUG_TRACING_MODE_TYPE:
                  fiberTag = Mode, mode |= DebugTracingMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode, mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                  return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                case REACT_SCOPE_TYPE:
                default: {
                  if (typeof type == "object" && type !== null)
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef, resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent, resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  var info = "";
                  {
                    (type === void 0 || typeof type == "object" && type !== null && Object.keys(type).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
                  }
                  throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          return fiber.elementType = type, fiber.type = resolvedType, fiber.lanes = lanes, fiber._debugOwner = owner, fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          owner = element._owner;
          var type = element.type, key = element.key, pendingProps = element.props, fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          return fiber._debugSource = element._source, fiber._debugOwner = element._owner, fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment2, elements, key, mode);
          return fiber.lanes = lanes, fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          typeof pendingProps.id != "string" && error('Profiler must specify an "id" as a prop');
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          return fiber.elementType = REACT_PROFILER_TYPE, fiber.type = REACT_PROFILER_TYPE, fiber.lanes = lanes, fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          }, fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          return fiber.type = REACT_SUSPENSE_TYPE, fiber.elementType = REACT_SUSPENSE_TYPE, fiber.lanes = lanes, fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          return fiber.type = REACT_SUSPENSE_LIST_TYPE, fiber.elementType = REACT_SUSPENSE_LIST_TYPE, fiber.lanes = lanes, fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          return fiber.type = REACT_OFFSCREEN_TYPE, fiber.elementType = REACT_OFFSCREEN_TYPE, fiber.lanes = lanes, fiber;
        }
        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
          var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
          return fiber.type = REACT_LEGACY_HIDDEN_TYPE, fiber.elementType = REACT_LEGACY_HIDDEN_TYPE, fiber.lanes = lanes, fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          return fiber.lanes = lanes, fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          return fiber.elementType = "DELETED", fiber.type = "DELETED", fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [], fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          return fiber.lanes = lanes, fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          }, fiber;
        }
        function assignFiberPropertiesInDEV(target3, source3) {
          return target3 === null && (target3 = createFiber(IndeterminateComponent, null, null, NoMode)), target3.tag = source3.tag, target3.key = source3.key, target3.elementType = source3.elementType, target3.type = source3.type, target3.stateNode = source3.stateNode, target3.return = source3.return, target3.child = source3.child, target3.sibling = source3.sibling, target3.index = source3.index, target3.ref = source3.ref, target3.pendingProps = source3.pendingProps, target3.memoizedProps = source3.memoizedProps, target3.updateQueue = source3.updateQueue, target3.memoizedState = source3.memoizedState, target3.dependencies = source3.dependencies, target3.mode = source3.mode, target3.flags = source3.flags, target3.nextEffect = source3.nextEffect, target3.firstEffect = source3.firstEffect, target3.lastEffect = source3.lastEffect, target3.lanes = source3.lanes, target3.childLanes = source3.childLanes, target3.alternate = source3.alternate, target3.actualDuration = source3.actualDuration, target3.actualStartTime = source3.actualStartTime, target3.selfBaseDuration = source3.selfBaseDuration, target3.treeBaseDuration = source3.treeBaseDuration, target3._debugID = source3._debugID, target3._debugSource = source3._debugSource, target3._debugOwner = source3._debugOwner, target3._debugNeedsRemount = source3._debugNeedsRemount, target3._debugHookTypes = source3._debugHookTypes, target3;
        }
        function FiberRootNode(containerInfo, tag2, hydrate2) {
          switch (this.tag = tag2, this.containerInfo = containerInfo, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = noTimeout, this.context = null, this.pendingContext = null, this.hydrate = hydrate2, this.callbackNode = null, this.callbackPriority = NoLanePriority, this.eventTimes = createLaneMap(NoLanes), this.expirationTimes = createLaneMap(NoTimestamp), this.pendingLanes = NoLanes, this.suspendedLanes = NoLanes, this.pingedLanes = NoLanes, this.expiredLanes = NoLanes, this.mutableReadLanes = NoLanes, this.finishedLanes = NoLanes, this.entangledLanes = NoLanes, this.entanglements = createLaneMap(NoLanes), this.mutableSourceEagerHydrationData = null, this.interactionThreadID = tracing.unstable_getThreadID(), this.memoizedInteractions = new Set(), this.pendingInteractionMap = new Map(), tag2) {
            case BlockingRoot:
              this._debugRootType = "createBlockingRoot()";
              break;
            case ConcurrentRoot:
              this._debugRootType = "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = "createLegacyRoot()";
              break;
          }
        }
        function createFiberRoot(containerInfo, tag2, hydrate2, hydrationCallbacks) {
          var root3 = new FiberRootNode(containerInfo, tag2, hydrate2), uninitializedFiber = createHostRootFiber(tag2);
          return root3.current = uninitializedFiber, uninitializedFiber.stateNode = root3, initializeUpdateQueue(uninitializedFiber), root3;
        }
        function registerMutableSourceForHydration(root3, mutableSource) {
          var getVersion = mutableSource._getVersion, version = getVersion(mutableSource._source);
          root3.mutableSourceEagerHydrationData == null ? root3.mutableSourceEagerHydrationData = [mutableSource, version] : root3.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
        function createPortal(children2, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children: children2,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates, didWarnAboutFindNodeInStrictMode;
        didWarnAboutNestedUpdates = !1, didWarnAboutFindNodeInStrictMode = {};
        function getContextForSubtree(parentComponent) {
          if (!parentComponent)
            return emptyContextObject;
          var fiber = get11(parentComponent), parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component))
              return processChildContext(fiber, Component, parentContext);
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get11(component);
            if (fiber === void 0)
              throw typeof component.render == "function" ? Error("Unable to find node on an unmounted component.") : Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null)
              return null;
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = !0;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber), fiber.mode & StrictMode ? error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName) : error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally {
                  previousFiber ? setCurrentFiber(previousFiber) : resetCurrentFiber();
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag2, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag2, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          onScheduleRoot(container, element);
          var current$1 = container.current, eventTime = requestEventTime();
          typeof jest != "undefined" && (warnIfUnmockedScheduler(current$1), warnIfNotScopedWithMatchingAct(current$1));
          var lane = requestUpdateLane(current$1), context = getContextForSubtree(parentComponent);
          container.context === null ? container.context = context : container.pendingContext = context, isRendering && current !== null && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = !0, error(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, getComponentName(current.type) || "Unknown"));
          var update2 = createUpdate(eventTime, lane);
          return update2.payload = {
            element
          }, callback = callback === void 0 ? null : callback, callback !== null && (typeof callback != "function" && error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback), update2.callback = callback), enqueueUpdate(current$1, update2), scheduleUpdateOnFiber(current$1, lane, eventTime), lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child)
            return null;
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          suspenseState !== null && suspenseState.dehydrated !== null && (suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane));
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          alternate && markRetryLaneImpl(alternate, retryLane);
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var eventTime = requestEventTime(), lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime), markRetryLaneIfNotHydrated(fiber, lane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var eventTime = requestEventTime(), lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime), markRetryLaneIfNotHydrated(fiber, lane);
          }
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var eventTime = requestEventTime(), lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime), markRetryLaneIfNotHydrated(fiber, lane);
          }
        }
        function runWithPriority$2(priority, fn) {
          try {
            return setCurrentUpdateLanePriority(priority), fn();
          } finally {
          }
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          return hostFiber === null ? null : hostFiber.tag === FundamentalComponent ? hostFiber.stateNode.instance : hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return !1;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path2, index3) {
            var key = path2[index3], updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            return index3 + 1 === path2.length ? (Array.isArray(updated) ? updated.splice(key, 1) : delete updated[key], updated) : (updated[key] = copyWithDeleteImpl(obj[key], path2, index3 + 1), updated);
          }, copyWithDelete = function(obj, path2) {
            return copyWithDeleteImpl(obj, path2, 0);
          }, copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
            var oldKey = oldPath[index3], updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index3 + 1 === oldPath.length) {
              var newKey = newPath[index3];
              updated[newKey] = updated[oldKey], Array.isArray(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey];
            } else
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index3 + 1);
            return updated;
          }, copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else
              for (var i = 0; i < newPath.length - 1; i++)
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          }, copyWithSetImpl = function(obj, path2, index3, value) {
            if (index3 >= path2.length)
              return value;
            var key = path2[index3], updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            return updated[key] = copyWithSetImpl(obj[key], path2, index3 + 1, value), updated;
          }, copyWithSet = function(obj, path2, value) {
            return copyWithSetImpl(obj, path2, 0, value);
          }, findHook = function(fiber, id7) {
            for (var currentHook2 = fiber.memoizedState; currentHook2 !== null && id7 > 0; )
              currentHook2 = currentHook2.next, id7--;
            return currentHook2;
          };
          overrideHookState = function(fiber, id7, path2, value) {
            var hook = findHook(fiber, id7);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path2, value);
              hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = _assign({}, fiber.memoizedProps), scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          }, overrideHookStateDeletePath = function(fiber, id7, path2) {
            var hook = findHook(fiber, id7);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path2);
              hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = _assign({}, fiber.memoizedProps), scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          }, overrideHookStateRenamePath = function(fiber, id7, oldPath, newPath) {
            var hook = findHook(fiber, id7);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = _assign({}, fiber.memoizedProps), scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          }, overrideProps = function(fiber, path2, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }, overridePropsDeletePath = function(fiber, path2) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }, overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }, scheduleUpdate = function(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          }, setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          return hostFiber === null ? null : hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance, ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools
          });
        }
        function ReactDOMRoot(container, options2) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
        }
        function ReactDOMBlockingRoot(container, tag2, options2) {
          this._internalRoot = createRootImpl(container, tag2, options2);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children2) {
          var root3 = this._internalRoot;
          {
            typeof arguments[1] == "function" && error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            var container = root3.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root3.current);
              hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
          }
          updateContainer(children2, root3, null, null);
        }, ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
          typeof arguments[0] == "function" && error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          var root3 = this._internalRoot, container = root3.containerInfo;
          updateContainer(null, root3, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag2, options2) {
          var hydrate2 = options2 != null && options2.hydrate === !0, hydrationCallbacks = options2 != null && options2.hydrationOptions || null, mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null, root3 = createContainer(container, tag2, hydrate2);
          markContainerAsRoot(root3.current, container);
          var containerNodeType = container.nodeType;
          {
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
          }
          if (mutableSources)
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root3, mutableSource);
            }
          return root3;
        }
        function createLegacyRoot(container, options2) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner, topLevelUpdateWarnings, warnedAboutHydrateAPI = !1;
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer, rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          hasNonRootReactChild && !isRootRenderedBySomeReact && error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
        };
        function getReactRootElementInContainer(container) {
          return container ? container.nodeType === DOCUMENT_NODE ? container.documentElement : container.firstChild : null;
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate)
            for (var warned = !1, rootSibling; rootSibling = container.lastChild; )
              !warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME) && (warned = !0, error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.")), container.removeChild(rootSibling);
          return shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI && (warnedAboutHydrateAPI = !0, warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.")), createLegacyRoot(container, shouldHydrate ? {
            hydrate: !0
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          callback !== null && typeof callback != "function" && error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children2, container, forceHydrate, callback) {
          topLevelUpdateWarnings(container), warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          var root3 = container._reactRootContainer, fiberRoot;
          if (root3) {
            if (fiberRoot = root3._internalRoot, typeof callback == "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children2, fiberRoot, parentComponent, callback);
          } else {
            if (root3 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate), fiberRoot = root3._internalRoot, typeof callback == "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children2, fiberRoot, parentComponent, callback);
            });
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              warnedAboutRefsInRender || error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component"), owner.stateNode._warnedAboutRefsInRender = !0;
            }
          }
          return componentOrElement == null ? null : componentOrElement.nodeType === ELEMENT_NODE ? componentOrElement : findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            isModernRoot && error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, !0, callback);
        }
        function render2(element, container, callback) {
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            isModernRoot && error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, !1, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode))
            throw Error("Target container is not a DOM element.");
          if (!(parentComponent != null && has8(parentComponent)))
            throw Error("parentComponent must be a valid React Component");
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, !1, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container))
            throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            isModernRoot && error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container), renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              renderedByDifferentReact && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
            return unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, !1, function() {
                container._reactRootContainer = null, unmarkContainerAsRoot(container);
              });
            }), !0;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)), isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              hasNonRootReactChild && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
            return !1;
          }
        }
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1), setAttemptContinuousHydration(attemptContinuousHydration$1), setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1), setAttemptHydrationAtPriority(runWithPriority$2);
        var didWarnAboutUnstableCreatePortal = !1;
        (typeof Map != "function" || Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || Set.prototype == null || typeof Set.prototype.clear != "function" || typeof Set.prototype.forEach != "function") && error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), setRestoreImplementation(restoreControlledState$3), setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children2, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container))
            throw Error("Target container is not a DOM element.");
          return createPortal(children2, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children2, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          return didWarnAboutUnstableCreatePortal || (didWarnAboutUnstableCreatePortal = !0, warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.')), createPortal$1(children2, container, key);
        }
        var Internals = {
          Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
          ]
        }, foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        if (!foundDevTools && canUseDOM && window.top === window.self && (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1)) {
          var protocol = window.location.protocol;
          /^(https?|file):$/.test(protocol) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals, exports.createPortal = createPortal$1, exports.findDOMNode = findDOMNode, exports.flushSync = flushSync, exports.hydrate = hydrate, exports.render = render2, exports.unmountComponentAtNode = unmountComponentAtNode, exports.unstable_batchedUpdates = batchedUpdates$1, exports.unstable_createPortal = unstable_createPortal, exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer, exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      module.exports = require_react_dom_development();
    }
  });

  // node_modules/rescript/lib/es6/caml_option.js
  function some(x5) {
    return x5 === void 0 ? {
      BS_PRIVATE_NESTED_SOME_NONE: 0
    } : x5 !== null && x5.BS_PRIVATE_NESTED_SOME_NONE !== void 0 ? {
      BS_PRIVATE_NESTED_SOME_NONE: x5.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
    } : x5;
  }
  function nullable_to_opt(x5) {
    if (x5 != null)
      return some(x5);
  }
  function undefined_to_opt(x5) {
    if (x5 !== void 0)
      return some(x5);
  }
  function valFromOption(x5) {
    if (!(x5 !== null && x5.BS_PRIVATE_NESTED_SOME_NONE !== void 0))
      return x5;
    var depth = x5.BS_PRIVATE_NESTED_SOME_NONE;
    if (depth !== 0)
      return {
        BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
      };
  }

  // node_modules/rescript/lib/es6/js_json.js
  function decodeString(json) {
    if (typeof json == "string")
      return json;
  }
  function decodeNumber(json) {
    if (typeof json == "number")
      return json;
  }
  function decodeObject(json) {
    if (typeof json == "object" && !Array.isArray(json) && json !== null)
      return some(json);
  }
  function decodeArray(json) {
    if (Array.isArray(json))
      return json;
  }
  function decodeBoolean(json) {
    if (typeof json == "boolean")
      return json;
  }

  // node_modules/rescript/lib/es6/caml.js
  function caml_int_compare(x5, y5) {
    return x5 < y5 ? -1 : x5 === y5 ? 0 : 1;
  }
  function caml_bool_compare(x5, y5) {
    return x5 ? y5 ? 0 : 1 : y5 ? -1 : 0;
  }
  function caml_string_compare(s1, s2) {
    return s1 === s2 ? 0 : s1 < s2 ? -1 : 1;
  }

  // node_modules/rescript/lib/es6/caml_obj.js
  var for_in = function(o, foo) {
    for (var x5 in o)
      foo(x5);
  };
  function caml_compare(a3, b) {
    if (a3 === b)
      return 0;
    var a_type = typeof a3, b_type = typeof b;
    switch (a_type) {
      case "boolean":
        if (b_type === "boolean")
          return caml_bool_compare(a3, b);
        break;
      case "function":
        if (b_type === "function")
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "compare: functional value",
            Error: new Error()
          };
        break;
      case "number":
        if (b_type === "number")
          return caml_int_compare(a3, b);
        break;
      case "string":
        return b_type === "string" ? caml_string_compare(a3, b) : 1;
      case "undefined":
        return -1;
      default:
    }
    switch (b_type) {
      case "string":
        return -1;
      case "undefined":
        return 1;
      default:
        if (a_type === "boolean")
          return 1;
        if (b_type === "boolean")
          return -1;
        if (a_type === "function")
          return 1;
        if (b_type === "function")
          return -1;
        if (a_type === "number")
          return b === null || b.BS_PRIVATE_NESTED_SOME_NONE !== void 0 ? 1 : -1;
        if (b_type === "number")
          return a3 === null || a3.BS_PRIVATE_NESTED_SOME_NONE !== void 0 ? -1 : 1;
        if (a3 === null)
          return b.BS_PRIVATE_NESTED_SOME_NONE !== void 0 ? 1 : -1;
        if (b === null)
          return a3.BS_PRIVATE_NESTED_SOME_NONE !== void 0 ? -1 : 1;
        if (a3.BS_PRIVATE_NESTED_SOME_NONE !== void 0)
          return b.BS_PRIVATE_NESTED_SOME_NONE !== void 0 ? aux_obj_compare(a3, b) : -1;
        var tag_a = a3.TAG | 0, tag_b = b.TAG | 0;
        if (tag_a === 248)
          return caml_int_compare(a3[1], b[1]);
        if (tag_a === 251)
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "equal: abstract value",
            Error: new Error()
          };
        if (tag_a !== tag_b)
          return tag_a < tag_b ? -1 : 1;
        var len_a = a3.length | 0, len_b = b.length | 0;
        if (len_a === len_b)
          if (Array.isArray(a3))
            for (var _i = 0; ; ) {
              var i = _i;
              if (i === len_a)
                return 0;
              var res = caml_compare(a3[i], b[i]);
              if (res !== 0)
                return res;
              _i = i + 1 | 0;
            }
          else
            return a3 instanceof Date && b instanceof Date ? a3 - b : aux_obj_compare(a3, b);
        else if (len_a < len_b)
          for (var _i$1 = 0; ; ) {
            var i$1 = _i$1;
            if (i$1 === len_a)
              return -1;
            var res$1 = caml_compare(a3[i$1], b[i$1]);
            if (res$1 !== 0)
              return res$1;
            _i$1 = i$1 + 1 | 0;
          }
        else
          for (var _i$2 = 0; ; ) {
            var i$2 = _i$2;
            if (i$2 === len_b)
              return 1;
            var res$2 = caml_compare(a3[i$2], b[i$2]);
            if (res$2 !== 0)
              return res$2;
            _i$2 = i$2 + 1 | 0;
          }
    }
  }
  function aux_obj_compare(a3, b) {
    var min_key_lhs = {
      contents: void 0
    }, min_key_rhs = {
      contents: void 0
    }, do_key = function(param, key) {
      var min_key = param[2], b2 = param[1];
      if (!b2.hasOwnProperty(key) || caml_compare(param[0][key], b2[key]) > 0) {
        var mk = min_key.contents;
        if (!(mk !== void 0 && key >= mk)) {
          min_key.contents = key;
          return;
        }
      }
    }, partial_arg2 = [
      a3,
      b,
      min_key_rhs
    ], do_key_a = function(param) {
      return do_key(partial_arg2, param);
    }, partial_arg$12 = [
      b,
      a3,
      min_key_lhs
    ], do_key_b = function(param) {
      return do_key(partial_arg$12, param);
    };
    for_in(a3, do_key_a), for_in(b, do_key_b);
    var match = min_key_lhs.contents, match$1 = min_key_rhs.contents;
    return match !== void 0 ? match$1 !== void 0 ? caml_string_compare(match, match$1) : -1 : match$1 !== void 0 ? 1 : 0;
  }
  function caml_equal(a3, b) {
    if (a3 === b)
      return !0;
    var a_type = typeof a3;
    if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a3 === null)
      return !1;
    var b_type = typeof b;
    if (a_type === "function" || b_type === "function")
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "equal: functional value",
        Error: new Error()
      };
    if (b_type === "number" || b_type === "undefined" || b === null)
      return !1;
    var tag_a = a3.TAG | 0, tag_b = b.TAG | 0;
    if (tag_a === 248)
      return a3[1] === b[1];
    if (tag_a === 251)
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "equal: abstract value",
        Error: new Error()
      };
    if (tag_a !== tag_b)
      return !1;
    var len_a = a3.length | 0, len_b = b.length | 0;
    if (len_a === len_b)
      if (Array.isArray(a3))
        for (var _i = 0; ; ) {
          var i = _i;
          if (i === len_a)
            return !0;
          if (!caml_equal(a3[i], b[i]))
            return !1;
          _i = i + 1 | 0;
        }
      else {
        if (a3 instanceof Date && b instanceof Date)
          return !(a3 > b || a3 < b);
        var result = {
          contents: !0
        }, do_key_a = function(key) {
          if (!b.hasOwnProperty(key)) {
            result.contents = !1;
            return;
          }
        }, do_key_b = function(key) {
          if (!a3.hasOwnProperty(key) || !caml_equal(b[key], a3[key])) {
            result.contents = !1;
            return;
          }
        };
        return for_in(a3, do_key_a), result.contents && for_in(b, do_key_b), result.contents;
      }
    else
      return !1;
  }
  function caml_notequal(a3, b) {
    return !caml_equal(a3, b);
  }
  function caml_greaterthan(a3, b) {
    return caml_compare(a3, b) > 0;
  }
  function caml_lessthan(a3, b) {
    return caml_compare(a3, b) < 0;
  }

  // node_modules/rescript/lib/es6/caml_array.js
  function sub(x5, offset, len) {
    for (var result = new Array(len), j = 0, i = offset; j < len; )
      result[j] = x5[i], j = j + 1 | 0, i = i + 1 | 0;
    return result;
  }

  // node_modules/rescript/lib/es6/curry.js
  function app(_f, _args) {
    for (; ; ) {
      var args = _args, f = _f, init_arity = f.length, arity = init_arity === 0 ? 1 : init_arity, len = args.length, d = arity - len | 0;
      if (d === 0)
        return f.apply(null, args);
      if (d >= 0)
        return function(f2, args2) {
          return function(x5) {
            return app(f2, args2.concat([x5]));
          };
        }(f, args);
      _args = sub(args, arity, -d | 0), _f = f.apply(null, sub(args, 0, arity));
    }
  }
  function _1(o, a0) {
    var arity = o.length;
    if (arity === 1)
      return o(a0);
    switch (arity) {
      case 1:
        return o(a0);
      case 2:
        return function(param) {
          return o(a0, param);
        };
      case 3:
        return function(param, param$1) {
          return o(a0, param, param$1);
        };
      case 4:
        return function(param, param$1, param$2) {
          return o(a0, param, param$1, param$2);
        };
      case 5:
        return function(param, param$1, param$2, param$3) {
          return o(a0, param, param$1, param$2, param$3);
        };
      case 6:
        return function(param, param$1, param$2, param$3, param$4) {
          return o(a0, param, param$1, param$2, param$3, param$4);
        };
      case 7:
        return function(param, param$1, param$2, param$3, param$4, param$5) {
          return o(a0, param, param$1, param$2, param$3, param$4, param$5);
        };
      default:
        return app(o, [a0]);
    }
  }
  function __1(o) {
    var arity = o.length;
    return arity === 1 ? o : function(a0) {
      return _1(o, a0);
    };
  }
  function _2(o, a0, a1) {
    var arity = o.length;
    if (arity === 2)
      return o(a0, a1);
    switch (arity) {
      case 1:
        return app(o(a0), [a1]);
      case 2:
        return o(a0, a1);
      case 3:
        return function(param) {
          return o(a0, a1, param);
        };
      case 4:
        return function(param, param$1) {
          return o(a0, a1, param, param$1);
        };
      case 5:
        return function(param, param$1, param$2) {
          return o(a0, a1, param, param$1, param$2);
        };
      case 6:
        return function(param, param$1, param$2, param$3) {
          return o(a0, a1, param, param$1, param$2, param$3);
        };
      case 7:
        return function(param, param$1, param$2, param$3, param$4) {
          return o(a0, a1, param, param$1, param$2, param$3, param$4);
        };
      default:
        return app(o, [
          a0,
          a1
        ]);
    }
  }
  function __2(o) {
    var arity = o.length;
    return arity === 2 ? o : function(a0, a1) {
      return _2(o, a0, a1);
    };
  }
  function _3(o, a0, a1, a22) {
    var arity = o.length;
    if (arity === 3)
      return o(a0, a1, a22);
    switch (arity) {
      case 1:
        return app(o(a0), [
          a1,
          a22
        ]);
      case 2:
        return app(o(a0, a1), [a22]);
      case 3:
        return o(a0, a1, a22);
      case 4:
        return function(param) {
          return o(a0, a1, a22, param);
        };
      case 5:
        return function(param, param$1) {
          return o(a0, a1, a22, param, param$1);
        };
      case 6:
        return function(param, param$1, param$2) {
          return o(a0, a1, a22, param, param$1, param$2);
        };
      case 7:
        return function(param, param$1, param$2, param$3) {
          return o(a0, a1, a22, param, param$1, param$2, param$3);
        };
      default:
        return app(o, [
          a0,
          a1,
          a22
        ]);
    }
  }
  function __3(o) {
    var arity = o.length;
    return arity === 3 ? o : function(a0, a1, a22) {
      return _3(o, a0, a1, a22);
    };
  }

  // node_modules/rescript/lib/es6/belt_Array.js
  function concat(a1, a22) {
    for (var l1 = a1.length, l2 = a22.length, a1a2 = new Array(l1 + l2 | 0), i = 0; i < l1; ++i)
      a1a2[i] = a1[i];
    for (var i$1 = 0; i$1 < l2; ++i$1)
      a1a2[l1 + i$1 | 0] = a22[i$1];
    return a1a2;
  }
  function forEachU(a3, f) {
    for (var i = 0, i_finish = a3.length; i < i_finish; ++i)
      f(a3[i]);
  }
  function forEach(a3, f) {
    return forEachU(a3, __1(f));
  }
  function mapU(a3, f) {
    for (var l = a3.length, r = new Array(l), i = 0; i < l; ++i)
      r[i] = f(a3[i]);
    return r;
  }
  function map(a3, f) {
    return mapU(a3, __1(f));
  }
  function reduceU(a3, x5, f) {
    for (var r = x5, i = 0, i_finish = a3.length; i < i_finish; ++i)
      r = f(r, a3[i]);
    return r;
  }
  function reduce(a3, x5, f) {
    return reduceU(a3, x5, __2(f));
  }

  // node_modules/rescript/lib/es6/belt_SortArray.js
  function sortedLengthAuxMore(xs, _prec, _acc, len, lt) {
    for (; ; ) {
      var acc = _acc, prec = _prec;
      if (acc >= len)
        return acc;
      var v = xs[acc];
      if (!lt(v, prec))
        return acc;
      _acc = acc + 1 | 0, _prec = v;
    }
  }
  function strictlySortedLengthU(xs, lt) {
    var len = xs.length;
    if (len === 0 || len === 1)
      return len;
    var x0 = xs[0], x1 = xs[1];
    if (lt(x0, x1))
      for (var _prec = x1, _acc = 2; ; ) {
        var acc = _acc, prec = _prec;
        if (acc >= len)
          return acc;
        var v = xs[acc];
        if (!lt(prec, v))
          return acc;
        _acc = acc + 1 | 0, _prec = v;
      }
    else
      return lt(x1, x0) ? -sortedLengthAuxMore(xs, x1, 2, len, lt) | 0 : 1;
  }

  // node_modules/rescript/lib/es6/belt_List.js
  function add(xs, x5) {
    return {
      hd: x5,
      tl: xs
    };
  }
  function copyAuxWithMap(_cellX, _prec, f) {
    for (; ; ) {
      var prec = _prec, cellX = _cellX;
      if (!cellX)
        return;
      var next = {
        hd: f(cellX.hd),
        tl: 0
      };
      prec.tl = next, _prec = next, _cellX = cellX.tl;
    }
  }
  function mapU2(xs, f) {
    if (!xs)
      return 0;
    var cell = {
      hd: f(xs.hd),
      tl: 0
    };
    return copyAuxWithMap(xs.tl, cell, f), cell;
  }
  function map2(xs, f) {
    return mapU2(xs, __1(f));
  }
  function length(xs) {
    for (var _x = xs, _acc = 0; ; ) {
      var acc = _acc, x5 = _x;
      if (!x5)
        return acc;
      _acc = acc + 1 | 0, _x = x5.tl;
    }
  }
  function fillAux(arr, _i, _x) {
    for (; ; ) {
      var x5 = _x, i = _i;
      if (!x5)
        return;
      arr[i] = x5.hd, _x = x5.tl, _i = i + 1 | 0;
    }
  }
  function fromArray(a3) {
    for (var _i = a3.length - 1 | 0, _res = 0; ; ) {
      var res = _res, i = _i;
      if (i < 0)
        return res;
      _res = {
        hd: a3[i],
        tl: res
      }, _i = i - 1 | 0;
    }
  }
  function toArray(x5) {
    var len = length(x5), arr = new Array(len);
    return fillAux(arr, 0, x5), arr;
  }
  function reduceU2(_l, _accu, f) {
    for (; ; ) {
      var accu = _accu, l = _l;
      if (!l)
        return accu;
      _accu = f(accu, l.hd), _l = l.tl;
    }
  }
  function reduce2(l, accu, f) {
    return reduceU2(l, accu, __2(f));
  }

  // node_modules/rescript/lib/es6/belt_Option.js
  function getExn(x5) {
    if (x5 !== void 0)
      return valFromOption(x5);
    throw {
      RE_EXN_ID: "Not_found",
      Error: new Error()
    };
  }
  function mapU3(opt, f) {
    if (opt !== void 0)
      return some(f(valFromOption(opt)));
  }
  function map3(opt, f) {
    return mapU3(opt, __1(f));
  }
  function flatMapU(opt, f) {
    if (opt !== void 0)
      return f(valFromOption(opt));
  }
  function flatMap(opt, f) {
    return flatMapU(opt, __1(f));
  }
  function getWithDefault(opt, $$default) {
    return opt !== void 0 ? valFromOption(opt) : $$default;
  }

  // node_modules/rescript/lib/es6/caml_splice_call.js
  var spliceObjApply = function(obj, name2, args) {
    var i, argLen;
    argLen = args.length;
    var applied = [];
    for (i = 0; i < argLen - 1; ++i)
      applied.push(args[i]);
    var lastOne = args[argLen - 1];
    for (i = 0; i < lastOne.length; ++i)
      applied.push(lastOne[i]);
    return obj[name2].apply(obj, applied);
  };

  // src/lib/Error.bs.js
  function join(prim0, prim1) {
    return prim0.concat(prim1);
  }
  function concat2(ts) {
    return reduce2(ts, [], join);
  }
  function fromString$1(s2) {
    return [{
      TAG: 0,
      _0: s2
    }];
  }
  function fromStrings(ss) {
    return [{
      TAG: 0,
      _0: spliceObjApply("", "concat", [ss])
    }];
  }
  function _pretag(t, tags2) {
    return tags2.map(function(t2) {
      return {
        TAG: 1,
        _0: t2
      };
    }).concat(t);
  }
  function _posttag(t, tags2) {
    return t.concat(tags2.map(function(t2) {
      return {
        TAG: 1,
        _0: t2
      };
    }));
  }

  // src/lib/Or_error.bs.js
  function create2(a3) {
    return {
      TAG: 0,
      _0: a3,
      _1: []
    };
  }
  function error_s(s2) {
    return {
      TAG: 1,
      _0: fromString$1(s2)
    };
  }
  function error_ss(ss) {
    return {
      TAG: 1,
      _0: fromStrings(ss)
    };
  }
  function map4(t, f) {
    return t.TAG === 0 ? {
      TAG: 0,
      _0: _1(f, t._0),
      _1: t._1
    } : {
      TAG: 1,
      _0: t._0
    };
  }
  function flatMap2(t, f) {
    if (t.TAG === 0) {
      var t$1 = _1(f, t._0), tags$p = t._1;
      return t$1.TAG === 0 ? {
        TAG: 0,
        _0: t$1._0,
        _1: tags$p.concat(t$1._1)
      } : {
        TAG: 1,
        _0: _pretag(t$1._0, tags$p)
      };
    } else
      return {
        TAG: 1,
        _0: t._0
      };
  }
  function valOf(t) {
    if (t.TAG === 0)
      return some(t._0);
  }
  function both(ts) {
    var e2 = ts[0];
    if (e2.TAG === 0) {
      var e$1 = ts[1], tags2 = e2._1;
      return e$1.TAG === 0 ? {
        TAG: 0,
        _0: [
          e2._0,
          e$1._0
        ],
        _1: tags2.concat(e$1._1)
      } : {
        TAG: 1,
        _0: _pretag(e$1._0, tags2)
      };
    }
    var e$p = ts[1], e$2 = e2._0;
    return e$p.TAG === 0 ? {
      TAG: 1,
      _0: _posttag(e$2, e$p._1)
    } : {
      TAG: 1,
      _0: join(e$2, e$p._0)
    };
  }
  function all(ts) {
    if (!ts)
      return {
        TAG: 0,
        _0: 0,
        _1: []
      };
    var e2 = both([
      ts.hd,
      all(ts.tl)
    ]);
    if (e2.TAG !== 0)
      return {
        TAG: 1,
        _0: e2._0
      };
    var match = e2._0;
    return {
      TAG: 0,
      _0: add(match[1], match[0]),
      _1: e2._1
    };
  }
  function fromOption(opt, err) {
    return opt !== void 0 ? {
      TAG: 0,
      _0: valFromOption(opt),
      _1: []
    } : {
      TAG: 1,
      _0: err
    };
  }
  function fromOption_s(opt, err_s) {
    return fromOption(opt, fromString$1(err_s));
  }
  function fromOption_ss(opt, err_ss) {
    return fromOption(opt, fromStrings(err_ss));
  }
  function both3(ts) {
    var e1 = ts[0];
    if (e1.TAG === 0) {
      var e2 = ts[1], t1 = e1._1;
      if (e2.TAG === 0) {
        var e3 = ts[2], t2 = e2._1;
        return e3.TAG === 0 ? {
          TAG: 0,
          _0: [
            e1._0,
            e2._0,
            e3._0
          ],
          _1: t1.concat(t2, e3._1)
        } : {
          TAG: 1,
          _0: _pretag(e3._0, t1.concat(t2))
        };
      }
      var e32 = ts[2], e2$1 = e2._0;
      return e32.TAG === 0 ? {
        TAG: 1,
        _0: _posttag(_pretag(e2$1, t1), e32._1)
      } : {
        TAG: 1,
        _0: _pretag(join(e2$1, e32._0), t1)
      };
    }
    var e2$2 = ts[1], e1$1 = e1._0;
    if (e2$2.TAG === 0) {
      var e3$1 = ts[2], t2$1 = e2$2._1;
      return e3$1.TAG === 0 ? {
        TAG: 1,
        _0: _posttag(e1$1, t2$1.concat(e3$1._1))
      } : {
        TAG: 1,
        _0: join(_posttag(e1$1, t2$1), e3$1._0)
      };
    }
    var e3$2 = ts[2], e2$3 = e2$2._0;
    return e3$2.TAG === 0 ? {
      TAG: 1,
      _0: _posttag(join(e1$1, e2$3), e3$2._1)
    } : {
      TAG: 1,
      _0: concat2({
        hd: e1$1,
        tl: {
          hd: e2$3,
          tl: {
            hd: e3$2._0,
            tl: 0
          }
        }
      })
    };
  }
  function both4(param) {
    return map4(both([
      both([
        param[0],
        param[1]
      ]),
      both([
        param[2],
        param[3]
      ])
    ]), function(param2) {
      var match = param2[1], match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match[0],
        match[1]
      ];
    });
  }
  function both6(param) {
    return map4(both([
      both3([
        param[0],
        param[1],
        param[2]
      ]),
      both3([
        param[3],
        param[4],
        param[5]
      ])
    ]), function(param2) {
      var match = param2[1], match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match$1[2],
        match[0],
        match[1],
        match[2]
      ];
    });
  }
  function both7(param) {
    return map4(both([
      both3([
        param[0],
        param[1],
        param[2]
      ]),
      both4([
        param[3],
        param[4],
        param[5],
        param[6]
      ])
    ]), function(param2) {
      var match = param2[1], match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match$1[2],
        match[0],
        match[1],
        match[2],
        match[3]
      ];
    });
  }
  function both11(param) {
    return map4(both3([
      both4([
        param[0],
        param[1],
        param[2],
        param[3]
      ]),
      both4([
        param[4],
        param[5],
        param[6],
        param[7]
      ]),
      both3([
        param[8],
        param[9],
        param[10]
      ])
    ]), function(param2) {
      var match = param2[2], match$1 = param2[1], match$2 = param2[0];
      return [
        match$2[0],
        match$2[1],
        match$2[2],
        match$2[3],
        match$1[0],
        match$1[1],
        match$1[2],
        match$1[3],
        match[0],
        match[1],
        match[2]
      ];
    });
  }
  var toOption = valOf;

  // src/lib/Int.bs.js
  function baseEncode(prim0, prim1) {
    return prim0.toString(prim1);
  }
  function baseDecode(prim0, prim1) {
    return parseInt(prim0, prim1);
  }

  // src/lib/Array.bs.js
  var toJson = map;
  function fromJson(j, decode) {
    return flatMap2(fromOption_s(decodeArray(j), "JSON is not a valid array (reading array)"), function(arr) {
      return reduce(arr, create2([]), function(xs, x5) {
        return flatMap2(xs, function(xs2) {
          return map4(_1(decode, x5), function(x6) {
            return concat(xs2, [x6]);
          });
        });
      });
    });
  }
  function joinWith(prim0, prim1) {
    return prim0.join(prim1);
  }
  function filter(prim0, prim1) {
    return prim0.filter(__1(prim1));
  }
  function find(prim0, prim1) {
    return undefined_to_opt(prim0.find(__1(prim1)));
  }
  function includes(prim0, prim1) {
    return prim0.includes(prim1);
  }
  function flatMap3(t, f) {
    return spliceObjApply([], "concat", [t.map(__1(f))]);
  }
  var concat3 = concat;
  var forEach2 = forEach;
  var map5 = map;
  var reduce3 = reduce;

  // src/lib/Option.bs.js
  function flatten(tt) {
    return flatMap(tt, function(t) {
      return t;
    });
  }
  function iter(x5, f) {
    if (x5 !== void 0)
      return _1(f, valFromOption(x5));
  }
  function both2(param) {
    var b = param[1];
    return flatMap(param[0], function(a3) {
      return map3(b, function(b2) {
        return [
          a3,
          b2
        ];
      });
    });
  }
  function all2(xs) {
    return reduce3(xs, [], function(ys, x5) {
      return map3(both2([
        ys,
        x5
      ]), function(param) {
        return concat3(param[0], [param[1]]);
      });
    });
  }
  function toJson2(t, jsonify) {
    return t !== void 0 ? _1(jsonify, valFromOption(t)) : null;
  }
  function fromJson2(json, decode) {
    return json === null ? create2(void 0) : map4(_1(decode, json), function(x5) {
      return some(x5);
    });
  }
  var getExn3 = getExn;
  var map6 = map3;
  var flatMap4 = flatMap, getWithDefault2 = getWithDefault;

  // src/lib/List.bs.js
  function toJson3(t, jsonify) {
    return toArray(map2(t, jsonify));
  }
  function fromJson3(json, decode) {
    return flatMap2(fromOption_s(decodeArray(json), "JSON is not a valid array (reading list)"), function(arr) {
      return all(map2(fromArray(arr), decode));
    });
  }
  var map7 = map2;
  var fromArray2 = fromArray;
  var reduce4 = reduce2;

  // src/lib/String.bs.js
  function toJson4(prim) {
    return prim;
  }
  function fromJson4(j) {
    return fromOption_ss(decodeString(j), [
      "Not a JSON string: ",
      String(j)
    ]);
  }

  // node_modules/rescript/lib/es6/belt_Id.js
  function MakeComparable(M) {
    var cmp8 = M.cmp, cmp$1 = __2(cmp8);
    return {
      cmp: cmp$1
    };
  }

  // node_modules/rescript/lib/es6/js_dict.js
  function get3(dict, k2) {
    if (k2 in dict)
      return some(dict[k2]);
  }
  function entries(dict) {
    for (var keys = Object.keys(dict), l = keys.length, values = new Array(l), i = 0; i < l; ++i) {
      var key = keys[i];
      values[i] = [
        key,
        dict[key]
      ];
    }
    return values;
  }
  function fromList(entries2) {
    for (var dict = {}, _param = entries2; ; ) {
      var param = _param;
      if (!param)
        return dict;
      var match = param.hd;
      dict[match[0]] = match[1], _param = param.tl;
    }
  }
  function fromArray3(entries2) {
    for (var dict = {}, l = entries2.length, i = 0; i < l; ++i) {
      var match = entries2[i];
      dict[match[0]] = match[1];
    }
    return dict;
  }

  // node_modules/rescript/lib/es6/belt_internalAVLtree.js
  function treeHeight(n) {
    return n !== void 0 ? n.h : 0;
  }
  function create3(l, x5, d, r) {
    var hl = treeHeight(l), hr = treeHeight(r);
    return {
      k: x5,
      v: d,
      h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0,
      l,
      r
    };
  }
  function singleton(x5, d) {
    return {
      k: x5,
      v: d,
      h: 1,
      l: void 0,
      r: void 0
    };
  }
  function heightGe(l, r) {
    return r !== void 0 ? l !== void 0 ? l.h >= r.h : !1 : !0;
  }
  function updateValue(n, newValue) {
    return n.v === newValue ? n : {
      k: n.k,
      v: newValue,
      h: n.h,
      l: n.l,
      r: n.r
    };
  }
  function bal(l, x5, d, r) {
    var hl = l !== void 0 ? l.h : 0, hr = r !== void 0 ? r.h : 0;
    if (hl > (hr + 2 | 0)) {
      var ll = l.l, lr = l.r;
      return treeHeight(ll) >= treeHeight(lr) ? create3(ll, l.k, l.v, create3(lr, x5, d, r)) : create3(create3(ll, l.k, l.v, lr.l), lr.k, lr.v, create3(lr.r, x5, d, r));
    }
    if (hr <= (hl + 2 | 0))
      return {
        k: x5,
        v: d,
        h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0,
        l,
        r
      };
    var rl = r.l, rr = r.r;
    return treeHeight(rr) >= treeHeight(rl) ? create3(create3(l, x5, d, rl), r.k, r.v, rr) : create3(create3(l, x5, d, rl.l), rl.k, rl.v, create3(rl.r, r.k, r.v, rr));
  }
  function removeMinAuxWithRef(n, kr2, vr) {
    var ln = n.l;
    return ln !== void 0 ? bal(removeMinAuxWithRef(ln, kr2, vr), n.k, n.v, n.r) : (kr2.contents = n.k, vr.contents = n.v, n.r);
  }
  function isEmpty(x5) {
    return x5 === void 0;
  }
  function addMinElement(n, k2, v) {
    return n !== void 0 ? bal(addMinElement(n.l, k2, v), n.k, n.v, n.r) : singleton(k2, v);
  }
  function addMaxElement(n, k2, v) {
    return n !== void 0 ? bal(n.l, n.k, n.v, addMaxElement(n.r, k2, v)) : singleton(k2, v);
  }
  function join2(ln, v, d, rn) {
    if (ln === void 0)
      return addMinElement(rn, v, d);
    if (rn === void 0)
      return addMaxElement(ln, v, d);
    var lv = ln.k, ld = ln.v, lh = ln.h, ll = ln.l, lr = ln.r, rv = rn.k, rd = rn.v, rh = rn.h, rl = rn.l, rr = rn.r;
    return lh > (rh + 2 | 0) ? bal(ll, lv, ld, join2(lr, v, d, rn)) : rh > (lh + 2 | 0) ? bal(join2(ln, v, d, rl), rv, rd, rr) : create3(ln, v, d, rn);
  }
  function concat5(t1, t2) {
    if (t1 === void 0)
      return t2;
    if (t2 === void 0)
      return t1;
    var kr2 = {
      contents: t2.k
    }, vr = {
      contents: t2.v
    }, t2r = removeMinAuxWithRef(t2, kr2, vr);
    return join2(t1, kr2.contents, vr.contents, t2r);
  }
  function concatOrJoin(t1, v, d, t2) {
    return d !== void 0 ? join2(t1, v, valFromOption(d), t2) : concat5(t1, t2);
  }
  function keepMapU3(n, p) {
    if (n !== void 0) {
      var v = n.k, d = n.v, newLeft = keepMapU3(n.l, p), pvd = p(v, d), newRight = keepMapU3(n.r, p);
      return pvd !== void 0 ? join2(newLeft, v, valFromOption(pvd), newRight) : concat5(newLeft, newRight);
    }
  }
  function lengthNode(n) {
    var l = n.l, r = n.r, sizeL = l !== void 0 ? lengthNode(l) : 0, sizeR = r !== void 0 ? lengthNode(r) : 0;
    return (1 + sizeL | 0) + sizeR | 0;
  }
  function toListAux(_n, _accu) {
    for (; ; ) {
      var accu = _accu, n = _n;
      if (n === void 0)
        return accu;
      var k2 = n.k, v = n.v, l = n.l, r = n.r;
      _accu = {
        hd: [
          k2,
          v
        ],
        tl: toListAux(r, accu)
      }, _n = l;
    }
  }
  function toList(s2) {
    return toListAux(s2, 0);
  }
  function fillArray(_n, _i, arr) {
    for (; ; ) {
      var i = _i, n = _n, l = n.l, v = n.k, r = n.r, next = l !== void 0 ? fillArray(l, i, arr) : i;
      arr[next] = [
        v,
        n.v
      ];
      var rnext = next + 1 | 0;
      if (r === void 0)
        return rnext;
      _i = rnext, _n = r;
    }
  }
  function toArray2(n) {
    if (n === void 0)
      return [];
    var size7 = lengthNode(n), v = new Array(size7);
    return fillArray(n, 0, v), v;
  }
  function fromSortedArrayRevAux(arr, off, len) {
    switch (len) {
      case 0:
        return;
      case 1:
        var match = arr[off];
        return singleton(match[0], match[1]);
      case 2:
        var match_0 = arr[off], match_1 = arr[off - 1 | 0], match$1 = match_1, match$2 = match_0;
        return {
          k: match$1[0],
          v: match$1[1],
          h: 2,
          l: singleton(match$2[0], match$2[1]),
          r: void 0
        };
      case 3:
        var match_0$1 = arr[off], match_1$1 = arr[off - 1 | 0], match_2 = arr[off - 2 | 0], match$3 = match_2, match$4 = match_1$1, match$5 = match_0$1;
        return {
          k: match$4[0],
          v: match$4[1],
          h: 2,
          l: singleton(match$5[0], match$5[1]),
          r: singleton(match$3[0], match$3[1])
        };
      default:
        var nl = len / 2 | 0, left = fromSortedArrayRevAux(arr, off, nl), match$6 = arr[off - nl | 0], right = fromSortedArrayRevAux(arr, (off - nl | 0) - 1 | 0, (len - nl | 0) - 1 | 0);
        return create3(left, match$6[0], match$6[1], right);
    }
  }
  function fromSortedArrayAux(arr, off, len) {
    switch (len) {
      case 0:
        return;
      case 1:
        var match = arr[off];
        return singleton(match[0], match[1]);
      case 2:
        var match_0 = arr[off], match_1 = arr[off + 1 | 0], match$1 = match_1, match$2 = match_0;
        return {
          k: match$1[0],
          v: match$1[1],
          h: 2,
          l: singleton(match$2[0], match$2[1]),
          r: void 0
        };
      case 3:
        var match_0$1 = arr[off], match_1$1 = arr[off + 1 | 0], match_2 = arr[off + 2 | 0], match$3 = match_2, match$4 = match_1$1, match$5 = match_0$1;
        return {
          k: match$4[0],
          v: match$4[1],
          h: 2,
          l: singleton(match$5[0], match$5[1]),
          r: singleton(match$3[0], match$3[1])
        };
      default:
        var nl = len / 2 | 0, left = fromSortedArrayAux(arr, off, nl), match$6 = arr[off + nl | 0], right = fromSortedArrayAux(arr, (off + nl | 0) + 1 | 0, (len - nl | 0) - 1 | 0);
        return create3(left, match$6[0], match$6[1], right);
    }
  }
  function get4(_n, x5, cmp8) {
    for (; ; ) {
      var n = _n;
      if (n === void 0)
        return;
      var v = n.k, c3 = cmp8(x5, v);
      if (c3 === 0)
        return some(n.v);
      _n = c3 < 0 ? n.l : n.r;
    }
  }
  function has2(_n, x5, cmp8) {
    for (; ; ) {
      var n = _n;
      if (n === void 0)
        return !1;
      var v = n.k, c3 = cmp8(x5, v);
      if (c3 === 0)
        return !0;
      _n = c3 < 0 ? n.l : n.r;
    }
  }
  function rotateWithLeftChild(k2) {
    var k1 = k2.l;
    k2.l = k1.r, k1.r = k2;
    var hlk2 = treeHeight(k2.l), hrk2 = treeHeight(k2.r);
    k2.h = (hlk2 > hrk2 ? hlk2 : hrk2) + 1 | 0;
    var hlk1 = treeHeight(k1.l), hk2 = k2.h;
    return k1.h = (hlk1 > hk2 ? hlk1 : hk2) + 1 | 0, k1;
  }
  function rotateWithRightChild(k1) {
    var k2 = k1.r;
    k1.r = k2.l, k2.l = k1;
    var hlk1 = treeHeight(k1.l), hrk1 = treeHeight(k1.r);
    k1.h = (hlk1 > hrk1 ? hlk1 : hrk1) + 1 | 0;
    var hrk2 = treeHeight(k2.r), hk1 = k1.h;
    return k2.h = (hrk2 > hk1 ? hrk2 : hk1) + 1 | 0, k2;
  }
  function doubleWithLeftChild(k3) {
    var x5 = k3.l, v = rotateWithRightChild(x5);
    return k3.l = v, rotateWithLeftChild(k3);
  }
  function doubleWithRightChild(k2) {
    var x5 = k2.r, v = rotateWithLeftChild(x5);
    return k2.r = v, rotateWithRightChild(k2);
  }
  function heightUpdateMutate(t) {
    var hlt = treeHeight(t.l), hrt = treeHeight(t.r);
    return t.h = (hlt > hrt ? hlt : hrt) + 1 | 0, t;
  }
  function balMutate(nt) {
    var l = nt.l, r = nt.r, hl = treeHeight(l), hr = treeHeight(r);
    if (hl > (2 + hr | 0)) {
      var ll = l.l, lr = l.r;
      return heightGe(ll, lr) ? heightUpdateMutate(rotateWithLeftChild(nt)) : heightUpdateMutate(doubleWithLeftChild(nt));
    }
    if (hr > (2 + hl | 0)) {
      var rl = r.l, rr = r.r;
      return heightGe(rr, rl) ? heightUpdateMutate(rotateWithRightChild(nt)) : heightUpdateMutate(doubleWithRightChild(nt));
    }
    return nt.h = (hl > hr ? hl : hr) + 1 | 0, nt;
  }
  function updateMutate(t, x5, data4, cmp8) {
    if (t === void 0)
      return singleton(x5, data4);
    var k2 = t.k, c3 = cmp8(x5, k2);
    if (c3 === 0)
      return t.v = data4, t;
    var l = t.l, r = t.r;
    if (c3 < 0) {
      var ll = updateMutate(l, x5, data4, cmp8);
      t.l = ll;
    } else
      t.r = updateMutate(r, x5, data4, cmp8);
    return balMutate(t);
  }
  function fromArray4(xs, cmp8) {
    var len = xs.length;
    if (len !== 0) {
      var next = strictlySortedLengthU(xs, function(param, param$1) {
        return cmp8(param[0], param$1[0]) < 0;
      }), result;
      next >= 0 ? result = fromSortedArrayAux(xs, 0, next) : (next = -next | 0, result = fromSortedArrayRevAux(xs, next - 1 | 0, next));
      for (var i = next; i < len; ++i) {
        var match = xs[i];
        result = updateMutate(result, match[0], match[1], cmp8);
      }
      return result;
    }
  }

  // node_modules/rescript/lib/es6/belt_MapDict.js
  function set2(t, newK, newD, cmp8) {
    if (t === void 0)
      return singleton(newK, newD);
    var k2 = t.k, c3 = cmp8(newK, k2);
    if (c3 === 0)
      return updateValue(t, newD);
    var l = t.l, r = t.r, v = t.v;
    return c3 < 0 ? bal(set2(l, newK, newD, cmp8), k2, v, r) : bal(l, k2, v, set2(r, newK, newD, cmp8));
  }
  function updateU(t, newK, f, cmp8) {
    if (t !== void 0) {
      var k2 = t.k, c3 = cmp8(newK, k2);
      if (c3 === 0) {
        var newD = f(some(t.v));
        if (newD !== void 0)
          return updateValue(t, valFromOption(newD));
        var l = t.l, r = t.r;
        if (l === void 0)
          return r;
        if (r === void 0)
          return l;
        var kr2 = {
          contents: r.k
        }, vr = {
          contents: r.v
        }, r$1 = removeMinAuxWithRef(r, kr2, vr);
        return bal(l, kr2.contents, vr.contents, r$1);
      }
      var l$1 = t.l, r$2 = t.r, v = t.v;
      if (c3 < 0) {
        var ll = updateU(l$1, newK, f, cmp8);
        return l$1 === ll ? t : bal(ll, k2, v, r$2);
      }
      var rr = updateU(r$2, newK, f, cmp8);
      return r$2 === rr ? t : bal(l$1, k2, v, rr);
    }
    var newD$1 = f(void 0);
    return newD$1 !== void 0 ? singleton(newK, valFromOption(newD$1)) : t;
  }
  function removeAux0(n, x5, cmp8) {
    var v = n.k, l = n.l, r = n.r, c3 = cmp8(x5, v);
    if (c3 === 0) {
      if (l === void 0)
        return r;
      if (r === void 0)
        return l;
      var kr2 = {
        contents: r.k
      }, vr = {
        contents: r.v
      }, r$1 = removeMinAuxWithRef(r, kr2, vr);
      return bal(l, kr2.contents, vr.contents, r$1);
    }
    if (c3 < 0) {
      if (l === void 0)
        return n;
      var ll = removeAux0(l, x5, cmp8);
      return ll === l ? n : bal(ll, v, n.v, r);
    }
    if (r === void 0)
      return n;
    var rr = removeAux0(r, x5, cmp8);
    return rr === r ? n : bal(l, v, n.v, rr);
  }
  function remove(n, x5, cmp8) {
    if (n !== void 0)
      return removeAux0(n, x5, cmp8);
  }
  function splitAuxPivot(n, x5, pres, cmp8) {
    var v = n.k, d = n.v, l = n.l, r = n.r, c3 = cmp8(x5, v);
    if (c3 === 0)
      return pres.contents = some(d), [
        l,
        r
      ];
    if (c3 < 0) {
      if (l === void 0)
        return [
          void 0,
          n
        ];
      var match = splitAuxPivot(l, x5, pres, cmp8);
      return [
        match[0],
        join2(match[1], v, d, r)
      ];
    }
    if (r === void 0)
      return [
        n,
        void 0
      ];
    var match$1 = splitAuxPivot(r, x5, pres, cmp8);
    return [
      join2(l, v, d, match$1[0]),
      match$1[1]
    ];
  }
  function mergeU(s1, s2, f, cmp8) {
    if (s1 === void 0)
      return s2 !== void 0 ? keepMapU3(s2, function(k2, v) {
        return f(k2, void 0, some(v));
      }) : void 0;
    if (s2 === void 0)
      return keepMapU3(s1, function(k2, v) {
        return f(k2, some(v), void 0);
      });
    if (s1.h >= s2.h) {
      var v1 = s1.k, d1 = s1.v, l1 = s1.l, r1 = s1.r, d2 = {
        contents: void 0
      }, match = splitAuxPivot(s2, v1, d2, cmp8), d2$1 = d2.contents, newLeft = mergeU(l1, match[0], f, cmp8), newD = f(v1, some(d1), d2$1), newRight = mergeU(r1, match[1], f, cmp8);
      return concatOrJoin(newLeft, v1, newD, newRight);
    }
    var v2 = s2.k, d2$2 = s2.v, l2 = s2.l, r2 = s2.r, d1$1 = {
      contents: void 0
    }, match$1 = splitAuxPivot(s1, v2, d1$1, cmp8), d1$2 = d1$1.contents, newLeft$1 = mergeU(match$1[0], l2, f, cmp8), newD$1 = f(v2, d1$2, some(d2$2)), newRight$1 = mergeU(match$1[1], r2, f, cmp8);
    return concatOrJoin(newLeft$1, v2, newD$1, newRight$1);
  }
  var isEmpty2 = isEmpty, has3 = has2;
  var toList2 = toList, toArray3 = toArray2, fromArray5 = fromArray4;
  var get5 = get4;

  // node_modules/rescript/lib/es6/belt_Map.js
  function fromArray6(data4, id7) {
    var cmp8 = id7.cmp;
    return {
      cmp: cmp8,
      data: fromArray5(data4, cmp8)
    };
  }
  function remove2(m2, x5) {
    var odata = m2.data, cmp8 = m2.cmp, newData = remove(odata, x5, cmp8);
    return newData === odata ? m2 : {
      cmp: cmp8,
      data: newData
    };
  }
  function set3(m2, key, d) {
    var cmp8 = m2.cmp;
    return {
      cmp: cmp8,
      data: set2(m2.data, key, d, cmp8)
    };
  }
  function updateU2(m2, key, f) {
    var cmp8 = m2.cmp;
    return {
      cmp: cmp8,
      data: updateU(m2.data, key, f, cmp8)
    };
  }
  function update(m2, key, f) {
    return updateU2(m2, key, __1(f));
  }
  function mergeU2(s1, s2, f) {
    var cmp8 = s1.cmp;
    return {
      cmp: cmp8,
      data: mergeU(s1.data, s2.data, f, cmp8)
    };
  }
  function merge(s1, s2, f) {
    return mergeU2(s1, s2, __3(f));
  }
  function make3(id7) {
    return {
      cmp: id7.cmp,
      data: void 0
    };
  }
  function isEmpty3(map9) {
    return isEmpty2(map9.data);
  }
  function toList3(map9) {
    return toList2(map9.data);
  }
  function toArray4(m2) {
    return toArray3(m2.data);
  }
  function get6(map9, x5) {
    return get5(map9.data, x5, map9.cmp);
  }
  function has4(map9, x5) {
    return has3(map9.data, x5, map9.cmp);
  }

  // node_modules/rescript/lib/es6/belt_Set.js
  function make4(id7) {
    return {
      cmp: id7.cmp,
      data: void 0
    };
  }

  // src/lib/Uuid.bs.js
  var internal = {
    counter: Date.now() | 0
  };
  function create4(param) {
    var value = internal.counter;
    return internal.counter = internal.counter + 1 | 0, value;
  }
  function toString(t) {
    return baseEncode(t, 16);
  }
  function fromString2(s2) {
    return baseDecode(s2, 16);
  }
  function toJson5(t) {
    return toJson4(toString(t));
  }
  function fromJson5(j) {
    return map4(fromJson4(j), fromString2);
  }
  function cmp7(t, t$p) {
    return caml_greaterthan(t, t$p) ? 1 : caml_lessthan(t, t$p) ? -1 : 0;
  }
  var Cmp = MakeComparable({
    cmp: cmp7
  }), empty = make4(Cmp);
  function empty$1(param) {
    return make3(Cmp);
  }
  function fromList$1(lst) {
    return reduce4(lst, make3(Cmp), function(t, param) {
      return set3(t, param[0], param[1]);
    });
  }
  function fromArray9(param) {
    return fromArray6(param, Cmp);
  }
  function toJson$22(t, encode) {
    return fromList(map7(toList3(t), function(param) {
      return [
        toString(param[0]),
        _1(encode, param[1])
      ];
    }));
  }
  function fromJson$2(json, decode) {
    return flatMap2(fromOption_s(decodeObject(json), "JSON is not an object (reading UUID)"), function(dict) {
      return map4(all(fromArray2(map5(entries(dict), function(param) {
        var k2 = param[0];
        return map4(_1(decode, param[1]), function(v) {
          return [
            fromString2(k2),
            v
          ];
        });
      }))), fromList$1);
    });
  }
  var $$Map = {
    toJson: toJson$22,
    fromJson: fromJson$2,
    empty: empty$1,
    isEmpty: isEmpty3,
    has: has4,
    set: set3,
    get: get6,
    remove: remove2,
    update,
    merge,
    toList: toList3,
    toArray: toArray4,
    fromList: fromList$1,
    fromArray: fromArray9
  };

  // src/lib/Bool.bs.js
  function toJson6(prim) {
    return prim;
  }
  function fromJson6(json) {
    return fromOption_s(decodeBoolean(json), "JSON is not a valid boolean");
  }

  // src/lib/Float.bs.js
  function toJson7(prim) {
    return prim;
  }
  function fromJson7(j) {
    return fromOption_s(decodeNumber(j), "JSON is not a number (reading Float)");
  }

  // src/view/ModelNode.bs.js
  var React = __toModule(require_react());

  // ../rescript-react-d3-graph/node_modules/rescript/lib/es6/caml_array.js
  function sub2(x5, offset, len) {
    for (var result = new Array(len), j = 0, i = offset; j < len; )
      result[j] = x5[i], j = j + 1 | 0, i = i + 1 | 0;
    return result;
  }

  // ../rescript-react-d3-graph/node_modules/rescript/lib/es6/curry.js
  function app2(_f, _args) {
    for (; ; ) {
      var args = _args, f = _f, init_arity = f.length, arity = init_arity === 0 ? 1 : init_arity, len = args.length, d = arity - len | 0;
      if (d === 0)
        return f.apply(null, args);
      if (d >= 0)
        return function(f2, args2) {
          return function(x5) {
            return app2(f2, args2.concat([x5]));
          };
        }(f, args);
      _args = sub2(args, arity, -d | 0), _f = f.apply(null, sub2(args, 0, arity));
    }
  }
  function _12(o, a0) {
    var arity = o.length;
    if (arity === 1)
      return o(a0);
    switch (arity) {
      case 1:
        return o(a0);
      case 2:
        return function(param) {
          return o(a0, param);
        };
      case 3:
        return function(param, param$1) {
          return o(a0, param, param$1);
        };
      case 4:
        return function(param, param$1, param$2) {
          return o(a0, param, param$1, param$2);
        };
      case 5:
        return function(param, param$1, param$2, param$3) {
          return o(a0, param, param$1, param$2, param$3);
        };
      case 6:
        return function(param, param$1, param$2, param$3, param$4) {
          return o(a0, param, param$1, param$2, param$3, param$4);
        };
      case 7:
        return function(param, param$1, param$2, param$3, param$4, param$5) {
          return o(a0, param, param$1, param$2, param$3, param$4, param$5);
        };
      default:
        return app2(o, [a0]);
    }
  }

  // ../rescript-react-d3-graph/node_modules/rescript/lib/es6/caml_option.js
  function valFromOption2(x5) {
    if (!(x5 !== null && x5.BS_PRIVATE_NESTED_SOME_NONE !== void 0))
      return x5;
    var depth = x5.BS_PRIVATE_NESTED_SOME_NONE;
    if (depth !== 0)
      return {
        BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
      };
  }

  // ../rescript-react-d3-graph/node_modules/rescript/lib/es6/belt_Option.js
  function getWithDefault5(opt, $$default) {
    return opt !== void 0 ? valFromOption2(opt) : $$default;
  }

  // ../rescript-react-d3-graph/src/CoreHelper.js
  var readKey = (o, k2) => o[k2], setKey = (o, k2, v) => {
    var p = { ...o };
    return p[k2] = v, p;
  }, dropUndefinedKeys = (o) => {
    var p = { ...o };
    return Object.keys(p).forEach((key) => {
      p[key] === void 0 && delete p[key];
    }), p;
  }, pack = (a3, b) => {
    var c3 = { ...a3, ...b };
    return c3;
  };

  // ../rescript-react-d3-graph/src/Core.bs.js
  function readKeyExn(prim0, prim1) {
    return readKey(prim0, prim1);
  }
  function readKey2(prim0, prim1) {
    return readKey(prim0, prim1);
  }
  function dropUndefinedKeys2(prim) {
    return dropUndefinedKeys(prim);
  }
  function setKey2(prim0, prim1, prim2) {
    return setKey(prim0, prim1, prim2);
  }
  function pack2(prim0, prim1) {
    return pack(prim0, prim1);
  }

  // ../rescript-react-d3-graph/src/Node.bs.js
  function ofString(t) {
    return t;
  }
  function toString2(t) {
    return t;
  }
  var Id = {
    ofString,
    toString: toString2
  };
  function create5(color2, fontColor, fontSize, fontWeight, highlightColor, highlightFontSize, highlightFontWeight, highlightStrokeColor, highlightStrokeWidth, labelPosition, labelProperty, mouseCursor, opacity, renderLabel, size7, strokeColor, strokeWidth, svg, symbolType, viewGenerator, param) {
    return dropUndefinedKeys2({
      color: color2,
      fontColor,
      fontSize,
      fontWeight,
      highlightColor,
      highlightFontSize,
      highlightFontWeight,
      highlightStrokeColor,
      highlightStrokeWidth,
      labelPosition,
      labelProperty,
      mouseCursor,
      opacity,
      renderLabel,
      size: size7,
      strokeColor,
      strokeWidth,
      svg,
      symbolType,
      viewGenerator
    });
  }
  var Config = {
    create: create5
  };
  function create$1(id7, payload3, config2, x5, y5, param) {
    return dropUndefinedKeys2(pack2({
      id: id7,
      payload: payload3,
      config: void 0,
      x: x5,
      y: y5,
      selected: !1
    }, config2));
  }
  function id(t) {
    return readKeyExn(t, "id");
  }
  function payload(t) {
    return readKey2(t, "payload");
  }
  function x(t) {
    return readKeyExn(t, "x");
  }
  function y(t) {
    return readKeyExn(t, "y");
  }
  function selected(t) {
    return getWithDefault5(readKey2(t, "selected"), !1);
  }
  function updatePayload(t, f) {
    var p = readKey2(t, "payload");
    return dropUndefinedKeys2(setKey2(t, "payload", _12(f, p)));
  }
  function setX(t, x5) {
    return dropUndefinedKeys2(setKey2(t, "x", x5));
  }
  function setY(t, y5) {
    return dropUndefinedKeys2(setKey2(t, "y", y5));
  }

  // src/view/ModelNode.bs.js
  function toJson8(t) {
    var tmp;
    switch (t) {
      case 0:
        tmp = "Representation";
        break;
      case 1:
        tmp = "Scheme";
        break;
      case 2:
        tmp = "Dimension";
        break;
      case 3:
        tmp = "Token";
        break;
    }
    return toJson4(tmp);
  }
  function fromJson8(json) {
    return flatMap2(fromJson4(json), function(s2) {
      switch (s2) {
        case "Dimension":
          return create2(2);
        case "Representation":
          return create2(0);
        case "Scheme":
          return create2(1);
        case "Token":
          return create2(3);
        default:
          return error_ss([
            "Unknown Schema Kind '",
            s2,
            "'"
          ]);
      }
    });
  }
  function toJson$1(t) {
    return fromList({
      hd: [
        "kind",
        toJson8(t.kind)
      ],
      tl: {
        hd: [
          "name",
          toJson4(t.name)
        ],
        tl: {
          hd: [
            "reference",
            toJson4(t.reference)
          ],
          tl: {
            hd: [
              "dashed",
              toJson6(t.dashed)
            ],
            tl: {
              hd: [
                "name_suffix",
                toJson2(t.name_suffix, toJson4)
              ],
              tl: {
                hd: [
                  "reference_suffix",
                  toJson2(t.reference_suffix, toJson4)
                ],
                tl: 0
              }
            }
          }
        }
      }
    });
  }
  function fromJson$12(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode node payload object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, kind = getValue("kind", fromJson8), name2 = getValue("name", fromJson4), reference = getValue("reference", fromJson4), dashed = getValue("dashed", fromJson6), name_suffix = getValue("name_suffix", function(j) {
        return fromJson2(j, fromJson4);
      }), reference_suffix = getValue("reference_suffix", function(j) {
        return fromJson2(j, fromJson4);
      });
      return map4(both6([
        kind,
        name2,
        reference,
        dashed,
        name_suffix,
        reference_suffix
      ]), function(param) {
        return {
          kind: param[0],
          name: param[1],
          name_suffix: param[4],
          reference: param[2],
          reference_suffix: param[5],
          dashed: param[3]
        };
      });
    });
  }
  function data(t) {
    return [t];
  }
  function style(dashedOpt, selected2) {
    var dashed = dashedOpt !== void 0 ? dashedOpt : !1;
    return selected2 && dashed ? {
      fill: "rgb(240, 240, 240)",
      stroke: "black",
      strokeDasharray: "5 3",
      strokeWidth: "2"
    } : selected2 && !dashed ? {
      fill: "rgb(240, 240, 240)",
      stroke: "black",
      strokeWidth: "2"
    } : !selected2 && dashed ? {
      fill: "white",
      stroke: "black",
      strokeDasharray: "5 3",
      strokeWidth: "1"
    } : {
      fill: "white",
      stroke: "black",
      strokeWidth: "1"
    };
  }
  function ModelNode$SchemaShape$Representation(Props) {
    var width = Props.width, height = Props.height, selected2 = Props.selected, children2 = Props.children, radius = String(height / 2);
    return React.createElement("svg", {
      height: String(height + 2),
      width: String(width + 2)
    }, React.createElement("rect", {
      style: style(void 0, selected2),
      height: String(height),
      width: String(width),
      rx: radius,
      ry: radius,
      x: "1",
      y: "1"
    }), children2);
  }
  function ModelNode$SchemaShape$Scheme(Props) {
    var width = Props.width, height = Props.height, selected2 = Props.selected, children2 = Props.children;
    return React.createElement("svg", {
      height: String(height + 2),
      width: String(width + 2)
    }, React.createElement("rect", {
      style: style(void 0, selected2),
      height: String(height),
      width: String(width),
      x: "1",
      y: "1"
    }), children2);
  }
  function ModelNode$SchemaShape$Dimension(Props) {
    var width = Props.width, height = Props.height, selected2 = Props.selected, children2 = Props.children, mkPoint = function(param) {
      return joinWith([
        String(param[0]),
        String(param[1])
      ], ",");
    }, points = [
      [
        8 + 1,
        1
      ],
      [
        width + 1 - 8,
        1
      ],
      [
        width + 1,
        height + 1
      ],
      [
        1,
        height + 1
      ]
    ];
    return React.createElement("svg", {
      height: String(height + 2),
      width: String(width + 2)
    }, React.createElement("polygon", {
      style: style(void 0, selected2),
      points: joinWith(map5(points, mkPoint), " ")
    }), children2);
  }
  function ModelNode$SchemaShape$Token(Props) {
    var width = Props.width, height = Props.height, selected2 = Props.selected, dashed = Props.dashed, children2 = Props.children;
    return React.createElement("svg", {
      height: String(height + 2),
      width: String(width + 2)
    }, React.createElement("rect", {
      style: style(dashed, selected2),
      height: String(height),
      width: String(width),
      rx: "10",
      ry: "10",
      x: "1",
      y: "1"
    }), children2);
  }
  function trim(s2, length3) {
    return s2.length > length3 ? s2.substring(0, 12) + "..." : s2;
  }
  function ModelNode$SchemaText(Props) {
    var topText = Props.topText, bottomText = Props.bottomText, topSuffix = Props.topSuffix, bottomSuffix = Props.bottomSuffix, width = Props.width, height = Props.height, addSuffix = function(first, suff, trimming) {
      return suff !== void 0 ? (trimming ? trim(first, (15 - suff.length | 0) - 2 | 0) : first) + ", " + suff : trimming ? trim(first, 15) : first;
    }, fullTopText = addSuffix(topText, topSuffix, !1), shortTopText = addSuffix(topText, topSuffix, !0), fullBottomText = addSuffix(bottomText, bottomSuffix, !1), shortBottomText = addSuffix(bottomText, bottomSuffix, !0);
    return React.createElement("g", void 0, React.createElement("line", {
      style: {
        fill: "white",
        stroke: "black",
        strokeWidth: "1"
      },
      x1: "8",
      x2: String(width - 8),
      y1: "50%",
      y2: "50%"
    }), React.createElement("text", {
      textAnchor: "middle",
      x: "50%",
      y: String(height / 2 - 5)
    }, React.createElement("title", void 0, fullTopText), shortTopText), React.createElement("text", {
      textAnchor: "middle",
      x: "50%",
      y: String(height - 8)
    }, React.createElement("title", void 0, fullBottomText), shortBottomText));
  }
  function size6(width, height) {
    return {
      width: 10 * width + 20,
      height: 10 * height + 20
    };
  }
  function create6(kind, width, height) {
    switch (kind) {
      case 0:
        return Config.create(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, !1, some(size6(width, height)), void 0, void 0, void 0, void 0, function(node) {
          return React.createElement(ModelNode$SchemaShape$Representation, {
            width,
            height,
            selected: selected(node),
            children: React.createElement(ModelNode$SchemaText, {
              topText: getExn3(payload(node)).name,
              bottomText: getExn3(payload(node)).reference,
              width,
              height
            })
          });
        }, void 0);
      case 1:
        return Config.create(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, !1, some(size6(width, height)), void 0, void 0, void 0, void 0, function(node) {
          return React.createElement(ModelNode$SchemaShape$Scheme, {
            width,
            height,
            selected: selected(node),
            children: React.createElement(ModelNode$SchemaText, {
              topText: getExn3(payload(node)).name,
              bottomText: getExn3(payload(node)).reference,
              width,
              height
            })
          });
        }, void 0);
      case 2:
        return Config.create(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, !1, some(size6(width, height)), void 0, void 0, void 0, void 0, function(node) {
          return React.createElement(ModelNode$SchemaShape$Dimension, {
            width,
            height,
            selected: selected(node),
            children: React.createElement(ModelNode$SchemaText, {
              topText: getExn3(payload(node)).name,
              bottomText: getExn3(payload(node)).reference,
              topSuffix: getExn3(getExn3(payload(node)).name_suffix),
              bottomSuffix: getExn3(getExn3(payload(node)).reference_suffix),
              width,
              height
            })
          });
        }, void 0);
      case 3:
        return Config.create(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, !1, some(size6(width, height)), void 0, void 0, void 0, void 0, function(node) {
          return React.createElement(ModelNode$SchemaShape$Token, {
            width,
            height,
            selected: selected(node),
            dashed: getExn3(payload(node)).dashed,
            children: React.createElement(ModelNode$SchemaText, {
              topText: getExn3(payload(node)).name,
              bottomText: getExn3(payload(node)).reference,
              width,
              height
            })
          });
        }, void 0);
    }
  }
  function create$12(name2, reference, x5, y5, kind, id7) {
    var payload_name_suffix = kind === 2 ? "N" : void 0, payload_reference_suffix = kind === 2 ? "N" : void 0, payload3 = {
      kind,
      name: name2,
      name_suffix: payload_name_suffix,
      reference,
      reference_suffix: payload_reference_suffix,
      dashed: !1
    }, config2 = create6(kind, 170, 50), id$1 = Id.ofString(toString(id7));
    return create$1(id$1, some(payload3), config2, x5, y5, void 0);
  }
  function toJson$23(t) {
    return fromList({
      hd: [
        "payload",
        toJson$1(getExn3(payload(t)))
      ],
      tl: {
        hd: [
          "x",
          toJson7(x(t))
        ],
        tl: {
          hd: [
            "y",
            toJson7(y(t))
          ],
          tl: {
            hd: [
              "id",
              toJson4(Id.toString(id(t)))
            ],
            tl: 0
          }
        }
      }
    });
  }
  function fromJson$22(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode ModelNode object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, payload3 = getValue("payload", fromJson$12), x5 = getValue("x", fromJson7), y5 = getValue("y", fromJson7), id7 = getValue("id", function(json2) {
        return map4(fromJson4(json2), Id.ofString);
      });
      return map4(both4([
        payload3,
        x5,
        y5,
        id7
      ]), function(param) {
        var payload4 = param[0], config2 = create6(payload4.kind, 170, 50);
        return create$1(param[3], payload4, config2, param[1], param[2], void 0);
      });
    });
  }
  function id2(t) {
    return fromString2(Id.toString(id(t)));
  }
  function kind$1(t) {
    return getExn3(payload(t)).kind;
  }
  function setPosition(t, x5, y5) {
    return setY(setX(t, x5), y5);
  }
  function updatePayload2(t, f) {
    return updatePayload(t, function(n) {
      return map6(n, f);
    });
  }

  // ../rescript-react-d3-graph/src/Link.bs.js
  function ofString2(t) {
    return t;
  }
  function toString3(t) {
    return t;
  }
  var Id2 = {
    ofString: ofString2,
    toString: toString3
  };
  function create7(color2, fontColor, fontSize, fontWeight, highlightColor, highlightFontColor, highlightFontSize, highlightFontWeight, labelProperty, mouseCursor, opacity, renderLabel, semanticStrokeWidth, strokeWidth, markerHeight, markerWidth, curveType, strokeDasharray, strokeDashoffset, strokeLinecap, offsetSource, offsetTarget, param) {
    return dropUndefinedKeys2({
      color: color2,
      fontColor,
      fontSize,
      fontWeight,
      highlightColor,
      highlightFontColor,
      highlightFontSize,
      highlightFontWeight,
      labelProperty,
      mouseCursor,
      opacity,
      renderLabel,
      semanticStrokeWidth,
      strokeWidth,
      markerHeight,
      markerWidth,
      type: curveType,
      strokeDasharray,
      strokeDashoffset,
      strokeLinecap,
      offsetSource,
      offsetTarget
    });
  }
  var Config2 = {
    create: create7
  };
  function create$13(source3, target3, id7, payload3, config2, breakpoints, param) {
    return dropUndefinedKeys2(pack2({
      source: source3,
      target: target3,
      id: id7,
      payload: payload3,
      breakpoints,
      selected: !1,
      config: void 0
    }, config2));
  }
  function source(t) {
    return readKeyExn(t, "source");
  }
  function target(t) {
    return readKeyExn(t, "target");
  }
  function id3(t) {
    return readKey2(t, "id");
  }
  function payload2(t) {
    return readKey2(t, "payload");
  }

  // ../rescript-react-d3-graph/node_modules/rescript/lib/es6/caml_exceptions.js
  var id4 = {
    contents: 0
  };
  function create8(str) {
    return id4.contents = id4.contents + 1 | 0, str + ("/" + id4.contents);
  }

  // ../rescript-react-d3-graph/src/Color.bs.js
  var DOMAIN_ERROR = /* @__PURE__ */ create8("Color-ReactD3Graph.DOMAIN_ERROR");
  function isHexString(s2) {
    return /^#(([0-9a-f])|([0-9A-F])){6}$/.test(s2);
  }
  function sliceHexString(s2) {
    var r = s2.slice(1, 3), g = s2.slice(3, 5), b = s2.slice(5, 7);
    return [
      r,
      g,
      b
    ];
  }
  function hexToFloat(h) {
    return Number("0x".concat(h)) / 255;
  }
  function canonOfInternal(s2) {
    if (isHexString(s2)) {
      var match = sliceHexString(s2);
      return {
        red: hexToFloat(match[0]),
        green: hexToFloat(match[1]),
        blue: hexToFloat(match[2])
      };
    }
    throw {
      RE_EXN_ID: DOMAIN_ERROR,
      Error: new Error()
    };
  }
  function internalOfCanon(t) {
    return "#".concat((t.red * 255 | 0).toString(16), (t.green * 255 | 0).toString(16), (t.blue * 255 | 0).toString(16));
  }
  function ofHexString(s2) {
    return internalOfCanon(canonOfInternal(s2));
  }

  // src/view/ModelLink.bs.js
  function toJson9(t) {
    var tmp;
    switch (t) {
      case 0:
        tmp = "Hierarchy";
        break;
      case 1:
        tmp = "Anchor";
        break;
      case 2:
        tmp = "Relation";
        break;
    }
    return toJson4(tmp);
  }
  function fromJson9(json) {
    return flatMap2(fromJson4(json), function(s2) {
      switch (s2) {
        case "Anchor":
          return create2(1);
        case "Hierarchy":
          return create2(0);
        case "Relation":
          return create2(2);
        default:
          return error_ss([
            "Unknown relation value '",
            s2,
            "'"
          ]);
      }
    });
  }
  function data2(t) {
    return [t];
  }
  var hierarchy = Config2.create(some(ofHexString("#000000")), void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 1, void 0, void 0, void 0, void 0, void 0, void 0, {
    dx: 0,
    dy: 25
  }, {
    dx: 0,
    dy: -25
  }, void 0), anchor = Config2.create(some(ofHexString("#000000")), void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 2, void 0, void 0, void 0, 5, void 0, void 0, {
    dx: 0,
    dy: 25
  }, {
    dx: 0,
    dy: -25
  }, void 0), relation = Config2.create(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0);
  function create$14(source3, target3, kind) {
    var config2;
    switch (kind) {
      case 0:
        config2 = hierarchy;
        break;
      case 1:
        config2 = anchor;
        break;
      case 2:
        config2 = relation;
        break;
    }
    return create$13(Id.ofString(toString(id2(source3))), Id.ofString(toString(id2(target3))), void 0, kind, config2, void 0, void 0);
  }
  function source2(t) {
    return fromString2(Id.toString(source(t)));
  }
  function target2(t) {
    return fromString2(Id.toString(target(t)));
  }
  function toJson$12(t) {
    return fromList({
      hd: [
        "source",
        toJson5(source2(t))
      ],
      tl: {
        hd: [
          "target",
          toJson5(target2(t))
        ],
        tl: {
          hd: [
            "id",
            toJson2(map6(id3(t), Id2.toString), toJson4)
          ],
          tl: {
            hd: [
              "payload",
              toJson2(payload2(t), toJson9)
            ],
            tl: 0
          }
        }
      }
    });
  }
  function fromJson$13(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode ModelLink object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, source3 = getValue("source", fromJson5), target3 = getValue("target", fromJson5), id7 = getValue("id", function(json2) {
        return map4(fromJson2(json2, fromJson4), function(s2) {
          return map6(s2, Id2.ofString);
        });
      }), payload3 = getValue("payload", function(json2) {
        return fromJson2(json2, fromJson9);
      });
      return map4(both4([
        source3,
        target3,
        id7,
        payload3
      ]), function(param) {
        var source4 = Id.ofString(toString(param[0])), target4 = Id.ofString(toString(param[1])), payload4 = getWithDefault2(param[3], 0), config2;
        switch (payload4) {
          case 0:
            config2 = hierarchy;
            break;
          case 1:
            config2 = anchor;
            break;
          case 2:
            config2 = relation;
            break;
        }
        return create$13(source4, target4, param[2], payload4, config2, void 0, void 0);
      });
    });
  }

  // src/view/ModelGraph.bs.js
  function toJson10(t) {
    return fromList({
      hd: [
        "nodes",
        toJson(t.nodes, toJson$23)
      ],
      tl: {
        hd: [
          "links",
          toJson(t.links, toJson$12)
        ],
        tl: 0
      }
    });
  }
  function fromJson10(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode Graph object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, nodes3 = getValue("nodes", function(j) {
        return fromJson(j, fromJson$22);
      }), links2 = getValue("links", function(j) {
        return fromJson(j, fromJson$13);
      });
      return map4(both([
        nodes3,
        links2
      ]), function(param) {
        return {
          nodes: param[0],
          links: param[1]
        };
      });
    });
  }
  var empty_nodes = [], empty_links = [], empty2 = {
    nodes: empty_nodes,
    links: empty_links
  };
  function nodes(t) {
    return t.nodes;
  }
  function links(t) {
    return t.links;
  }
  function addNodes(t, nodes3) {
    return {
      nodes: concat3(t.nodes, nodes3),
      links: t.links
    };
  }
  function addNode(t, node) {
    return addNodes(t, [node]);
  }
  function removeNode(t, nodeId) {
    return {
      nodes: filter(t.nodes, function(node) {
        return caml_notequal(id2(node), nodeId);
      }),
      links: filter(t.links, function(link2) {
        return caml_notequal(source2(link2), nodeId) ? caml_notequal(target2(link2), nodeId) : !1;
      })
    };
  }
  function mapNodes(t, f) {
    return {
      nodes: map5(t.nodes, f),
      links: t.links
    };
  }
  function addLinks(t, links2) {
    return {
      nodes: t.nodes,
      links: concat3(t.links, links2)
    };
  }
  function addLink(t, link2) {
    return addLinks(t, [link2]);
  }
  function removeLinks(t, toRemove) {
    return {
      nodes: t.nodes,
      links: filter(t.links, function(link2) {
        return !includes(toRemove, link2);
      })
    };
  }

  // ../rescript-react-d3-graph/src/Graph.bs.js
  var ReactD3Graph = __toModule(require_lib()), empty_nodes2 = [], empty_links2 = [], empty4 = {
    nodes: empty_nodes2,
    links: empty_links2
  }, $$Selection = {
    empty: empty4
  }, make5 = ReactD3Graph.Graph;

  // src/view/ModelSelection.bs.js
  function toJson11(t) {
    return fromList({
      hd: [
        "nodes",
        toJson(map5(t.nodes, Id.toString), toJson4)
      ],
      tl: {
        hd: [
          "links",
          toJson(map5(t.links, Id2.toString), toJson4)
        ],
        tl: 0
      }
    });
  }
  function fromJson11(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode selection object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, nodes3 = getValue("nodes", function(json2) {
        return map4(fromJson(json2, fromJson4), function(arr) {
          return map5(arr, Id.ofString);
        });
      }), links2 = getValue("links", function(json2) {
        return map4(fromJson(json2, fromJson4), function(arr) {
          return map5(arr, Id2.ofString);
        });
      });
      return map4(both([
        nodes3,
        links2
      ]), function(param) {
        return {
          nodes: param[0],
          links: param[1]
        };
      });
    });
  }
  var empty5 = $$Selection.empty;
  function nodes2(t) {
    return map5(t.nodes, function(id7) {
      return fromString2(Id.toString(id7));
    });
  }

  // src/view/ModelState.bs.js
  function toJson12(t) {
    return fromList({
      hd: [
        "graph",
        toJson10(t.graph)
      ],
      tl: {
        hd: [
          "selection",
          toJson11(t.selection)
        ],
        tl: 0
      }
    });
  }
  function fromJson12(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode state object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, graph2 = getValue("graph", fromJson10), selection3 = getValue("selection", fromJson11);
      return map4(both([
        graph2,
        selection3
      ]), function(param) {
        var graph3 = param[0], nodeMap = $$Map.fromArray(map5(nodes(graph3), function(node) {
          return [
            id2(node),
            node
          ];
        }));
        return {
          graph: graph3,
          selection: param[1],
          nodeMap
        };
      });
    });
  }
  var empty_nodeMap = $$Map.empty(void 0), empty6 = {
    graph: empty2,
    selection: empty5,
    nodeMap: empty_nodeMap
  };
  function graph(t) {
    return t.graph;
  }
  function data3(t) {
    return {
      nodes: flatMap3(nodes(t.graph), data),
      links: flatMap3(links(t.graph), data2)
    };
  }
  function nodeWithId(t, nodeId) {
    return $$Map.get(t.nodeMap, nodeId);
  }
  function addNode2(t, node) {
    return {
      graph: addNode(t.graph, node),
      selection: t.selection,
      nodeMap: $$Map.set(t.nodeMap, id2(node), node)
    };
  }
  function updateNodes(t, f) {
    return {
      graph: mapNodes(t.graph, f),
      selection: t.selection,
      nodeMap: t.nodeMap
    };
  }
  function removeNode2(t, nodeId) {
    return {
      graph: removeNode(t.graph, nodeId),
      selection: t.selection,
      nodeMap: $$Map.remove(t.nodeMap, nodeId)
    };
  }
  function addLink2(t, link2) {
    return {
      graph: addLink(t.graph, link2),
      selection: t.selection,
      nodeMap: t.nodeMap
    };
  }
  function removeLinks2(t, links2) {
    return {
      graph: removeLinks(t.graph, links2),
      selection: t.selection,
      nodeMap: t.nodeMap
    };
  }
  function selection2(t) {
    return t.selection;
  }
  function setSelection(t, selection3) {
    return {
      graph: t.graph,
      selection: selection3,
      nodeMap: t.nodeMap
    };
  }

  // src/lib/LocalStorage.bs.js
  var partial_arg = localStorage;
  function setItem(param, param$1) {
    partial_arg.setItem(param, param$1);
  }
  function getItem(key) {
    return nullable_to_opt(localStorage.getItem(key));
  }
  var partial_arg$1 = localStorage;
  function removeItem(param) {
    partial_arg$1.removeItem(param);
  }
  var partial_arg$2 = localStorage;
  function clear(param) {
    partial_arg$2.clear();
  }
  function length2(param) {
    return localStorage.length;
  }
  var Raw = {
    setItem,
    getItem,
    removeItem,
    clear,
    length: length2
  };
  function MakeJsonable(S) {
    var set6 = function(key, t) {
      return _2(setItem, key, JSON.stringify(_1(S.toJson, t)));
    }, get11 = function(key) {
      var s2 = localStorage.getItem(key);
      if (s2 == null)
        return error_ss([
          "Unable to retrieve from storage '",
          key,
          "'"
        ]);
      var tmp;
      try {
        tmp = create2(JSON.parse(s2 == null ? void 0 : some(s2)));
      } catch {
        tmp = error_s("Failed to load state");
      }
      return flatMap2(tmp, S.fromJson);
    }, $$delete = __1(removeItem);
    return {
      set: set6,
      get: get11,
      $$delete
    };
  }

  // src/model/Scope.bs.js
  function toString4(t) {
    return t ? "Local" : "Global";
  }
  function fromString4(s2) {
    switch (s2) {
      case "Global":
        return 0;
      case "Local":
        return 1;
      default:
        return;
    }
  }
  function toJson13(t) {
    return toJson4(t ? "Local" : "Global");
  }
  function fromJson13(json) {
    return flatMap2(fromJson4(json), function(s2) {
      return fromOption_ss(fromString4(s2), [
        "Scope '",
        s2,
        "' is not one of Global or Local"
      ]);
    });
  }
  var all3 = [
    0,
    1
  ];

  // src/model/Function.bs.js
  function toString5(t) {
    switch (t) {
      case 0:
        return "Semantic";
      case 1:
        return "Auxiliary";
      case 2:
        return "Arbitrary";
    }
  }
  function fromString5(s2) {
    switch (s2) {
      case "Arbitrary":
        return 2;
      case "Auxiliary":
        return 1;
      case "Semantic":
        return 0;
      default:
        return;
    }
  }
  function toJson14(t) {
    return toJson4(toString5(t));
  }
  function fromJson14(json) {
    return flatMap2(fromJson4(json), function(s2) {
      return fromOption_ss(fromString5(s2), [
        "Function '",
        s2,
        "' is not one of Semantic, Auxiliary, or Arbitrary"
      ]);
    });
  }
  var all4 = [
    0,
    1,
    2
  ];

  // src/model/Quantity_scale.bs.js
  function toString6(t) {
    switch (t) {
      case 0:
        return "Nominal";
      case 1:
        return "Ordinal";
      case 2:
        return "Interval";
      case 3:
        return "Ratio";
    }
  }
  function fromString6(s2) {
    switch (s2) {
      case "Interval":
        return 2;
      case "Nominal":
        return 0;
      case "Ordinal":
        return 1;
      case "Ratio":
        return 3;
      default:
        return;
    }
  }
  function toJson15(t) {
    return toJson4(toString6(t));
  }
  function fromJson15(json) {
    return flatMap2(fromJson4(json), function(s2) {
      return fromOption_ss(fromString6(s2), [
        "Quantity scale '",
        s2,
        "' is not one of Nominal, Ordinal, Interval, or Ratio"
      ]);
    });
  }
  var all5 = [
    0,
    1,
    2,
    3
  ];

  // src/model/Concept_attribute.bs.js
  var toJson16 = toJson4, fromJson16 = fromJson4;

  // src/model/Graphic_attribute.bs.js
  var toJson17 = toJson4, fromJson17 = fromJson4;

  // src/view/InspectorState.bs.js
  function toJson18(t) {
    return fromList({
      hd: [
        "domain",
        toJson4(t.domain)
      ],
      tl: {
        hd: [
          "display",
          toJson4(t.display)
        ],
        tl: {
          hd: [
            "notes",
            toJson4(t.notes)
          ],
          tl: 0
        }
      }
    });
  }
  function fromJson18(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, domain = getValue("domain", fromJson4), display = getValue("display", fromJson4), notes = getValue("notes", fromJson4);
      return map4(both3([
        domain,
        display,
        notes
      ]), function(param) {
        return {
          domain: param[0],
          display: param[1],
          notes: param[2]
        };
      });
    });
  }
  function applyEvent(t, $$event) {
    switch ($$event.TAG | 0) {
      case 0:
        return {
          domain: $$event._0,
          display: t.display,
          notes: t.notes
        };
      case 1:
        return {
          domain: t.domain,
          display: $$event._0,
          notes: t.notes
        };
      case 2:
        return {
          domain: t.domain,
          display: t.display,
          notes: $$event._0
        };
    }
  }
  function toJson$13(t) {
    return fromList({
      hd: [
        "concept_structure",
        toJson4(t.concept_structure)
      ],
      tl: {
        hd: [
          "graphic_structure",
          toJson4(t.graphic_structure)
        ],
        tl: {
          hd: [
            "function",
            toJson14(t.function)
          ],
          tl: {
            hd: [
              "explicit",
              toJson6(t.explicit)
            ],
            tl: {
              hd: [
                "scope",
                toJson13(t.scope)
              ],
              tl: {
                hd: [
                  "organisation",
                  toJson4(t.organisation)
                ],
                tl: {
                  hd: [
                    "notes",
                    toJson4(t.notes)
                  ],
                  tl: 0
                }
              }
            }
          }
        }
      }
    });
  }
  function fromJson$14(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, concept_structure = getValue("concept_structure", fromJson4), graphic_structure = getValue("graphic_structure", fromJson4), $$function = getValue("function", fromJson14), explicit = getValue("explicit", fromJson6), scope = getValue("scope", fromJson13), organisation = getValue("organisation", fromJson4), notes = getValue("notes", fromJson4);
      return map4(both7([
        concept_structure,
        graphic_structure,
        $$function,
        explicit,
        scope,
        organisation,
        notes
      ]), function(param) {
        return {
          concept_structure: param[0],
          graphic_structure: param[1],
          function: param[2],
          explicit: param[3],
          scope: param[4],
          organisation: param[5],
          notes: param[6]
        };
      });
    });
  }
  function applyEvent$1(t, e2) {
    switch (e2.TAG | 0) {
      case 0:
        return {
          concept_structure: e2._0,
          graphic_structure: t.graphic_structure,
          function: t.function,
          explicit: t.explicit,
          scope: t.scope,
          organisation: t.organisation,
          notes: t.notes
        };
      case 1:
        return {
          concept_structure: t.concept_structure,
          graphic_structure: e2._0,
          function: t.function,
          explicit: t.explicit,
          scope: t.scope,
          organisation: t.organisation,
          notes: t.notes
        };
      case 2:
        return {
          concept_structure: t.concept_structure,
          graphic_structure: t.graphic_structure,
          function: e2._0,
          explicit: t.explicit,
          scope: t.scope,
          organisation: t.organisation,
          notes: t.notes
        };
      case 3:
        return {
          concept_structure: t.concept_structure,
          graphic_structure: t.graphic_structure,
          function: t.function,
          explicit: e2._0,
          scope: t.scope,
          organisation: t.organisation,
          notes: t.notes
        };
      case 4:
        return {
          concept_structure: t.concept_structure,
          graphic_structure: t.graphic_structure,
          function: t.function,
          explicit: t.explicit,
          scope: e2._0,
          organisation: t.organisation,
          notes: t.notes
        };
      case 5:
        return {
          concept_structure: t.concept_structure,
          graphic_structure: t.graphic_structure,
          function: t.function,
          explicit: t.explicit,
          scope: t.scope,
          organisation: e2._0,
          notes: t.notes
        };
      case 6:
        return {
          concept_structure: t.concept_structure,
          graphic_structure: t.graphic_structure,
          function: t.function,
          explicit: t.explicit,
          scope: t.scope,
          organisation: t.organisation,
          notes: e2._0
        };
    }
  }
  function toJson$24(t) {
    return fromList({
      hd: [
        "concept",
        toJson4(t.concept)
      ],
      tl: {
        hd: [
          "concept_scale",
          toJson15(t.concept_scale)
        ],
        tl: {
          hd: [
            "concept_attributes",
            toJson3(t.concept_attributes, toJson16)
          ],
          tl: {
            hd: [
              "graphic",
              toJson4(t.graphic)
            ],
            tl: {
              hd: [
                "graphic_scale",
                toJson15(t.graphic_scale)
              ],
              tl: {
                hd: [
                  "graphic_attributes",
                  toJson3(t.graphic_attributes, toJson17)
                ],
                tl: {
                  hd: [
                    "function",
                    toJson14(t.function)
                  ],
                  tl: {
                    hd: [
                      "scope",
                      toJson13(t.scope)
                    ],
                    tl: {
                      hd: [
                        "explicit",
                        toJson6(t.explicit)
                      ],
                      tl: {
                        hd: [
                          "organisation",
                          toJson4(t.organisation)
                        ],
                        tl: {
                          hd: [
                            "notes",
                            toJson4(t.notes)
                          ],
                          tl: 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });
  }
  function fromJson$23(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, concept = getValue("concept", fromJson4), concept_scale = getValue("concept_scale", fromJson15), concept_attributes = getValue("concept_attributes", function(j) {
        return fromJson3(j, fromJson16);
      }), graphic = getValue("graphic", fromJson4), graphic_scale = getValue("graphic_scale", fromJson15), graphic_attributes = getValue("graphic_attributes", function(j) {
        return fromJson3(j, fromJson17);
      }), $$function = getValue("function", fromJson14), scope = getValue("scope", fromJson13), explicit = getValue("explicit", fromJson6), organisation = getValue("organisation", fromJson4), notes = getValue("notes", fromJson4);
      return map4(both11([
        concept,
        concept_scale,
        concept_attributes,
        graphic,
        graphic_scale,
        graphic_attributes,
        $$function,
        scope,
        explicit,
        organisation,
        notes
      ]), function(param) {
        return {
          concept: param[0],
          concept_scale: param[1],
          concept_attributes: param[2],
          graphic: param[3],
          graphic_scale: param[4],
          graphic_attributes: param[5],
          function: param[6],
          scope: param[7],
          explicit: param[8],
          organisation: param[9],
          notes: param[10]
        };
      });
    });
  }
  function applyEvent$2(t, $$event) {
    switch ($$event.TAG | 0) {
      case 0:
        return {
          concept: $$event._0,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: t.scope,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: t.notes
        };
      case 1:
        return {
          concept: t.concept,
          concept_scale: $$event._0,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: t.scope,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: t.notes
        };
      case 2:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: $$event._0,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: t.scope,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: t.notes
        };
      case 3:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: $$event._0,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: t.scope,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: t.notes
        };
      case 4:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: $$event._0,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: t.scope,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: t.notes
        };
      case 5:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: $$event._0,
          function: t.function,
          scope: t.scope,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: t.notes
        };
      case 6:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: $$event._0,
          scope: t.scope,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: t.notes
        };
      case 7:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: $$event._0,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: t.notes
        };
      case 8:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: t.scope,
          explicit: $$event._0,
          organisation: t.organisation,
          notes: t.notes
        };
      case 9:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: t.scope,
          explicit: t.explicit,
          organisation: $$event._0,
          notes: t.notes
        };
      case 10:
        return {
          concept: t.concept,
          concept_scale: t.concept_scale,
          concept_attributes: t.concept_attributes,
          graphic: t.graphic,
          graphic_scale: t.graphic_scale,
          graphic_attributes: t.graphic_attributes,
          function: t.function,
          scope: t.scope,
          explicit: t.explicit,
          organisation: t.organisation,
          notes: $$event._0
        };
    }
  }
  function toJson$3(t) {
    return fromList({
      hd: [
        "concept",
        toJson4(t.concept)
      ],
      tl: {
        hd: [
          "graphic",
          toJson4(t.graphic)
        ],
        tl: {
          hd: [
            "is_class",
            toJson6(t.is_class)
          ],
          tl: {
            hd: [
              "function",
              toJson14(t.function)
            ],
            tl: {
              hd: [
                "explicit",
                toJson6(t.explicit)
              ],
              tl: {
                hd: [
                  "notes",
                  toJson4(t.notes)
                ],
                tl: 0
              }
            }
          }
        }
      }
    });
  }
  function fromJson$3(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, concept = getValue("concept", fromJson4), graphic = getValue("graphic", fromJson4), is_class = getValue("is_class", fromJson6), $$function = getValue("function", fromJson14), explicit = getValue("explicit", fromJson6), notes = getValue("notes", fromJson4);
      return map4(both6([
        concept,
        graphic,
        is_class,
        $$function,
        explicit,
        notes
      ]), function(param) {
        return {
          concept: param[0],
          graphic: param[1],
          is_class: param[2],
          function: param[3],
          explicit: param[4],
          notes: param[5]
        };
      });
    });
  }
  function applyEvent$3(t, $$event) {
    switch ($$event.TAG | 0) {
      case 0:
        return {
          concept: $$event._0,
          graphic: t.graphic,
          is_class: t.is_class,
          function: t.function,
          explicit: t.explicit,
          notes: t.notes
        };
      case 1:
        return {
          concept: t.concept,
          graphic: $$event._0,
          is_class: t.is_class,
          function: t.function,
          explicit: t.explicit,
          notes: t.notes
        };
      case 2:
        return {
          concept: t.concept,
          graphic: t.graphic,
          is_class: $$event._0,
          function: t.function,
          explicit: t.explicit,
          notes: t.notes
        };
      case 3:
        return {
          concept: t.concept,
          graphic: t.graphic,
          is_class: t.is_class,
          function: $$event._0,
          explicit: t.explicit,
          notes: t.notes
        };
      case 4:
        return {
          concept: t.concept,
          graphic: t.graphic,
          is_class: t.is_class,
          function: t.function,
          explicit: $$event._0,
          notes: t.notes
        };
      case 5:
        return {
          concept: t.concept,
          graphic: t.graphic,
          is_class: t.is_class,
          function: t.function,
          explicit: t.explicit,
          notes: $$event._0
        };
    }
  }
  function toJson$4(t) {
    var match;
    switch (t.TAG | 0) {
      case 0:
        match = [
          "representation",
          toJson18(t._0)
        ];
        break;
      case 1:
        match = [
          "scheme",
          toJson$13(t._0)
        ];
        break;
      case 2:
        match = [
          "dimension",
          toJson$24(t._0)
        ];
        break;
      case 3:
        match = [
          "token",
          toJson$3(t._0)
        ];
        break;
    }
    return fromList({
      hd: [
        "kind",
        toJson4(match[0])
      ],
      tl: {
        hd: [
          "value",
          match[1]
        ],
        tl: 0
      }
    });
  }
  function fromJson$4(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, kind = getValue("kind", fromJson4), value = getValue("value", create2);
      return flatMap2(both([
        kind,
        value
      ]), function(param) {
        var value2 = param[1], kind2 = param[0];
        switch (kind2) {
          case "dimension":
            return map4(fromJson$23(value2), function(d) {
              return {
                TAG: 2,
                _0: d
              };
            });
          case "representation":
            return map4(fromJson18(value2), function(r) {
              return {
                TAG: 0,
                _0: r
              };
            });
          case "scheme":
            return map4(fromJson$14(value2), function(s2) {
              return {
                TAG: 1,
                _0: s2
              };
            });
          case "token":
            return map4(fromJson$3(value2), function(t) {
              return {
                TAG: 3,
                _0: t
              };
            });
          default:
            return error_ss([
              "Unknown Schema slot kind '",
              kind2,
              "'"
            ]);
        }
      });
    });
  }
  function applyEvent$4(t, $$event) {
    switch (t.TAG | 0) {
      case 0:
        return $$event.TAG === 0 ? {
          TAG: 0,
          _0: applyEvent(t._0, $$event._0)
        } : t;
      case 1:
        return $$event.TAG === 1 ? {
          TAG: 1,
          _0: applyEvent$1(t._0, $$event._0)
        } : t;
      case 2:
        return $$event.TAG === 2 ? {
          TAG: 2,
          _0: applyEvent$2(t._0, $$event._0)
        } : t;
      case 3:
        return $$event.TAG === 3 ? {
          TAG: 3,
          _0: applyEvent$3(t._0, $$event._0)
        } : t;
    }
  }
  var Schema = {
    toJson: toJson$4,
    fromJson: fromJson$4,
    applyEvent: applyEvent$4
  }, Representation = {
    empty: {
      domain: "Representation",
      display: "Reference",
      notes: ""
    }
  }, Scheme = {
    empty: {
      concept_structure: "Scheme",
      graphic_structure: "Reference",
      function: 0,
      explicit: !0,
      scope: 0,
      organisation: "",
      notes: ""
    }
  }, Dimension = {
    empty: {
      concept: "Dimension",
      concept_scale: 0,
      concept_attributes: 0,
      graphic: "Reference",
      graphic_scale: 0,
      graphic_attributes: 0,
      function: 0,
      scope: 0,
      explicit: !0,
      organisation: "",
      notes: ""
    }
  }, Token = {
    empty: {
      concept: "Token",
      graphic: "Reference",
      is_class: !1,
      function: 0,
      explicit: !0,
      notes: ""
    }
  };

  // src/view/State.bs.js
  function toJson19(t) {
    return fromList({
      hd: [
        "id",
        toJson5(t.id)
      ],
      tl: {
        hd: [
          "name",
          toJson4(t.name)
        ],
        tl: {
          hd: [
            "model",
            toJson12(t.model)
          ],
          tl: {
            hd: [
              "slots",
              $$Map.toJson(t.slots, Schema.toJson)
            ],
            tl: 0
          }
        }
      }
    });
  }
  function fromJson19(json) {
    return flatMap2(fromOption_s(decodeObject(json), "Failed to decode Model state object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get3(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      }, id7 = getValue("id", fromJson5), name2 = getValue("name", fromJson4), model2 = getValue("model", fromJson12), slots = getValue("slots", function(j) {
        return $$Map.fromJson(j, Schema.fromJson);
      });
      return map4(both4([
        id7,
        name2,
        model2,
        slots
      ]), function(param) {
        return {
          id: param[0],
          name: param[1],
          model: param[2],
          slots: param[3]
        };
      });
    });
  }
  var T = {
    toJson: toJson19,
    fromJson: fromJson19
  }, $$Storage = MakeJsonable(T);
  function store(t) {
    return _2($$Storage.set, "RepNotation:Model:" + toString(t.id), t);
  }
  function load(id7) {
    return _1($$Storage.get, "RepNotation:Model:" + toString(id7));
  }
  function id6(t) {
    return t.id;
  }
  function model(t) {
    return t.model;
  }
  function name(t) {
    return t.name;
  }
  function create10(id7, name2) {
    return {
      id: id7,
      name: name2,
      model: empty6,
      slots: $$Map.empty(void 0)
    };
  }
  function store$1(t) {
    return _2(Raw.setItem, "RepNotation:CurrentModel", JSON.stringify(toJson2(t.currentModel, toJson5))), _2(Raw.setItem, "RepNotation:AllModels", JSON.stringify(toJson(map5(t.models, id6), toJson5))), forEach2(t.models, store);
  }
  function load$1(param) {
    var currentModel2 = flatMap4(Raw.getItem("RepNotation:CurrentModel"), function(s2) {
      var json;
      try {
        json = create2(JSON.parse(s2));
      } catch {
        json = error_s("Badly stored currentModel");
      }
      return toOption(flatMap2(json, function(json2) {
        return fromJson2(json2, fromJson5);
      }));
    }), models2 = flatMap4(Raw.getItem("RepNotation:AllModels"), function(s2) {
      var json;
      try {
        json = create2(JSON.parse(s2));
      } catch {
        json = error_s("Badly stored allModels");
      }
      return flatten(toOption(map4(map4(flatMap2(json, function(json2) {
        return fromJson(json2, fromJson5);
      }), function(arr) {
        return map5(arr, function(id7) {
          return toOption(load(id7));
        });
      }), all2)));
    });
    return map6(both2([
      currentModel2,
      models2
    ]), function(param2) {
      return {
        models: param2[1],
        currentModel: param2[0]
      };
    });
  }
  function dump(t) {
    return fromList({
      hd: [
        "RepNotation:CurrentModel",
        toJson2(t.currentModel, toJson5)
      ],
      tl: {
        hd: [
          "RepNotation:AllModels",
          toJson(map5(t.models, id6), toJson5)
        ],
        tl: {
          hd: [
            "model_data",
            toJson(t.models, toJson19)
          ],
          tl: 0
        }
      }
    });
  }
  var empty_models = [], empty7 = {
    models: empty_models,
    currentModel: void 0
  };
  function currentModel(t) {
    return find(t.models, function(model2) {
      return getWithDefault2(map6(t.currentModel, function(id7) {
        return caml_equal(model2.id, id7);
      }), !1);
    });
  }
  function focusedId(t) {
    return t.currentModel;
  }
  function models(t) {
    return t.models;
  }
  function createModel(t, id7) {
    return {
      models: concat3(t.models, [create10(id7, "Model")]),
      currentModel: some(id7)
    };
  }
  function deleteModel(t, id7) {
    _1(Raw.removeItem, "RepNotation:Model:" + toString(id7));
    var currentModel2 = getWithDefault2(map6(t.currentModel, function(current) {
      return caml_equal(current, id7);
    }), !1) ? void 0 : t.currentModel;
    return {
      models: filter(t.models, function(m2) {
        return caml_notequal(m2.id, id7);
      }),
      currentModel: currentModel2
    };
  }
  function focusModel(t, id7) {
    return {
      models: t.models,
      currentModel: some(id7)
    };
  }
  function renameModel(t, id7, name2) {
    return {
      models: map5(t.models, function(m2) {
        return caml_equal(m2.id, id7) ? {
          id: m2.id,
          name: name2,
          model: m2.model,
          slots: m2.slots
        } : m2;
      }),
      currentModel: t.currentModel
    };
  }
  function modelState(t) {
    return getWithDefault2(map6(currentModel(t), model), empty6);
  }
  function inspectorState(t) {
    return getWithDefault2(flatMap4(currentModel(t), function(model2) {
      var selection3 = selection2(model2.model), match = nodes2(selection3), len = match.length;
      if (len !== 1)
        return len !== 0 ? 1 : 0;
      var nodeId = match[0];
      return map6($$Map.get(model2.slots, nodeId), function(s2) {
        return {
          _0: s2
        };
      });
    }), 0);
  }
  function _set(arr, id7, f) {
    return map5(arr, function(m2) {
      return getWithDefault2(map6(id7, function(id8) {
        return caml_equal(m2.id, id8);
      }), !1) ? _1(f, m2) : m2;
    });
  }
  function _setM(arr, id7, model2) {
    return _set(arr, id7, function(oldModel) {
      return {
        id: oldModel.id,
        name: oldModel.name,
        model: model2,
        slots: oldModel.slots
      };
    });
  }
  function _setI(arr, id7, key, inspector) {
    return _set(arr, id7, function(oldModel) {
      return {
        id: oldModel.id,
        name: oldModel.name,
        model: oldModel.model,
        slots: $$Map.update(oldModel.slots, key, function(param) {
          return inspector;
        })
      };
    });
  }
  function updateModel(t, model2) {
    return {
      models: _setM(t.models, t.currentModel, model2),
      currentModel: t.currentModel
    };
  }
  function updateSlots(t, key, inspector) {
    return {
      models: _setI(t.models, t.currentModel, key, inspector),
      currentModel: t.currentModel
    };
  }
  var Model = {
    id: id6,
    name
  };

  // src/App.bs.js
  var React5 = __toModule(require_react());

  // src/view/Action.bs.js
  function dispatch2(state, action) {
    switch (action.TAG | 0) {
      case 0:
        return createModel(state, action._0);
      case 1:
        return deleteModel(state, action._0);
      case 2:
        return focusModel(state, action._0);
      case 3:
        return renameModel(state, action._0, action._1);
      case 4:
        var kind = action._0, id7 = action._1, slots;
        switch (kind) {
          case 0:
            slots = {
              TAG: 0,
              _0: Representation.empty
            };
            break;
          case 1:
            slots = {
              TAG: 1,
              _0: Scheme.empty
            };
            break;
          case 2:
            slots = {
              TAG: 2,
              _0: Dimension.empty
            };
            break;
          case 3:
            slots = {
              TAG: 3,
              _0: Token.empty
            };
            break;
        }
        return updateSlots(state, id7, slots);
      case 5:
        return updateSlots(state, action._0, void 0);
    }
  }

  // src/view/Button.bs.js
  var React2 = __toModule(require_react());
  function Button$Separator(Props) {
    return React2.createElement("span", {
      style: {
        display: "inline-block",
        width: "2rem"
      }
    });
  }
  var Separator = {
    make: Button$Separator
  };
  function Button(Props) {
    var onClick = Props.onClick, givenStyle = Props.style, children2 = Props.children, newStyle = {
      fontSize: "small",
      margin: "0.125rem 0.25rem",
      padding: "0.2rem 0.3rem"
    }, style2 = givenStyle !== void 0 ? Object.assign({}, newStyle, valFromOption(givenStyle)) : newStyle;
    return React2.createElement("button", {
      style: style2,
      onClick
    }, children2);
  }
  var make6 = Button;

  // src/view/FilePanel.bs.js
  var React3 = __toModule(require_react());

  // node_modules/rescript/lib/es6/caml_external_polyfill.js
  var getGlobalThis = function() {
    if (typeof globalThis != "undefined")
      return globalThis;
    if (typeof self != "undefined")
      return self;
    if (typeof window != "undefined")
      return window;
    if (typeof global != "undefined")
      return global;
    if (typeof this != "undefined")
      return this;
    throw new Error("Unable to locate global `this`");
  }, resolve = function(s2) {
    var myGlobal = getGlobalThis();
    if (myGlobal[s2] === void 0)
      throw new Error(s2 + ` not polyfilled by ReScript yet
`);
    return myGlobal[s2];
  };

  // src/view/FilePanel.bs.js
  function reducer(state, action) {
    if (typeof action == "number")
      return {
        savedName: state.savedName,
        currName: state.currName,
        editing: !0
      };
    if (action.TAG === 0)
      return {
        savedName: state.savedName,
        currName: action._0,
        editing: state.editing
      };
    var name2 = action._0;
    return {
      savedName: name2,
      currName: name2,
      editing: !1
    };
  }
  function FilePanel$FileLabel(Props) {
    var id7 = Props.id, name2 = Props.name, active = Props.active, onSelect = Props.onSelect, onChanged = Props.onChanged, match = React3.useReducer(reducer, {
      savedName: name2,
      currName: name2,
      editing: !1
    }), dispatch5 = match[1], state = match[0];
    return React3.createElement("span", {
      key: toString(id7),
      className: active ? "file-active" : "file-inactive",
      id: "file-label-" + toString(id7),
      style: {
        background: active ? "lightgrey" : "white",
        display: "block",
        padding: "0.5rem"
      },
      onClick: function(param) {
        return _1(onSelect, void 0);
      }
    }, state.editing ? React3.createElement("input", {
      style: {
        borderWidth: "0",
        fontSize: "1rem",
        margin: "0",
        padding: "0"
      },
      autoFocus: !0,
      value: state.currName,
      onKeyPress: function(e2) {
        if (e2.key === "Enter") {
          var newName = e2.target.value;
          return _1(dispatch5, {
            TAG: 1,
            _0: newName
          }), _1(onChanged, newName);
        }
      },
      onBlur: function(e2) {
        var newName = e2.target.value;
        return _1(dispatch5, {
          TAG: 1,
          _0: newName
        }), _1(onChanged, newName);
      },
      onChange: function(e2) {
        return _1(dispatch5, {
          TAG: 0,
          _0: e2.target.value
        });
      }
    }) : React3.createElement("span", {
      className: "inner-name-focus inner-name-not-editing",
      onClick: function(param) {
        return _1(dispatch5, 0);
      }
    }, state.currName));
  }
  function FilePanel(Props) {
    var id7 = Props.id, models2 = Props.models, active = Props.active, onCreate = Props.onCreate, onDelete = Props.onDelete, onSelect = Props.onSelect, onChangedName = Props.onChangedName;
    return React3.createElement("div", {
      id: id7,
      style: {
        borderRight: "1px solid black",
        display: "flex",
        width: "230px",
        flexDirection: "column",
        order: "1"
      }
    }, React3.createElement("h1", {
      style: {
        padding: "1rem"
      }
    }, "RepNotation"), React3.createElement("div", {
      className: "file-list",
      style: {
        display: "flex",
        flexDirection: "column",
        flexGrow: "1"
      }
    }, map5(models2, function(model2) {
      return React3.createElement(FilePanel$FileLabel, {
        id: Model.id(model2),
        name: Model.name(model2),
        active: getWithDefault2(map6(active, function(active2) {
          return caml_equal(Model.id(model2), active2);
        }), !1),
        onSelect: function(param) {
          return _1(onSelect, Model.id(model2));
        },
        onChanged: function(name2) {
          return _2(onChangedName, Model.id(model2), name2);
        }
      });
    })), React3.createElement("div", {
      className: "file-controls",
      style: {
        borderTop: "1px solid black",
        display: "flex",
        height: "50px",
        padding: "0 0.5rem",
        alignItems: "center"
      }
    }, React3.createElement(make6, {
      onClick: function(param) {
        return _1(onCreate, create4(void 0));
      },
      children: "New"
    }), React3.createElement(Separator.make, {}), React3.createElement(make6, {
      onClick: function(param) {
        return iter(active, function(active2) {
          var name2 = Model.name(getExn3(find(models2, function(m2) {
            return caml_equal(Model.id(m2), active2);
          })));
          if (resolve("confirm")("Definitely delete model '" + name2 + "'?"))
            return _1(onDelete, active2);
        });
      },
      children: "Delete"
    })));
  }
  var make7 = FilePanel;

  // src/App.bs.js
  var ReactDom = __toModule(require_react_dom());

  // src/view/Downloader.bs.js
  function download(name2, content) {
    var a3 = document.createElement("a");
    a3.setAttribute("href", content), a3.setAttribute("download", name2), a3.click();
  }

  // src/view/ModelAction.bs.js
  function connect(state, source3, target3, kind) {
    var modelSource = nodeWithId(state, source3), modelTarget = nodeWithId(state, target3);
    if (modelSource === void 0 || modelTarget === void 0)
      return state;
    var link2 = create$14(valFromOption(modelSource), valFromOption(modelTarget), kind);
    return addLink2(state, link2);
  }
  function dispatch3(state, action) {
    switch (action.TAG | 0) {
      case 0:
        var x5 = action._0, y5 = action._1, kind = action._2, id7 = action._3, match;
        switch (kind) {
          case 0:
            match = [
              "Representation",
              "Reference"
            ];
            break;
          case 1:
            match = [
              "Scheme",
              "Reference"
            ];
            break;
          case 2:
            match = [
              "Dimension",
              "Reference"
            ];
            break;
          case 3:
            match = [
              "Token",
              "Reference"
            ];
            break;
        }
        var node = create$12(match[0], match[1], x5, y5, kind, id7);
        return addNode2(state, node);
      case 1:
        return removeNode2(state, action._0);
      case 2:
        var nodeId = action._0, x$1 = action._1, y$1 = action._2;
        return updateNodes(state, function(node2) {
          return caml_equal(id2(node2), nodeId) ? setPosition(node2, x$1, y$1) : node2;
        });
      case 3:
        var nodeId$1 = action._0, $$event = action._1;
        return updateNodes(state, function(node2) {
          if (!caml_equal(id2(node2), nodeId$1))
            return node2;
          var match2 = kind$1(node2), match$1;
          switch (match2) {
            case 0:
              if ($$event.TAG === 0) {
                var e2 = $$event._0;
                switch (e2.TAG | 0) {
                  case 0:
                    match$1 = [
                      e2._0,
                      void 0
                    ];
                    break;
                  case 1:
                    match$1 = [
                      void 0,
                      e2._0
                    ];
                    break;
                  case 2:
                    match$1 = [
                      void 0,
                      void 0
                    ];
                    break;
                }
              } else
                match$1 = [
                  void 0,
                  void 0
                ];
              break;
            case 1:
              if ($$event.TAG === 1) {
                var e$1 = $$event._0;
                switch (e$1.TAG | 0) {
                  case 0:
                    match$1 = [
                      e$1._0,
                      void 0
                    ];
                    break;
                  case 1:
                    match$1 = [
                      void 0,
                      e$1._0
                    ];
                    break;
                  default:
                    match$1 = [
                      void 0,
                      void 0
                    ];
                }
              } else
                match$1 = [
                  void 0,
                  void 0
                ];
              break;
            case 2:
              if ($$event.TAG === 2) {
                var e$2 = $$event._0;
                switch (e$2.TAG | 0) {
                  case 0:
                    match$1 = [
                      e$2._0,
                      void 0
                    ];
                    break;
                  case 3:
                    match$1 = [
                      void 0,
                      e$2._0
                    ];
                    break;
                  default:
                    match$1 = [
                      void 0,
                      void 0
                    ];
                }
              } else
                match$1 = [
                  void 0,
                  void 0
                ];
              break;
            case 3:
              if ($$event.TAG === 3) {
                var e$3 = $$event._0;
                switch (e$3.TAG | 0) {
                  case 0:
                    match$1 = [
                      e$3._0,
                      void 0
                    ];
                    break;
                  case 1:
                    match$1 = [
                      void 0,
                      e$3._0
                    ];
                    break;
                  default:
                    match$1 = [
                      void 0,
                      void 0
                    ];
                }
              } else
                match$1 = [
                  void 0,
                  void 0
                ];
              break;
          }
          var reference = match$1[1], name2 = match$1[0];
          return updatePayload2(node2, function(payload3) {
            var name$1 = getWithDefault2(name2, payload3.name), reference$1 = getWithDefault2(reference, payload3.reference), match3 = kind$1(node2);
            if (match3 !== 2) {
              if (match3 >= 3 && $$event.TAG === 3) {
                var is_class = $$event._0;
                if (is_class.TAG === 2)
                  return {
                    kind: payload3.kind,
                    name: name$1,
                    name_suffix: payload3.name_suffix,
                    reference: reference$1,
                    reference_suffix: payload3.reference_suffix,
                    dashed: is_class._0
                  };
              }
            } else if ($$event.TAG === 2) {
              var q = $$event._0;
              switch (q.TAG | 0) {
                case 1:
                  return {
                    kind: payload3.kind,
                    name: payload3.name,
                    name_suffix: toString6(q._0).substring(0, 1),
                    reference: payload3.reference,
                    reference_suffix: payload3.reference_suffix,
                    dashed: payload3.dashed
                  };
                case 4:
                  return {
                    kind: payload3.kind,
                    name: payload3.name,
                    name_suffix: payload3.name_suffix,
                    reference: payload3.reference,
                    reference_suffix: toString6(q._0).substring(0, 1),
                    dashed: payload3.dashed
                  };
                default:
              }
            }
            return {
              kind: payload3.kind,
              name: name$1,
              name_suffix: payload3.name_suffix,
              reference: reference$1,
              reference_suffix: payload3.reference_suffix,
              dashed: payload3.dashed
            };
          });
        });
      case 4:
        return connect(state, action._0, action._1, 0);
      case 5:
        return connect(state, action._0, action._1, 1);
      case 6:
        return connect(state, action._0, action._1, 2);
      case 7:
        var source3 = action._0, target3 = action._1, toRemove = filter(links(graph(state)), function(link2) {
          return caml_equal(source2(link2), source3) ? caml_equal(target2(link2), target3) : !1;
        });
        return removeLinks2(state, toRemove);
      case 8:
        return setSelection(state, action._0);
    }
  }

  // src/view/InspectorPanel.bs.js
  var React4 = __toModule(require_react());
  function InspectorPanel$Row(Props) {
    var children2 = Props.children;
    return React4.createElement("div", {
      className: "inspector-row",
      style: {
        display: "flex",
        margin: "0.125rem 0.5rem",
        minHeight: "20px",
        alignItems: "center"
      }
    }, children2);
  }
  function InspectorPanel$Label(Props) {
    var htmlFor = Props.htmlFor, children2 = Props.children, tmp = {
      style: {
        fontSize: "small",
        marginRight: "0.5rem"
      }
    };
    return htmlFor !== void 0 && (tmp.htmlFor = valFromOption(htmlFor)), React4.createElement("label", tmp, children2);
  }
  function InspectorPanel$Input(Props) {
    var name2 = Props.name, value = Props.value, onChange = Props.onChange, tmp = {
      style: {
        border: "1px solid black",
        padding: "0.125rem 0.25rem",
        borderRadius: "2px",
        flexGrow: "1"
      },
      type: "text"
    };
    return name2 !== void 0 && (tmp.name = valFromOption(name2)), value !== void 0 && (tmp.value = valFromOption(value)), onChange !== void 0 && (tmp.onChange = valFromOption(onChange)), React4.createElement("input", tmp);
  }
  function InspectorPanel$Notes(Props) {
    var name2 = Props.name, value = Props.value, onChange = Props.onChange, tmp = {
      style: {
        border: "1px solid black",
        fontFamily: "sans-serif",
        fontSize: "small",
        height: "200px",
        marginTop: "0.125rem",
        padding: "0.25rem",
        borderRadius: "2px"
      },
      name: name2
    };
    return value !== void 0 && (tmp.value = valFromOption(value)), onChange !== void 0 && (tmp.onChange = valFromOption(onChange)), React4.createElement("div", {
      style: {
        display: "flex",
        margin: "0.125rem 0.5rem",
        flexDirection: "column"
      }
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: name2,
      children: "Notes"
    }), React4.createElement("textarea", tmp));
  }
  function InspectorPanel$Representation(Props) {
    var slots = Props.slots, onChange = Props.onChange;
    return React4.createElement(React4.Fragment, void 0, React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-rep-domain",
      children: "Domain"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-rep-domain",
      value: slots.domain,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 0,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-rep-display",
      children: "Display"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-rep-display",
      value: slots.display,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 1,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Notes, {
      name: "inspector-rep-notes",
      value: slots.notes,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 2,
          _0: e2.target.value
        });
      }
    }));
  }
  function InspectorPanel$Scheme(Props) {
    var slots = Props.slots, onChange = Props.onChange;
    return React4.createElement(React4.Fragment, void 0, React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-sch-concept",
      children: "Concept"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-sch-concept",
      value: slots.concept_structure,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 0,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-sch-graphic",
      children: "Graphic"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-sch-graphic",
      value: slots.graphic_structure,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 1,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-sch-function",
      children: "Function"
    }), React4.createElement("select", {
      name: "inspector-sch-function",
      value: toString5(slots.function),
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 2,
          _0: getExn3(fromString5(e2.target.value))
        });
      }
    }, map5(all4, function(f) {
      return React4.createElement("option", {
        key: toString5(f),
        value: toString5(f)
      }, toString5(f));
    }))), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-sch-explicit",
      children: "Explicit"
    }), React4.createElement("input", {
      checked: slots.explicit,
      name: "inspector-sch-explicit",
      type: "checkbox",
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 3,
          _0: e2.target.checked
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-sch-scope",
      children: "Scope"
    }), React4.createElement("select", {
      name: "inspector-sch-scope",
      value: toString4(slots.scope),
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 4,
          _0: getExn3(fromString4(e2.target.value))
        });
      }
    }, map5(all3, function(s2) {
      return React4.createElement("option", {
        key: toString4(s2),
        value: toString4(s2)
      }, toString4(s2));
    }))), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-sch-organisation",
      children: "Organisation"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-sch-organisation",
      value: slots.organisation,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 5,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Notes, {
      name: "inspector-sch-notes",
      value: slots.notes,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 6,
          _0: e2.target.value
        });
      }
    }));
  }
  function InspectorPanel$Dimension(Props) {
    var slots = Props.slots, onChange = Props.onChange;
    return React4.createElement(React4.Fragment, void 0, React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-dim-concept",
      children: "Concept"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-dim-concept",
      value: slots.concept,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 0,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-dim-concept-scale",
      children: "Concept Scale"
    }), React4.createElement("select", {
      name: "inspector-dim-concept-scale",
      value: toString6(slots.concept_scale),
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 1,
          _0: getExn3(fromString6(e2.target.value))
        });
      }
    }, map5(all5, function(f) {
      return React4.createElement("option", {
        key: toString6(f),
        value: toString6(f)
      }, toString6(f));
    }))), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-dim-graphic",
      children: "Graphic"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-dim-graphic",
      value: slots.graphic,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 3,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-dim-graphic-scale",
      children: "Graphic Scale"
    }), React4.createElement("select", {
      name: "inspector-dim-graphic-scale",
      value: toString6(slots.graphic_scale),
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 4,
          _0: getExn3(fromString6(e2.target.value))
        });
      }
    }, map5(all5, function(f) {
      return React4.createElement("option", {
        key: toString6(f),
        value: toString6(f)
      }, toString6(f));
    }))), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-dim-function",
      children: "Function"
    }), React4.createElement("select", {
      name: "inspector-dim-function",
      value: toString5(slots.function),
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 6,
          _0: getExn3(fromString5(e2.target.value))
        });
      }
    }, map5(all4, function(f) {
      return React4.createElement("option", {
        key: toString5(f),
        value: toString5(f)
      }, toString5(f));
    }))), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-dim-explicit",
      children: "Explicit"
    }), React4.createElement("input", {
      checked: slots.explicit,
      name: "inspector-dim-explicit",
      type: "checkbox",
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 8,
          _0: e2.target.checked
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-dim-scope",
      children: "Scope"
    }), React4.createElement("select", {
      name: "inspector-dim-scope",
      value: toString4(slots.scope),
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 7,
          _0: getExn3(fromString4(e2.target.value))
        });
      }
    }, map5(all3, function(s2) {
      return React4.createElement("option", {
        key: toString4(s2),
        value: toString4(s2)
      }, toString4(s2));
    }))), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-dim-organisation",
      children: "Organisation"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-dim-organisation",
      value: slots.organisation,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 9,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Notes, {
      name: "inspector-dim-notes",
      value: slots.notes,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 10,
          _0: e2.target.value
        });
      }
    }));
  }
  function InspectorPanel$Token(Props) {
    var slots = Props.slots, onChange = Props.onChange;
    return React4.createElement(React4.Fragment, void 0, React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-tok-concept",
      children: "Concept"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-tok-concept",
      value: slots.concept,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 0,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-tok-graphic",
      children: "Graphic"
    }), React4.createElement(InspectorPanel$Input, {
      name: "inspector-tok-graphic",
      value: slots.graphic,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 1,
          _0: e2.target.value
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-tok-class",
      children: "Is class"
    }), React4.createElement("input", {
      checked: slots.is_class,
      name: "inspector-tok-class",
      type: "checkbox",
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 2,
          _0: e2.target.checked
        });
      }
    })), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-tok-function",
      children: "Function"
    }), React4.createElement("select", {
      name: "inspector-tok-function",
      value: toString5(slots.function),
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 3,
          _0: getExn3(fromString5(e2.target.value))
        });
      }
    }, map5(all4, function(f) {
      return React4.createElement("option", {
        key: toString5(f),
        value: toString5(f)
      }, toString5(f));
    }))), React4.createElement(InspectorPanel$Row, {
      children: null
    }, React4.createElement(InspectorPanel$Label, {
      htmlFor: "inspector-tok-explicit",
      children: "Explicit"
    }), React4.createElement("input", {
      checked: slots.explicit,
      name: "inspector-tok-explicit",
      type: "checkbox",
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 4,
          _0: e2.target.checked
        });
      }
    })), React4.createElement(InspectorPanel$Notes, {
      name: "inspector-tok-notes",
      value: slots.notes,
      onChange: function(e2) {
        return _1(onChange, {
          TAG: 5,
          _0: e2.target.value
        });
      }
    }));
  }
  function InspectorPanel(Props) {
    var id7 = Props.id, data4 = Props.data, onChange = Props.onChange, onChange$1 = getWithDefault2(onChange, function(param) {
    }), tmp;
    if (typeof data4 == "number")
      tmp = data4 !== 0 ? React4.createElement("span", {
        className: "inspector-panel-multiple-message",
        style: {
          color: "grey",
          display: "block",
          fontSize: "small",
          marginTop: "50%",
          textAlign: "center"
        }
      }, "Multiple schema selected") : React4.createElement("span", {
        className: "inspector-panel-empty-message",
        style: {
          color: "grey",
          display: "block",
          fontSize: "small",
          marginTop: "50%",
          textAlign: "center"
        }
      }, "Select a schema");
    else {
      var schema = data4._0;
      switch (schema.TAG | 0) {
        case 0:
          tmp = React4.createElement(InspectorPanel$Representation, {
            slots: schema._0,
            onChange: function(c3) {
              return _1(onChange$1, {
                TAG: 0,
                _0: c3
              });
            }
          });
          break;
        case 1:
          tmp = React4.createElement(InspectorPanel$Scheme, {
            slots: schema._0,
            onChange: function(c3) {
              return _1(onChange$1, {
                TAG: 1,
                _0: c3
              });
            }
          });
          break;
        case 2:
          tmp = React4.createElement(InspectorPanel$Dimension, {
            slots: schema._0,
            onChange: function(c3) {
              return _1(onChange$1, {
                TAG: 2,
                _0: c3
              });
            }
          });
          break;
        case 3:
          tmp = React4.createElement(InspectorPanel$Token, {
            slots: schema._0,
            onChange: function(c3) {
              return _1(onChange$1, {
                TAG: 3,
                _0: c3
              });
            }
          });
          break;
      }
    }
    return React4.createElement("div", {
      className: "inspector-panel",
      id: id7,
      style: {
        borderLeft: "1px solid black",
        display: "flex",
        padding: "0.5rem 0",
        width: "350px",
        flexDirection: "column",
        order: "2"
      }
    }, tmp);
  }
  var make8 = InspectorPanel;

  // src/view/InspectorAction.bs.js
  function dispatch4(state, t) {
    var newState = typeof state == "number" ? void 0 : Schema.applyEvent(state._0, t._1);
    return [
      t._0,
      newState
    ];
  }

  // ../rescript-react-d3-graph/src/Config.bs.js
  function create11(automaticRearrangeAfterDropNode, collapsible, directed, initialZoom, focusZoom, maxZoom, minZoom, freezeAllDragEvents, focusAnimationDuration, width, height, nodeHighlightBehavior, linkHighlightBehavior, highlightDegree, highlightOpacity, panAndZoom, staticGraph, staticGraphWithDragAndDrop, param) {
    return dropUndefinedKeys2({
      automaticRearrangeAfterDropNode,
      collapsible,
      directed,
      initialZoom,
      focusZoom,
      maxZoom,
      minZoom,
      freezeAllDragEvents,
      focusAnimationDuration,
      width,
      height,
      nodeHighlightBehavior,
      linkHighlightBehavior,
      highlightDegree,
      highlightOpacity,
      panAndZoom,
      staticGraph,
      staticGraphWithDragAndDrop
    });
  }
  var Global = {
    create: create11
  };
  function create$15(alphaTarget, gravity, linkLength, linkStrength, disableLinkForce, param) {
    return dropUndefinedKeys2({
      alphaTarget,
      gravity,
      linkLength,
      linkStrength,
      disableLinkForce
    });
  }
  var D3 = {
    create: create$15
  };
  function create$2($$global, d3, node, link2, param) {
    var cfg = {
      global: void 0,
      d3,
      node,
      link: link2
    };
    return dropUndefinedKeys2($$global !== void 0 ? pack2(valFromOption2($$global), cfg) : cfg);
  }

  // src/App.bs.js
  var init2 = getWithDefault2(load$1(void 0), empty7);
  function reducer2(state, action) {
    var newState;
    switch (action.TAG | 0) {
      case 0:
        newState = dispatch2(state, action._0);
        break;
      case 1:
        newState = updateModel(state, dispatch3(modelState(state), action._0));
        break;
      case 2:
        var match = dispatch4(inspectorState(state), action._0);
        newState = updateSlots(state, match[0], match[1]);
        break;
    }
    return store$1(newState), newState;
  }
  var config = create$2(Global.create(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, "100%", "calc(100vh - 40px)", void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0), D3.create(void 0, void 0, void 0, void 0, !0, void 0), void 0, void 0, void 0);
  function App$App(Props) {
    var match = React5.useReducer(reducer2, init2), dispatch5 = match[1], state = match[0], newModel = function(id7) {
      return _1(dispatch5, {
        TAG: 0,
        _0: {
          TAG: 0,
          _0: id7
        }
      });
    }, deleteModel2 = function(id7) {
      return _1(dispatch5, {
        TAG: 0,
        _0: {
          TAG: 1,
          _0: id7
        }
      });
    }, focusModel2 = function(id7) {
      return _1(dispatch5, {
        TAG: 0,
        _0: {
          TAG: 2,
          _0: id7
        }
      });
    }, renameModel2 = function(id7, name2) {
      return _1(dispatch5, {
        TAG: 0,
        _0: {
          TAG: 3,
          _0: id7,
          _1: name2
        }
      });
    }, addNodeAt = function(kind, x5, y5) {
      var id7 = create4(void 0);
      return _1(dispatch5, {
        TAG: 0,
        _0: {
          TAG: 4,
          _0: kind,
          _1: id7
        }
      }), _1(dispatch5, {
        TAG: 1,
        _0: {
          TAG: 0,
          _0: x5,
          _1: y5,
          _2: kind,
          _3: id7
        }
      });
    }, addRepNodeAt = function(param, x5, y5) {
      return addNodeAt(0, x5, y5);
    }, addSchNodeAt = function(param, x5, y5) {
      return addNodeAt(1, x5, y5);
    }, addDimNodeAt = function(param, x5, y5) {
      return addNodeAt(2, x5, y5);
    }, addTokNodeAt = function(param, x5, y5) {
      return addNodeAt(3, x5, y5);
    }, selectionChange = function(param, newSelection) {
      return _1(dispatch5, {
        TAG: 1,
        _0: {
          TAG: 8,
          _0: newSelection
        }
      });
    }, linkNodes = function(param) {
      var ids = nodes2(selection2(modelState(state)));
      if (ids.length === 2) {
        var source3 = ids[0], target3 = ids[1];
        return _1(dispatch5, {
          TAG: 1,
          _0: {
            TAG: 4,
            _0: source3,
            _1: target3
          }
        });
      }
    }, anchorNodes = function(param) {
      var ids = nodes2(selection2(modelState(state)));
      if (ids.length === 2) {
        var source3 = ids[0], target3 = ids[1];
        return _1(dispatch5, {
          TAG: 1,
          _0: {
            TAG: 5,
            _0: source3,
            _1: target3
          }
        });
      }
    }, unlinkNodes = function(param) {
      var nodeIds = nodes2(selection2(modelState(state)));
      return forEach2(nodeIds, function(source3) {
        return forEach2(nodeIds, function(target3) {
          return _1(dispatch5, {
            TAG: 1,
            _0: {
              TAG: 7,
              _0: source3,
              _1: target3
            }
          });
        });
      });
    }, deleteNodes = function(param) {
      return forEach2(nodes2(selection2(modelState(state))), function(id7) {
        return _1(dispatch5, {
          TAG: 0,
          _0: {
            TAG: 5,
            _0: id7
          }
        }), _1(dispatch5, {
          TAG: 1,
          _0: {
            TAG: 1,
            _0: id7
          }
        });
      });
    }, movedNodes = function(nodeId, x5, y5) {
      var a_0 = fromString2(Id.toString(nodeId)), a3 = {
        TAG: 2,
        _0: a_0,
        _1: x5,
        _2: y5
      };
      return _1(dispatch5, {
        TAG: 1,
        _0: a3
      });
    }, slotsChange = function(e2) {
      var selection3 = nodes2(selection2(modelState(state)));
      if (selection3.length === 1) {
        var nodeId = selection3[0];
        return _1(dispatch5, {
          TAG: 2,
          _0: {
            _0: nodeId,
            _1: e2
          }
        }), _1(dispatch5, {
          TAG: 1,
          _0: {
            TAG: 3,
            _0: nodeId,
            _1: e2
          }
        });
      }
    }, dump2 = function(param) {
      var content = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(dump(state)));
      return download("RepNotationOnline.json", content);
    }, keybindings = fromArray3([
      [
        "r",
        addRepNodeAt
      ],
      [
        "s",
        addSchNodeAt
      ],
      [
        "d",
        addDimNodeAt
      ],
      [
        "t",
        addTokNodeAt
      ],
      [
        "c",
        function(e2, param, param$1) {
          return linkNodes(e2);
        }
      ],
      [
        "a",
        function(e2, param, param$1) {
          return anchorNodes(e2);
        }
      ],
      [
        "x",
        function(e2, param, param$1) {
          return deleteNodes(e2);
        }
      ],
      [
        "v",
        function(e2, param, param$1) {
          return unlinkNodes(e2);
        }
      ]
    ]);
    return React5.createElement("main", {
      style: {
        display: "flex",
        fontFamily: "sans-serif",
        height: "100%",
        flexDirection: "row"
      }
    }, React5.createElement(make7, {
      id: "file-panel",
      models: models(state),
      active: focusedId(state),
      onCreate: newModel,
      onDelete: deleteModel2,
      onSelect: focusModel2,
      onChangedName: renameModel2
    }), React5.createElement("div", {
      className: "editor-panel",
      style: {
        display: "flex",
        height: "100%",
        flexDirection: "column",
        flexGrow: "1",
        order: "2"
      }
    }, React5.createElement("div", {
      className: "graph-header",
      style: {
        borderBottom: "1px solid black",
        display: "flex",
        height: "40px",
        padding: "0 0.5rem",
        alignItems: "center",
        order: "1"
      }
    }, React5.createElement(make6, {
      onClick: function(__x) {
        return addNodeAt(0, 0, 0);
      },
      children: "Add Representation Node"
    }), React5.createElement(make6, {
      onClick: function(__x) {
        return addNodeAt(1, 0, 0);
      },
      children: "Add Scheme Node"
    }), React5.createElement(make6, {
      onClick: function(__x) {
        return addNodeAt(2, 0, 0);
      },
      children: "Add Dimension Node"
    }), React5.createElement(make6, {
      onClick: function(__x) {
        return addNodeAt(3, 0, 0);
      },
      children: "Add Token Node"
    }), React5.createElement(Separator.make, {}), React5.createElement(make6, {
      onClick: linkNodes,
      children: "Link"
    }), React5.createElement(make6, {
      onClick: anchorNodes,
      children: "Anchor"
    }), React5.createElement(Separator.make, {}), React5.createElement(make6, {
      onClick: unlinkNodes,
      children: "Unlink"
    }), React5.createElement(Separator.make, {}), React5.createElement(make6, {
      onClick: deleteNodes,
      children: "Delete"
    }), React5.createElement(Separator.make, {}), React5.createElement(make6, {
      onClick: dump2,
      children: "Dump state"
    })), React5.createElement("div", {
      className: "container",
      style: {
        display: "flex",
        flexDirection: "row",
        flexGrow: "1",
        order: "2"
      }
    }, React5.createElement(make5, {
      id: "model-graph",
      data: data3(modelState(state)),
      config,
      style: {
        flexGrow: "1"
      },
      keybindings,
      onNodePositionChange: movedNodes,
      onSelectionChange: selectionChange
    }), React5.createElement(make8, {
      id: "node-inspector",
      data: inspectorState(state),
      onChange: slotsChange
    }))));
  }
  var App = {
    init: init2,
    reducer: reducer2,
    config,
    make: App$App
  }, e = document.querySelector("#root");
  e != null && ReactDom.render(React5.createElement(App$App, {}), e);
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=main.js.map
