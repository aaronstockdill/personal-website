(() => {
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports2, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from = Object(arguments[s2]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports2.Fragment = 60107;
          exports2.StrictMode = 60108;
          exports2.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports2.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports2.Fragment = symbolFor("react.fragment");
            exports2.StrictMode = symbolFor("react.strict_mode");
            exports2.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports2.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports2.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports2.Profiler:
                return "Profiler";
              case exports2.StrictMode:
                return "StrictMode";
              case exports2.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return getComponentName(init3(payload));
                  } catch (x4) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children2) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children2) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index3) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index3.toString(36);
          }
          function mapIntoArray(children2, array4, escapedPrefix, nameSoFar, callback) {
            var type = typeof children2;
            if (type === "undefined" || type === "boolean") {
              children2 = null;
            }
            var invokeCallback = false;
            if (children2 === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children2.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children2;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array4, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array4.push(mappedChild);
              }
              return 1;
            }
            var child2;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children2)) {
              for (var i = 0; i < children2.length; i++) {
                child2 = children2[i];
                nextName = nextNamePrefix + getElementKey(child2, i);
                subtreeCount += mapIntoArray(child2, array4, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children2);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children2;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child2 = step.value;
                  nextName = nextNamePrefix + getElementKey(child2, ii++);
                  subtreeCount += mapIntoArray(child2, array4, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children2;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children2, func, context) {
            if (children2 == null) {
              return children2;
            }
            var result = [];
            var count2 = 0;
            mapIntoArray(children2, result, "", "", function(child2) {
              return func.call(context, child2, count2++);
            });
            return result;
          }
          function countChildren(children2) {
            var n = 0;
            mapChildren(children2, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children2, forEachFunc, forEachContext) {
            mapChildren(children2, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray9(children2) {
            return mapChildren(children2, function(child2) {
              return child2;
            }) || [];
          }
          function onlyChild(children2) {
            if (!isValidElement(children2)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children2;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name3) {
                  ownName = name3;
                  if (render.displayName == null) {
                    render.displayName = name3;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports2.Fragment || type === exports2.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports2.StrictMode || type === exports2.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare2) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare2 === void 0 ? null : compare2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name3) {
                  ownName = name3;
                  if (type.displayName == null) {
                    type.displayName = name3;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer2, initialArg, init3) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer2, initialArg, init3);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create18, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create18, deps);
          }
          function useLayoutEffect(create18, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create18, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create18, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create18, deps);
          }
          function useImperativeHandle(ref, create18, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create18, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name3, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x4) {
                  var match2 = x4.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name3;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame3 = componentFrameCache.get(fn);
              if (frame3 !== void 0) {
                return frame3;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x4) {
                    control = x4;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x4) {
                    control = x4;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x4) {
                  control = x4;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]) {
                  c3--;
                }
                for (; s2 >= 1 && c3 >= 0; s2--, c3--) {
                  if (sampleLines[s2] !== controlLines[c3]) {
                    if (s2 !== 1 || c3 !== 1) {
                      do {
                        s2--;
                        c3--;
                        if (c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name3 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name3 ? describeBuiltInComponentFrame(name3) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports2.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init3(payload), source, ownerFn);
                  } catch (x4) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has7 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has7(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name3 = getComponentName(ReactCurrentOwner.current.type);
              if (name3) {
                return "\n\nCheck the render method of `" + name3 + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child2 = node[i];
                if (isValidElement(child2)) {
                  validateExplicitKey(child2, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name3 = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name3, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children2) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports2.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children2) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              new Map([[frozenObject, null]]);
              new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray9,
            only: onlyChild
          };
          exports2.Children = Children;
          exports2.Component = Component;
          exports2.PureComponent = PureComponent;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef;
          exports2.forwardRef = forwardRef;
          exports2.isValidElement = isValidElement;
          exports2.lazy = lazy;
          exports2.memo = memo;
          exports2.useCallback = useCallback;
          exports2.useContext = useContext;
          exports2.useDebugValue = useDebugValue;
          exports2.useEffect = useEffect;
          exports2.useImperativeHandle = useImperativeHandle;
          exports2.useLayoutEffect = useLayoutEffect;
          exports2.useMemo = useMemo;
          exports2.useReducer = useReducer;
          exports2.useRef = useRef;
          exports2.useState = useState;
          exports2.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports2, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports2.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports2.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports2.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports2.unstable_shouldYield = function() {
                return exports2.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports2.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports2.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports2.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index3 = heap.length;
            heap.push(node);
            siftUp(heap, node, index3);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index3 = i;
            while (true) {
              var parentIndex = index3 - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (parent2 !== void 0 && compare2(parent2, node) > 0) {
                heap[parentIndex] = node;
                heap[index3] = parent2;
                index3 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index3 = i;
            var length5 = heap.length;
            while (index3 < length5) {
              var leftIndex = (index3 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare2(left, node) < 0) {
                if (right !== void 0 && compare2(right, left) < 0) {
                  heap[index3] = right;
                  heap[rightIndex] = node;
                  index3 = rightIndex;
                } else {
                  heap[index3] = left;
                  heap[leftIndex] = node;
                  index3 = leftIndex;
                }
              } else if (right !== void 0 && compare2(right, node) < 0) {
                heap[index3] = right;
                heap[rightIndex] = node;
                index3 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare2(a3, b) {
            var diff3 = a3.sortIndex - b.sortIndex;
            return diff3 !== 0 ? diff3 : a3.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer3 = peek(timerQueue);
            while (timer3 !== null) {
              if (timer3.callback === null) {
                pop(timerQueue);
              } else if (timer3.startTime <= currentTime) {
                pop(timerQueue);
                timer3.sortIndex = timer3.expirationTime;
                push(taskQueue, timer3);
              } else {
                return;
              }
              timer3 = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports2.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout3;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout3 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout3 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout3 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout3 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout3 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout3;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports2, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports2.__interactionsRef = null;
          exports2.__subscriberRef = null;
          {
            exports2.__interactionsRef = {
              current: new Set()
            };
            exports2.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports2.__interactionsRef.current;
            exports2.__interactionsRef.current = new Set();
            try {
              return callback();
            } finally {
              exports2.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports2.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name3, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name: name3,
              timestamp
            };
            var prevInteractions = exports2.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports2.__interactionsRef.current = interactions;
            var subscriber = exports2.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports2.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports2.__interactionsRef.current;
            var subscriber = exports2.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports2.__interactionsRef.current;
              exports2.__interactionsRef.current = wrappedInteractions;
              subscriber = exports2.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports2.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports2.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports2.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports2.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports2.unstable_clear = unstable_clear;
          exports2.unstable_getCurrent = unstable_getCurrent;
          exports2.unstable_getThreadID = unstable_getThreadID;
          exports2.unstable_subscribe = unstable_subscribe;
          exports2.unstable_trace = unstable_trace;
          exports2.unstable_unsubscribe = unstable_unsubscribe;
          exports2.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports2, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React3 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React3) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name3, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name3.length > 2 && (name3[0] === "o" || name3[0] === "O") && (name3[1] === "n" || name3[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name3, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name3.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name3, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name3, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name3) {
            return properties.hasOwnProperty(name3) ? properties[name3] : null;
          }
          function PropertyInfoRecord(name3, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name3;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name3) {
            properties[name3] = new PropertyInfoRecord(name3, RESERVED, false, name3, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name3 = _ref[0], attributeName = _ref[1];
            properties[name3] = new PropertyInfoRecord(name3, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name3) {
            properties[name3] = new PropertyInfoRecord(name3, BOOLEANISH_STRING, false, name3.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name3) {
            properties[name3] = new PropertyInfoRecord(name3, BOOLEANISH_STRING, false, name3, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name3) {
            properties[name3] = new PropertyInfoRecord(name3, BOOLEAN, false, name3.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name3) {
            properties[name3] = new PropertyInfoRecord(name3, BOOLEAN, true, name3, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name3) {
            properties[name3] = new PropertyInfoRecord(name3, OVERLOADED_BOOLEAN, false, name3, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name3) {
            properties[name3] = new PropertyInfoRecord(name3, POSITIVE_NUMERIC, false, name3, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name3) {
            properties[name3] = new PropertyInfoRecord(name3, NUMERIC, false, name3.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name3 = attributeName.replace(CAMELIZE, capitalize);
            properties[name3] = new PropertyInfoRecord(name3, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name3 = attributeName.replace(CAMELIZE, capitalize);
            properties[name3] = new PropertyInfoRecord(name3, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name3 = attributeName.replace(CAMELIZE, capitalize);
            properties[name3] = new PropertyInfoRecord(name3, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name3, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name3, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name3, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name3, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name3, expected) {
            {
              if (!isAttributeNameSafe(name3)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name3)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name3);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name3, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name3);
            if (shouldIgnoreAttribute(name3, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name3, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name3)) {
                var _attributeName = name3;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name3, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x4) {
                  var match2 = x4.stack.trim().match(/\n( *(at )?)/);
                  prefix = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix + name3;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame3 = componentFrameCache.get(fn);
              if (frame3 !== void 0) {
                return frame3;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x4) {
                    control = x4;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x4) {
                    control = x4;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x4) {
                  control = x4;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s2 >= 1 && c3 >= 0 && sampleLines[s2] !== controlLines[c3]) {
                  c3--;
                }
                for (; s2 >= 1 && c3 >= 0; s2--, c3--) {
                  if (sampleLines[s2] !== controlLines[c3]) {
                    if (s2 !== 1 || c3 !== 1) {
                      do {
                        s2--;
                        c3--;
                        if (c3 < 0 || sampleLines[s2] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name3 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name3 ? describeBuiltInComponentFrame(name3) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init3(payload), source, ownerFn);
                  } catch (x4) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x4) {
              return "\nError generating stack: " + x4.message + "\n" + x4.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    return getComponentName(init3(payload));
                  } catch (x4) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString5(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get6 = descriptor.get, set12 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get6.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set12.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString5(value);
                }
              } else if (node.value !== toString5(value)) {
                node.value = toString5(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString5(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name3 = node.name;
            if (name3 !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name3 !== "") {
              node.name = name3;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name3 = props.name;
            if (props.type === "radio" && name3 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group2 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name3) + '][type="radio"]');
              for (var i = 0; i < group2.length; i++) {
                var otherNode = group2[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString5(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString5(value)) {
                node.defaultValue = toString5(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children2) {
            var content = "";
            React3.Children.forEach(children2, function(child2) {
              if (child2 == null) {
                return;
              }
              content += child2;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React3.Children.forEach(props.children, function(child2) {
                  if (child2 == null) {
                    return;
                  }
                  if (typeof child2 === "string" || typeof child2 === "number") {
                    return;
                  }
                  if (typeof child2.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString5(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString5(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString5(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children2 = props.children, defaultValue = props.defaultValue;
              if (children2 != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children2)) {
                    if (!(children2.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children2 = children2[0];
                  }
                  defaultValue = children2;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString5(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString5(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode3 = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode3.firstChild) {
                  node.appendChild(svgNode3.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name3, value, isCustomProperty) {
            var isEmpty8 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty8) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name3) && isUnitlessNumber[name3])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name3) {
            return name3.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name3) {
              if (warnedStyleNames.hasOwnProperty(name3) && warnedStyleNames[name3]) {
                return;
              }
              warnedStyleNames[name3] = true;
              error("Unsupported style property %s. Did you mean %s?", name3, camelize(name3.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name3) {
              if (warnedStyleNames.hasOwnProperty(name3) && warnedStyleNames[name3]) {
                return;
              }
              warnedStyleNames[name3] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name3, name3.charAt(0).toUpperCase() + name3.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name3, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name3, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name3, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name3);
            };
            var warnStyleValueIsInfinity = function(name3, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name3);
            };
            warnValidStyle = function(name3, value) {
              if (name3.indexOf("-") > -1) {
                warnHyphenatedStyleName(name3);
              } else if (badVendoredStyleNamePattern.test(name3)) {
                warnBadVendoredStyleName(name3);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name3, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name3, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name3, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue3 = styles[styleName];
                if (styleValue3 != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue3, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue3 = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue3);
              } else {
                style2[styleName] = styleValue3;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag3, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag3]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag3 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name3) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name3) && warnedProperties[name3]) {
                return true;
              }
              if (rARIACamel.test(name3)) {
                var ariaName = "aria-" + name3.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name3);
                  warnedProperties[name3] = true;
                  return true;
                }
                if (name3 !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name3, correctName);
                  warnedProperties[name3] = true;
                  return true;
                }
              }
              if (rARIA.test(name3)) {
                var lowerCasedName = name3.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name3] = true;
                  return false;
                }
                if (name3 !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name3, standardName);
                  warnedProperties[name3] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name3, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name3) && warnedProperties$1[name3]) {
                return true;
              }
              var lowerCasedName = name3.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name3] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name3)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name3, registrationName);
                  warnedProperties$1[name3] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name3)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name3);
                  warnedProperties$1[name3] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name3)) {
                if (INVALID_EVENT_NAME_REGEX.test(name3)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name3);
                }
                warnedProperties$1[name3] = true;
                return true;
              }
              if (rARIA$1.test(name3) || rARIACamel$1.test(name3)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name3] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name3] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name3] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name3);
                warnedProperties$1[name3] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name3);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name3) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name3, standardName);
                  warnedProperties$1[name3] = true;
                  return true;
                }
              } else if (!isReserved && name3 !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name3, lowerCasedName);
                warnedProperties$1[name3] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name3, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name3, name3, value, name3);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name3, name3, value, name3, name3, name3);
                }
                warnedProperties$1[name3] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name3, value, propertyInfo, false)) {
                warnedProperties$1[name3] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name3, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name3, value);
                warnedProperties$1[name3] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a3, b, c3, d) {
            return fn(a3, b, c3, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a3, b) {
            if (isBatchingEventUpdates) {
              return fn(a3, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a3, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a3, b, c3, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a3, b, c3, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag3) {
            return tag3 === "button" || tag3 === "input" || tag3 === "select" || tag3 === "textarea";
          }
          function shouldPreventMouseEvent(name3, type, props) {
            switch (name3) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name3, func, context, a3, b, c3, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name3, func, context, a3, b, c3, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name3 ? name3 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name3, func, context, a3, b, c3, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name3, func, context, a3, b, c3, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get5(key) {
            return key._reactInternals;
          }
          function has7(key) {
            return key._reactInternals !== void 0;
          }
          function set11(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get5(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child2 = parentA.child;
                while (child2) {
                  if (child2 === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child2 === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child2 = child2.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a3.return !== b.return) {
                a3 = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a3.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a3.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = new Map();
          var queuedPointerCaptures = new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag3 = nearestMounted.tag;
                if (tag3 === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag3 === HostRoot) {
                  var root5 = nearestMounted.stateNode;
                  if (root5.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = new Map();
          var eventPriorities = new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event = eventTypes[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root5, wipLanes) {
            var pendingLanes = root5.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root5.expiredLanes;
            var suspendedLanes = root5.suspendedLanes;
            var pingedLanes = root5.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root5.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root5.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index4 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index4;
                nextLanes |= entanglements[index4];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root5, lanes) {
            var eventTimes = root5.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              var eventTime = eventTimes[index4];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root5, currentTime) {
            var pendingLanes = root5.pendingLanes;
            var suspendedLanes = root5.suspendedLanes;
            var pingedLanes = root5.pingedLanes;
            var expirationTimes = root5.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              var expirationTime = expirationTimes[index4];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index4] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root5.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root5) {
            var everythingButOffscreen = root5.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index4 = 31 - clz32(lanes);
            return index4 < 0 ? NoLanes : 1 << index4;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b) {
            return (a3 & b) !== NoLanes;
          }
          function isSubsetOfLanes(set12, subset4) {
            return (set12 & subset4) === subset4;
          }
          function mergeLanes(a3, b) {
            return a3 | b;
          }
          function removeLanes(set12, subset4) {
            return set12 & ~subset4;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b) {
            return a3 !== NoLane && a3 < b ? a3 : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root5, updateLane, eventTime) {
            root5.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root5.suspendedLanes &= higherPriorityLanes;
            root5.pingedLanes &= higherPriorityLanes;
            var eventTimes = root5.eventTimes;
            var index4 = laneToIndex(updateLane);
            eventTimes[index4] = eventTime;
          }
          function markRootSuspended(root5, suspendedLanes) {
            root5.suspendedLanes |= suspendedLanes;
            root5.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root5.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              expirationTimes[index4] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root5, pingedLanes, eventTime) {
            root5.pingedLanes |= root5.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root5) {
            root5.expiredLanes |= InputDiscreteLanes & root5.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root5, updateLane) {
            root5.mutableReadLanes |= updateLane & root5.pendingLanes;
          }
          function markRootFinished(root5, remainingLanes) {
            var noLongerPendingLanes = root5.pendingLanes & ~remainingLanes;
            root5.pendingLanes = remainingLanes;
            root5.suspendedLanes = 0;
            root5.pingedLanes = 0;
            root5.expiredLanes &= remainingLanes;
            root5.mutableReadLanes &= remainingLanes;
            root5.entangledLanes &= remainingLanes;
            var entanglements = root5.entanglements;
            var eventTimes = root5.eventTimes;
            var expirationTimes = root5.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              entanglements[index4] = NoLanes;
              eventTimes[index4] = NoTimestamp;
              expirationTimes[index4] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root5, entangledLanes) {
            root5.entangledLanes |= entangledLanes;
            var entanglements = root5.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              entanglements[index4] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent3;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent3, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent3.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent3(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag3 = nearestMounted.tag;
                if (tag3 === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag3 === HostRoot) {
                  var root5 = nearestMounted.stateNode;
                  if (root5.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root4 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root4 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root4 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start3;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start3 = 0; start3 < startLength; start3++) {
              if (startValue[start3] !== endValue[start3]) {
                break;
              }
            }
            var minEnd = startLength - start3;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start3, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root4) {
              return root4.value;
            }
            return root4.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x4, y4) {
            return x4 === y4 && (x4 !== 0 || 1 / x4 === 1 / y4) || x4 !== x4 && y4 !== y4;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root5, offset) {
            var node = getLeafNode(root5);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection3 = win.getSelection && win.getSelection();
            if (!selection3 || selection3.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection3.anchorNode, anchorOffset = selection3.anchorOffset, focusNode = selection3.focusNode, focusOffset = selection3.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length5 = 0;
            var start3 = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start3 = length5 + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length5 + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length5 += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start3 = length5;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length5;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start3 === -1 || end === -1) {
              return null;
            }
            return {
              start: start3,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection3 = win.getSelection();
            var length5 = node.textContent.length;
            var start3 = Math.min(offsets.start, length5);
            var end = offsets.end === void 0 ? start3 : Math.min(offsets.end, length5);
            if (!selection3.extend && start3 > end) {
              var temp = end;
              end = start3;
              start3 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start3);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection3.rangeCount === 1 && selection3.anchorNode === startMarker.node && selection3.anchorOffset === startMarker.offset && selection3.focusNode === endMarker.node && selection3.focusOffset === endMarker.offset) {
                return;
              }
              var range4 = doc.createRange();
              range4.setStart(startMarker.node, startMarker.offset);
              selection3.removeAllRanges();
              if (start3 > end) {
                selection3.addRange(range4);
                selection3.extend(endMarker.node, endMarker.offset);
              } else {
                range4.setEnd(endMarker.node, endMarker.offset);
                selection3.addRange(range4);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection3;
            if ("selectionStart" in input) {
              selection3 = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection3 = getOffsets(input);
            }
            return selection3 || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start3 = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start3;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start3;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection3 = win.getSelection();
              return {
                anchorNode: selection3.anchorNode,
                anchorOffset: selection3.anchorOffset,
                focusNode: selection3.focusNode,
                focusOffset: selection3.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag3 = _instance2.tag;
              if (tag3 === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag3 = _instance3.tag;
              if (tag3 === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag3 = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag3 === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name3) {
                names.push(name3);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent2, html) {
              var testElement = parent2.namespaceURI === HTML_NAMESPACE$1 ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop3;
          }
          function setInitialDOMProperties(tag3, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag3 !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag3, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag3, rawProps);
            {
              validatePropertiesInDevelopment(tag3, rawProps);
            }
            var props;
            switch (tag3) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag3, props);
            setInitialDOMProperties(tag3, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag3) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag3, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag3, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag3) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag3, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag3, lastRawProps, nextRawProps) {
            if (tag3 === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag3, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag3, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag3) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag3, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag3, rawProps);
              validatePropertiesInDevelopment(tag3, rawProps);
            }
            switch (tag3) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag3, rawProps);
            {
              extraAttributeNames = new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name3 = attributes[_i].name.toLowerCase();
                switch (name3) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag3);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag3) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child2) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child2.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child2) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child2.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag3, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag3, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag3, props) {
            switch (tag3) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag3) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag: tag3
              };
              if (inScopeTags.indexOf(tag3) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag3) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag3) !== -1 && tag3 !== "address" && tag3 !== "div" && tag3 !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag3 === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag3 === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag3 === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag3 === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag3 === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag3 === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag3 === "dd" || tag3 === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag3, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag3 === "option" || tag3 === "optgroup" || tag3 === "#text";
                case "optgroup":
                  return tag3 === "option" || tag3 === "#text";
                case "option":
                  return tag3 === "#text";
                case "tr":
                  return tag3 === "th" || tag3 === "td" || tag3 === "style" || tag3 === "script" || tag3 === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag3 === "tr" || tag3 === "style" || tag3 === "script" || tag3 === "template";
                case "colgroup":
                  return tag3 === "col" || tag3 === "template";
                case "table":
                  return tag3 === "caption" || tag3 === "colgroup" || tag3 === "tbody" || tag3 === "tfoot" || tag3 === "thead" || tag3 === "style" || tag3 === "script" || tag3 === "template";
                case "head":
                  return tag3 === "base" || tag3 === "basefont" || tag3 === "bgsound" || tag3 === "link" || tag3 === "meta" || tag3 === "title" || tag3 === "noscript" || tag3 === "noframes" || tag3 === "style" || tag3 === "script" || tag3 === "template";
                case "html":
                  return tag3 === "head" || tag3 === "body" || tag3 === "frameset";
                case "frameset":
                  return tag3 === "frame";
                case "#document":
                  return tag3 === "html";
              }
              switch (tag3) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag3, ancestorInfo) {
              switch (tag3) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root5 = rootContainerInstance.documentElement;
                namespace = root5 ? root5.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child2) {
            parentInstance.appendChild(child2);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child2) {
            parentInstance.appendChild(child2);
          }
          function appendChildToContainer(container, child2) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child2, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child2);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child2, beforeChild) {
            parentInstance.insertBefore(child2, beforeChild);
          }
          function insertInContainerBefore(container, child2, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child2, beforeChild);
            } else {
              container.insertBefore(child2, beforeChild);
            }
          }
          function removeChild(parentInstance, child2) {
            parentInstance.removeChild(child2);
          }
          function removeChildFromContainer(container, child2) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child2);
            } else {
              container.removeChild(child2);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id2 = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id2;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id2;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has8 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has8(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index3 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index3 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index3]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index3];
            valueStack[index3] = null;
            {
              fiberStack[index3] = null;
            }
            index3--;
          }
          function push(cursor, value, fiber) {
            index3++;
            valueStack[index3] = cursor.current;
            {
              fiberStack[index3] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name3 = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name3);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name3 = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name3);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root5, children2) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root5, children2);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root5, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root5.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root5, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root5, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now3 = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set12) {
              var array4 = [];
              set12.forEach(function(value) {
                array4.push(value);
              });
              return array4.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = new Map();
            var didWarnAboutLegacyContext = new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent2, renderLanes2) {
            var node = parent2;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update2 = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update2.tag = ForceUpdate;
                      enqueueUpdate(fiber, update2);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update2 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update2;
          }
          function enqueueUpdate(fiber, update2) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update2.next = update2;
            } else {
              update2.next = pending.next;
              pending.next = update2;
            }
            sharedQueue.pending = update2;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update2 = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update2.eventTime,
                      lane: update2.lane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update2 = update2.next;
                  } while (update2 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update2, prevState, nextProps, instance) {
            switch (update2.tag) {
              case ReplaceState: {
                var payload = update2.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update2.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update2 = firstBaseUpdate;
              do {
                var updateLane = update2.lane;
                var updateEventTime = update2.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update2, newState, props, instance);
                  var callback = update2.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update2];
                    } else {
                      effects.push(update2);
                    }
                  }
                }
                update2 = update2.next;
                if (update2 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update2 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React3.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = new Set();
            didWarnAboutUninitializedState = new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
            didWarnAboutDirectlyAssigningPropsToState = new Set();
            didWarnAboutUndefinedDerivedState = new Set();
            didWarnAboutContextTypeAndContextTypes = new Set();
            didWarnAboutInvalidateContextType = new Set();
            var didWarnOnInvalidCallback = new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get5(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update2.callback = callback;
              }
              enqueueUpdate(fiber, update2);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get5(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ReplaceState;
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update2.callback = callback;
              }
              enqueueUpdate(fiber, update2);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get5(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update2.callback = callback;
              }
              enqueueUpdate(fiber, update2);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name3 = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name3);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name3);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name3);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name3);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name3);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name3);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name3);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name3);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name3);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name3);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name3);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name3);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name3);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name3, name3);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name3, name3);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name3);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name3);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name3);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name3);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name3);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set11(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child2, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child2, returnFiber) {
              if (child2 === null || typeof child2 !== "object") {
                return;
              }
              if (!child2._store || child2._store.validated || child2.key != null) {
                return;
              }
              if (!(typeof child2._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child2._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child2, knownKeys, returnFiber) {
              {
                if (typeof child2 !== "object" || child2 === null) {
                  return knownKeys;
                }
                switch (child2.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child2, returnFiber);
                    var key = child2.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child2 = newChildren[i];
                  knownKeys = warnOnInvalidKey(child2, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child3) {
                  return deleteChild(returnFiber, child3);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child2 = _step.value;
                    knownKeys = warnOnInvalidKey(child2, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child3) {
                  return deleteChild(returnFiber, child3);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child2 = currentFirstChild;
              while (child2 !== null) {
                if (child2.key === key) {
                  switch (child2.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child2.sibling);
                        var existing = useFiber(child2, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child2.elementType === element.type || isCompatibleFamilyForHotReloading(child2, element)) {
                        deleteRemainingChildren(returnFiber, child2.sibling);
                        var _existing3 = useFiber(child2, element.props);
                        _existing3.ref = coerceRef(returnFiber, child2, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child2);
                  break;
                } else {
                  deleteChild(returnFiber, child2);
                }
                child2 = child2.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child2 = currentFirstChild;
              while (child2 !== null) {
                if (child2.key === key) {
                  if (child2.tag === HostPortal && child2.stateNode.containerInfo === portal.containerInfo && child2.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child2.sibling);
                    var existing = useFiber(child2, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child2);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child2);
                }
                child2 = child2.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child2 = workInProgress2.child;
            while (child2 !== null) {
              resetWorkInProgress(child2, lanes);
              child2 = child2.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (!(c3 !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
              parent2 = parent2.return;
            }
            hydrationParentFiber = parent2;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children2 = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children2 = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children2;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer2, initialArg, init3) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init3 !== void 0) {
              initialState = init3(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer2,
              lastRenderedState: initialState
            };
            var dispatch3 = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch3];
          }
          function updateReducer(reducer2, initialArg, init3) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer2;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update2 = first;
              do {
                var updateLane = update2.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update2.action,
                    eagerReducer: update2.eagerReducer,
                    eagerState: update2.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update2.action,
                      eagerReducer: update2.eagerReducer,
                      eagerState: update2.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update2.eagerReducer === reducer2) {
                    newState = update2.eagerState;
                  } else {
                    var action = update2.action;
                    newState = reducer2(newState, action);
                  }
                }
                update2 = update2.next;
              } while (update2 !== null && update2 !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch3 = queue.dispatch;
            return [hook.memoizedState, dispatch3];
          }
          function rerenderReducer(reducer2, initialArg, init3) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer2;
            var dispatch3 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update2 = firstRenderPhaseUpdate;
              do {
                var action = update2.action;
                newState = reducer2(newState, action);
                update2 = update2.next;
              } while (update2 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch3];
          }
          function readFromUnsubcribedMutableSource(root5, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root5.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root5 = getWorkInProgressRoot();
            if (!(root5 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root5, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root5, lane);
                }
                markRootEntangled(root5, root5.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root5, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root5, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch3 = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch3];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag3, create18, destroy, deps) {
            var effect = {
              tag: tag3,
              create: create18,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create18, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create18, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create18, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create18, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create18, destroy, nextDeps);
          }
          function mountEffect(create18, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create18, deps);
          }
          function updateEffect(create18, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create18, deps);
          }
          function mountLayoutEffect(create18, deps) {
            return mountEffectImpl(Update, Layout, create18, deps);
          }
          function updateLayoutEffect(create18, deps) {
            return updateEffectImpl(Update, Layout, create18, deps);
          }
          function imperativeHandleEffect(create18, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create18();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create18();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create18, deps) {
            {
              if (typeof create18 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create18 !== null ? typeof create18 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create18, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create18, deps) {
            {
              if (typeof create18 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create18 !== null ? typeof create18 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create18, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start3 = startTransition.bind(null, setPending);
            mountRef(start3);
            return [start3, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start3 = startRef.current;
            return [start3, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start3 = startRef.current;
            return [start3, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name3 = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name3]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name3] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id2 = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id2)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id2;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id2 = updateState()[0];
            return id2;
          }
          function rerenderOpaqueIdentifier() {
            var id2 = rerenderState()[0];
            return id2;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update2.next = update2;
            } else {
              update2.next = pending.next;
              pending.next = update2;
            }
            queue.pending = update2;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update2.eagerReducer = lastRenderedReducer;
                    update2.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create18, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create18, deps);
              },
              useImperativeHandle: function(ref, create18, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create18, deps);
              },
              useLayoutEffect: function(create18, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create18, deps);
              },
              useMemo: function(create18, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create18, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create18, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create18, deps);
              },
              useImperativeHandle: function(ref, create18, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create18, deps);
              },
              useLayoutEffect: function(create18, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create18, deps);
              },
              useMemo: function(create18, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create18, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create18, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create18, deps);
              },
              useImperativeHandle: function(ref, create18, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create18, deps);
              },
              useLayoutEffect: function(create18, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create18, deps);
              },
              useMemo: function(create18, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create18, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create18, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create18, deps);
              },
              useImperativeHandle: function(ref, create18, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create18, deps);
              },
              useLayoutEffect: function(create18, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create18, deps);
              },
              useMemo: function(create18, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create18, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create18, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create18, deps);
              },
              useImperativeHandle: function(ref, create18, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create18, deps);
              },
              useLayoutEffect: function(create18, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create18, deps);
              },
              useMemo: function(create18, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create18, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create18, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create18, deps);
              },
              useImperativeHandle: function(ref, create18, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create18, deps);
              },
              useLayoutEffect: function(create18, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create18, deps);
              },
              useMemo: function(create18, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create18, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create18, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create18, deps);
              },
              useImperativeHandle: function(ref, create18, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create18, deps);
              },
              useLayoutEffect: function(create18, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create18, deps);
              },
              useMemo: function(create18, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create18, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init3) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init3);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child2 = fiber.child;
            while (child2) {
              fiber.actualDuration += child2.actualDuration;
              child2 = child2.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child2 = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child2.ref = workInProgress2.ref;
              child2.return = workInProgress2;
              workInProgress2.child = child2;
              return child2;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare2 = Component.compare;
              compare2 = compare2 !== null ? compare2 : shallowEqual;
              if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init3 = lazyComponent._init;
                  try {
                    outerMemoType = init3(payload);
                  } catch (x4) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root5 = workInProgress2.stateNode;
            if (root5.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root5.pendingContext, root5.pendingContext !== root5.context);
            } else if (root5.context) {
              pushTopLevelContextObject(workInProgress2, root5.context, false);
            }
            pushHostContainer(workInProgress2, root5.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root5 = workInProgress2.stateNode;
            if (root5.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root5.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child2 = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child2;
              var node = child2;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init3 = lazyComponent._init;
            var Component = init3(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child2;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child2 = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child2;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child2 = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child2;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child2 = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child2;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child2 = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child2;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode2, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode2 & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode2, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode2 & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index4) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index4, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children2, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== false) {
                if (Array.isArray(children2)) {
                  for (var i = 0; i < children2.length; i++) {
                    if (!validateSuspenseListNestedChild(children2[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children2);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children2);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child2 = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child2 !== null) {
                          return child2.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent2, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now3() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now3() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now3();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            update2.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update2.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update2;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update2.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update2.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update2.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update2;
          }
          function attachPingListener(root5, wakeable, lanes) {
            var pingCache = root5.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root5.pingCache = new PossiblyWeakMap$1();
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root5, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root5, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update2 = createUpdate(NoTimestamp, SyncLane);
                        update2.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update2);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root5, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root5 = finishedWork.stateNode;
                    clearContainer(root5.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag3, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag3) === tag3) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag3, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag3) === tag3) {
                  var create18 = effect.create;
                  effect.destroy = create18();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag3 = _effect.tag;
                if ((tag3 & Passive$1) !== NoFlags$1 && (tag3 & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag3 = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag3 & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root5, renderPriorityLevel) {
            var node = root5;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root5) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root5) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null) {
              if (isHostParent(parent2)) {
                return parent2;
              }
              parent2 = parent2.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent2;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent2 = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent2 = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent2 = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent2);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent2);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent2);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent2) {
            var tag3 = node.tag;
            var isHost = tag3 === HostComponent || tag3 === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent2, stateNode, before);
              } else {
                appendChildToContainer(parent2, stateNode);
              }
            } else if (tag3 === HostPortal)
              ;
            else {
              var child2 = node.child;
              if (child2 !== null) {
                insertOrAppendPlacementNodeIntoContainer(child2, before, parent2);
                var sibling = child2.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent2) {
            var tag3 = node.tag;
            var isHost = tag3 === HostComponent || tag3 === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent2, stateNode, before);
              } else {
                appendChild(parent2, stateNode);
              }
            } else if (tag3 === HostPortal)
              ;
            else {
              var child2 = node.child;
              if (child2 !== null) {
                insertOrAppendPlacementNode(child2, before, parent2);
                var sibling = child2.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent2 = node.return;
                findParent:
                  while (true) {
                    if (!(parent2 !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent2.stateNode;
                    switch (parent2.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent2 = parent2.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now3() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now3();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now3();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode2 & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode2 & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root5 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root5 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root5, lane, eventTime);
            if (root5 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root5, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root5, lane);
                performSyncWorkOnRoot(root5);
              } else {
                ensureRootIsScheduled(root5, eventTime);
                schedulePendingInteractions(root5, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = new Set([root5]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root5);
                }
              }
              ensureRootIsScheduled(root5, eventTime);
              schedulePendingInteractions(root5, lane);
            }
            mostRecentlyUpdatedRoot = root5;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent2 = sourceFiber.return;
            while (parent2 !== null) {
              parent2.childLanes = mergeLanes(parent2.childLanes, lane);
              alternate = parent2.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent2.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent2;
              parent2 = parent2.return;
            }
            if (node.tag === HostRoot) {
              var root5 = node.stateNode;
              return root5;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root5, currentTime) {
            var existingCallbackNode = root5.callbackNode;
            markStarvedLanesAsExpired(root5, currentTime);
            var nextLanes = getNextLanes(root5, root5 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root5.callbackNode = null;
                root5.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root5.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root5));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root5));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root5));
            }
            root5.callbackPriority = newCallbackPriority;
            root5.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root5) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root5.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root5.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root5, root5 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root5, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root5, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root5.hydrate) {
                  root5.hydrate = false;
                  clearContainer(root5.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root5);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root5, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root5, NoLanes);
                markRootSuspended$1(root5, lanes);
                ensureRootIsScheduled(root5, now3());
                throw fatalError;
              }
              var finishedWork = root5.current.alternate;
              root5.finishedWork = finishedWork;
              root5.finishedLanes = lanes;
              finishConcurrentRender(root5, exitStatus, lanes);
            }
            ensureRootIsScheduled(root5, now3());
            if (root5.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root5);
            }
            return null;
          }
          function finishConcurrentRender(root5, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root5);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root5, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now3();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root5, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root5.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root5, suspendedLanes);
                      break;
                    }
                    root5.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root5), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root5);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root5, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root5, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now3() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root5.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root5), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root5);
                break;
              }
              case RootCompleted: {
                commitRoot(root5);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root5, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root5, suspendedLanes);
          }
          function performSyncWorkOnRoot(root5) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root5 === workInProgressRoot && includesSomeLane(root5.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root5, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root5, lanes);
                exitStatus = renderRootSync(root5, lanes);
              }
            } else {
              lanes = getNextLanes(root5, NoLanes);
              exitStatus = renderRootSync(root5, lanes);
            }
            if (root5.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root5.hydrate) {
                root5.hydrate = false;
                clearContainer(root5.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root5);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root5, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root5, NoLanes);
              markRootSuspended$1(root5, lanes);
              ensureRootIsScheduled(root5, now3());
              throw fatalError;
            }
            var finishedWork = root5.current.alternate;
            root5.finishedWork = finishedWork;
            root5.finishedLanes = lanes;
            commitRoot(root5);
            ensureRootIsScheduled(root5, now3());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root5) {
                markDiscreteUpdatesExpired(root5);
                ensureRootIsScheduled(root5, now3());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a3, b, c3, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a3, b, c3, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a3) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a3) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a3);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a3));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root5, lanes) {
            root5.finishedWork = null;
            root5.finishedLanes = NoLanes;
            var timeoutHandle = root5.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root5.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root5;
            workInProgress = createWorkInProgress(root5.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root5, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root5, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root5) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root5.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now3();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root5, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root5 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root5, lanes);
              startWorkOnPendingInteractions(root5, lanes);
            }
            var prevInteractions = pushInteractions(root5);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root5, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root5, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root5 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root5, lanes);
              startWorkOnPendingInteractions(root5, lanes);
            }
            var prevInteractions = pushInteractions(root5);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root5, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child2 = completedWork.child;
                  while (child2 !== null) {
                    actualDuration += child2.actualDuration;
                    child2 = child2.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child2 = completedWork.child;
              while (child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child2.lanes, child2.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child2.actualDuration;
                }
                treeBaseDuration += child2.treeBaseDuration;
                child2 = child2.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root5) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root5, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root5, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root5.finishedWork;
            var lanes = root5.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root5.finishedWork = null;
            root5.finishedLanes = NoLanes;
            if (!(finishedWork !== root5.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root5.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root5, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root5)) {
                rootsWithPendingDiscreteUpdates.delete(root5);
              }
            }
            if (root5 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root5);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root5.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root5, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root5.containerInfo);
              root5.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root5, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root5.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root5;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root5.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root5, expirationTimes[i], root5.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root5, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root5, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root5 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root5;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root5, now3());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root5, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root5, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root5, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root5, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create18 = effect.create;
            effect.destroy = create18();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root5 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root5);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root5.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root5, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update2);
            var eventTime = requestEventTime();
            var root5 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root5 !== null) {
              markRootUpdated(root5, SyncLane, eventTime);
              ensureRootIsScheduled(root5, eventTime);
              schedulePendingInteractions(root5, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update2);
                  var eventTime = requestEventTime();
                  var root5 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root5 !== null) {
                    markRootUpdated(root5, SyncLane, eventTime);
                    ensureRootIsScheduled(root5, eventTime);
                    schedulePendingInteractions(root5, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root5, wakeable, pingedLanes) {
            var pingCache = root5.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root5, pingedLanes);
            if (workInProgressRoot === root5 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now3() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root5, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root5, eventTime);
            schedulePendingInteractions(root5, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root5 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root5 !== null) {
              markRootUpdated(root5, retryLane, eventTime);
              ensureRootIsScheduled(root5, eventTime);
              schedulePendingInteractions(root5, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag3 = fiber.tag;
              if (tag3 !== IndeterminateComponent && tag3 !== HostRoot && tag3 !== ClassComponent && tag3 !== FunctionComponent && tag3 !== ForwardRef && tag3 !== MemoComponent && tag3 !== SimpleMemoComponent && tag3 !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag3 = fiber.tag;
              if (tag3 !== HostRoot && tag3 !== ClassComponent && tag3 !== FunctionComponent && tag3 !== ForwardRef && tag3 !== MemoComponent && tag3 !== SimpleMemoComponent && tag3 !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag3 === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root5, lane) {
            return lane * 1e3 + root5.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root5, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root5.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root5, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root5, lane) {
            scheduleInteractions(root5, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root5, lanes) {
            var interactions = new Set();
            root5.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root5.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root5, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root5, committedLanes) {
            var remainingLanesAfterCommit = root5.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root5.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root5, committedLanes);
                subscriber.onWorkStopped(root5.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root5.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root5, update2) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root5.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root5, element) {
            {
              if (root5.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root5, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child2 = fiber.child, sibling = fiber.sibling, tag3 = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag3) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag3 === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child2 !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child2, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root5, families) {
            {
              var hostInstances = new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root5.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child2 = fiber.child, sibling = fiber.sibling, tag3 = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag3) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child2 !== null) {
                  findHostInstancesForMatchingFibersRecursively(child2, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              new Map([[nonExtensibleObject, null]]);
              new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag3, pendingProps, key, mode2) {
            this.tag = tag3;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode2;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag3, pendingProps, key, mode2) {
            return new FiberNode(tag3, pendingProps, key, mode2);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag3) {
            var mode2;
            if (tag3 === ConcurrentRoot) {
              mode2 = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag3 === BlockingRoot) {
              mode2 = BlockingMode | StrictMode;
            } else {
              mode2 = NoMode;
            }
            if (isDevToolsPresent) {
              mode2 |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode2);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode2 |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode2 |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode2, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode2);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode2, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode2, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode2);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode2, lanes) {
            var fiber = createFiber(HostText, content, null, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode2, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode2);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag3, hydrate2) {
            this.tag = tag3;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = new Set();
              this.pendingInteractionMap = new Map();
            }
            {
              switch (tag3) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag3, hydrate2, hydrationCallbacks) {
            var root5 = new FiberRootNode(containerInfo, tag3, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag3);
            root5.current = uninitializedFiber;
            uninitializedFiber.stateNode = root5;
            initializeUpdateQueue(uninitializedFiber);
            return root5;
          }
          function registerMutableSourceForHydration(root5, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root5.mutableSourceEagerHydrationData == null) {
              root5.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root5.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal(children2, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children: children2,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get5(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get5(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag3, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag3, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update2 = createUpdate(eventTime, lane);
            update2.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update2.callback = callback;
            }
            enqueueUpdate(current$1, update2);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index4) {
              var key = path2[index4];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index4 + 1 === path2.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path2, index4 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index4) {
              var oldKey = oldPath[index4];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index4 + 1 === oldPath.length) {
                var newKey = newPath[index4];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index4 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index4, value) {
              if (index4 >= path2.length) {
                return value;
              }
              var key = path2[index4];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path2, index4 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path2, value) {
              return copyWithSetImpl(obj, path2, 0, value);
            };
            var findHook = function(fiber, id2) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id2 > 0) {
                currentHook2 = currentHook2.next;
                id2--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id2, path2, value) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id2, path2) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id2, oldPath, newPath) {
              var hook = findHook(fiber, id2);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path2, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag3, options2) {
            this._internalRoot = createRootImpl(container, tag3, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children2) {
            var root5 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root5.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root5.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children2, root5, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root5 = this._internalRoot;
            var container = root5.containerInfo;
            updateContainer(null, root5, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag3, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root5 = createContainer(container, tag3, hydrate2);
            markContainerAsRoot(root5.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root5, mutableSource);
              }
            }
            return root5;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children2, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root5 = container._reactRootContainer;
            var fiberRoot;
            if (!root5) {
              root5 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root5._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children2, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root5._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children2, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has7(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children2, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children2, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children2, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children2, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports2.createPortal = createPortal$1;
          exports2.findDOMNode = findDOMNode;
          exports2.flushSync = flushSync;
          exports2.hydrate = hydrate;
          exports2.render = render;
          exports2.unmountComponentAtNode = unmountComponentAtNode;
          exports2.unstable_batchedUpdates = batchedUpdates$1;
          exports2.unstable_createPortal = unstable_createPortal;
          exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports2.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports2, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // dist/worker.js
  var React = require_react();
  var ReactDOM = require_react_dom();
  var exports = {};
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target2) => __defProp(target2, "__esModule", { value: true });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
  };
  var __commonJS2 = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target2, all3) => {
    __markAsModule(target2);
    for (var name3 in all3)
      __defProp(target2, name3, { get: all3[name3], enumerable: true });
  };
  var __reExport = (target2, module2, desc) => {
    if (module2 && typeof module2 === "object" || typeof module2 === "function") {
      for (let key of __getOwnPropNames(module2))
        if (!__hasOwnProp.call(target2, key) && key !== "default")
          __defProp(target2, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
    }
    return target2;
  };
  var __toModule = (module2) => {
    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
  };
  function dispatch2() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
        throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch2(_);
  }
  function Dispatch2(_) {
    this._ = _;
  }
  function parseTypenames3(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name3 = "", i = t.indexOf(".");
      if (i >= 0)
        name3 = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t))
        throw new Error("unknown type: " + t);
      return { type: t, name: name3 };
    });
  }
  function get14(type, name3) {
    for (var i = 0, n = type.length, c3; i < n; ++i) {
      if ((c3 = type[i]).name === name3) {
        return c3.value;
      }
    }
  }
  function set7(type, name3, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name3) {
        type[i] = noop2, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    }
    if (callback != null)
      type.push({ name: name3, value: callback });
    return type;
  }
  var noop2;
  var dispatch_default3;
  var init_dispatch = __esm({
    "../react-d3-graph/node_modules/d3-dispatch/src/dispatch.js"() {
      noop2 = { value: () => {
      } };
      Dispatch2.prototype = dispatch2.prototype = {
        constructor: Dispatch2,
        on: function(typename, callback) {
          var _ = this._, T3 = parseTypenames3(typename + "", _), t, i = -1, n = T3.length;
          if (arguments.length < 2) {
            while (++i < n)
              if ((t = (typename = T3[i]).type) && (t = get14(_[t], typename.name)))
                return t;
            return;
          }
          if (callback != null && typeof callback !== "function")
            throw new Error("invalid callback: " + callback);
          while (++i < n) {
            if (t = (typename = T3[i]).type)
              _[t] = set7(_[t], typename.name, callback);
            else if (callback == null)
              for (t in _)
                _[t] = set7(_[t], typename.name, null);
          }
          return this;
        },
        copy: function() {
          var copy = {}, _ = this._;
          for (var t in _)
            copy[t] = _[t].slice();
          return new Dispatch2(copy);
        },
        call: function(type, that) {
          if ((n = arguments.length - 2) > 0)
            for (var args = new Array(n), i = 0, n, t; i < n; ++i)
              args[i] = arguments[i + 2];
          if (!this._.hasOwnProperty(type))
            throw new Error("unknown type: " + type);
          for (t = this._[type], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
        },
        apply: function(type, that, args) {
          if (!this._.hasOwnProperty(type))
            throw new Error("unknown type: " + type);
          for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
        }
      };
      dispatch_default3 = dispatch2;
    }
  });
  var init_src = __esm({
    "../react-d3-graph/node_modules/d3-dispatch/src/index.js"() {
      init_dispatch();
    }
  });
  var xhtml2;
  var namespaces_default2;
  var init_namespaces = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/namespaces.js"() {
      xhtml2 = "http://www.w3.org/1999/xhtml";
      namespaces_default2 = {
        svg: "http://www.w3.org/2000/svg",
        xhtml: xhtml2,
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
      };
    }
  });
  function namespace_default2(name3) {
    var prefix = name3 += "", i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name3.slice(0, i)) !== "xmlns")
      name3 = name3.slice(i + 1);
    return namespaces_default2.hasOwnProperty(prefix) ? { space: namespaces_default2[prefix], local: name3 } : name3;
  }
  var init_namespace = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/namespace.js"() {
      init_namespaces();
    }
  });
  function creatorInherit2(name3) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml2 && document2.documentElement.namespaceURI === xhtml2 ? document2.createElement(name3) : document2.createElementNS(uri, name3);
    };
  }
  function creatorFixed2(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default2(name3) {
    var fullname = namespace_default2(name3);
    return (fullname.local ? creatorFixed2 : creatorInherit2)(fullname);
  }
  var init_creator = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/creator.js"() {
      init_namespace();
      init_namespaces();
    }
  });
  function none2() {
  }
  function selector_default2(selector) {
    return selector == null ? none2 : function() {
      return this.querySelector(selector);
    };
  }
  var init_selector = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selector.js"() {
    }
  });
  function select_default3(select) {
    if (typeof select !== "function")
      select = selector_default2(select);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group2[i]) && (subnode = select.call(node, node.__data__, i, group2))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
        }
      }
    }
    return new Selection3(subgroups, this._parents);
  }
  var init_select = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/select.js"() {
      init_selection();
      init_selector();
    }
  });
  function array2(x5) {
    return x5 == null ? [] : Array.isArray(x5) ? x5 : Array.from(x5);
  }
  var init_array = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/array.js"() {
    }
  });
  function empty5() {
    return [];
  }
  function selectorAll_default2(selector) {
    return selector == null ? empty5 : function() {
      return this.querySelectorAll(selector);
    };
  }
  var init_selectorAll = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selectorAll.js"() {
    }
  });
  function arrayAll2(select) {
    return function() {
      return array2(select.apply(this, arguments));
    };
  }
  function selectAll_default3(select) {
    if (typeof select === "function")
      select = arrayAll2(select);
    else
      select = selectorAll_default2(select);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents2 = [], j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          subgroups.push(select.call(node, node.__data__, i, group2));
          parents2.push(node);
        }
      }
    }
    return new Selection3(subgroups, parents2);
  }
  var init_selectAll = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/selectAll.js"() {
      init_selection();
      init_array();
      init_selectorAll();
    }
  });
  function matcher_default2(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher2(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }
  var init_matcher = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/matcher.js"() {
    }
  });
  function childFind2(match2) {
    return function() {
      return find3.call(this.children, match2);
    };
  }
  function childFirst2() {
    return this.firstElementChild;
  }
  function selectChild_default2(match2) {
    return this.select(match2 == null ? childFirst2 : childFind2(typeof match2 === "function" ? match2 : childMatcher2(match2)));
  }
  var find3;
  var init_selectChild = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/selectChild.js"() {
      init_matcher();
      find3 = Array.prototype.find;
    }
  });
  function children4() {
    return Array.from(this.children);
  }
  function childrenFilter2(match2) {
    return function() {
      return filter5.call(this.children, match2);
    };
  }
  function selectChildren_default2(match2) {
    return this.selectAll(match2 == null ? children4 : childrenFilter2(typeof match2 === "function" ? match2 : childMatcher2(match2)));
  }
  var filter5;
  var init_selectChildren = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/selectChildren.js"() {
      init_matcher();
      filter5 = Array.prototype.filter;
    }
  });
  function filter_default3(match2) {
    if (typeof match2 !== "function")
      match2 = matcher_default2(match2);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group2[i]) && match2.call(node, node.__data__, i, group2)) {
          subgroup.push(node);
        }
      }
    }
    return new Selection3(subgroups, this._parents);
  }
  var init_filter = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/filter.js"() {
      init_selection();
      init_matcher();
    }
  });
  function sparse_default2(update2) {
    return new Array(update2.length);
  }
  var init_sparse = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/sparse.js"() {
    }
  });
  function enter_default2() {
    return new Selection3(this._enter || this._groups.map(sparse_default2), this._parents);
  }
  function EnterNode2(parent2, datum3) {
    this.ownerDocument = parent2.ownerDocument;
    this.namespaceURI = parent2.namespaceURI;
    this._next = null;
    this._parent = parent2;
    this.__data__ = datum3;
  }
  var init_enter = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/enter.js"() {
      init_sparse();
      init_selection();
      EnterNode2.prototype = {
        constructor: EnterNode2,
        appendChild: function(child2) {
          return this._parent.insertBefore(child2, this._next);
        },
        insertBefore: function(child2, next) {
          return this._parent.insertBefore(child2, next);
        },
        querySelector: function(selector) {
          return this._parent.querySelector(selector);
        },
        querySelectorAll: function(selector) {
          return this._parent.querySelectorAll(selector);
        }
      };
    }
  });
  function constant_default4(x5) {
    return function() {
      return x5;
    };
  }
  var init_constant = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/constant.js"() {
    }
  });
  function bindIndex2(parent2, group2, enter, update2, exit, data) {
    var i = 0, node, groupLength = group2.length, dataLength = data.length;
    for (; i < dataLength; ++i) {
      if (node = group2[i]) {
        node.__data__ = data[i];
        update2[i] = node;
      } else {
        enter[i] = new EnterNode2(parent2, data[i]);
      }
    }
    for (; i < groupLength; ++i) {
      if (node = group2[i]) {
        exit[i] = node;
      }
    }
  }
  function bindKey2(parent2, group2, enter, update2, exit, data, key) {
    var i, node, nodeByKeyValue = new Map(), groupLength = group2.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i = 0; i < groupLength; ++i) {
      if (node = group2[i]) {
        keyValues[i] = keyValue = key.call(node, node.__data__, i, group2) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    }
    for (i = 0; i < dataLength; ++i) {
      keyValue = key.call(parent2, data[i], i, data) + "";
      if (node = nodeByKeyValue.get(keyValue)) {
        update2[i] = node;
        node.__data__ = data[i];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i] = new EnterNode2(parent2, data[i]);
      }
    }
    for (i = 0; i < groupLength; ++i) {
      if ((node = group2[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
        exit[i] = node;
      }
    }
  }
  function datum2(node) {
    return node.__data__;
  }
  function data_default2(value, key) {
    if (!arguments.length)
      return Array.from(this, datum2);
    var bind = key ? bindKey2 : bindIndex2, parents2 = this._parents, groups2 = this._groups;
    if (typeof value !== "function")
      value = constant_default4(value);
    for (var m2 = groups2.length, update2 = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
      var parent2 = parents2[j], group2 = groups2[j], groupLength = group2.length, data = arraylike2(value.call(parent2, parent2 && parent2.__data__, j, parents2)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update2[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
      bind(parent2, group2, enterGroup, updateGroup, exitGroup, data, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength)
            ;
          previous._next = next || null;
        }
      }
    }
    update2 = new Selection3(update2, parents2);
    update2._enter = enter;
    update2._exit = exit;
    return update2;
  }
  function arraylike2(data) {
    return typeof data === "object" && "length" in data ? data : Array.from(data);
  }
  var init_data = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/data.js"() {
      init_selection();
      init_enter();
      init_constant();
    }
  });
  function exit_default2() {
    return new Selection3(this._exit || this._groups.map(sparse_default2), this._parents);
  }
  var init_exit = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/exit.js"() {
      init_sparse();
      init_selection();
    }
  });
  function join_default2(onenter, onupdate, onexit) {
    var enter = this.enter(), update2 = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter)
        enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }
    if (onupdate != null) {
      update2 = onupdate(update2);
      if (update2)
        update2 = update2.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter && update2 ? enter.merge(update2).order() : update2;
  }
  var init_join = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/join.js"() {
    }
  });
  function merge_default3(context) {
    var selection3 = context.selection ? context.selection() : context;
    for (var groups0 = this._groups, groups1 = selection3._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge6 = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge6[i] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Selection3(merges, this._parents);
  }
  var init_merge = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/merge.js"() {
      init_selection();
    }
  });
  function order_default2() {
    for (var groups2 = this._groups, j = -1, m2 = groups2.length; ++j < m2; ) {
      for (var group2 = groups2[j], i = group2.length - 1, next = group2[i], node; --i >= 0; ) {
        if (node = group2[i]) {
          if (next && node.compareDocumentPosition(next) ^ 4)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  }
  var init_order = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/order.js"() {
    }
  });
  function sort_default2(compare2) {
    if (!compare2)
      compare2 = ascending2;
    function compareNode(a3, b) {
      return a3 && b ? compare2(a3.__data__, b.__data__) : !a3 - !b;
    }
    for (var groups2 = this._groups, m2 = groups2.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          sortgroup[i] = node;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection3(sortgroups, this._parents).order();
  }
  function ascending2(a3, b) {
    return a3 < b ? -1 : a3 > b ? 1 : a3 >= b ? 0 : NaN;
  }
  var init_sort = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/sort.js"() {
      init_selection();
    }
  });
  function call_default2() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }
  var init_call = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/call.js"() {
    }
  });
  function nodes_default2() {
    return Array.from(this);
  }
  var init_nodes = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/nodes.js"() {
    }
  });
  function node_default2() {
    for (var groups2 = this._groups, j = 0, m2 = groups2.length; j < m2; ++j) {
      for (var group2 = groups2[j], i = 0, n = group2.length; i < n; ++i) {
        var node = group2[i];
        if (node)
          return node;
      }
    }
    return null;
  }
  var init_node = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/node.js"() {
    }
  });
  function size_default2() {
    let size11 = 0;
    for (const node of this)
      ++size11;
    return size11;
  }
  var init_size = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/size.js"() {
    }
  });
  function empty_default2() {
    return !this.node();
  }
  var init_empty = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/empty.js"() {
    }
  });
  function each_default2(callback) {
    for (var groups2 = this._groups, j = 0, m2 = groups2.length; j < m2; ++j) {
      for (var group2 = groups2[j], i = 0, n = group2.length, node; i < n; ++i) {
        if (node = group2[i])
          callback.call(node, node.__data__, i, group2);
      }
    }
    return this;
  }
  var init_each = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/each.js"() {
    }
  });
  function attrRemove3(name3) {
    return function() {
      this.removeAttribute(name3);
    };
  }
  function attrRemoveNS3(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant3(name3, value) {
    return function() {
      this.setAttribute(name3, value);
    };
  }
  function attrConstantNS3(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }
  function attrFunction3(name3, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.removeAttribute(name3);
      else
        this.setAttribute(name3, v);
    };
  }
  function attrFunctionNS3(fullname, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }
  function attr_default3(name3, value) {
    var fullname = namespace_default2(name3);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS3 : attrRemove3 : typeof value === "function" ? fullname.local ? attrFunctionNS3 : attrFunction3 : fullname.local ? attrConstantNS3 : attrConstant3)(fullname, value));
  }
  var init_attr = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/attr.js"() {
      init_namespace();
    }
  });
  function window_default2(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }
  var init_window = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/window.js"() {
    }
  });
  function styleRemove3(name3) {
    return function() {
      this.style.removeProperty(name3);
    };
  }
  function styleConstant3(name3, value, priority) {
    return function() {
      this.style.setProperty(name3, value, priority);
    };
  }
  function styleFunction3(name3, value, priority) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.style.removeProperty(name3);
      else
        this.style.setProperty(name3, v, priority);
    };
  }
  function style_default3(name3, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove3 : typeof value === "function" ? styleFunction3 : styleConstant3)(name3, value, priority == null ? "" : priority)) : styleValue2(this.node(), name3);
  }
  function styleValue2(node, name3) {
    return node.style.getPropertyValue(name3) || window_default2(node).getComputedStyle(node, null).getPropertyValue(name3);
  }
  var init_style = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/style.js"() {
      init_window();
    }
  });
  function propertyRemove2(name3) {
    return function() {
      delete this[name3];
    };
  }
  function propertyConstant2(name3, value) {
    return function() {
      this[name3] = value;
    };
  }
  function propertyFunction2(name3, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        delete this[name3];
      else
        this[name3] = v;
    };
  }
  function property_default2(name3, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove2 : typeof value === "function" ? propertyFunction2 : propertyConstant2)(name3, value)) : this.node()[name3];
  }
  var init_property = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/property.js"() {
    }
  });
  function classArray2(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList2(node) {
    return node.classList || new ClassList2(node);
  }
  function ClassList2(node) {
    this._node = node;
    this._names = classArray2(node.getAttribute("class") || "");
  }
  function classedAdd2(node, names) {
    var list = classList2(node), i = -1, n = names.length;
    while (++i < n)
      list.add(names[i]);
  }
  function classedRemove2(node, names) {
    var list = classList2(node), i = -1, n = names.length;
    while (++i < n)
      list.remove(names[i]);
  }
  function classedTrue2(names) {
    return function() {
      classedAdd2(this, names);
    };
  }
  function classedFalse2(names) {
    return function() {
      classedRemove2(this, names);
    };
  }
  function classedFunction2(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd2 : classedRemove2)(this, names);
    };
  }
  function classed_default2(name3, value) {
    var names = classArray2(name3 + "");
    if (arguments.length < 2) {
      var list = classList2(this.node()), i = -1, n = names.length;
      while (++i < n)
        if (!list.contains(names[i]))
          return false;
      return true;
    }
    return this.each((typeof value === "function" ? classedFunction2 : value ? classedTrue2 : classedFalse2)(names, value));
  }
  var init_classed = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/classed.js"() {
      ClassList2.prototype = {
        add: function(name3) {
          var i = this._names.indexOf(name3);
          if (i < 0) {
            this._names.push(name3);
            this._node.setAttribute("class", this._names.join(" "));
          }
        },
        remove: function(name3) {
          var i = this._names.indexOf(name3);
          if (i >= 0) {
            this._names.splice(i, 1);
            this._node.setAttribute("class", this._names.join(" "));
          }
        },
        contains: function(name3) {
          return this._names.indexOf(name3) >= 0;
        }
      };
    }
  });
  function textRemove2() {
    this.textContent = "";
  }
  function textConstant3(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction3(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }
  function text_default3(value) {
    return arguments.length ? this.each(value == null ? textRemove2 : (typeof value === "function" ? textFunction3 : textConstant3)(value)) : this.node().textContent;
  }
  var init_text = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/text.js"() {
    }
  });
  function htmlRemove2() {
    this.innerHTML = "";
  }
  function htmlConstant2(value) {
    return function() {
      this.innerHTML = value;
    };
  }
  function htmlFunction2(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }
  function html_default2(value) {
    return arguments.length ? this.each(value == null ? htmlRemove2 : (typeof value === "function" ? htmlFunction2 : htmlConstant2)(value)) : this.node().innerHTML;
  }
  var init_html = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/html.js"() {
    }
  });
  function raise2() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default2() {
    return this.each(raise2);
  }
  var init_raise = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/raise.js"() {
    }
  });
  function lower2() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default2() {
    return this.each(lower2);
  }
  var init_lower = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/lower.js"() {
    }
  });
  function append_default2(name3) {
    var create18 = typeof name3 === "function" ? name3 : creator_default2(name3);
    return this.select(function() {
      return this.appendChild(create18.apply(this, arguments));
    });
  }
  var init_append = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/append.js"() {
      init_creator();
    }
  });
  function constantNull2() {
    return null;
  }
  function insert_default2(name3, before) {
    var create18 = typeof name3 === "function" ? name3 : creator_default2(name3), select = before == null ? constantNull2 : typeof before === "function" ? before : selector_default2(before);
    return this.select(function() {
      return this.insertBefore(create18.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }
  var init_insert = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/insert.js"() {
      init_creator();
      init_selector();
    }
  });
  function remove6() {
    var parent2 = this.parentNode;
    if (parent2)
      parent2.removeChild(this);
  }
  function remove_default3() {
    return this.each(remove6);
  }
  var init_remove = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/remove.js"() {
    }
  });
  function selection_cloneShallow2() {
    var clone = this.cloneNode(false), parent2 = this.parentNode;
    return parent2 ? parent2.insertBefore(clone, this.nextSibling) : clone;
  }
  function selection_cloneDeep2() {
    var clone = this.cloneNode(true), parent2 = this.parentNode;
    return parent2 ? parent2.insertBefore(clone, this.nextSibling) : clone;
  }
  function clone_default2(deep) {
    return this.select(deep ? selection_cloneDeep2 : selection_cloneShallow2);
  }
  var init_clone = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/clone.js"() {
    }
  });
  function datum_default2(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }
  var init_datum = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/datum.js"() {
    }
  });
  function contextListener2(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames4(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name3 = "", i = t.indexOf(".");
      if (i >= 0)
        name3 = t.slice(i + 1), t = t.slice(0, i);
      return { type: t, name: name3 };
    });
  }
  function onRemove2(typename) {
    return function() {
      var on = this.__on;
      if (!on)
        return;
      for (var j = 0, i = -1, m2 = on.length, o; j < m2; ++j) {
        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
        } else {
          on[++i] = o;
        }
      }
      if (++i)
        on.length = i;
      else
        delete this.__on;
    };
  }
  function onAdd2(typename, value, options) {
    return function() {
      var on = this.__on, o, listener = contextListener2(value);
      if (on)
        for (var j = 0, m2 = on.length; j < m2; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options);
      o = { type: typename.type, name: typename.name, value, listener, options };
      if (!on)
        this.__on = [o];
      else
        on.push(o);
    };
  }
  function on_default3(typename, value, options) {
    var typenames = parseTypenames4(typename + ""), i, n = typenames.length, t;
    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on)
        for (var j = 0, m2 = on.length, o; j < m2; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
      return;
    }
    on = value ? onAdd2 : onRemove2;
    for (i = 0; i < n; ++i)
      this.each(on(typenames[i], value, options));
    return this;
  }
  var init_on = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/on.js"() {
    }
  });
  function dispatchEvent2(node, type, params) {
    var window2 = window_default2(node), event = window2.CustomEvent;
    if (typeof event === "function") {
      event = new event(type, params);
    } else {
      event = window2.document.createEvent("Event");
      if (params)
        event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type, false, false);
    }
    node.dispatchEvent(event);
  }
  function dispatchConstant2(type, params) {
    return function() {
      return dispatchEvent2(this, type, params);
    };
  }
  function dispatchFunction2(type, params) {
    return function() {
      return dispatchEvent2(this, type, params.apply(this, arguments));
    };
  }
  function dispatch_default4(type, params) {
    return this.each((typeof params === "function" ? dispatchFunction2 : dispatchConstant2)(type, params));
  }
  var init_dispatch2 = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/dispatch.js"() {
      init_window();
    }
  });
  function* iterator_default2() {
    for (var groups2 = this._groups, j = 0, m2 = groups2.length; j < m2; ++j) {
      for (var group2 = groups2[j], i = 0, n = group2.length, node; i < n; ++i) {
        if (node = group2[i])
          yield node;
      }
    }
  }
  var init_iterator = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/iterator.js"() {
    }
  });
  function Selection3(groups2, parents2) {
    this._groups = groups2;
    this._parents = parents2;
  }
  function selection2() {
    return new Selection3([[document.documentElement]], root3);
  }
  function selection_selection2() {
    return this;
  }
  var root3;
  var selection_default3;
  var init_selection = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selection/index.js"() {
      init_select();
      init_selectAll();
      init_selectChild();
      init_selectChildren();
      init_filter();
      init_data();
      init_enter();
      init_exit();
      init_join();
      init_merge();
      init_order();
      init_sort();
      init_call();
      init_nodes();
      init_node();
      init_size();
      init_empty();
      init_each();
      init_attr();
      init_style();
      init_property();
      init_classed();
      init_text();
      init_html();
      init_raise();
      init_lower();
      init_append();
      init_insert();
      init_remove();
      init_clone();
      init_datum();
      init_on();
      init_dispatch2();
      init_iterator();
      root3 = [null];
      Selection3.prototype = selection2.prototype = {
        constructor: Selection3,
        select: select_default3,
        selectAll: selectAll_default3,
        selectChild: selectChild_default2,
        selectChildren: selectChildren_default2,
        filter: filter_default3,
        data: data_default2,
        enter: enter_default2,
        exit: exit_default2,
        join: join_default2,
        merge: merge_default3,
        selection: selection_selection2,
        order: order_default2,
        sort: sort_default2,
        call: call_default2,
        nodes: nodes_default2,
        node: node_default2,
        size: size_default2,
        empty: empty_default2,
        each: each_default2,
        attr: attr_default3,
        style: style_default3,
        property: property_default2,
        classed: classed_default2,
        text: text_default3,
        html: html_default2,
        raise: raise_default2,
        lower: lower_default2,
        append: append_default2,
        insert: insert_default2,
        remove: remove_default3,
        clone: clone_default2,
        datum: datum_default2,
        on: on_default3,
        dispatch: dispatch_default4,
        [Symbol.iterator]: iterator_default2
      };
      selection_default3 = selection2;
    }
  });
  function select_default4(selector) {
    return typeof selector === "string" ? new Selection3([[document.querySelector(selector)]], [document.documentElement]) : new Selection3([[selector]], root3);
  }
  var init_select2 = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/select.js"() {
      init_selection();
    }
  });
  function create_default(name3) {
    return select_default4(creator_default2(name3).call(document.documentElement));
  }
  var init_create = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/create.js"() {
      init_creator();
      init_select2();
    }
  });
  function local() {
    return new Local();
  }
  function Local() {
    this._ = "@" + (++nextId).toString(36);
  }
  var nextId;
  var init_local = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/local.js"() {
      nextId = 0;
      Local.prototype = local.prototype = {
        constructor: Local,
        get: function(node) {
          var id10 = this._;
          while (!(id10 in node))
            if (!(node = node.parentNode))
              return;
          return node[id10];
        },
        set: function(node, value) {
          return node[this._] = value;
        },
        remove: function(node) {
          return this._ in node && delete node[this._];
        },
        toString: function() {
          return this._;
        }
      };
    }
  });
  function sourceEvent_default(event) {
    let sourceEvent;
    while (sourceEvent = event.sourceEvent)
      event = sourceEvent;
    return event;
  }
  var init_sourceEvent = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/sourceEvent.js"() {
    }
  });
  function pointer_default(event, node) {
    event = sourceEvent_default(event);
    if (node === void 0)
      node = event.currentTarget;
    if (node) {
      var svg = node.ownerSVGElement || node;
      if (svg.createSVGPoint) {
        var point5 = svg.createSVGPoint();
        point5.x = event.clientX, point5.y = event.clientY;
        point5 = point5.matrixTransform(node.getScreenCTM().inverse());
        return [point5.x, point5.y];
      }
      if (node.getBoundingClientRect) {
        var rect = node.getBoundingClientRect();
        return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
      }
    }
    return [event.pageX, event.pageY];
  }
  var init_pointer = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/pointer.js"() {
      init_sourceEvent();
    }
  });
  function pointers_default(events, node) {
    if (events.target) {
      events = sourceEvent_default(events);
      if (node === void 0)
        node = events.currentTarget;
      events = events.touches || [events];
    }
    return Array.from(events, (event) => pointer_default(event, node));
  }
  var init_pointers = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/pointers.js"() {
      init_pointer();
      init_sourceEvent();
    }
  });
  function selectAll_default4(selector) {
    return typeof selector === "string" ? new Selection3([document.querySelectorAll(selector)], [document.documentElement]) : new Selection3([array2(selector)], root3);
  }
  var init_selectAll2 = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/selectAll.js"() {
      init_array();
      init_selection();
    }
  });
  var src_exports = {};
  __export(src_exports, {
    create: () => create_default,
    creator: () => creator_default2,
    local: () => local,
    matcher: () => matcher_default2,
    namespace: () => namespace_default2,
    namespaces: () => namespaces_default2,
    pointer: () => pointer_default,
    pointers: () => pointers_default,
    select: () => select_default4,
    selectAll: () => selectAll_default4,
    selection: () => selection_default3,
    selector: () => selector_default2,
    selectorAll: () => selectorAll_default2,
    style: () => styleValue2,
    window: () => window_default2
  });
  var init_src2 = __esm({
    "../react-d3-graph/node_modules/d3-selection/src/index.js"() {
      init_create();
      init_creator();
      init_local();
      init_matcher();
      init_namespace();
      init_namespaces();
      init_pointer();
      init_pointers();
      init_select2();
      init_selectAll2();
      init_selection();
      init_selector();
      init_selectorAll();
      init_style();
      init_window();
    }
  });
  function nopropagation2(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default2(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }
  var nonpassive;
  var nonpassivecapture;
  var init_noevent = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/noevent.js"() {
      nonpassive = { passive: false };
      nonpassivecapture = { capture: true, passive: false };
    }
  });
  function nodrag_default(view) {
    var root4 = view.document.documentElement, selection3 = select_default4(view).on("dragstart.drag", noevent_default2, nonpassivecapture);
    if ("onselectstart" in root4) {
      selection3.on("selectstart.drag", noevent_default2, nonpassivecapture);
    } else {
      root4.__noselect = root4.style.MozUserSelect;
      root4.style.MozUserSelect = "none";
    }
  }
  function yesdrag(view, noclick) {
    var root4 = view.document.documentElement, selection3 = select_default4(view).on("dragstart.drag", null);
    if (noclick) {
      selection3.on("click.drag", noevent_default2, nonpassivecapture);
      setTimeout(function() {
        selection3.on("click.drag", null);
      }, 0);
    }
    if ("onselectstart" in root4) {
      selection3.on("selectstart.drag", null);
    } else {
      root4.style.MozUserSelect = root4.__noselect;
      delete root4.__noselect;
    }
  }
  var init_nodrag = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/nodrag.js"() {
      init_src2();
      init_noevent();
    }
  });
  var constant_default5;
  var init_constant2 = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/constant.js"() {
      constant_default5 = (x5) => () => x5;
    }
  });
  function DragEvent(type, {
    sourceEvent,
    subject,
    target: target2,
    identifier,
    active,
    x: x5,
    y: y5,
    dx,
    dy,
    dispatch: dispatch3
  }) {
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      subject: { value: subject, enumerable: true, configurable: true },
      target: { value: target2, enumerable: true, configurable: true },
      identifier: { value: identifier, enumerable: true, configurable: true },
      active: { value: active, enumerable: true, configurable: true },
      x: { value: x5, enumerable: true, configurable: true },
      y: { value: y5, enumerable: true, configurable: true },
      dx: { value: dx, enumerable: true, configurable: true },
      dy: { value: dy, enumerable: true, configurable: true },
      _: { value: dispatch3 }
    });
  }
  var init_event = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/event.js"() {
      DragEvent.prototype.on = function() {
        var value = this._.on.apply(this._, arguments);
        return value === this._ ? this : value;
      };
    }
  });
  function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
  }
  function defaultContainer() {
    return this.parentNode;
  }
  function defaultSubject(event, d) {
    return d == null ? { x: event.x, y: event.y } : d;
  }
  function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function drag_default() {
    var filter7 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default3("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
    function drag(selection3) {
      selection3.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    function mousedowned(event, d) {
      if (touchending || !filter7.call(this, event, d))
        return;
      var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
      if (!gesture)
        return;
      select_default4(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
      nodrag_default(event.view);
      nopropagation2(event);
      mousemoving = false;
      mousedownx = event.clientX;
      mousedowny = event.clientY;
      gesture("start", event);
    }
    function mousemoved(event) {
      noevent_default2(event);
      if (!mousemoving) {
        var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
        mousemoving = dx * dx + dy * dy > clickDistance2;
      }
      gestures.mouse("drag", event);
    }
    function mouseupped(event) {
      select_default4(event.view).on("mousemove.drag mouseup.drag", null);
      yesdrag(event.view, mousemoving);
      noevent_default2(event);
      gestures.mouse("end", event);
    }
    function touchstarted(event, d) {
      if (!filter7.call(this, event, d))
        return;
      var touches = event.changedTouches, c3 = container.call(this, event, d), n = touches.length, i, gesture;
      for (i = 0; i < n; ++i) {
        if (gesture = beforestart(this, c3, event, d, touches[i].identifier, touches[i])) {
          nopropagation2(event);
          gesture("start", event, touches[i]);
        }
      }
    }
    function touchmoved(event) {
      var touches = event.changedTouches, n = touches.length, i, gesture;
      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          noevent_default2(event);
          gesture("drag", event, touches[i]);
        }
      }
    }
    function touchended(event) {
      var touches = event.changedTouches, n = touches.length, i, gesture;
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, 500);
      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          nopropagation2(event);
          gesture("end", event, touches[i]);
        }
      }
    }
    function beforestart(that, container2, event, d, identifier, touch) {
      var dispatch3 = listeners.copy(), p = pointer_default(touch || event, container2), dx, dy, s2;
      if ((s2 = subject.call(that, new DragEvent("beforestart", {
        sourceEvent: event,
        target: drag,
        identifier,
        active,
        x: p[0],
        y: p[1],
        dx: 0,
        dy: 0,
        dispatch: dispatch3
      }), d)) == null)
        return;
      dx = s2.x - p[0] || 0;
      dy = s2.y - p[1] || 0;
      return function gesture(type, event2, touch2) {
        var p0 = p, n;
        switch (type) {
          case "start":
            gestures[identifier] = gesture, n = active++;
            break;
          case "end":
            delete gestures[identifier], --active;
          case "drag":
            p = pointer_default(touch2 || event2, container2), n = active;
            break;
        }
        dispatch3.call(type, that, new DragEvent(type, {
          sourceEvent: event2,
          subject: s2,
          target: drag,
          identifier,
          active: n,
          x: p[0] + dx,
          y: p[1] + dy,
          dx: p[0] - p0[0],
          dy: p[1] - p0[1],
          dispatch: dispatch3
        }), d);
      };
    }
    drag.filter = function(_) {
      return arguments.length ? (filter7 = typeof _ === "function" ? _ : constant_default5(!!_), drag) : filter7;
    };
    drag.container = function(_) {
      return arguments.length ? (container = typeof _ === "function" ? _ : constant_default5(_), drag) : container;
    };
    drag.subject = function(_) {
      return arguments.length ? (subject = typeof _ === "function" ? _ : constant_default5(_), drag) : subject;
    };
    drag.touchable = function(_) {
      return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default5(!!_), drag) : touchable;
    };
    drag.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? drag : value;
    };
    drag.clickDistance = function(_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
    };
    return drag;
  }
  var init_drag = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/drag.js"() {
      init_src();
      init_src2();
      init_nodrag();
      init_noevent();
      init_constant2();
      init_event();
    }
  });
  var src_exports2 = {};
  __export(src_exports2, {
    drag: () => drag_default,
    dragDisable: () => nodrag_default,
    dragEnable: () => yesdrag
  });
  var init_src3 = __esm({
    "../react-d3-graph/node_modules/d3-drag/src/index.js"() {
      init_drag();
      init_nodrag();
    }
  });
  function center_default(x5, y5) {
    var nodes4, strength = 1;
    if (x5 == null)
      x5 = 0;
    if (y5 == null)
      y5 = 0;
    function force() {
      var i, n = nodes4.length, node, sx = 0, sy = 0;
      for (i = 0; i < n; ++i) {
        node = nodes4[i], sx += node.x, sy += node.y;
      }
      for (sx = (sx / n - x5) * strength, sy = (sy / n - y5) * strength, i = 0; i < n; ++i) {
        node = nodes4[i], node.x -= sx, node.y -= sy;
      }
    }
    force.initialize = function(_) {
      nodes4 = _;
    };
    force.x = function(_) {
      return arguments.length ? (x5 = +_, force) : x5;
    };
    force.y = function(_) {
      return arguments.length ? (y5 = +_, force) : y5;
    };
    force.strength = function(_) {
      return arguments.length ? (strength = +_, force) : strength;
    };
    return force;
  }
  var init_center = __esm({
    "../react-d3-graph/node_modules/d3-force/src/center.js"() {
    }
  });
  function add_default(d) {
    const x5 = +this._x.call(null, d), y5 = +this._y.call(null, d);
    return add5(this.cover(x5, y5), x5, y5, d);
  }
  function add5(tree, x5, y5, d) {
    if (isNaN(x5) || isNaN(y5))
      return tree;
    var parent2, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
    if (!node)
      return tree._root = leaf, tree;
    while (node.length) {
      if (right = x5 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom = y5 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
      if (parent2 = node, !(node = node[i = bottom << 1 | right]))
        return parent2[i] = leaf, tree;
    }
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x5 === xp && y5 === yp)
      return leaf.next = node, parent2 ? parent2[i] = leaf : tree._root = leaf, tree;
    do {
      parent2 = parent2 ? parent2[i] = new Array(4) : tree._root = new Array(4);
      if (right = x5 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom = y5 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
    return parent2[j] = node, parent2[i] = leaf, tree;
  }
  function addAll(data) {
    var d, i, n = data.length, x5, y5, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
    for (i = 0; i < n; ++i) {
      if (isNaN(x5 = +this._x.call(null, d = data[i])) || isNaN(y5 = +this._y.call(null, d)))
        continue;
      xz[i] = x5;
      yz[i] = y5;
      if (x5 < x0)
        x0 = x5;
      if (x5 > x1)
        x1 = x5;
      if (y5 < y0)
        y0 = y5;
      if (y5 > y1)
        y1 = y5;
    }
    if (x0 > x1 || y0 > y1)
      return this;
    this.cover(x0, y0).cover(x1, y1);
    for (i = 0; i < n; ++i) {
      add5(this, xz[i], yz[i], data[i]);
    }
    return this;
  }
  var init_add = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/add.js"() {
    }
  });
  function cover_default(x5, y5) {
    if (isNaN(x5 = +x5) || isNaN(y5 = +y5))
      return this;
    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x5)) + 1;
      y1 = (y0 = Math.floor(y5)) + 1;
    } else {
      var z = x1 - x0 || 1, node = this._root, parent2, i;
      while (x0 > x5 || x5 >= x1 || y0 > y5 || y5 >= y1) {
        i = (y5 < y0) << 1 | x5 < x0;
        parent2 = new Array(4), parent2[i] = node, node = parent2, z *= 2;
        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;
          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;
          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;
          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }
      if (this._root && this._root.length)
        this._root = node;
    }
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
  }
  var init_cover = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/cover.js"() {
    }
  });
  function data_default3() {
    var data = [];
    this.visit(function(node) {
      if (!node.length)
        do
          data.push(node.data);
        while (node = node.next);
    });
    return data;
  }
  var init_data2 = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/data.js"() {
    }
  });
  function extent_default(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
  }
  var init_extent = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/extent.js"() {
    }
  });
  function quad_default(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
  }
  var init_quad = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/quad.js"() {
    }
  });
  function find_default(x5, y5, radius) {
    var data, x0 = this._x0, y0 = this._y0, x1, y1, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
    if (node)
      quads.push(new quad_default(node, x0, y0, x32, y32));
    if (radius == null)
      radius = Infinity;
    else {
      x0 = x5 - radius, y0 = y5 - radius;
      x32 = x5 + radius, y32 = y5 + radius;
      radius *= radius;
    }
    while (q = quads.pop()) {
      if (!(node = q.node) || (x1 = q.x0) > x32 || (y1 = q.y0) > y32 || (x22 = q.x1) < x0 || (y22 = q.y1) < y0)
        continue;
      if (node.length) {
        var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2;
        quads.push(new quad_default(node[3], xm, ym, x22, y22), new quad_default(node[2], x1, ym, xm, y22), new quad_default(node[1], xm, y1, x22, ym), new quad_default(node[0], x1, y1, xm, ym));
        if (i = (y5 >= ym) << 1 | x5 >= xm) {
          q = quads[quads.length - 1];
          quads[quads.length - 1] = quads[quads.length - 1 - i];
          quads[quads.length - 1 - i] = q;
        }
      } else {
        var dx = x5 - +this._x.call(null, node.data), dy = y5 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x5 - d, y0 = y5 - d;
          x32 = x5 + d, y32 = y5 + d;
          data = node.data;
        }
      }
    }
    return data;
  }
  var init_find = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/find.js"() {
      init_quad();
    }
  });
  function remove_default4(d) {
    if (isNaN(x5 = +this._x.call(null, d)) || isNaN(y5 = +this._y.call(null, d)))
      return this;
    var parent2, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x5, y5, xm, ym, right, bottom, i, j;
    if (!node)
      return this;
    if (node.length)
      while (true) {
        if (right = x5 >= (xm = (x0 + x1) / 2))
          x0 = xm;
        else
          x1 = xm;
        if (bottom = y5 >= (ym = (y0 + y1) / 2))
          y0 = ym;
        else
          y1 = ym;
        if (!(parent2 = node, node = node[i = bottom << 1 | right]))
          return this;
        if (!node.length)
          break;
        if (parent2[i + 1 & 3] || parent2[i + 2 & 3] || parent2[i + 3 & 3])
          retainer = parent2, j = i;
      }
    while (node.data !== d)
      if (!(previous = node, node = node.next))
        return this;
    if (next = node.next)
      delete node.next;
    if (previous)
      return next ? previous.next = next : delete previous.next, this;
    if (!parent2)
      return this._root = next, this;
    next ? parent2[i] = next : delete parent2[i];
    if ((node = parent2[0] || parent2[1] || parent2[2] || parent2[3]) && node === (parent2[3] || parent2[2] || parent2[1] || parent2[0]) && !node.length) {
      if (retainer)
        retainer[j] = node;
      else
        this._root = node;
    }
    return this;
  }
  function removeAll(data) {
    for (var i = 0, n = data.length; i < n; ++i)
      this.remove(data[i]);
    return this;
  }
  var init_remove2 = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/remove.js"() {
    }
  });
  function root_default() {
    return this._root;
  }
  var init_root = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/root.js"() {
    }
  });
  function size_default3() {
    var size11 = 0;
    this.visit(function(node) {
      if (!node.length)
        do
          ++size11;
        while (node = node.next);
    });
    return size11;
  }
  var init_size2 = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/size.js"() {
    }
  });
  function visit_default(callback) {
    var quads = [], q, node = this._root, child2, x0, y0, x1, y1;
    if (node)
      quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child2 = node[3])
          quads.push(new quad_default(child2, xm, ym, x1, y1));
        if (child2 = node[2])
          quads.push(new quad_default(child2, x0, ym, xm, y1));
        if (child2 = node[1])
          quads.push(new quad_default(child2, xm, y0, x1, ym));
        if (child2 = node[0])
          quads.push(new quad_default(child2, x0, y0, xm, ym));
      }
    }
    return this;
  }
  var init_visit = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/visit.js"() {
      init_quad();
    }
  });
  function visitAfter_default(callback) {
    var quads = [], next = [], q;
    if (this._root)
      quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      var node = q.node;
      if (node.length) {
        var child2, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child2 = node[0])
          quads.push(new quad_default(child2, x0, y0, xm, ym));
        if (child2 = node[1])
          quads.push(new quad_default(child2, xm, y0, x1, ym));
        if (child2 = node[2])
          quads.push(new quad_default(child2, x0, ym, xm, y1));
        if (child2 = node[3])
          quads.push(new quad_default(child2, xm, ym, x1, y1));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }
    return this;
  }
  var init_visitAfter = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/visitAfter.js"() {
      init_quad();
    }
  });
  function defaultX(d) {
    return d[0];
  }
  function x_default(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }
  var init_x = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/x.js"() {
    }
  });
  function defaultY(d) {
    return d[1];
  }
  function y_default(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }
  var init_y = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/y.js"() {
    }
  });
  function quadtree(nodes4, x5, y5) {
    var tree = new Quadtree(x5 == null ? defaultX : x5, y5 == null ? defaultY : y5, NaN, NaN, NaN, NaN);
    return nodes4 == null ? tree : tree.addAll(nodes4);
  }
  function Quadtree(x5, y5, x0, y0, x1, y1) {
    this._x = x5;
    this._y = y5;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = void 0;
  }
  function leaf_copy(leaf) {
    var copy = { data: leaf.data }, next = copy;
    while (leaf = leaf.next)
      next = next.next = { data: leaf.data };
    return copy;
  }
  var treeProto;
  var init_quadtree = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/quadtree.js"() {
      init_add();
      init_cover();
      init_data2();
      init_extent();
      init_find();
      init_remove2();
      init_root();
      init_size2();
      init_visit();
      init_visitAfter();
      init_x();
      init_y();
      treeProto = quadtree.prototype = Quadtree.prototype;
      treeProto.copy = function() {
        var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes4, child2;
        if (!node)
          return copy;
        if (!node.length)
          return copy._root = leaf_copy(node), copy;
        nodes4 = [{ source: node, target: copy._root = new Array(4) }];
        while (node = nodes4.pop()) {
          for (var i = 0; i < 4; ++i) {
            if (child2 = node.source[i]) {
              if (child2.length)
                nodes4.push({ source: child2, target: node.target[i] = new Array(4) });
              else
                node.target[i] = leaf_copy(child2);
            }
          }
        }
        return copy;
      };
      treeProto.add = add_default;
      treeProto.addAll = addAll;
      treeProto.cover = cover_default;
      treeProto.data = data_default3;
      treeProto.extent = extent_default;
      treeProto.find = find_default;
      treeProto.remove = remove_default4;
      treeProto.removeAll = removeAll;
      treeProto.root = root_default;
      treeProto.size = size_default3;
      treeProto.visit = visit_default;
      treeProto.visitAfter = visitAfter_default;
      treeProto.x = x_default;
      treeProto.y = y_default;
    }
  });
  var init_src4 = __esm({
    "../react-d3-graph/node_modules/d3-quadtree/src/index.js"() {
      init_quadtree();
    }
  });
  function constant_default6(x5) {
    return function() {
      return x5;
    };
  }
  var init_constant3 = __esm({
    "../react-d3-graph/node_modules/d3-force/src/constant.js"() {
    }
  });
  function jiggle_default(random) {
    return (random() - 0.5) * 1e-6;
  }
  var init_jiggle = __esm({
    "../react-d3-graph/node_modules/d3-force/src/jiggle.js"() {
    }
  });
  function x(d) {
    return d.x + d.vx;
  }
  function y(d) {
    return d.y + d.vy;
  }
  function collide_default(radius) {
    var nodes4, radii, random, strength = 1, iterations = 1;
    if (typeof radius !== "function")
      radius = constant_default6(radius == null ? 1 : +radius);
    function force() {
      var i, n = nodes4.length, tree, node, xi, yi, ri, ri2;
      for (var k2 = 0; k2 < iterations; ++k2) {
        tree = quadtree(nodes4, x, y).visitAfter(prepare);
        for (i = 0; i < n; ++i) {
          node = nodes4[i];
          ri = radii[node.index], ri2 = ri * ri;
          xi = node.x + node.vx;
          yi = node.y + node.vy;
          tree.visit(apply);
        }
      }
      function apply(quad, x0, y0, x1, y1) {
        var data = quad.data, rj = quad.r, r = ri + rj;
        if (data) {
          if (data.index > node.index) {
            var x5 = xi - data.x - data.vx, y5 = yi - data.y - data.vy, l = x5 * x5 + y5 * y5;
            if (l < r * r) {
              if (x5 === 0)
                x5 = jiggle_default(random), l += x5 * x5;
              if (y5 === 0)
                y5 = jiggle_default(random), l += y5 * y5;
              l = (r - (l = Math.sqrt(l))) / l * strength;
              node.vx += (x5 *= l) * (r = (rj *= rj) / (ri2 + rj));
              node.vy += (y5 *= l) * r;
              data.vx -= x5 * (r = 1 - r);
              data.vy -= y5 * r;
            }
          }
          return;
        }
        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
      }
    }
    function prepare(quad) {
      if (quad.data)
        return quad.r = radii[quad.data.index];
      for (var i = quad.r = 0; i < 4; ++i) {
        if (quad[i] && quad[i].r > quad.r) {
          quad.r = quad[i].r;
        }
      }
    }
    function initialize() {
      if (!nodes4)
        return;
      var i, n = nodes4.length, node;
      radii = new Array(n);
      for (i = 0; i < n; ++i)
        node = nodes4[i], radii[node.index] = +radius(node, i, nodes4);
    }
    force.initialize = function(_nodes, _random) {
      nodes4 = _nodes;
      random = _random;
      initialize();
    };
    force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
      return arguments.length ? (strength = +_, force) : strength;
    };
    force.radius = function(_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default6(+_), initialize(), force) : radius;
    };
    return force;
  }
  var init_collide = __esm({
    "../react-d3-graph/node_modules/d3-force/src/collide.js"() {
      init_src4();
      init_constant3();
      init_jiggle();
    }
  });
  function index(d) {
    return d.index;
  }
  function find4(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node)
      throw new Error("node not found: " + nodeId);
    return node;
  }
  function link_default(links2) {
    var id10 = index, strength = defaultStrength, strengths, distance = constant_default6(30), distances, nodes4, count2, bias, random, iterations = 1;
    if (links2 == null)
      links2 = [];
    function defaultStrength(link2) {
      return 1 / Math.min(count2[link2.source.index], count2[link2.target.index]);
    }
    function force(alpha) {
      for (var k2 = 0, n = links2.length; k2 < iterations; ++k2) {
        for (var i = 0, link2, source2, target2, x5, y5, l, b; i < n; ++i) {
          link2 = links2[i], source2 = link2.source, target2 = link2.target;
          x5 = target2.x + target2.vx - source2.x - source2.vx || jiggle_default(random);
          y5 = target2.y + target2.vy - source2.y - source2.vy || jiggle_default(random);
          l = Math.sqrt(x5 * x5 + y5 * y5);
          l = (l - distances[i]) / l * alpha * strengths[i];
          x5 *= l, y5 *= l;
          target2.vx -= x5 * (b = bias[i]);
          target2.vy -= y5 * b;
          source2.vx += x5 * (b = 1 - b);
          source2.vy += y5 * b;
        }
      }
    }
    function initialize() {
      if (!nodes4)
        return;
      var i, n = nodes4.length, m2 = links2.length, nodeById = new Map(nodes4.map((d, i2) => [id10(d, i2, nodes4), d])), link2;
      for (i = 0, count2 = new Array(n); i < m2; ++i) {
        link2 = links2[i], link2.index = i;
        if (typeof link2.source !== "object")
          link2.source = find4(nodeById, link2.source);
        if (typeof link2.target !== "object")
          link2.target = find4(nodeById, link2.target);
        count2[link2.source.index] = (count2[link2.source.index] || 0) + 1;
        count2[link2.target.index] = (count2[link2.target.index] || 0) + 1;
      }
      for (i = 0, bias = new Array(m2); i < m2; ++i) {
        link2 = links2[i], bias[i] = count2[link2.source.index] / (count2[link2.source.index] + count2[link2.target.index]);
      }
      strengths = new Array(m2), initializeStrength();
      distances = new Array(m2), initializeDistance();
    }
    function initializeStrength() {
      if (!nodes4)
        return;
      for (var i = 0, n = links2.length; i < n; ++i) {
        strengths[i] = +strength(links2[i], i, links2);
      }
    }
    function initializeDistance() {
      if (!nodes4)
        return;
      for (var i = 0, n = links2.length; i < n; ++i) {
        distances[i] = +distance(links2[i], i, links2);
      }
    }
    force.initialize = function(_nodes, _random) {
      nodes4 = _nodes;
      random = _random;
      initialize();
    };
    force.links = function(_) {
      return arguments.length ? (links2 = _, initialize(), force) : links2;
    };
    force.id = function(_) {
      return arguments.length ? (id10 = _, force) : id10;
    };
    force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default6(+_), initializeStrength(), force) : strength;
    };
    force.distance = function(_) {
      return arguments.length ? (distance = typeof _ === "function" ? _ : constant_default6(+_), initializeDistance(), force) : distance;
    };
    return force;
  }
  var init_link = __esm({
    "../react-d3-graph/node_modules/d3-force/src/link.js"() {
      init_constant3();
      init_jiggle();
    }
  });
  function now2() {
    return clockNow2 || (setFrame2(clearNow2), clockNow2 = clock2.now() + clockSkew2);
  }
  function clearNow2() {
    clockNow2 = 0;
  }
  function Timer2() {
    this._call = this._time = this._next = null;
  }
  function timer2(callback, delay, time) {
    var t = new Timer2();
    t.restart(callback, delay, time);
    return t;
  }
  function timerFlush2() {
    now2();
    ++frame2;
    var t = taskHead2, e;
    while (t) {
      if ((e = clockNow2 - t._time) >= 0)
        t._call.call(void 0, e);
      t = t._next;
    }
    --frame2;
  }
  function wake2() {
    clockNow2 = (clockLast2 = clock2.now()) + clockSkew2;
    frame2 = timeout2 = 0;
    try {
      timerFlush2();
    } finally {
      frame2 = 0;
      nap2();
      clockNow2 = 0;
    }
  }
  function poke2() {
    var now3 = clock2.now(), delay = now3 - clockLast2;
    if (delay > pokeDelay2)
      clockSkew2 -= delay, clockLast2 = now3;
  }
  function nap2() {
    var t0, t1 = taskHead2, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time)
          time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead2 = t2;
      }
    }
    taskTail2 = t0;
    sleep2(time);
  }
  function sleep2(time) {
    if (frame2)
      return;
    if (timeout2)
      timeout2 = clearTimeout(timeout2);
    var delay = time - clockNow2;
    if (delay > 24) {
      if (time < Infinity)
        timeout2 = setTimeout(wake2, time - clock2.now() - clockSkew2);
      if (interval2)
        interval2 = clearInterval(interval2);
    } else {
      if (!interval2)
        clockLast2 = clock2.now(), interval2 = setInterval(poke2, pokeDelay2);
      frame2 = 1, setFrame2(wake2);
    }
  }
  var frame2;
  var timeout2;
  var interval2;
  var pokeDelay2;
  var taskHead2;
  var taskTail2;
  var clockLast2;
  var clockNow2;
  var clockSkew2;
  var clock2;
  var setFrame2;
  var init_timer = __esm({
    "../react-d3-graph/node_modules/d3-timer/src/timer.js"() {
      frame2 = 0;
      timeout2 = 0;
      interval2 = 0;
      pokeDelay2 = 1e3;
      clockLast2 = 0;
      clockNow2 = 0;
      clockSkew2 = 0;
      clock2 = typeof performance === "object" && performance.now ? performance : Date;
      setFrame2 = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
        setTimeout(f, 17);
      };
      Timer2.prototype = timer2.prototype = {
        constructor: Timer2,
        restart: function(callback, delay, time) {
          if (typeof callback !== "function")
            throw new TypeError("callback is not a function");
          time = (time == null ? now2() : +time) + (delay == null ? 0 : +delay);
          if (!this._next && taskTail2 !== this) {
            if (taskTail2)
              taskTail2._next = this;
            else
              taskHead2 = this;
            taskTail2 = this;
          }
          this._call = callback;
          this._time = time;
          sleep2();
        },
        stop: function() {
          if (this._call) {
            this._call = null;
            this._time = Infinity;
            sleep2();
          }
        }
      };
    }
  });
  function timeout_default2(callback, delay, time) {
    var t = new Timer2();
    delay = delay == null ? 0 : +delay;
    t.restart((elapsed) => {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }
  var init_timeout = __esm({
    "../react-d3-graph/node_modules/d3-timer/src/timeout.js"() {
      init_timer();
    }
  });
  var init_src5 = __esm({
    "../react-d3-graph/node_modules/d3-timer/src/index.js"() {
      init_timer();
      init_timeout();
    }
  });
  function lcg_default() {
    let s2 = 1;
    return () => (s2 = (a * s2 + c) % m) / m;
  }
  var a;
  var c;
  var m;
  var init_lcg = __esm({
    "../react-d3-graph/node_modules/d3-force/src/lcg.js"() {
      a = 1664525;
      c = 1013904223;
      m = 4294967296;
    }
  });
  function x2(d) {
    return d.x;
  }
  function y2(d) {
    return d.y;
  }
  function simulation_default(nodes4) {
    var simulation, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = timer2(step), event = dispatch_default3("tick", "end"), random = lcg_default();
    if (nodes4 == null)
      nodes4 = [];
    function step() {
      tick();
      event.call("tick", simulation);
      if (alpha < alphaMin) {
        stepper.stop();
        event.call("end", simulation);
      }
    }
    function tick(iterations) {
      var i, n = nodes4.length, node;
      if (iterations === void 0)
        iterations = 1;
      for (var k2 = 0; k2 < iterations; ++k2) {
        alpha += (alphaTarget - alpha) * alphaDecay;
        forces.forEach(function(force) {
          force(alpha);
        });
        for (i = 0; i < n; ++i) {
          node = nodes4[i];
          if (node.fx == null)
            node.x += node.vx *= velocityDecay;
          else
            node.x = node.fx, node.vx = 0;
          if (node.fy == null)
            node.y += node.vy *= velocityDecay;
          else
            node.y = node.fy, node.vy = 0;
        }
      }
      return simulation;
    }
    function initializeNodes() {
      for (var i = 0, n = nodes4.length, node; i < n; ++i) {
        node = nodes4[i], node.index = i;
        if (node.fx != null)
          node.x = node.fx;
        if (node.fy != null)
          node.y = node.fy;
        if (isNaN(node.x) || isNaN(node.y)) {
          var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
          node.x = radius * Math.cos(angle);
          node.y = radius * Math.sin(angle);
        }
        if (isNaN(node.vx) || isNaN(node.vy)) {
          node.vx = node.vy = 0;
        }
      }
    }
    function initializeForce(force) {
      if (force.initialize)
        force.initialize(nodes4, random);
      return force;
    }
    initializeNodes();
    return simulation = {
      tick,
      restart: function() {
        return stepper.restart(step), simulation;
      },
      stop: function() {
        return stepper.stop(), simulation;
      },
      nodes: function(_) {
        return arguments.length ? (nodes4 = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes4;
      },
      alpha: function(_) {
        return arguments.length ? (alpha = +_, simulation) : alpha;
      },
      alphaMin: function(_) {
        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
      },
      alphaDecay: function(_) {
        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
      },
      alphaTarget: function(_) {
        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
      },
      velocityDecay: function(_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
      },
      randomSource: function(_) {
        return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
      },
      force: function(name3, _) {
        return arguments.length > 1 ? (_ == null ? forces.delete(name3) : forces.set(name3, initializeForce(_)), simulation) : forces.get(name3);
      },
      find: function(x5, y5, radius) {
        var i = 0, n = nodes4.length, dx, dy, d2, node, closest;
        if (radius == null)
          radius = Infinity;
        else
          radius *= radius;
        for (i = 0; i < n; ++i) {
          node = nodes4[i];
          dx = x5 - node.x;
          dy = y5 - node.y;
          d2 = dx * dx + dy * dy;
          if (d2 < radius)
            closest = node, radius = d2;
        }
        return closest;
      },
      on: function(name3, _) {
        return arguments.length > 1 ? (event.on(name3, _), simulation) : event.on(name3);
      }
    };
  }
  var initialRadius;
  var initialAngle;
  var init_simulation = __esm({
    "../react-d3-graph/node_modules/d3-force/src/simulation.js"() {
      init_src();
      init_src5();
      init_lcg();
      initialRadius = 10;
      initialAngle = Math.PI * (3 - Math.sqrt(5));
    }
  });
  function manyBody_default() {
    var nodes4, node, random, alpha, strength = constant_default6(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
    function force(_) {
      var i, n = nodes4.length, tree = quadtree(nodes4, x2, y2).visitAfter(accumulate);
      for (alpha = _, i = 0; i < n; ++i)
        node = nodes4[i], tree.visit(apply);
    }
    function initialize() {
      if (!nodes4)
        return;
      var i, n = nodes4.length, node2;
      strengths = new Array(n);
      for (i = 0; i < n; ++i)
        node2 = nodes4[i], strengths[node2.index] = +strength(node2, i, nodes4);
    }
    function accumulate(quad) {
      var strength2 = 0, q, c3, weight = 0, x5, y5, i;
      if (quad.length) {
        for (x5 = y5 = i = 0; i < 4; ++i) {
          if ((q = quad[i]) && (c3 = Math.abs(q.value))) {
            strength2 += q.value, weight += c3, x5 += c3 * q.x, y5 += c3 * q.y;
          }
        }
        quad.x = x5 / weight;
        quad.y = y5 / weight;
      } else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;
        do
          strength2 += strengths[q.data.index];
        while (q = q.next);
      }
      quad.value = strength2;
    }
    function apply(quad, x1, _, x22) {
      if (!quad.value)
        return true;
      var x5 = quad.x - node.x, y5 = quad.y - node.y, w = x22 - x1, l = x5 * x5 + y5 * y5;
      if (w * w / theta2 < l) {
        if (l < distanceMax2) {
          if (x5 === 0)
            x5 = jiggle_default(random), l += x5 * x5;
          if (y5 === 0)
            y5 = jiggle_default(random), l += y5 * y5;
          if (l < distanceMin2)
            l = Math.sqrt(distanceMin2 * l);
          node.vx += x5 * quad.value * alpha / l;
          node.vy += y5 * quad.value * alpha / l;
        }
        return true;
      } else if (quad.length || l >= distanceMax2)
        return;
      if (quad.data !== node || quad.next) {
        if (x5 === 0)
          x5 = jiggle_default(random), l += x5 * x5;
        if (y5 === 0)
          y5 = jiggle_default(random), l += y5 * y5;
        if (l < distanceMin2)
          l = Math.sqrt(distanceMin2 * l);
      }
      do
        if (quad.data !== node) {
          w = strengths[quad.data.index] * alpha / l;
          node.vx += x5 * w;
          node.vy += y5 * w;
        }
      while (quad = quad.next);
    }
    force.initialize = function(_nodes, _random) {
      nodes4 = _nodes;
      random = _random;
      initialize();
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default6(+_), initialize(), force) : strength;
    };
    force.distanceMin = function(_) {
      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };
    force.distanceMax = function(_) {
      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };
    force.theta = function(_) {
      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };
    return force;
  }
  var init_manyBody = __esm({
    "../react-d3-graph/node_modules/d3-force/src/manyBody.js"() {
      init_src4();
      init_constant3();
      init_jiggle();
      init_simulation();
    }
  });
  function radial_default(radius, x5, y5) {
    var nodes4, strength = constant_default6(0.1), strengths, radiuses;
    if (typeof radius !== "function")
      radius = constant_default6(+radius);
    if (x5 == null)
      x5 = 0;
    if (y5 == null)
      y5 = 0;
    function force(alpha) {
      for (var i = 0, n = nodes4.length; i < n; ++i) {
        var node = nodes4[i], dx = node.x - x5 || 1e-6, dy = node.y - y5 || 1e-6, r = Math.sqrt(dx * dx + dy * dy), k2 = (radiuses[i] - r) * strengths[i] * alpha / r;
        node.vx += dx * k2;
        node.vy += dy * k2;
      }
    }
    function initialize() {
      if (!nodes4)
        return;
      var i, n = nodes4.length;
      strengths = new Array(n);
      radiuses = new Array(n);
      for (i = 0; i < n; ++i) {
        radiuses[i] = +radius(nodes4[i], i, nodes4);
        strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes4[i], i, nodes4);
      }
    }
    force.initialize = function(_) {
      nodes4 = _, initialize();
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default6(+_), initialize(), force) : strength;
    };
    force.radius = function(_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default6(+_), initialize(), force) : radius;
    };
    force.x = function(_) {
      return arguments.length ? (x5 = +_, force) : x5;
    };
    force.y = function(_) {
      return arguments.length ? (y5 = +_, force) : y5;
    };
    return force;
  }
  var init_radial = __esm({
    "../react-d3-graph/node_modules/d3-force/src/radial.js"() {
      init_constant3();
    }
  });
  function x_default2(x5) {
    var strength = constant_default6(0.1), nodes4, strengths, xz;
    if (typeof x5 !== "function")
      x5 = constant_default6(x5 == null ? 0 : +x5);
    function force(alpha) {
      for (var i = 0, n = nodes4.length, node; i < n; ++i) {
        node = nodes4[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
      }
    }
    function initialize() {
      if (!nodes4)
        return;
      var i, n = nodes4.length;
      strengths = new Array(n);
      xz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(xz[i] = +x5(nodes4[i], i, nodes4)) ? 0 : +strength(nodes4[i], i, nodes4);
      }
    }
    force.initialize = function(_) {
      nodes4 = _;
      initialize();
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default6(+_), initialize(), force) : strength;
    };
    force.x = function(_) {
      return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default6(+_), initialize(), force) : x5;
    };
    return force;
  }
  var init_x2 = __esm({
    "../react-d3-graph/node_modules/d3-force/src/x.js"() {
      init_constant3();
    }
  });
  function y_default2(y5) {
    var strength = constant_default6(0.1), nodes4, strengths, yz;
    if (typeof y5 !== "function")
      y5 = constant_default6(y5 == null ? 0 : +y5);
    function force(alpha) {
      for (var i = 0, n = nodes4.length, node; i < n; ++i) {
        node = nodes4[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
      }
    }
    function initialize() {
      if (!nodes4)
        return;
      var i, n = nodes4.length;
      strengths = new Array(n);
      yz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(yz[i] = +y5(nodes4[i], i, nodes4)) ? 0 : +strength(nodes4[i], i, nodes4);
      }
    }
    force.initialize = function(_) {
      nodes4 = _;
      initialize();
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default6(+_), initialize(), force) : strength;
    };
    force.y = function(_) {
      return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default6(+_), initialize(), force) : y5;
    };
    return force;
  }
  var init_y2 = __esm({
    "../react-d3-graph/node_modules/d3-force/src/y.js"() {
      init_constant3();
    }
  });
  var src_exports3 = {};
  __export(src_exports3, {
    forceCenter: () => center_default,
    forceCollide: () => collide_default,
    forceLink: () => link_default,
    forceManyBody: () => manyBody_default,
    forceRadial: () => radial_default,
    forceSimulation: () => simulation_default,
    forceX: () => x_default2,
    forceY: () => y_default2
  });
  var init_src6 = __esm({
    "../react-d3-graph/node_modules/d3-force/src/index.js"() {
      init_center();
      init_collide();
      init_link();
      init_manyBody();
      init_radial();
      init_simulation();
      init_x2();
      init_y2();
    }
  });
  function define_default2(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend2(parent2, definition) {
    var prototype = Object.create(parent2.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }
  var init_define = __esm({
    "../react-d3-graph/node_modules/d3-color/src/define.js"() {
    }
  });
  function Color2() {
  }
  function color_formatHex2() {
    return this.rgb().formatHex();
  }
  function color_formatHsl2() {
    return hslConvert2(this).formatHsl();
  }
  function color_formatRgb2() {
    return this.rgb().formatRgb();
  }
  function color2(format) {
    var m2, l;
    format = (format + "").trim().toLowerCase();
    return (m2 = reHex2.exec(format)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn2(m2) : l === 3 ? new Rgb2(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba2(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba2(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger2.exec(format)) ? new Rgb2(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent2.exec(format)) ? new Rgb2(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger2.exec(format)) ? rgba2(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent2.exec(format)) ? rgba2(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent2.exec(format)) ? hsla2(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent2.exec(format)) ? hsla2(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named2.hasOwnProperty(format) ? rgbn2(named2[format]) : format === "transparent" ? new Rgb2(NaN, NaN, NaN, 0) : null;
  }
  function rgbn2(n) {
    return new Rgb2(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba2(r, g, b, a3) {
    if (a3 <= 0)
      r = g = b = NaN;
    return new Rgb2(r, g, b, a3);
  }
  function rgbConvert2(o) {
    if (!(o instanceof Color2))
      o = color2(o);
    if (!o)
      return new Rgb2();
    o = o.rgb();
    return new Rgb2(o.r, o.g, o.b, o.opacity);
  }
  function rgb2(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert2(r) : new Rgb2(r, g, b, opacity == null ? 1 : opacity);
  }
  function Rgb2(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }
  function rgb_formatHex2() {
    return "#" + hex2(this.r) + hex2(this.g) + hex2(this.b);
  }
  function rgb_formatRgb2() {
    var a3 = this.opacity;
    a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3));
    return (a3 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a3 === 1 ? ")" : ", " + a3 + ")");
  }
  function hex2(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0));
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla2(h, s2, l, a3) {
    if (a3 <= 0)
      h = s2 = l = NaN;
    else if (l <= 0 || l >= 1)
      h = s2 = NaN;
    else if (s2 <= 0)
      h = NaN;
    return new Hsl2(h, s2, l, a3);
  }
  function hslConvert2(o) {
    if (o instanceof Hsl2)
      return new Hsl2(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color2))
      o = color2(o);
    if (!o)
      return new Hsl2();
    if (o instanceof Hsl2)
      return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min6 = Math.min(r, g, b), max6 = Math.max(r, g, b), h = NaN, s2 = max6 - min6, l = (max6 + min6) / 2;
    if (s2) {
      if (r === max6)
        h = (g - b) / s2 + (g < b) * 6;
      else if (g === max6)
        h = (b - r) / s2 + 2;
      else
        h = (r - g) / s2 + 4;
      s2 /= l < 0.5 ? max6 + min6 : 2 - max6 - min6;
      h *= 60;
    } else {
      s2 = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl2(h, s2, l, o.opacity);
  }
  function hsl2(h, s2, l, opacity) {
    return arguments.length === 1 ? hslConvert2(h) : new Hsl2(h, s2, l, opacity == null ? 1 : opacity);
  }
  function Hsl2(h, s2, l, opacity) {
    this.h = +h;
    this.s = +s2;
    this.l = +l;
    this.opacity = +opacity;
  }
  function hsl2rgb2(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }
  var darker2;
  var brighter2;
  var reI2;
  var reN2;
  var reP2;
  var reHex2;
  var reRgbInteger2;
  var reRgbPercent2;
  var reRgbaInteger2;
  var reRgbaPercent2;
  var reHslPercent2;
  var reHslaPercent2;
  var named2;
  var init_color = __esm({
    "../react-d3-graph/node_modules/d3-color/src/color.js"() {
      init_define();
      darker2 = 0.7;
      brighter2 = 1 / darker2;
      reI2 = "\\s*([+-]?\\d+)\\s*";
      reN2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
      reP2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
      reHex2 = /^#([0-9a-f]{3,8})$/;
      reRgbInteger2 = new RegExp("^rgb\\(" + [reI2, reI2, reI2] + "\\)$");
      reRgbPercent2 = new RegExp("^rgb\\(" + [reP2, reP2, reP2] + "\\)$");
      reRgbaInteger2 = new RegExp("^rgba\\(" + [reI2, reI2, reI2, reN2] + "\\)$");
      reRgbaPercent2 = new RegExp("^rgba\\(" + [reP2, reP2, reP2, reN2] + "\\)$");
      reHslPercent2 = new RegExp("^hsl\\(" + [reN2, reP2, reP2] + "\\)$");
      reHslaPercent2 = new RegExp("^hsla\\(" + [reN2, reP2, reP2, reN2] + "\\)$");
      named2 = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
      };
      define_default2(Color2, color2, {
        copy: function(channels) {
          return Object.assign(new this.constructor(), this, channels);
        },
        displayable: function() {
          return this.rgb().displayable();
        },
        hex: color_formatHex2,
        formatHex: color_formatHex2,
        formatHsl: color_formatHsl2,
        formatRgb: color_formatRgb2,
        toString: color_formatRgb2
      });
      define_default2(Rgb2, rgb2, extend2(Color2, {
        brighter: function(k2) {
          k2 = k2 == null ? brighter2 : Math.pow(brighter2, k2);
          return new Rgb2(this.r * k2, this.g * k2, this.b * k2, this.opacity);
        },
        darker: function(k2) {
          k2 = k2 == null ? darker2 : Math.pow(darker2, k2);
          return new Rgb2(this.r * k2, this.g * k2, this.b * k2, this.opacity);
        },
        rgb: function() {
          return this;
        },
        displayable: function() {
          return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
        },
        hex: rgb_formatHex2,
        formatHex: rgb_formatHex2,
        formatRgb: rgb_formatRgb2,
        toString: rgb_formatRgb2
      }));
      define_default2(Hsl2, hsl2, extend2(Color2, {
        brighter: function(k2) {
          k2 = k2 == null ? brighter2 : Math.pow(brighter2, k2);
          return new Hsl2(this.h, this.s, this.l * k2, this.opacity);
        },
        darker: function(k2) {
          k2 = k2 == null ? darker2 : Math.pow(darker2, k2);
          return new Hsl2(this.h, this.s, this.l * k2, this.opacity);
        },
        rgb: function() {
          var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
          return new Rgb2(hsl2rgb2(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb2(h, m1, m2), hsl2rgb2(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
        },
        displayable: function() {
          return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
        },
        formatHsl: function() {
          var a3 = this.opacity;
          a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3));
          return (a3 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a3 === 1 ? ")" : ", " + a3 + ")");
        }
      }));
    }
  });
  var init_src7 = __esm({
    "../react-d3-graph/node_modules/d3-color/src/index.js"() {
      init_color();
    }
  });
  function basis2(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis_default2(values) {
    var n = values.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis2((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  var init_basis = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/basis.js"() {
    }
  });
  function basisClosed_default2(values) {
    var n = values.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
      return basis2((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  var init_basisClosed = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/basisClosed.js"() {
      init_basis();
    }
  });
  var constant_default7;
  var init_constant4 = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/constant.js"() {
      constant_default7 = (x5) => () => x5;
    }
  });
  function linear2(a3, d) {
    return function(t) {
      return a3 + t * d;
    };
  }
  function exponential2(a3, b, y5) {
    return a3 = Math.pow(a3, y5), b = Math.pow(b, y5) - a3, y5 = 1 / y5, function(t) {
      return Math.pow(a3 + t * b, y5);
    };
  }
  function gamma2(y5) {
    return (y5 = +y5) === 1 ? nogamma2 : function(a3, b) {
      return b - a3 ? exponential2(a3, b, y5) : constant_default7(isNaN(a3) ? b : a3);
    };
  }
  function nogamma2(a3, b) {
    var d = b - a3;
    return d ? linear2(a3, d) : constant_default7(isNaN(a3) ? b : a3);
  }
  var init_color2 = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/color.js"() {
      init_constant4();
    }
  });
  function rgbSpline2(spline) {
    return function(colors) {
      var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color3;
      for (i = 0; i < n; ++i) {
        color3 = rgb2(colors[i]);
        r[i] = color3.r || 0;
        g[i] = color3.g || 0;
        b[i] = color3.b || 0;
      }
      r = spline(r);
      g = spline(g);
      b = spline(b);
      color3.opacity = 1;
      return function(t) {
        color3.r = r(t);
        color3.g = g(t);
        color3.b = b(t);
        return color3 + "";
      };
    };
  }
  var rgb_default2;
  var rgbBasis2;
  var rgbBasisClosed2;
  var init_rgb = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/rgb.js"() {
      init_src7();
      init_basis();
      init_basisClosed();
      init_color2();
      rgb_default2 = function rgbGamma2(y5) {
        var color3 = gamma2(y5);
        function rgb3(start3, end) {
          var r = color3((start3 = rgb2(start3)).r, (end = rgb2(end)).r), g = color3(start3.g, end.g), b = color3(start3.b, end.b), opacity = nogamma2(start3.opacity, end.opacity);
          return function(t) {
            start3.r = r(t);
            start3.g = g(t);
            start3.b = b(t);
            start3.opacity = opacity(t);
            return start3 + "";
          };
        }
        rgb3.gamma = rgbGamma2;
        return rgb3;
      }(1);
      rgbBasis2 = rgbSpline2(basis_default2);
      rgbBasisClosed2 = rgbSpline2(basisClosed_default2);
    }
  });
  function number_default2(a3, b) {
    return a3 = +a3, b = +b, function(t) {
      return a3 * (1 - t) + b * t;
    };
  }
  var init_number = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/number.js"() {
    }
  });
  function zero3(b) {
    return function() {
      return b;
    };
  }
  function one3(b) {
    return function(t) {
      return b(t) + "";
    };
  }
  function string_default2(a3, b) {
    var bi = reA2.lastIndex = reB2.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
    a3 = a3 + "", b = b + "";
    while ((am = reA2.exec(a3)) && (bm = reB2.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s2[i])
          s2[i] += bs;
        else
          s2[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s2[i])
          s2[i] += bm;
        else
          s2[++i] = bm;
      } else {
        s2[++i] = null;
        q.push({ i, x: number_default2(am, bm) });
      }
      bi = reB2.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s2[i])
        s2[i] += bs;
      else
        s2[++i] = bs;
    }
    return s2.length < 2 ? q[0] ? one3(q[0].x) : zero3(b) : (b = q.length, function(t) {
      for (var i2 = 0, o; i2 < b; ++i2)
        s2[(o = q[i2]).i] = o.x(t);
      return s2.join("");
    });
  }
  var reA2;
  var reB2;
  var init_string = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/string.js"() {
      init_number();
      reA2 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
      reB2 = new RegExp(reA2.source, "g");
    }
  });
  function decompose_default2(a3, b, c3, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a3 * a3 + b * b))
      a3 /= scaleX, b /= scaleX;
    if (skewX = a3 * c3 + b * d)
      c3 -= a3 * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c3 * c3 + d * d))
      c3 /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a3 * d < b * c3)
      a3 = -a3, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a3) * degrees2,
      skewX: Math.atan(skewX) * degrees2,
      scaleX,
      scaleY
    };
  }
  var degrees2;
  var identity3;
  var init_decompose = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/transform/decompose.js"() {
      degrees2 = 180 / Math.PI;
      identity3 = {
        translateX: 0,
        translateY: 0,
        rotate: 0,
        skewX: 0,
        scaleX: 1,
        scaleY: 1
      };
    }
  });
  function parseCss2(value) {
    const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m2.isIdentity ? identity3 : decompose_default2(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
  }
  function parseSvg2(value) {
    if (value == null)
      return identity3;
    if (!svgNode2)
      svgNode2 = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode2.setAttribute("transform", value);
    if (!(value = svgNode2.transform.baseVal.consolidate()))
      return identity3;
    value = value.matrix;
    return decompose_default2(value.a, value.b, value.c, value.d, value.e, value.f);
  }
  var svgNode2;
  var init_parse = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/transform/parse.js"() {
      init_decompose();
    }
  });
  function interpolateTransform2(parse, pxComma, pxParen, degParen) {
    function pop(s2) {
      return s2.length ? s2.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s2, q) {
      if (xa !== xb || ya !== yb) {
        var i = s2.push("translate(", null, pxComma, null, pxParen);
        q.push({ i: i - 4, x: number_default2(xa, xb) }, { i: i - 2, x: number_default2(ya, yb) });
      } else if (xb || yb) {
        s2.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a3, b, s2, q) {
      if (a3 !== b) {
        if (a3 - b > 180)
          b += 360;
        else if (b - a3 > 180)
          a3 += 360;
        q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default2(a3, b) });
      } else if (b) {
        s2.push(pop(s2) + "rotate(" + b + degParen);
      }
    }
    function skewX(a3, b, s2, q) {
      if (a3 !== b) {
        q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default2(a3, b) });
      } else if (b) {
        s2.push(pop(s2) + "skewX(" + b + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s2, q) {
      if (xa !== xb || ya !== yb) {
        var i = s2.push(pop(s2) + "scale(", null, ",", null, ")");
        q.push({ i: i - 4, x: number_default2(xa, xb) }, { i: i - 2, x: number_default2(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a3, b) {
      var s2 = [], q = [];
      a3 = parse(a3), b = parse(b);
      translate(a3.translateX, a3.translateY, b.translateX, b.translateY, s2, q);
      rotate(a3.rotate, b.rotate, s2, q);
      skewX(a3.skewX, b.skewX, s2, q);
      scale(a3.scaleX, a3.scaleY, b.scaleX, b.scaleY, s2, q);
      a3 = b = null;
      return function(t) {
        var i = -1, n = q.length, o;
        while (++i < n)
          s2[(o = q[i]).i] = o.x(t);
        return s2.join("");
      };
    };
  }
  var interpolateTransformCss2;
  var interpolateTransformSvg2;
  var init_transform = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/transform/index.js"() {
      init_number();
      init_parse();
      interpolateTransformCss2 = interpolateTransform2(parseCss2, "px, ", "px)", "deg)");
      interpolateTransformSvg2 = interpolateTransform2(parseSvg2, ", ", ")", ")");
    }
  });
  function cosh(x5) {
    return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
  }
  function sinh(x5) {
    return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
  }
  function tanh(x5) {
    return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
  }
  var epsilon2;
  var zoom_default2;
  var init_zoom = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/zoom.js"() {
      epsilon2 = 1e-12;
      zoom_default2 = function zoomRho(rho, rho2, rho4) {
        function zoom(p0, p1) {
          var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
          if (d2 < epsilon2) {
            S = Math.log(w1 / w0) / rho;
            i = function(t) {
              return [
                ux0 + t * dx,
                uy0 + t * dy,
                w0 * Math.exp(rho * t * S)
              ];
            };
          } else {
            var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho;
            i = function(t) {
              var s2 = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
              return [
                ux0 + u * dx,
                uy0 + u * dy,
                w0 * coshr0 / cosh(rho * s2 + r0)
              ];
            };
          }
          i.duration = S * 1e3 * rho / Math.SQRT2;
          return i;
        }
        zoom.rho = function(_) {
          var _14 = Math.max(1e-3, +_), _23 = _14 * _14, _42 = _23 * _23;
          return zoomRho(_14, _23, _42);
        };
        return zoom;
      }(Math.SQRT2, 2, 4);
    }
  });
  var init_src8 = __esm({
    "../react-d3-graph/node_modules/d3-interpolate/src/index.js"() {
      init_number();
      init_string();
      init_transform();
      init_zoom();
      init_rgb();
    }
  });
  function schedule_default2(node, name3, id10, index3, group2, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id10 in schedules)
      return;
    create13(node, id10, {
      name: name3,
      index: index3,
      group: group2,
      on: emptyOn2,
      tween: emptyTween2,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED2
    });
  }
  function init2(node, id10) {
    var schedule = get15(node, id10);
    if (schedule.state > CREATED2)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set8(node, id10) {
    var schedule = get15(node, id10);
    if (schedule.state > STARTED2)
      throw new Error("too late; already running");
    return schedule;
  }
  function get15(node, id10) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id10]))
      throw new Error("transition not found");
    return schedule;
  }
  function create13(node, id10, self) {
    var schedules = node.__transition, tween;
    schedules[id10] = self;
    self.timer = timer2(schedule, 0, self.time);
    function schedule(elapsed) {
      self.state = SCHEDULED2;
      self.timer.restart(start3, self.delay, self.time);
      if (self.delay <= elapsed)
        start3(elapsed - self.delay);
    }
    function start3(elapsed) {
      var i, j, n, o;
      if (self.state !== SCHEDULED2)
        return stop();
      for (i in schedules) {
        o = schedules[i];
        if (o.name !== self.name)
          continue;
        if (o.state === STARTED2)
          return timeout_default2(start3);
        if (o.state === RUNNING2) {
          o.state = ENDED2;
          o.timer.stop();
          o.on.call("interrupt", node, node.__data__, o.index, o.group);
          delete schedules[i];
        } else if (+i < id10) {
          o.state = ENDED2;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
      }
      timeout_default2(function() {
        if (self.state === STARTED2) {
          self.state = RUNNING2;
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      });
      self.state = STARTING2;
      self.on.call("start", node, node.__data__, self.index, self.group);
      if (self.state !== STARTING2)
        return;
      self.state = STARTED2;
      tween = new Array(n = self.tween.length);
      for (i = 0, j = -1; i < n; ++i) {
        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
          tween[++j] = o;
        }
      }
      tween.length = j + 1;
    }
    function tick(elapsed) {
      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING2, 1), i = -1, n = tween.length;
      while (++i < n) {
        tween[i].call(node, t);
      }
      if (self.state === ENDING2) {
        self.on.call("end", node, node.__data__, self.index, self.group);
        stop();
      }
    }
    function stop() {
      self.state = ENDED2;
      self.timer.stop();
      delete schedules[id10];
      for (var i in schedules)
        return;
      delete node.__transition;
    }
  }
  var emptyOn2;
  var emptyTween2;
  var CREATED2;
  var SCHEDULED2;
  var STARTING2;
  var STARTED2;
  var RUNNING2;
  var ENDING2;
  var ENDED2;
  var init_schedule = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/schedule.js"() {
      init_src();
      init_src5();
      emptyOn2 = dispatch_default3("start", "end", "cancel", "interrupt");
      emptyTween2 = [];
      CREATED2 = 0;
      SCHEDULED2 = 1;
      STARTING2 = 2;
      STARTED2 = 3;
      RUNNING2 = 4;
      ENDING2 = 5;
      ENDED2 = 6;
    }
  });
  function interrupt_default3(node, name3) {
    var schedules = node.__transition, schedule, active, empty11 = true, i;
    if (!schedules)
      return;
    name3 = name3 == null ? null : name3 + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).name !== name3) {
        empty11 = false;
        continue;
      }
      active = schedule.state > STARTING2 && schedule.state < ENDING2;
      schedule.state = ENDED2;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i];
    }
    if (empty11)
      delete node.__transition;
  }
  var init_interrupt = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/interrupt.js"() {
      init_schedule();
    }
  });
  function interrupt_default4(name3) {
    return this.each(function() {
      interrupt_default3(this, name3);
    });
  }
  var init_interrupt2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/selection/interrupt.js"() {
      init_interrupt();
    }
  });
  function tweenRemove2(id10, name3) {
    var tween0, tween1;
    return function() {
      var schedule = set8(this, id10), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name3) {
            tween1 = tween1.slice();
            tween1.splice(i, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction2(id10, name3, value) {
    var tween0, tween1;
    if (typeof value !== "function")
      throw new Error();
    return function() {
      var schedule = set8(this, id10), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = { name: name3, value }, i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name3) {
            tween1[i] = t;
            break;
          }
        }
        if (i === n)
          tween1.push(t);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default2(name3, value) {
    var id10 = this._id;
    name3 += "";
    if (arguments.length < 2) {
      var tween = get15(this.node(), id10).tween;
      for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name3) {
          return t.value;
        }
      }
      return null;
    }
    return this.each((value == null ? tweenRemove2 : tweenFunction2)(id10, name3, value));
  }
  function tweenValue2(transition3, name3, value) {
    var id10 = transition3._id;
    transition3.each(function() {
      var schedule = set8(this, id10);
      (schedule.value || (schedule.value = {}))[name3] = value.apply(this, arguments);
    });
    return function(node) {
      return get15(node, id10).value[name3];
    };
  }
  var init_tween = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/tween.js"() {
      init_schedule();
    }
  });
  function interpolate_default2(a3, b) {
    var c3;
    return (typeof b === "number" ? number_default2 : b instanceof color2 ? rgb_default2 : (c3 = color2(b)) ? (b = c3, rgb_default2) : string_default2)(a3, b);
  }
  var init_interpolate = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/interpolate.js"() {
      init_src7();
      init_src8();
    }
  });
  function attrRemove4(name3) {
    return function() {
      this.removeAttribute(name3);
    };
  }
  function attrRemoveNS4(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant4(name3, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name3);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS4(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction4(name3, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name3);
      string0 = this.getAttribute(name3);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attrFunctionNS4(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attr_default4(name3, value) {
    var fullname = namespace_default2(name3), i = fullname === "transform" ? interpolateTransformSvg2 : interpolate_default2;
    return this.attrTween(name3, typeof value === "function" ? (fullname.local ? attrFunctionNS4 : attrFunction4)(fullname, i, tweenValue2(this, "attr." + name3, value)) : value == null ? (fullname.local ? attrRemoveNS4 : attrRemove4)(fullname) : (fullname.local ? attrConstantNS4 : attrConstant4)(fullname, i, value));
  }
  var init_attr2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/attr.js"() {
      init_src8();
      init_src2();
      init_tween();
      init_interpolate();
    }
  });
  function attrInterpolate2(name3, i) {
    return function(t) {
      this.setAttribute(name3, i.call(this, t));
    };
  }
  function attrInterpolateNS2(fullname, i) {
    return function(t) {
      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
  }
  function attrTweenNS2(fullname, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && attrInterpolateNS2(fullname, i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween2(name3, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && attrInterpolate2(name3, i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween_default2(name3, value) {
    var key = "attr." + name3;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    var fullname = namespace_default2(name3);
    return this.tween(key, (fullname.local ? attrTweenNS2 : attrTween2)(fullname, value));
  }
  var init_attrTween = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/attrTween.js"() {
      init_src2();
    }
  });
  function delayFunction2(id10, value) {
    return function() {
      init2(this, id10).delay = +value.apply(this, arguments);
    };
  }
  function delayConstant2(id10, value) {
    return value = +value, function() {
      init2(this, id10).delay = value;
    };
  }
  function delay_default2(value) {
    var id10 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction2 : delayConstant2)(id10, value)) : get15(this.node(), id10).delay;
  }
  var init_delay = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/delay.js"() {
      init_schedule();
    }
  });
  function durationFunction2(id10, value) {
    return function() {
      set8(this, id10).duration = +value.apply(this, arguments);
    };
  }
  function durationConstant2(id10, value) {
    return value = +value, function() {
      set8(this, id10).duration = value;
    };
  }
  function duration_default2(value) {
    var id10 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction2 : durationConstant2)(id10, value)) : get15(this.node(), id10).duration;
  }
  var init_duration = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/duration.js"() {
      init_schedule();
    }
  });
  function easeConstant2(id10, value) {
    if (typeof value !== "function")
      throw new Error();
    return function() {
      set8(this, id10).ease = value;
    };
  }
  function ease_default2(value) {
    var id10 = this._id;
    return arguments.length ? this.each(easeConstant2(id10, value)) : get15(this.node(), id10).ease;
  }
  var init_ease = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/ease.js"() {
      init_schedule();
    }
  });
  function easeVarying2(id10, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (typeof v !== "function")
        throw new Error();
      set8(this, id10).ease = v;
    };
  }
  function easeVarying_default2(value) {
    if (typeof value !== "function")
      throw new Error();
    return this.each(easeVarying2(this._id, value));
  }
  var init_easeVarying = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/easeVarying.js"() {
      init_schedule();
    }
  });
  function filter_default4(match2) {
    if (typeof match2 !== "function")
      match2 = matcher_default2(match2);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group2[i]) && match2.call(node, node.__data__, i, group2)) {
          subgroup.push(node);
        }
      }
    }
    return new Transition2(subgroups, this._parents, this._name, this._id);
  }
  var init_filter2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/filter.js"() {
      init_src2();
      init_transition2();
    }
  });
  function merge_default4(transition3) {
    if (transition3._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition3._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge6 = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge6[i] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Transition2(merges, this._parents, this._name, this._id);
  }
  var init_merge2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/merge.js"() {
      init_transition2();
    }
  });
  function start2(name3) {
    return (name3 + "").trim().split(/^|\s+/).every(function(t) {
      var i = t.indexOf(".");
      if (i >= 0)
        t = t.slice(0, i);
      return !t || t === "start";
    });
  }
  function onFunction2(id10, name3, listener) {
    var on0, on1, sit = start2(name3) ? init2 : set8;
    return function() {
      var schedule = sit(this, id10), on = schedule.on;
      if (on !== on0)
        (on1 = (on0 = on).copy()).on(name3, listener);
      schedule.on = on1;
    };
  }
  function on_default4(name3, listener) {
    var id10 = this._id;
    return arguments.length < 2 ? get15(this.node(), id10).on.on(name3) : this.each(onFunction2(id10, name3, listener));
  }
  var init_on2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/on.js"() {
      init_schedule();
    }
  });
  function removeFunction2(id10) {
    return function() {
      var parent2 = this.parentNode;
      for (var i in this.__transition)
        if (+i !== id10)
          return;
      if (parent2)
        parent2.removeChild(this);
    };
  }
  function remove_default5() {
    return this.on("end.remove", removeFunction2(this._id));
  }
  var init_remove3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/remove.js"() {
    }
  });
  function select_default5(select) {
    var name3 = this._name, id10 = this._id;
    if (typeof select !== "function")
      select = selector_default2(select);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group2[i]) && (subnode = select.call(node, node.__data__, i, group2))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
          schedule_default2(subgroup[i], name3, id10, i, subgroup, get15(node, id10));
        }
      }
    }
    return new Transition2(subgroups, this._parents, name3, id10);
  }
  var init_select3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/select.js"() {
      init_src2();
      init_transition2();
      init_schedule();
    }
  });
  function selectAll_default5(select) {
    var name3 = this._name, id10 = this._id;
    if (typeof select !== "function")
      select = selectorAll_default2(select);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents2 = [], j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          for (var children5 = select.call(node, node.__data__, i, group2), child2, inherit3 = get15(node, id10), k2 = 0, l = children5.length; k2 < l; ++k2) {
            if (child2 = children5[k2]) {
              schedule_default2(child2, name3, id10, k2, children5, inherit3);
            }
          }
          subgroups.push(children5);
          parents2.push(node);
        }
      }
    }
    return new Transition2(subgroups, parents2, name3, id10);
  }
  var init_selectAll3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/selectAll.js"() {
      init_src2();
      init_transition2();
      init_schedule();
    }
  });
  function selection_default4() {
    return new Selection4(this._groups, this._parents);
  }
  var Selection4;
  var init_selection2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/selection.js"() {
      init_src2();
      Selection4 = selection_default3.prototype.constructor;
    }
  });
  function styleNull2(name3, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue2(this, name3), string1 = (this.style.removeProperty(name3), styleValue2(this, name3));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove4(name3) {
    return function() {
      this.style.removeProperty(name3);
    };
  }
  function styleConstant4(name3, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue2(this, name3);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction4(name3, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue2(this, name3), value1 = value(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name3), styleValue2(this, name3));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove2(id10, name3) {
    var on0, on1, listener0, key = "style." + name3, event = "end." + key, remove7;
    return function() {
      var schedule = set8(this, id10), on = schedule.on, listener = schedule.value[key] == null ? remove7 || (remove7 = styleRemove4(name3)) : void 0;
      if (on !== on0 || listener0 !== listener)
        (on1 = (on0 = on).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default4(name3, value, priority) {
    var i = (name3 += "") === "transform" ? interpolateTransformCss2 : interpolate_default2;
    return value == null ? this.styleTween(name3, styleNull2(name3, i)).on("end.style." + name3, styleRemove4(name3)) : typeof value === "function" ? this.styleTween(name3, styleFunction4(name3, i, tweenValue2(this, "style." + name3, value))).each(styleMaybeRemove2(this._id, name3)) : this.styleTween(name3, styleConstant4(name3, i, value), priority).on("end.style." + name3, null);
  }
  var init_style2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/style.js"() {
      init_src8();
      init_src2();
      init_schedule();
      init_tween();
      init_interpolate();
    }
  });
  function styleInterpolate2(name3, i, priority) {
    return function(t) {
      this.style.setProperty(name3, i.call(this, t), priority);
    };
  }
  function styleTween2(name3, value, priority) {
    var t, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t = (i0 = i) && styleInterpolate2(name3, i, priority);
      return t;
    }
    tween._value = value;
    return tween;
  }
  function styleTween_default2(name3, value, priority) {
    var key = "style." + (name3 += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, styleTween2(name3, value, priority == null ? "" : priority));
  }
  var init_styleTween = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/styleTween.js"() {
    }
  });
  function textConstant4(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction4(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default4(value) {
    return this.tween("text", typeof value === "function" ? textFunction4(tweenValue2(this, "text", value)) : textConstant4(value == null ? "" : value + ""));
  }
  var init_text2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/text.js"() {
      init_tween();
    }
  });
  function textInterpolate2(i) {
    return function(t) {
      this.textContent = i.call(this, t);
    };
  }
  function textTween2(value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && textInterpolate2(i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function textTween_default2(value) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, textTween2(value));
  }
  var init_textTween = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/textTween.js"() {
    }
  });
  function transition_default3() {
    var name3 = this._name, id0 = this._id, id1 = newId2();
    for (var groups2 = this._groups, m2 = groups2.length, j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          var inherit3 = get15(node, id0);
          schedule_default2(node, name3, id1, i, group2, {
            time: inherit3.time + inherit3.delay + inherit3.duration,
            delay: 0,
            duration: inherit3.duration,
            ease: inherit3.ease
          });
        }
      }
    }
    return new Transition2(groups2, this._parents, name3, id1);
  }
  var init_transition = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/transition.js"() {
      init_transition2();
      init_schedule();
    }
  });
  function end_default2() {
    var on0, on1, that = this, id10 = that._id, size11 = that.size();
    return new Promise(function(resolve, reject2) {
      var cancel = { value: reject2 }, end = { value: function() {
        if (--size11 === 0)
          resolve();
      } };
      that.each(function() {
        var schedule = set8(this, id10), on = schedule.on;
        if (on !== on0) {
          on1 = (on0 = on).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }
        schedule.on = on1;
      });
      if (size11 === 0)
        resolve();
    });
  }
  var init_end = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/end.js"() {
      init_schedule();
    }
  });
  function Transition2(groups2, parents2, name3, id10) {
    this._groups = groups2;
    this._parents = parents2;
    this._name = name3;
    this._id = id10;
  }
  function transition2(name3) {
    return selection_default3().transition(name3);
  }
  function newId2() {
    return ++id5;
  }
  var id5;
  var selection_prototype2;
  var init_transition2 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/transition/index.js"() {
      init_src2();
      init_attr2();
      init_attrTween();
      init_delay();
      init_duration();
      init_ease();
      init_easeVarying();
      init_filter2();
      init_merge2();
      init_on2();
      init_remove3();
      init_select3();
      init_selectAll3();
      init_selection2();
      init_style2();
      init_styleTween();
      init_text2();
      init_textTween();
      init_transition();
      init_tween();
      init_end();
      id5 = 0;
      selection_prototype2 = selection_default3.prototype;
      Transition2.prototype = transition2.prototype = {
        constructor: Transition2,
        select: select_default5,
        selectAll: selectAll_default5,
        selectChild: selection_prototype2.selectChild,
        selectChildren: selection_prototype2.selectChildren,
        filter: filter_default4,
        merge: merge_default4,
        selection: selection_default4,
        transition: transition_default3,
        call: selection_prototype2.call,
        nodes: selection_prototype2.nodes,
        node: selection_prototype2.node,
        size: selection_prototype2.size,
        empty: selection_prototype2.empty,
        each: selection_prototype2.each,
        on: on_default4,
        attr: attr_default4,
        attrTween: attrTween_default2,
        style: style_default4,
        styleTween: styleTween_default2,
        text: text_default4,
        textTween: textTween_default2,
        remove: remove_default5,
        tween: tween_default2,
        delay: delay_default2,
        duration: duration_default2,
        ease: ease_default2,
        easeVarying: easeVarying_default2,
        end: end_default2,
        [Symbol.iterator]: selection_prototype2[Symbol.iterator]
      };
    }
  });
  function cubicInOut2(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }
  var init_cubic = __esm({
    "../react-d3-graph/node_modules/d3-ease/src/cubic.js"() {
    }
  });
  var init_src9 = __esm({
    "../react-d3-graph/node_modules/d3-ease/src/index.js"() {
      init_cubic();
    }
  });
  function inherit2(node, id10) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id10])) {
      if (!(node = node.parentNode)) {
        throw new Error(`transition ${id10} not found`);
      }
    }
    return timing;
  }
  function transition_default4(name3) {
    var id10, timing;
    if (name3 instanceof Transition2) {
      id10 = name3._id, name3 = name3._name;
    } else {
      id10 = newId2(), (timing = defaultTiming2).time = now2(), name3 = name3 == null ? null : name3 + "";
    }
    for (var groups2 = this._groups, m2 = groups2.length, j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          schedule_default2(node, name3, id10, i, group2, timing || inherit2(node, id10));
        }
      }
    }
    return new Transition2(groups2, this._parents, name3, id10);
  }
  var defaultTiming2;
  var init_transition3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/selection/transition.js"() {
      init_transition2();
      init_schedule();
      init_src9();
      init_src5();
      defaultTiming2 = {
        time: null,
        delay: 0,
        duration: 250,
        ease: cubicInOut2
      };
    }
  });
  var init_selection3 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/selection/index.js"() {
      init_src2();
      init_interrupt2();
      init_transition3();
      selection_default3.prototype.interrupt = interrupt_default4;
      selection_default3.prototype.transition = transition_default4;
    }
  });
  var init_src10 = __esm({
    "../react-d3-graph/node_modules/d3-transition/src/index.js"() {
      init_selection3();
      init_interrupt();
    }
  });
  var constant_default8;
  var init_constant5 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/constant.js"() {
      constant_default8 = (x5) => () => x5;
    }
  });
  function ZoomEvent2(type, {
    sourceEvent,
    target: target2,
    transform: transform3,
    dispatch: dispatch3
  }) {
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      target: { value: target2, enumerable: true, configurable: true },
      transform: { value: transform3, enumerable: true, configurable: true },
      _: { value: dispatch3 }
    });
  }
  var init_event2 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/event.js"() {
    }
  });
  function Transform2(k2, x5, y5) {
    this.k = k2;
    this.x = x5;
    this.y = y5;
  }
  function transform2(node) {
    while (!node.__zoom)
      if (!(node = node.parentNode))
        return identity4;
    return node.__zoom;
  }
  var identity4;
  var init_transform2 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/transform.js"() {
      Transform2.prototype = {
        constructor: Transform2,
        scale: function(k2) {
          return k2 === 1 ? this : new Transform2(this.k * k2, this.x, this.y);
        },
        translate: function(x5, y5) {
          return x5 === 0 & y5 === 0 ? this : new Transform2(this.k, this.x + this.k * x5, this.y + this.k * y5);
        },
        apply: function(point5) {
          return [point5[0] * this.k + this.x, point5[1] * this.k + this.y];
        },
        applyX: function(x5) {
          return x5 * this.k + this.x;
        },
        applyY: function(y5) {
          return y5 * this.k + this.y;
        },
        invert: function(location) {
          return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
        },
        invertX: function(x5) {
          return (x5 - this.x) / this.k;
        },
        invertY: function(y5) {
          return (y5 - this.y) / this.k;
        },
        rescaleX: function(x5) {
          return x5.copy().domain(x5.range().map(this.invertX, this).map(x5.invert, x5));
        },
        rescaleY: function(y5) {
          return y5.copy().domain(y5.range().map(this.invertY, this).map(y5.invert, y5));
        },
        toString: function() {
          return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
        }
      };
      identity4 = new Transform2(1, 0, 0);
      transform2.prototype = Transform2.prototype;
    }
  });
  function nopropagation3(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default3(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }
  var init_noevent2 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/noevent.js"() {
    }
  });
  function defaultFilter2(event) {
    return (!event.ctrlKey || event.type === "wheel") && !event.button;
  }
  function defaultExtent() {
    var e = this;
    if (e instanceof SVGElement) {
      e = e.ownerSVGElement || e;
      if (e.hasAttribute("viewBox")) {
        e = e.viewBox.baseVal;
        return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
      }
      return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
    }
    return [[0, 0], [e.clientWidth, e.clientHeight]];
  }
  function defaultTransform() {
    return this.__zoom || identity4;
  }
  function defaultWheelDelta(event) {
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
  }
  function defaultTouchable2() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function defaultConstrain(transform3, extent2, translateExtent) {
    var dx0 = transform3.invertX(extent2[0][0]) - translateExtent[0][0], dx1 = transform3.invertX(extent2[1][0]) - translateExtent[1][0], dy0 = transform3.invertY(extent2[0][1]) - translateExtent[0][1], dy1 = transform3.invertY(extent2[1][1]) - translateExtent[1][1];
    return transform3.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
  }
  function zoom_default3() {
    var filter7 = defaultFilter2, extent2 = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable2, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default2, listeners = dispatch_default3("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
    function zoom(selection3) {
      selection3.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    zoom.transform = function(collection, transform3, point5, event) {
      var selection3 = collection.selection ? collection.selection() : collection;
      selection3.property("__zoom", defaultTransform);
      if (collection !== selection3) {
        schedule(collection, transform3, point5, event);
      } else {
        selection3.interrupt().each(function() {
          gesture(this, arguments).event(event).start().zoom(null, typeof transform3 === "function" ? transform3.apply(this, arguments) : transform3).end();
        });
      }
    };
    zoom.scaleBy = function(selection3, k2, p, event) {
      zoom.scaleTo(selection3, function() {
        var k0 = this.__zoom.k, k1 = typeof k2 === "function" ? k2.apply(this, arguments) : k2;
        return k0 * k1;
      }, p, event);
    };
    zoom.scaleTo = function(selection3, k2, p, event) {
      zoom.transform(selection3, function() {
        var e = extent2.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k2 === "function" ? k2.apply(this, arguments) : k2;
        return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
      }, p, event);
    };
    zoom.translateBy = function(selection3, x5, y5, event) {
      zoom.transform(selection3, function() {
        return constrain(this.__zoom.translate(typeof x5 === "function" ? x5.apply(this, arguments) : x5, typeof y5 === "function" ? y5.apply(this, arguments) : y5), extent2.apply(this, arguments), translateExtent);
      }, null, event);
    };
    zoom.translateTo = function(selection3, x5, y5, p, event) {
      zoom.transform(selection3, function() {
        var e = extent2.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
        return constrain(identity4.translate(p0[0], p0[1]).scale(t.k).translate(typeof x5 === "function" ? -x5.apply(this, arguments) : -x5, typeof y5 === "function" ? -y5.apply(this, arguments) : -y5), e, translateExtent);
      }, p, event);
    };
    function scale(transform3, k2) {
      k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k2));
      return k2 === transform3.k ? transform3 : new Transform2(k2, transform3.x, transform3.y);
    }
    function translate(transform3, p0, p1) {
      var x5 = p0[0] - p1[0] * transform3.k, y5 = p0[1] - p1[1] * transform3.k;
      return x5 === transform3.x && y5 === transform3.y ? transform3 : new Transform2(transform3.k, x5, y5);
    }
    function centroid(extent3) {
      return [(+extent3[0][0] + +extent3[1][0]) / 2, (+extent3[0][1] + +extent3[1][1]) / 2];
    }
    function schedule(transition3, transform3, point5, event) {
      transition3.on("start.zoom", function() {
        gesture(this, arguments).event(event).start();
      }).on("interrupt.zoom end.zoom", function() {
        gesture(this, arguments).event(event).end();
      }).tween("zoom", function() {
        var that = this, args = arguments, g = gesture(that, args).event(event), e = extent2.apply(that, args), p = point5 == null ? centroid(e) : typeof point5 === "function" ? point5.apply(that, args) : point5, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a3 = that.__zoom, b = typeof transform3 === "function" ? transform3.apply(that, args) : transform3, i = interpolate(a3.invert(p).concat(w / a3.k), b.invert(p).concat(w / b.k));
        return function(t) {
          if (t === 1)
            t = b;
          else {
            var l = i(t), k2 = w / l[2];
            t = new Transform2(k2, p[0] - l[0] * k2, p[1] - l[1] * k2);
          }
          g.zoom(null, t);
        };
      });
    }
    function gesture(that, args, clean) {
      return !clean && that.__zooming || new Gesture(that, args);
    }
    function Gesture(that, args) {
      this.that = that;
      this.args = args;
      this.active = 0;
      this.sourceEvent = null;
      this.extent = extent2.apply(that, args);
      this.taps = 0;
    }
    Gesture.prototype = {
      event: function(event) {
        if (event)
          this.sourceEvent = event;
        return this;
      },
      start: function() {
        if (++this.active === 1) {
          this.that.__zooming = this;
          this.emit("start");
        }
        return this;
      },
      zoom: function(key, transform3) {
        if (this.mouse && key !== "mouse")
          this.mouse[1] = transform3.invert(this.mouse[0]);
        if (this.touch0 && key !== "touch")
          this.touch0[1] = transform3.invert(this.touch0[0]);
        if (this.touch1 && key !== "touch")
          this.touch1[1] = transform3.invert(this.touch1[0]);
        this.that.__zoom = transform3;
        this.emit("zoom");
        return this;
      },
      end: function() {
        if (--this.active === 0) {
          delete this.that.__zooming;
          this.emit("end");
        }
        return this;
      },
      emit: function(type) {
        var d = select_default4(this.that).datum();
        listeners.call(type, this.that, new ZoomEvent2(type, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type,
          transform: this.that.__zoom,
          dispatch: listeners
        }), d);
      }
    };
    function wheeled(event, ...args) {
      if (!filter7.apply(this, arguments))
        return;
      var g = gesture(this, args).event(event), t = this.__zoom, k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer_default(event);
      if (g.wheel) {
        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
          g.mouse[1] = t.invert(g.mouse[0] = p);
        }
        clearTimeout(g.wheel);
      } else if (t.k === k2)
        return;
      else {
        g.mouse = [p, t.invert(p)];
        interrupt_default3(this);
        g.start();
      }
      noevent_default3(event);
      g.wheel = setTimeout(wheelidled, wheelDelay);
      g.zoom("mouse", constrain(translate(scale(t, k2), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
      function wheelidled() {
        g.wheel = null;
        g.end();
      }
    }
    function mousedowned(event, ...args) {
      if (touchending || !filter7.apply(this, arguments))
        return;
      var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select_default4(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
      nodrag_default(event.view);
      nopropagation3(event);
      g.mouse = [p, this.__zoom.invert(p)];
      interrupt_default3(this);
      g.start();
      function mousemoved(event2) {
        noevent_default3(event2);
        if (!g.moved) {
          var dx = event2.clientX - x0, dy = event2.clientY - y0;
          g.moved = dx * dx + dy * dy > clickDistance2;
        }
        g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
      }
      function mouseupped(event2) {
        v.on("mousemove.zoom mouseup.zoom", null);
        yesdrag(event2.view, g.moved);
        noevent_default3(event2);
        g.event(event2).end();
      }
    }
    function dblclicked(event, ...args) {
      if (!filter7.apply(this, arguments))
        return;
      var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent2.apply(this, args), translateExtent);
      noevent_default3(event);
      if (duration > 0)
        select_default4(this).transition().duration(duration).call(schedule, t1, p0, event);
      else
        select_default4(this).call(zoom.transform, t1, p0, event);
    }
    function touchstarted(event, ...args) {
      if (!filter7.apply(this, arguments))
        return;
      var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
      nopropagation3(event);
      for (i = 0; i < n; ++i) {
        t = touches[i], p = pointer_default(t, this);
        p = [p, this.__zoom.invert(p), t.identifier];
        if (!g.touch0)
          g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
        else if (!g.touch1 && g.touch0[2] !== p[2])
          g.touch1 = p, g.taps = 0;
      }
      if (touchstarting)
        touchstarting = clearTimeout(touchstarting);
      if (started) {
        if (g.taps < 2)
          touchfirst = p[0], touchstarting = setTimeout(function() {
            touchstarting = null;
          }, touchDelay);
        interrupt_default3(this);
        g.start();
      }
    }
    function touchmoved(event, ...args) {
      if (!this.__zooming)
        return;
      var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
      noevent_default3(event);
      for (i = 0; i < n; ++i) {
        t = touches[i], p = pointer_default(t, this);
        if (g.touch0 && g.touch0[2] === t.identifier)
          g.touch0[0] = p;
        else if (g.touch1 && g.touch1[2] === t.identifier)
          g.touch1[0] = p;
      }
      t = g.that.__zoom;
      if (g.touch1) {
        var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
        t = scale(t, Math.sqrt(dp / dl));
        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
      } else if (g.touch0)
        p = g.touch0[0], l = g.touch0[1];
      else
        return;
      g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
    }
    function touchended(event, ...args) {
      if (!this.__zooming)
        return;
      var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
      nopropagation3(event);
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, touchDelay);
      for (i = 0; i < n; ++i) {
        t = touches[i];
        if (g.touch0 && g.touch0[2] === t.identifier)
          delete g.touch0;
        else if (g.touch1 && g.touch1[2] === t.identifier)
          delete g.touch1;
      }
      if (g.touch1 && !g.touch0)
        g.touch0 = g.touch1, delete g.touch1;
      if (g.touch0)
        g.touch0[1] = this.__zoom.invert(g.touch0[0]);
      else {
        g.end();
        if (g.taps === 2) {
          t = pointer_default(t, this);
          if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
            var p = select_default4(this).on("dblclick.zoom");
            if (p)
              p.apply(this, arguments);
          }
        }
      }
    }
    zoom.wheelDelta = function(_) {
      return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant_default8(+_), zoom) : wheelDelta;
    };
    zoom.filter = function(_) {
      return arguments.length ? (filter7 = typeof _ === "function" ? _ : constant_default8(!!_), zoom) : filter7;
    };
    zoom.touchable = function(_) {
      return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default8(!!_), zoom) : touchable;
    };
    zoom.extent = function(_) {
      return arguments.length ? (extent2 = typeof _ === "function" ? _ : constant_default8([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent2;
    };
    zoom.scaleExtent = function(_) {
      return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
    };
    zoom.translateExtent = function(_) {
      return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
    };
    zoom.constrain = function(_) {
      return arguments.length ? (constrain = _, zoom) : constrain;
    };
    zoom.duration = function(_) {
      return arguments.length ? (duration = +_, zoom) : duration;
    };
    zoom.interpolate = function(_) {
      return arguments.length ? (interpolate = _, zoom) : interpolate;
    };
    zoom.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? zoom : value;
    };
    zoom.clickDistance = function(_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
    };
    zoom.tapDistance = function(_) {
      return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
    };
    return zoom;
  }
  var init_zoom2 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/zoom.js"() {
      init_src();
      init_src3();
      init_src8();
      init_src2();
      init_src10();
      init_constant5();
      init_event2();
      init_transform2();
      init_noevent2();
    }
  });
  var src_exports4 = {};
  __export(src_exports4, {
    ZoomTransform: () => Transform2,
    zoom: () => zoom_default3,
    zoomIdentity: () => identity4,
    zoomTransform: () => transform2
  });
  var init_src11 = __esm({
    "../react-d3-graph/node_modules/d3-zoom/src/index.js"() {
      init_zoom2();
      init_transform2();
    }
  });
  function ascending3(a3, b) {
    return a3 == null || b == null ? NaN : a3 < b ? -1 : a3 > b ? 1 : a3 >= b ? 0 : NaN;
  }
  var init_ascending = __esm({
    "../react-d3-graph/node_modules/d3-array/src/ascending.js"() {
    }
  });
  function bisector(f) {
    let delta = f;
    let compare1 = f;
    let compare2 = f;
    if (f.length !== 2) {
      delta = (d, x5) => f(d) - x5;
      compare1 = ascending3;
      compare2 = (d, x5) => ascending3(f(d), x5);
    }
    function left(a3, x5, lo = 0, hi = a3.length) {
      if (lo < hi) {
        if (compare1(x5, x5) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a3[mid], x5) < 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right(a3, x5, lo = 0, hi = a3.length) {
      if (lo < hi) {
        if (compare1(x5, x5) !== 0)
          return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a3[mid], x5) <= 0)
            lo = mid + 1;
          else
            hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center(a3, x5, lo = 0, hi = a3.length) {
      const i = left(a3, x5, lo, hi - 1);
      return i > lo && delta(a3[i - 1], x5) > -delta(a3[i], x5) ? i - 1 : i;
    }
    return { left, center, right };
  }
  var init_bisector = __esm({
    "../react-d3-graph/node_modules/d3-array/src/bisector.js"() {
      init_ascending();
    }
  });
  function number(x5) {
    return x5 === null ? NaN : +x5;
  }
  function* numbers(values, valueof) {
    if (valueof === void 0) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          yield value;
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && (value = +value) >= value) {
          yield value;
        }
      }
    }
  }
  var init_number2 = __esm({
    "../react-d3-graph/node_modules/d3-array/src/number.js"() {
    }
  });
  var ascendingBisect;
  var bisectRight;
  var bisectLeft;
  var bisectCenter;
  var bisect_default;
  var init_bisect = __esm({
    "../react-d3-graph/node_modules/d3-array/src/bisect.js"() {
      init_ascending();
      init_bisector();
      init_number2();
      ascendingBisect = bisector(ascending3);
      bisectRight = ascendingBisect.right;
      bisectLeft = ascendingBisect.left;
      bisectCenter = bisector(number).center;
      bisect_default = bisectRight;
    }
  });
  function count(values, valueof) {
    let count2 = 0;
    if (valueof === void 0) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          ++count2;
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && (value = +value) >= value) {
          ++count2;
        }
      }
    }
    return count2;
  }
  var init_count = __esm({
    "../react-d3-graph/node_modules/d3-array/src/count.js"() {
    }
  });
  function length3(array4) {
    return array4.length | 0;
  }
  function empty6(length5) {
    return !(length5 > 0);
  }
  function arrayify(values) {
    return typeof values !== "object" || "length" in values ? values : Array.from(values);
  }
  function reducer(reduce9) {
    return (values) => reduce9(...values);
  }
  function cross(...values) {
    const reduce9 = typeof values[values.length - 1] === "function" && reducer(values.pop());
    values = values.map(arrayify);
    const lengths = values.map(length3);
    const j = values.length - 1;
    const index3 = new Array(j + 1).fill(0);
    const product = [];
    if (j < 0 || lengths.some(empty6))
      return product;
    while (true) {
      product.push(index3.map((j2, i2) => values[i2][j2]));
      let i = j;
      while (++index3[i] === lengths[i]) {
        if (i === 0)
          return reduce9 ? product.map(reduce9) : product;
        index3[i--] = 0;
      }
    }
  }
  var init_cross = __esm({
    "../react-d3-graph/node_modules/d3-array/src/cross.js"() {
    }
  });
  function cumsum(values, valueof) {
    var sum3 = 0, index3 = 0;
    return Float64Array.from(values, valueof === void 0 ? (v) => sum3 += +v || 0 : (v) => sum3 += +valueof(v, index3++, values) || 0);
  }
  var init_cumsum = __esm({
    "../react-d3-graph/node_modules/d3-array/src/cumsum.js"() {
    }
  });
  function descending(a3, b) {
    return a3 == null || b == null ? NaN : b < a3 ? -1 : b > a3 ? 1 : b >= a3 ? 0 : NaN;
  }
  var init_descending = __esm({
    "../react-d3-graph/node_modules/d3-array/src/descending.js"() {
    }
  });
  function variance(values, valueof) {
    let count2 = 0;
    let delta;
    let mean2 = 0;
    let sum3 = 0;
    if (valueof === void 0) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          delta = value - mean2;
          mean2 += delta / ++count2;
          sum3 += delta * (value - mean2);
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && (value = +value) >= value) {
          delta = value - mean2;
          mean2 += delta / ++count2;
          sum3 += delta * (value - mean2);
        }
      }
    }
    if (count2 > 1)
      return sum3 / (count2 - 1);
  }
  var init_variance = __esm({
    "../react-d3-graph/node_modules/d3-array/src/variance.js"() {
    }
  });
  function deviation(values, valueof) {
    const v = variance(values, valueof);
    return v ? Math.sqrt(v) : v;
  }
  var init_deviation = __esm({
    "../react-d3-graph/node_modules/d3-array/src/deviation.js"() {
      init_variance();
    }
  });
  function extent(values, valueof) {
    let min6;
    let max6;
    if (valueof === void 0) {
      for (const value of values) {
        if (value != null) {
          if (min6 === void 0) {
            if (value >= value)
              min6 = max6 = value;
          } else {
            if (min6 > value)
              min6 = value;
            if (max6 < value)
              max6 = value;
          }
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null) {
          if (min6 === void 0) {
            if (value >= value)
              min6 = max6 = value;
          } else {
            if (min6 > value)
              min6 = value;
            if (max6 < value)
              max6 = value;
          }
        }
      }
    }
    return [min6, max6];
  }
  var init_extent2 = __esm({
    "../react-d3-graph/node_modules/d3-array/src/extent.js"() {
    }
  });
  function fsum(values, valueof) {
    const adder = new Adder();
    if (valueof === void 0) {
      for (let value of values) {
        if (value = +value) {
          adder.add(value);
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if (value = +valueof(value, ++index3, values)) {
          adder.add(value);
        }
      }
    }
    return +adder;
  }
  function fcumsum(values, valueof) {
    const adder = new Adder();
    let index3 = -1;
    return Float64Array.from(values, valueof === void 0 ? (v) => adder.add(+v || 0) : (v) => adder.add(+valueof(v, ++index3, values) || 0));
  }
  var Adder;
  var init_fsum = __esm({
    "../react-d3-graph/node_modules/d3-array/src/fsum.js"() {
      Adder = class {
        constructor() {
          this._partials = new Float64Array(32);
          this._n = 0;
        }
        add(x5) {
          const p = this._partials;
          let i = 0;
          for (let j = 0; j < this._n && j < 32; j++) {
            const y5 = p[j], hi = x5 + y5, lo = Math.abs(x5) < Math.abs(y5) ? x5 - (hi - y5) : y5 - (hi - x5);
            if (lo)
              p[i++] = lo;
            x5 = hi;
          }
          p[i] = x5;
          this._n = i + 1;
          return this;
        }
        valueOf() {
          const p = this._partials;
          let n = this._n, x5, y5, lo, hi = 0;
          if (n > 0) {
            hi = p[--n];
            while (n > 0) {
              x5 = hi;
              y5 = p[--n];
              hi = x5 + y5;
              lo = y5 - (hi - x5);
              if (lo)
                break;
            }
            if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
              y5 = lo * 2;
              x5 = hi + y5;
              if (y5 == x5 - hi)
                hi = x5;
            }
          }
          return hi;
        }
      };
    }
  });
  function intern_get({ _intern, _key }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
  }
  function intern_set({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key))
      return _intern.get(key);
    _intern.set(key, value);
    return value;
  }
  function intern_delete({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
      value = _intern.get(key);
      _intern.delete(key);
    }
    return value;
  }
  function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }
  var InternMap;
  var InternSet;
  var init_src12 = __esm({
    "../react-d3-graph/node_modules/internmap/src/index.js"() {
      InternMap = class extends Map {
        constructor(entries2, key = keyof) {
          super();
          Object.defineProperties(this, { _intern: { value: new Map() }, _key: { value: key } });
          if (entries2 != null)
            for (const [key2, value] of entries2)
              this.set(key2, value);
        }
        get(key) {
          return super.get(intern_get(this, key));
        }
        has(key) {
          return super.has(intern_get(this, key));
        }
        set(key, value) {
          return super.set(intern_set(this, key), value);
        }
        delete(key) {
          return super.delete(intern_delete(this, key));
        }
      };
      InternSet = class extends Set {
        constructor(values, key = keyof) {
          super();
          Object.defineProperties(this, { _intern: { value: new Map() }, _key: { value: key } });
          if (values != null)
            for (const value of values)
              this.add(value);
        }
        has(value) {
          return super.has(intern_get(this, value));
        }
        add(value) {
          return super.add(intern_set(this, value));
        }
        delete(value) {
          return super.delete(intern_delete(this, value));
        }
      };
    }
  });
  function identity5(x5) {
    return x5;
  }
  var init_identity = __esm({
    "../react-d3-graph/node_modules/d3-array/src/identity.js"() {
    }
  });
  function group(values, ...keys) {
    return nest(values, identity5, identity5, keys);
  }
  function groups(values, ...keys) {
    return nest(values, Array.from, identity5, keys);
  }
  function flatten2(groups2, keys) {
    for (let i = 1, n = keys.length; i < n; ++i) {
      groups2 = groups2.flatMap((g) => g.pop().map(([key, value]) => [...g, key, value]));
    }
    return groups2;
  }
  function flatGroup(values, ...keys) {
    return flatten2(groups(values, ...keys), keys);
  }
  function flatRollup(values, reduce9, ...keys) {
    return flatten2(rollups(values, reduce9, ...keys), keys);
  }
  function rollup(values, reduce9, ...keys) {
    return nest(values, identity5, reduce9, keys);
  }
  function rollups(values, reduce9, ...keys) {
    return nest(values, Array.from, reduce9, keys);
  }
  function index2(values, ...keys) {
    return nest(values, identity5, unique2, keys);
  }
  function indexes(values, ...keys) {
    return nest(values, Array.from, unique2, keys);
  }
  function unique2(values) {
    if (values.length !== 1)
      throw new Error("duplicate key");
    return values[0];
  }
  function nest(values, map14, reduce9, keys) {
    return function regroup(values2, i) {
      if (i >= keys.length)
        return reduce9(values2);
      const groups2 = new InternMap();
      const keyof2 = keys[i++];
      let index3 = -1;
      for (const value of values2) {
        const key = keyof2(value, ++index3, values2);
        const group2 = groups2.get(key);
        if (group2)
          group2.push(value);
        else
          groups2.set(key, [value]);
      }
      for (const [key, values3] of groups2) {
        groups2.set(key, regroup(values3, i));
      }
      return map14(groups2);
    }(values, 0);
  }
  var init_group = __esm({
    "../react-d3-graph/node_modules/d3-array/src/group.js"() {
      init_src12();
      init_identity();
    }
  });
  function permute(source2, keys) {
    return Array.from(keys, (key) => source2[key]);
  }
  var init_permute = __esm({
    "../react-d3-graph/node_modules/d3-array/src/permute.js"() {
    }
  });
  function sort2(values, ...F) {
    if (typeof values[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    values = Array.from(values);
    let [f] = F;
    if (f && f.length !== 2 || F.length > 1) {
      const index3 = Uint32Array.from(values, (d, i) => i);
      if (F.length > 1) {
        F = F.map((f2) => values.map(f2));
        index3.sort((i, j) => {
          for (const f2 of F) {
            const c3 = ascendingDefined(f2[i], f2[j]);
            if (c3)
              return c3;
          }
        });
      } else {
        f = values.map(f);
        index3.sort((i, j) => ascendingDefined(f[i], f[j]));
      }
      return permute(values, index3);
    }
    return values.sort(compareDefined(f));
  }
  function compareDefined(compare2 = ascending3) {
    if (compare2 === ascending3)
      return ascendingDefined;
    if (typeof compare2 !== "function")
      throw new TypeError("compare is not a function");
    return (a3, b) => {
      const x5 = compare2(a3, b);
      if (x5 || x5 === 0)
        return x5;
      return (compare2(b, b) === 0) - (compare2(a3, a3) === 0);
    };
  }
  function ascendingDefined(a3, b) {
    return (a3 == null || !(a3 >= a3)) - (b == null || !(b >= b)) || (a3 < b ? -1 : a3 > b ? 1 : 0);
  }
  var init_sort2 = __esm({
    "../react-d3-graph/node_modules/d3-array/src/sort.js"() {
      init_ascending();
      init_permute();
    }
  });
  function groupSort(values, reduce9, key) {
    return (reduce9.length !== 2 ? sort2(rollup(values, reduce9, key), ([ak, av], [bk, bv]) => ascending3(av, bv) || ascending3(ak, bk)) : sort2(group(values, key), ([ak, av], [bk, bv]) => reduce9(av, bv) || ascending3(ak, bk))).map(([key2]) => key2);
  }
  var init_groupSort = __esm({
    "../react-d3-graph/node_modules/d3-array/src/groupSort.js"() {
      init_ascending();
      init_group();
      init_sort2();
    }
  });
  var array3;
  var slice2;
  var map12;
  var init_array2 = __esm({
    "../react-d3-graph/node_modules/d3-array/src/array.js"() {
      array3 = Array.prototype;
      slice2 = array3.slice;
      map12 = array3.map;
    }
  });
  function constant(x5) {
    return () => x5;
  }
  var init_constant6 = __esm({
    "../react-d3-graph/node_modules/d3-array/src/constant.js"() {
    }
  });
  function ticks(start3, stop, count2) {
    var reverse4, i = -1, n, ticks2, step;
    stop = +stop, start3 = +start3, count2 = +count2;
    if (start3 === stop && count2 > 0)
      return [start3];
    if (reverse4 = stop < start3)
      n = start3, start3 = stop, stop = n;
    if ((step = tickIncrement(start3, stop, count2)) === 0 || !isFinite(step))
      return [];
    if (step > 0) {
      let r0 = Math.round(start3 / step), r1 = Math.round(stop / step);
      if (r0 * step < start3)
        ++r0;
      if (r1 * step > stop)
        --r1;
      ticks2 = new Array(n = r1 - r0 + 1);
      while (++i < n)
        ticks2[i] = (r0 + i) * step;
    } else {
      step = -step;
      let r0 = Math.round(start3 * step), r1 = Math.round(stop * step);
      if (r0 / step < start3)
        ++r0;
      if (r1 / step > stop)
        --r1;
      ticks2 = new Array(n = r1 - r0 + 1);
      while (++i < n)
        ticks2[i] = (r0 + i) / step;
    }
    if (reverse4)
      ticks2.reverse();
    return ticks2;
  }
  function tickIncrement(start3, stop, count2) {
    var step = (stop - start3) / Math.max(0, count2), power = Math.floor(Math.log(step) / Math.LN10), error2 = step / Math.pow(10, power);
    return power >= 0 ? (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1);
  }
  function tickStep(start3, stop, count2) {
    var step0 = Math.abs(stop - start3) / Math.max(0, count2), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error2 = step0 / step1;
    if (error2 >= e10)
      step1 *= 10;
    else if (error2 >= e5)
      step1 *= 5;
    else if (error2 >= e2)
      step1 *= 2;
    return stop < start3 ? -step1 : step1;
  }
  var e10;
  var e5;
  var e2;
  var init_ticks = __esm({
    "../react-d3-graph/node_modules/d3-array/src/ticks.js"() {
      e10 = Math.sqrt(50);
      e5 = Math.sqrt(10);
      e2 = Math.sqrt(2);
    }
  });
  function nice(start3, stop, count2) {
    let prestep;
    while (true) {
      const step = tickIncrement(start3, stop, count2);
      if (step === prestep || step === 0 || !isFinite(step)) {
        return [start3, stop];
      } else if (step > 0) {
        start3 = Math.floor(start3 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start3 = Math.ceil(start3 * step) / step;
        stop = Math.floor(stop * step) / step;
      }
      prestep = step;
    }
  }
  var init_nice = __esm({
    "../react-d3-graph/node_modules/d3-array/src/nice.js"() {
      init_ticks();
    }
  });
  function thresholdSturges(values) {
    return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
  }
  var init_sturges = __esm({
    "../react-d3-graph/node_modules/d3-array/src/threshold/sturges.js"() {
      init_count();
    }
  });
  function bin() {
    var value = identity5, domain = extent, threshold = thresholdSturges;
    function histogram(data) {
      if (!Array.isArray(data))
        data = Array.from(data);
      var i, n = data.length, x5, values = new Array(n);
      for (i = 0; i < n; ++i) {
        values[i] = value(data[i], i, data);
      }
      var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
      if (!Array.isArray(tz)) {
        const max6 = x1, tn = +tz;
        if (domain === extent)
          [x0, x1] = nice(x0, x1, tn);
        tz = ticks(x0, x1, tn);
        if (tz[tz.length - 1] >= x1) {
          if (max6 >= x1 && domain === extent) {
            const step = tickIncrement(x0, x1, tn);
            if (isFinite(step)) {
              if (step > 0) {
                x1 = (Math.floor(x1 / step) + 1) * step;
              } else if (step < 0) {
                x1 = (Math.ceil(x1 * -step) + 1) / -step;
              }
            }
          } else {
            tz.pop();
          }
        }
      }
      var m2 = tz.length;
      while (tz[0] <= x0)
        tz.shift(), --m2;
      while (tz[m2 - 1] > x1)
        tz.pop(), --m2;
      var bins = new Array(m2 + 1), bin2;
      for (i = 0; i <= m2; ++i) {
        bin2 = bins[i] = [];
        bin2.x0 = i > 0 ? tz[i - 1] : x0;
        bin2.x1 = i < m2 ? tz[i] : x1;
      }
      for (i = 0; i < n; ++i) {
        x5 = values[i];
        if (x5 != null && x0 <= x5 && x5 <= x1) {
          bins[bisect_default(tz, x5, 0, m2)].push(data[i]);
        }
      }
      return bins;
    }
    histogram.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
    };
    histogram.domain = function(_) {
      return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
    };
    histogram.thresholds = function(_) {
      return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice2.call(_)) : constant(_), histogram) : threshold;
    };
    return histogram;
  }
  var init_bin = __esm({
    "../react-d3-graph/node_modules/d3-array/src/bin.js"() {
      init_array2();
      init_bisect();
      init_constant6();
      init_extent2();
      init_identity();
      init_nice();
      init_ticks();
      init_sturges();
    }
  });
  function max3(values, valueof) {
    let max6;
    if (valueof === void 0) {
      for (const value of values) {
        if (value != null && (max6 < value || max6 === void 0 && value >= value)) {
          max6 = value;
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && (max6 < value || max6 === void 0 && value >= value)) {
          max6 = value;
        }
      }
    }
    return max6;
  }
  var init_max = __esm({
    "../react-d3-graph/node_modules/d3-array/src/max.js"() {
    }
  });
  function min3(values, valueof) {
    let min6;
    if (valueof === void 0) {
      for (const value of values) {
        if (value != null && (min6 > value || min6 === void 0 && value >= value)) {
          min6 = value;
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && (min6 > value || min6 === void 0 && value >= value)) {
          min6 = value;
        }
      }
    }
    return min6;
  }
  var init_min = __esm({
    "../react-d3-graph/node_modules/d3-array/src/min.js"() {
    }
  });
  function quickselect(array4, k2, left = 0, right = array4.length - 1, compare2) {
    compare2 = compare2 === void 0 ? ascendingDefined : compareDefined(compare2);
    while (right > left) {
      if (right - left > 600) {
        const n = right - left + 1;
        const m2 = k2 - left + 1;
        const z = Math.log(n);
        const s2 = 0.5 * Math.exp(2 * z / 3);
        const sd = 0.5 * Math.sqrt(z * s2 * (n - s2) / n) * (m2 - n / 2 < 0 ? -1 : 1);
        const newLeft = Math.max(left, Math.floor(k2 - m2 * s2 / n + sd));
        const newRight = Math.min(right, Math.floor(k2 + (n - m2) * s2 / n + sd));
        quickselect(array4, k2, newLeft, newRight, compare2);
      }
      const t = array4[k2];
      let i = left;
      let j = right;
      swap(array4, left, k2);
      if (compare2(array4[right], t) > 0)
        swap(array4, left, right);
      while (i < j) {
        swap(array4, i, j), ++i, --j;
        while (compare2(array4[i], t) < 0)
          ++i;
        while (compare2(array4[j], t) > 0)
          --j;
      }
      if (compare2(array4[left], t) === 0)
        swap(array4, left, j);
      else
        ++j, swap(array4, j, right);
      if (j <= k2)
        left = j + 1;
      if (k2 <= j)
        right = j - 1;
    }
    return array4;
  }
  function swap(array4, i, j) {
    const t = array4[i];
    array4[i] = array4[j];
    array4[j] = t;
  }
  var init_quickselect = __esm({
    "../react-d3-graph/node_modules/d3-array/src/quickselect.js"() {
      init_sort2();
    }
  });
  function quantile(values, p, valueof) {
    values = Float64Array.from(numbers(values, valueof));
    if (!(n = values.length))
      return;
    if ((p = +p) <= 0 || n < 2)
      return min3(values);
    if (p >= 1)
      return max3(values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = max3(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min3(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
  }
  function quantileSorted(values, p, valueof = number) {
    if (!(n = values.length))
      return;
    if ((p = +p) <= 0 || n < 2)
      return +valueof(values[0], 0, values);
    if (p >= 1)
      return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
  }
  var init_quantile = __esm({
    "../react-d3-graph/node_modules/d3-array/src/quantile.js"() {
      init_max();
      init_min();
      init_quickselect();
      init_number2();
    }
  });
  function thresholdFreedmanDiaconis(values, min6, max6) {
    return Math.ceil((max6 - min6) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
  }
  var init_freedmanDiaconis = __esm({
    "../react-d3-graph/node_modules/d3-array/src/threshold/freedmanDiaconis.js"() {
      init_count();
      init_quantile();
    }
  });
  function thresholdScott(values, min6, max6) {
    return Math.ceil((max6 - min6) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));
  }
  var init_scott = __esm({
    "../react-d3-graph/node_modules/d3-array/src/threshold/scott.js"() {
      init_count();
      init_deviation();
    }
  });
  function maxIndex(values, valueof) {
    let max6;
    let maxIndex2 = -1;
    let index3 = -1;
    if (valueof === void 0) {
      for (const value of values) {
        ++index3;
        if (value != null && (max6 < value || max6 === void 0 && value >= value)) {
          max6 = value, maxIndex2 = index3;
        }
      }
    } else {
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && (max6 < value || max6 === void 0 && value >= value)) {
          max6 = value, maxIndex2 = index3;
        }
      }
    }
    return maxIndex2;
  }
  var init_maxIndex = __esm({
    "../react-d3-graph/node_modules/d3-array/src/maxIndex.js"() {
    }
  });
  function mean(values, valueof) {
    let count2 = 0;
    let sum3 = 0;
    if (valueof === void 0) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          ++count2, sum3 += value;
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && (value = +value) >= value) {
          ++count2, sum3 += value;
        }
      }
    }
    if (count2)
      return sum3 / count2;
  }
  var init_mean = __esm({
    "../react-d3-graph/node_modules/d3-array/src/mean.js"() {
    }
  });
  function median(values, valueof) {
    return quantile(values, 0.5, valueof);
  }
  var init_median = __esm({
    "../react-d3-graph/node_modules/d3-array/src/median.js"() {
      init_quantile();
    }
  });
  function* flatten3(arrays) {
    for (const array4 of arrays) {
      yield* array4;
    }
  }
  function merge5(arrays) {
    return Array.from(flatten3(arrays));
  }
  var init_merge3 = __esm({
    "../react-d3-graph/node_modules/d3-array/src/merge.js"() {
    }
  });
  function minIndex(values, valueof) {
    let min6;
    let minIndex2 = -1;
    let index3 = -1;
    if (valueof === void 0) {
      for (const value of values) {
        ++index3;
        if (value != null && (min6 > value || min6 === void 0 && value >= value)) {
          min6 = value, minIndex2 = index3;
        }
      }
    } else {
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && (min6 > value || min6 === void 0 && value >= value)) {
          min6 = value, minIndex2 = index3;
        }
      }
    }
    return minIndex2;
  }
  var init_minIndex = __esm({
    "../react-d3-graph/node_modules/d3-array/src/minIndex.js"() {
    }
  });
  function mode(values, valueof) {
    const counts = new InternMap();
    if (valueof === void 0) {
      for (let value of values) {
        if (value != null && value >= value) {
          counts.set(value, (counts.get(value) || 0) + 1);
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index3, values)) != null && value >= value) {
          counts.set(value, (counts.get(value) || 0) + 1);
        }
      }
    }
    let modeValue;
    let modeCount = 0;
    for (const [value, count2] of counts) {
      if (count2 > modeCount) {
        modeCount = count2;
        modeValue = value;
      }
    }
    return modeValue;
  }
  var init_mode = __esm({
    "../react-d3-graph/node_modules/d3-array/src/mode.js"() {
      init_src12();
    }
  });
  function pairs(values, pairof = pair) {
    const pairs2 = [];
    let previous;
    let first = false;
    for (const value of values) {
      if (first)
        pairs2.push(pairof(previous, value));
      previous = value;
      first = true;
    }
    return pairs2;
  }
  function pair(a3, b) {
    return [a3, b];
  }
  var init_pairs = __esm({
    "../react-d3-graph/node_modules/d3-array/src/pairs.js"() {
    }
  });
  function range3(start3, stop, step) {
    start3 = +start3, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start3, start3 = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start3) / step)) | 0, range4 = new Array(n);
    while (++i < n) {
      range4[i] = start3 + i * step;
    }
    return range4;
  }
  var init_range = __esm({
    "../react-d3-graph/node_modules/d3-array/src/range.js"() {
    }
  });
  function rank(values, valueof = ascending3) {
    if (typeof values[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    let V = Array.from(values);
    const R = new Float64Array(V.length);
    if (valueof.length !== 2)
      V = V.map(valueof), valueof = ascending3;
    const compareIndex = (i, j) => valueof(V[i], V[j]);
    let k2, r;
    Uint32Array.from(V, (_, i) => i).sort(valueof === ascending3 ? (i, j) => ascendingDefined(V[i], V[j]) : compareDefined(compareIndex)).forEach((j, i) => {
      const c3 = compareIndex(j, k2 === void 0 ? j : k2);
      if (c3 >= 0) {
        if (k2 === void 0 || c3 > 0)
          k2 = j, r = i;
        R[j] = r;
      } else {
        R[j] = NaN;
      }
    });
    return R;
  }
  var init_rank = __esm({
    "../react-d3-graph/node_modules/d3-array/src/rank.js"() {
      init_ascending();
      init_sort2();
    }
  });
  function least(values, compare2 = ascending3) {
    let min6;
    let defined = false;
    if (compare2.length === 1) {
      let minValue;
      for (const element of values) {
        const value = compare2(element);
        if (defined ? ascending3(value, minValue) < 0 : ascending3(value, value) === 0) {
          min6 = element;
          minValue = value;
          defined = true;
        }
      }
    } else {
      for (const value of values) {
        if (defined ? compare2(value, min6) < 0 : compare2(value, value) === 0) {
          min6 = value;
          defined = true;
        }
      }
    }
    return min6;
  }
  var init_least = __esm({
    "../react-d3-graph/node_modules/d3-array/src/least.js"() {
      init_ascending();
    }
  });
  function leastIndex(values, compare2 = ascending3) {
    if (compare2.length === 1)
      return minIndex(values, compare2);
    let minValue;
    let min6 = -1;
    let index3 = -1;
    for (const value of values) {
      ++index3;
      if (min6 < 0 ? compare2(value, value) === 0 : compare2(value, minValue) < 0) {
        minValue = value;
        min6 = index3;
      }
    }
    return min6;
  }
  var init_leastIndex = __esm({
    "../react-d3-graph/node_modules/d3-array/src/leastIndex.js"() {
      init_ascending();
      init_minIndex();
    }
  });
  function greatest(values, compare2 = ascending3) {
    let max6;
    let defined = false;
    if (compare2.length === 1) {
      let maxValue;
      for (const element of values) {
        const value = compare2(element);
        if (defined ? ascending3(value, maxValue) > 0 : ascending3(value, value) === 0) {
          max6 = element;
          maxValue = value;
          defined = true;
        }
      }
    } else {
      for (const value of values) {
        if (defined ? compare2(value, max6) > 0 : compare2(value, value) === 0) {
          max6 = value;
          defined = true;
        }
      }
    }
    return max6;
  }
  var init_greatest = __esm({
    "../react-d3-graph/node_modules/d3-array/src/greatest.js"() {
      init_ascending();
    }
  });
  function greatestIndex(values, compare2 = ascending3) {
    if (compare2.length === 1)
      return maxIndex(values, compare2);
    let maxValue;
    let max6 = -1;
    let index3 = -1;
    for (const value of values) {
      ++index3;
      if (max6 < 0 ? compare2(value, value) === 0 : compare2(value, maxValue) > 0) {
        maxValue = value;
        max6 = index3;
      }
    }
    return max6;
  }
  var init_greatestIndex = __esm({
    "../react-d3-graph/node_modules/d3-array/src/greatestIndex.js"() {
      init_ascending();
      init_maxIndex();
    }
  });
  function scan(values, compare2) {
    const index3 = leastIndex(values, compare2);
    return index3 < 0 ? void 0 : index3;
  }
  var init_scan = __esm({
    "../react-d3-graph/node_modules/d3-array/src/scan.js"() {
      init_leastIndex();
    }
  });
  function shuffler(random) {
    return function shuffle3(array4, i0 = 0, i1 = array4.length) {
      let m2 = i1 - (i0 = +i0);
      while (m2) {
        const i = random() * m2-- | 0, t = array4[m2 + i0];
        array4[m2 + i0] = array4[i + i0];
        array4[i + i0] = t;
      }
      return array4;
    };
  }
  var shuffle_default;
  var init_shuffle = __esm({
    "../react-d3-graph/node_modules/d3-array/src/shuffle.js"() {
      shuffle_default = shuffler(Math.random);
    }
  });
  function sum(values, valueof) {
    let sum3 = 0;
    if (valueof === void 0) {
      for (let value of values) {
        if (value = +value) {
          sum3 += value;
        }
      }
    } else {
      let index3 = -1;
      for (let value of values) {
        if (value = +valueof(value, ++index3, values)) {
          sum3 += value;
        }
      }
    }
    return sum3;
  }
  var init_sum = __esm({
    "../react-d3-graph/node_modules/d3-array/src/sum.js"() {
    }
  });
  function transpose(matrix) {
    if (!(n = matrix.length))
      return [];
    for (var i = -1, m2 = min3(matrix, length4), transpose2 = new Array(m2); ++i < m2; ) {
      for (var j = -1, n, row = transpose2[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose2;
  }
  function length4(d) {
    return d.length;
  }
  var init_transpose = __esm({
    "../react-d3-graph/node_modules/d3-array/src/transpose.js"() {
      init_min();
    }
  });
  function zip3() {
    return transpose(arguments);
  }
  var init_zip = __esm({
    "../react-d3-graph/node_modules/d3-array/src/zip.js"() {
      init_transpose();
    }
  });
  function every6(values, test) {
    if (typeof test !== "function")
      throw new TypeError("test is not a function");
    let index3 = -1;
    for (const value of values) {
      if (!test(value, ++index3, values)) {
        return false;
      }
    }
    return true;
  }
  var init_every = __esm({
    "../react-d3-graph/node_modules/d3-array/src/every.js"() {
    }
  });
  function some9(values, test) {
    if (typeof test !== "function")
      throw new TypeError("test is not a function");
    let index3 = -1;
    for (const value of values) {
      if (test(value, ++index3, values)) {
        return true;
      }
    }
    return false;
  }
  var init_some = __esm({
    "../react-d3-graph/node_modules/d3-array/src/some.js"() {
    }
  });
  function filter6(values, test) {
    if (typeof test !== "function")
      throw new TypeError("test is not a function");
    const array4 = [];
    let index3 = -1;
    for (const value of values) {
      if (test(value, ++index3, values)) {
        array4.push(value);
      }
    }
    return array4;
  }
  var init_filter3 = __esm({
    "../react-d3-graph/node_modules/d3-array/src/filter.js"() {
    }
  });
  function map13(values, mapper) {
    if (typeof values[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    if (typeof mapper !== "function")
      throw new TypeError("mapper is not a function");
    return Array.from(values, (value, index3) => mapper(value, index3, values));
  }
  var init_map = __esm({
    "../react-d3-graph/node_modules/d3-array/src/map.js"() {
    }
  });
  function reduce7(values, reducer2, value) {
    if (typeof reducer2 !== "function")
      throw new TypeError("reducer is not a function");
    const iterator = values[Symbol.iterator]();
    let done, next, index3 = -1;
    if (arguments.length < 3) {
      ({ done, value } = iterator.next());
      if (done)
        return;
      ++index3;
    }
    while ({ done, value: next } = iterator.next(), !done) {
      value = reducer2(value, next, ++index3, values);
    }
    return value;
  }
  var init_reduce = __esm({
    "../react-d3-graph/node_modules/d3-array/src/reduce.js"() {
    }
  });
  function reverse3(values) {
    if (typeof values[Symbol.iterator] !== "function")
      throw new TypeError("values is not iterable");
    return Array.from(values).reverse();
  }
  var init_reverse = __esm({
    "../react-d3-graph/node_modules/d3-array/src/reverse.js"() {
    }
  });
  function difference(values, ...others) {
    values = new InternSet(values);
    for (const other of others) {
      for (const value of other) {
        values.delete(value);
      }
    }
    return values;
  }
  var init_difference = __esm({
    "../react-d3-graph/node_modules/d3-array/src/difference.js"() {
      init_src12();
    }
  });
  function disjoint(values, other) {
    const iterator = other[Symbol.iterator](), set11 = new InternSet();
    for (const v of values) {
      if (set11.has(v))
        return false;
      let value, done;
      while ({ value, done } = iterator.next()) {
        if (done)
          break;
        if (Object.is(v, value))
          return false;
        set11.add(value);
      }
    }
    return true;
  }
  var init_disjoint = __esm({
    "../react-d3-graph/node_modules/d3-array/src/disjoint.js"() {
      init_src12();
    }
  });
  function intersection(values, ...others) {
    values = new InternSet(values);
    others = others.map(set9);
    out:
      for (const value of values) {
        for (const other of others) {
          if (!other.has(value)) {
            values.delete(value);
            continue out;
          }
        }
      }
    return values;
  }
  function set9(values) {
    return values instanceof InternSet ? values : new InternSet(values);
  }
  var init_intersection = __esm({
    "../react-d3-graph/node_modules/d3-array/src/intersection.js"() {
      init_src12();
    }
  });
  function superset(values, other) {
    const iterator = values[Symbol.iterator](), set11 = new Set();
    for (const o of other) {
      const io = intern(o);
      if (set11.has(io))
        continue;
      let value, done;
      while ({ value, done } = iterator.next()) {
        if (done)
          return false;
        const ivalue = intern(value);
        set11.add(ivalue);
        if (Object.is(io, ivalue))
          break;
      }
    }
    return true;
  }
  function intern(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }
  var init_superset = __esm({
    "../react-d3-graph/node_modules/d3-array/src/superset.js"() {
    }
  });
  function subset5(values, other) {
    return superset(other, values);
  }
  var init_subset = __esm({
    "../react-d3-graph/node_modules/d3-array/src/subset.js"() {
      init_superset();
    }
  });
  function union3(...others) {
    const set11 = new InternSet();
    for (const other of others) {
      for (const o of other) {
        set11.add(o);
      }
    }
    return set11;
  }
  var init_union = __esm({
    "../react-d3-graph/node_modules/d3-array/src/union.js"() {
      init_src12();
    }
  });
  var src_exports5 = {};
  __export(src_exports5, {
    Adder: () => Adder,
    InternMap: () => InternMap,
    InternSet: () => InternSet,
    ascending: () => ascending3,
    bin: () => bin,
    bisect: () => bisect_default,
    bisectCenter: () => bisectCenter,
    bisectLeft: () => bisectLeft,
    bisectRight: () => bisectRight,
    bisector: () => bisector,
    count: () => count,
    cross: () => cross,
    cumsum: () => cumsum,
    descending: () => descending,
    deviation: () => deviation,
    difference: () => difference,
    disjoint: () => disjoint,
    every: () => every6,
    extent: () => extent,
    fcumsum: () => fcumsum,
    filter: () => filter6,
    flatGroup: () => flatGroup,
    flatRollup: () => flatRollup,
    fsum: () => fsum,
    greatest: () => greatest,
    greatestIndex: () => greatestIndex,
    group: () => group,
    groupSort: () => groupSort,
    groups: () => groups,
    histogram: () => bin,
    index: () => index2,
    indexes: () => indexes,
    intersection: () => intersection,
    least: () => least,
    leastIndex: () => leastIndex,
    map: () => map13,
    max: () => max3,
    maxIndex: () => maxIndex,
    mean: () => mean,
    median: () => median,
    merge: () => merge5,
    min: () => min3,
    minIndex: () => minIndex,
    mode: () => mode,
    nice: () => nice,
    pairs: () => pairs,
    permute: () => permute,
    quantile: () => quantile,
    quantileSorted: () => quantileSorted,
    quickselect: () => quickselect,
    range: () => range3,
    rank: () => rank,
    reduce: () => reduce7,
    reverse: () => reverse3,
    rollup: () => rollup,
    rollups: () => rollups,
    scan: () => scan,
    shuffle: () => shuffle_default,
    shuffler: () => shuffler,
    some: () => some9,
    sort: () => sort2,
    subset: () => subset5,
    sum: () => sum,
    superset: () => superset,
    thresholdFreedmanDiaconis: () => thresholdFreedmanDiaconis,
    thresholdScott: () => thresholdScott,
    thresholdSturges: () => thresholdSturges,
    tickIncrement: () => tickIncrement,
    tickStep: () => tickStep,
    ticks: () => ticks,
    transpose: () => transpose,
    union: () => union3,
    variance: () => variance,
    zip: () => zip3
  });
  var init_src13 = __esm({
    "../react-d3-graph/node_modules/d3-array/src/index.js"() {
      init_bisect();
      init_ascending();
      init_bisector();
      init_count();
      init_cross();
      init_cumsum();
      init_descending();
      init_deviation();
      init_extent2();
      init_fsum();
      init_group();
      init_groupSort();
      init_bin();
      init_freedmanDiaconis();
      init_scott();
      init_sturges();
      init_max();
      init_maxIndex();
      init_mean();
      init_median();
      init_merge3();
      init_min();
      init_minIndex();
      init_mode();
      init_nice();
      init_pairs();
      init_permute();
      init_quantile();
      init_quickselect();
      init_range();
      init_rank();
      init_least();
      init_leastIndex();
      init_greatest();
      init_greatestIndex();
      init_scan();
      init_shuffle();
      init_sum();
      init_ticks();
      init_transpose();
      init_variance();
      init_zip();
      init_every();
      init_some();
      init_filter3();
      init_map();
      init_reduce();
      init_reverse();
      init_sort2();
      init_difference();
      init_disjoint();
      init_intersection();
      init_subset();
      init_superset();
      init_union();
      init_src12();
    }
  });
  var require_const = __commonJS2({
    "../react-d3-graph/lib/const.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _default = {
        SYMBOLS: {
          CIRCLE: "circle",
          CROSS: "cross",
          DIAMOND: "diamond",
          SQUARE: "square",
          STAR: "star",
          TRIANGLE: "triangle",
          WYE: "wye"
        }
      };
      exports2["default"] = _default;
    }
  });
  var require_graph_const = __commonJS2({
    "../react-d3-graph/lib/components/graph/graph.const.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _const = _interopRequireDefault(require_const());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var _default = _objectSpread({
        COORDS_SEPARATOR: ",",
        FORCE_X: 0.06,
        FORCE_Y: 0.06,
        GRAPH_CONTAINER_ID: "graph-container-zoomable",
        GRAPH_WRAPPER_ID: "graph-wrapper",
        GRAPH_GRID_ID: "graph-grid",
        KEYWORDS: {
          SAME: "SAME"
        },
        LINK_CLASS_NAME: "link",
        NODE_CLASS_NAME: "node",
        TTL_DOUBLE_CLICK_IN_MS: 280
      }, _const["default"]);
      exports2["default"] = _default;
    }
  });
  var require_graph_config = __commonJS2({
    "../react-d3-graph/lib/components/graph/graph.config.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _default = {
        automaticRearrangeAfterDropNode: false,
        collapsible: false,
        defs: [],
        directed: false,
        focusAnimationDuration: 0.75,
        focusZoom: 1,
        freezeAllDragEvents: false,
        grid: {
          minorStep: 10,
          majorStep: 50,
          minorColor: "#eee",
          majorColor: "#eee",
          minorWidth: "1",
          majorWidth: "2"
        },
        height: 400,
        highlightDegree: 1,
        highlightOpacity: 1,
        linkHighlightBehavior: false,
        maxZoom: 8,
        minZoom: 0.1,
        initialZoom: null,
        nodeHighlightBehavior: false,
        panAndZoom: false,
        staticGraph: false,
        staticGraphWithDragAndDrop: false,
        bounded: false,
        width: 800,
        d3: {
          alphaTarget: 0.05,
          gravity: -100,
          linkLength: 100,
          linkStrength: 1,
          disableLinkForce: false
        },
        node: {
          color: "#d3d3d3",
          fontColor: "black",
          fontSize: 8,
          fontScaling: true,
          fontWeight: "normal",
          highlightColor: "SAME",
          highlightFontSize: 8,
          highlightFontWeight: "normal",
          highlightStrokeColor: "SAME",
          highlightStrokeWidth: "SAME",
          labelProperty: "id",
          labelPosition: null,
          labelClass: "",
          mouseCursor: "pointer",
          opacity: 1,
          renderLabel: true,
          size: 200,
          strokeColor: "none",
          strokeWidth: 1.5,
          svg: "",
          symbolType: "circle",
          viewGenerator: null
        },
        link: {
          color: "#d3d3d3",
          fontColor: "black",
          fontSize: 8,
          fontScaling: true,
          fontWeight: "normal",
          highlightColor: "SAME",
          highlightFontSize: 8,
          highlightFontWeight: "normal",
          labelProperty: "label",
          mouseCursor: "pointer",
          opacity: 1,
          renderLabel: false,
          semanticStrokeWidth: false,
          strokeWidth: 1.5,
          markerStart: void 0,
          markerEnd: void 0,
          markerHeight: 6,
          markerWidth: 6,
          type: "STRAIGHT",
          selfLinkDirection: "TOP_RIGHT",
          strokeDasharray: 0,
          strokeDashoffset: 0,
          strokeLinecap: "butt",
          offsetSource: function offsetSource() {
            return {
              dx: 0,
              dy: 0
            };
          },
          offsetTarget: function offsetTarget() {
            return {
              dx: 0,
              dy: 0
            };
          },
          parallelSpread: 0.25
        }
      };
      exports2["default"] = _default;
    }
  });
  var require_err = __commonJS2({
    "../react-d3-graph/lib/err.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _default = {
        GRAPH_NO_ID_PROP: "id prop not defined! id property is mandatory and it should be unique.",
        INSUFFICIENT_LINKS: "you are passing invalid data to react-d3-graph. You must include a links array, even if empty, in the data object you're passing down to the <Graph> component.",
        INVALID_LINKS: "you provided a invalid links data structure. Links source and target attributes must point to an existent node",
        INSUFFICIENT_DATA: "you have not provided enough data for react-d3-graph to render something. You need to provide at least one node",
        INVALID_LINK_VALUE: "links 'value' attribute must be of type number"
      };
      exports2["default"] = _default;
    }
  });
  var require_utils = __commonJS2({
    "../react-d3-graph/lib/utils.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.antiPick = antiPick;
      exports2.debounce = debounce;
      exports2.deepClone = deepClone;
      exports2.isDeepEqual = isDeepEqual;
      exports2.isEmptyObject = isEmptyObject;
      exports2.isNil = isNil;
      exports2.logError = logError;
      exports2.logWarning = logWarning;
      exports2.merge = merge6;
      exports2.pick = pick;
      exports2.throwErr = throwErr;
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      var MAX_DEPTH = 20;
      function _isPropertyNestedObject(o, k2) {
        return !!o && Object.prototype.hasOwnProperty.call(o, k2) && _typeof(o[k2]) === "object" && o[k2] !== null && !isEmptyObject(o[k2]);
      }
      function isDeepEqual(o1, o2) {
        var _depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        var diffs = [];
        if (_depth === 0 && o1 === o2) {
          return true;
        }
        if (isEmptyObject(o1) && !isEmptyObject(o2) || !isEmptyObject(o1) && isEmptyObject(o2)) {
          return false;
        }
        var o1Keys = Object.keys(o1);
        var o2Keys = Object.keys(o2);
        if (o1Keys.length !== o2Keys.length) {
          return false;
        }
        for (var _i = 0, _o1Keys = o1Keys; _i < _o1Keys.length; _i++) {
          var k2 = _o1Keys[_i];
          var nestedO = _isPropertyNestedObject(o1, k2) && _isPropertyNestedObject(o2, k2);
          if (nestedO && _depth < MAX_DEPTH) {
            diffs.push(isDeepEqual(o1[k2], o2[k2], _depth + 1));
          } else {
            var r = isEmptyObject(o1[k2]) && isEmptyObject(o2[k2]) || Object.prototype.hasOwnProperty.call(o2, k2) && o2[k2] === o1[k2];
            diffs.push(r);
            if (!r) {
              break;
            }
          }
        }
        return diffs.indexOf(false) === -1;
      }
      function isEmptyObject(o) {
        return !!o && _typeof(o) === "object" && !Object.keys(o).length;
      }
      function isNil(o) {
        return o === void 0 || o === null;
      }
      function deepClone(o) {
        var _clone = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        var oKeys = Object.keys(o);
        for (var _i2 = 0, _oKeys = oKeys; _i2 < _oKeys.length; _i2++) {
          var k2 = _oKeys[_i2];
          var nested = _isPropertyNestedObject(o, k2);
          _clone[k2] = nested && _depth < MAX_DEPTH ? deepClone(o[k2], {}, _depth + 1) : o[k2];
        }
        return _clone;
      }
      function merge6() {
        var o1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var o2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
        var o = {};
        if (Object.keys(o1 || {}).length === 0) {
          return o2 && !isEmptyObject(o2) ? o2 : {};
        }
        for (var _i3 = 0, _Object$keys = Object.keys(o1); _i3 < _Object$keys.length; _i3++) {
          var k2 = _Object$keys[_i3];
          var nestedO = !!(o2[k2] && _typeof(o2[k2]) === "object" && _typeof(o1[k2]) === "object" && _depth < MAX_DEPTH);
          if (nestedO) {
            (function() {
              var r = merge6(o1[k2], o2[k2], _depth + 1);
              o[k2] = Object.prototype.hasOwnProperty.call(o1[k2], "length") && Object.prototype.hasOwnProperty.call(o2[k2], "length") ? Object.keys(r).map(function(rk) {
                return r[rk];
              }) : r;
            })();
          } else {
            o[k2] = Object.prototype.hasOwnProperty.call(o2, k2) ? o2[k2] : o1[k2];
          }
        }
        return o;
      }
      function pick(o) {
        var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        return props.reduce(function(acc, k2) {
          if (Object.prototype.hasOwnProperty.call(o, k2)) {
            acc[k2] = o[k2];
          }
          return acc;
        }, {});
      }
      function antiPick(o) {
        var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        var wanted = Object.keys(o).filter(function(k2) {
          return !props.includes(k2);
        });
        return pick(o, wanted);
      }
      function debounce(fn, time) {
        var timer3;
        return function exec() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var later = function later2() {
            clearTimeout(timer3);
            fn.apply(void 0, args);
          };
          timer3 && clearTimeout(timer3);
          timer3 = setTimeout(later, time);
        };
      }
      function buildFormattedErrorMessage() {
        var component = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "N/A";
        var msg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "N/A";
        return "react-d3-graph :: ".concat(component, " :: ").concat(msg);
      }
      function throwErr(component, msg) {
        throw Error(buildFormattedErrorMessage(component, msg));
      }
      function logError(component, msg) {
        console.error(buildFormattedErrorMessage(component, msg));
      }
      function logWarning(component, msg) {
        var warning = "react-d3-graph :: ".concat(component, " :: ").concat(msg);
        console.warn(warning);
      }
    }
  });
  var require_graph_helper = __commonJS2({
    "../react-d3-graph/lib/components/graph/graph.helper.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.checkForGraphConfigChanges = checkForGraphConfigChanges;
      exports2.checkForGraphElementsChanges = checkForGraphElementsChanges;
      exports2.getCenterAndZoomTransformation = getCenterAndZoomTransformation;
      exports2.getId = getId;
      exports2.getNormalizedNodeCoordinates = getNormalizedNodeCoordinates;
      exports2.initializeGraphState = initializeGraphState;
      exports2.initializeNodes = initializeNodes;
      exports2.isPositionInBounds = isPositionInBounds;
      exports2.updateNodeHighlightedValue = updateNodeHighlightedValue;
      var _d3Force = (init_src6(), src_exports3);
      var _d3Selection = (init_src2(), src_exports);
      var _d3Zoom = (init_src11(), src_exports4);
      var _graph2 = _interopRequireDefault(require_graph_const());
      var _graph3 = _interopRequireDefault(require_graph_config());
      var _err = _interopRequireDefault(require_err());
      var _utils = require_utils();
      var _collapse = require_collapse_helper();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var NODE_PROPS_WHITELIST = ["id", "highlighted", "index", "vy", "vx"];
      var LINK_PROPS_WHITELIST = ["index", "source", "target", "isHidden"];
      function _createForceSimulation(width, height, gravity) {
        var frx = (0, _d3Force.forceX)(width / 2).strength(_graph2["default"].FORCE_X);
        var fry = (0, _d3Force.forceY)(height / 2).strength(_graph2["default"].FORCE_Y);
        var forceStrength = gravity;
        return (0, _d3Force.forceSimulation)().force("charge", (0, _d3Force.forceManyBody)().strength(forceStrength)).force("x", frx).force("y", fry);
      }
      function _initializeLinks(graphLinks, config) {
        return graphLinks.reduce(function(links2, l) {
          var source2 = getId(l.source);
          var target2 = getId(l.target);
          if (!links2[source2]) {
            links2[source2] = {};
          }
          if (!links2[target2]) {
            links2[target2] = {};
          }
          var value = config.collapsible && l.isHidden ? 0 : l.value || 1;
          links2[source2][target2] = value;
          if (!config.directed) {
            links2[target2][source2] = value;
          }
          return links2;
        }, {});
      }
      function initializeNodes(graphNodes) {
        var nodes4 = {};
        var n = graphNodes.length;
        for (var i = 0; i < n; i++) {
          var node = graphNodes[i];
          node.highlighted = false;
          if (Object.prototype.hasOwnProperty.call(node, "fx")) {
            node.x = node.fx;
          } else if (!Object.prototype.hasOwnProperty.call(node, "x")) {
            node.x = 0;
          }
          if (Object.prototype.hasOwnProperty.call(node, "fy")) {
            node.y = node.fy;
          } else if (!Object.prototype.hasOwnProperty.call(node, "y")) {
            node.y = 0;
          }
          nodes4[node.id.toString()] = node;
        }
        return nodes4;
      }
      function _mergeDataLinkWithD3Link(link2, index3) {
        var d3Links = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        var config = arguments.length > 3 ? arguments[3] : void 0;
        var state = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
        var tmp = d3Links.find(function(l) {
          return l.source.id === link2.source && l.target.id === link2.target;
        });
        var d3Link = tmp && (0, _utils.pick)(tmp, LINK_PROPS_WHITELIST);
        var customProps = (0, _utils.antiPick)(link2, ["source", "target"]);
        if (d3Link) {
          var toggledDirected = state.config && Object.prototype.hasOwnProperty.call(state.config, "directed") && config.directed !== state.config.directed;
          var refinedD3Link = _objectSpread(_objectSpread({
            index: index3
          }, d3Link), customProps);
          if (toggledDirected) {
            return _objectSpread(_objectSpread({}, refinedD3Link), {}, {
              isHidden: false
            });
          }
          return config.collapsible ? refinedD3Link : _objectSpread(_objectSpread({}, refinedD3Link), {}, {
            isHidden: false
          });
        }
        var highlighted = false;
        var source2 = {
          id: link2.source,
          highlighted
        };
        var target2 = {
          id: link2.target,
          highlighted
        };
        return _objectSpread({
          index: index3,
          source: source2,
          target: target2
        }, customProps);
      }
      function _tagOrphanNodes(nodes4, linksMatrix) {
        return Object.keys(nodes4).reduce(function(acc, nodeId) {
          var _computeNodeDegree = (0, _collapse.computeNodeDegree)(nodeId, linksMatrix), inDegree = _computeNodeDegree.inDegree, outDegree = _computeNodeDegree.outDegree;
          var node = nodes4[nodeId];
          var taggedNode = inDegree === 0 && outDegree === 0 ? _objectSpread(_objectSpread({}, node), {}, {
            _orphan: true
          }) : node;
          acc[nodeId] = taggedNode;
          return acc;
        }, {});
      }
      function _validateGraphData(data) {
        if (!data.nodes || !data.nodes.length) {
          (0, _utils.logWarning)("Graph", _err["default"].INSUFFICIENT_DATA);
          data.nodes = [];
        }
        if (!data.links) {
          (0, _utils.logWarning)("Graph", _err["default"].INSUFFICIENT_LINKS);
          data.links = [];
        }
        var n = data.links.length;
        var _loop = function _loop2(i2) {
          var l = data.links[i2];
          if (!data.nodes.find(function(n2) {
            return n2.id === l.source;
          })) {
            (0, _utils.throwErr)("Graph", "".concat(_err["default"].INVALID_LINKS, ' - "').concat(l.source, '" is not a valid source node id'));
          }
          if (!data.nodes.find(function(n2) {
            return n2.id === l.target;
          })) {
            (0, _utils.throwErr)("Graph", "".concat(_err["default"].INVALID_LINKS, ' - "').concat(l.target, '" is not a valid target node id'));
          }
          if (l && l.value !== void 0 && typeof l.value !== "number") {
            (0, _utils.throwErr)("Graph", "".concat(_err["default"].INVALID_LINK_VALUE, ' - found in link with source "').concat(l.source, '" and target "').concat(l.target, '"'));
          }
        };
        for (var i = 0; i < n; i++) {
          _loop(i);
        }
      }
      var NODE_PROPERTIES_DISCARD_TO_COMPARE = ["vx", "vy", "index"];
      function _pickId(o) {
        return (0, _utils.pick)(o, ["id"]);
      }
      function _pickSourceAndTarget(o) {
        return (0, _utils.pick)(o, ["source", "target"]);
      }
      function checkForGraphElementsChanges(nextProps, currentState) {
        var nextNodes = nextProps.data.nodes.map(function(n) {
          return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);
        });
        var nextLinks = nextProps.data.links.map(function(l) {
          return {
            source: getId(l.source),
            target: getId(l.target)
          };
        });
        var stateD3Nodes = currentState.d3Nodes.map(function(n) {
          return (0, _utils.antiPick)(n, NODE_PROPERTIES_DISCARD_TO_COMPARE);
        });
        var stateD3Links = currentState.d3Links.map(function(l) {
          return {
            source: getId(l.source),
            target: getId(l.target)
          };
        });
        var graphElementsUpdated = !((0, _utils.isDeepEqual)(nextNodes, stateD3Nodes) && (0, _utils.isDeepEqual)(nextLinks, stateD3Links));
        var newGraphElements = nextNodes.length !== stateD3Nodes.length || nextLinks.length !== stateD3Links.length || !(0, _utils.isDeepEqual)(nextNodes.map(_pickId), stateD3Nodes.map(_pickId)) || !(0, _utils.isDeepEqual)(nextLinks.map(_pickSourceAndTarget), stateD3Links.map(_pickSourceAndTarget));
        return {
          graphElementsUpdated,
          newGraphElements
        };
      }
      function checkForGraphConfigChanges(nextProps, currentState) {
        var newConfig = (0, _utils.antiPick)(nextProps.config || {}, ["d3"]);
        var oldConfig = (0, _utils.pick)(currentState.config, Object.keys(newConfig));
        var configUpdated = newConfig && !(0, _utils.isEmptyObject)(newConfig) && !(0, _utils.isDeepEqual)(newConfig, oldConfig);
        var newD3Config = nextProps.config && nextProps.config.d3 || {};
        var oldD3Config = (0, _utils.pick)(currentState.config.d3, Object.keys(newD3Config));
        var d3ConfigUpdated = newConfig && newConfig.d3 && !(0, _utils.isDeepEqual)(newD3Config, oldD3Config);
        return {
          configUpdated,
          d3ConfigUpdated
        };
      }
      function getCenterAndZoomTransformation(d3Node, config, containerElId) {
        if (!d3Node) {
          return;
        }
        var width = config.width, height = config.height, focusZoom = config.focusZoom;
        var selector = (0, _d3Selection.select)("#".concat(containerElId));
        selector.call((0, _d3Zoom.zoom)().transform, _d3Zoom.zoomIdentity.translate(width / 2, height / 2).scale(focusZoom).translate(-d3Node.x, -d3Node.y));
        return "\n    translate(".concat(width / 2, ", ").concat(height / 2, ")\n    scale(").concat(focusZoom, ")\n    translate(").concat(-d3Node.x, ", ").concat(-d3Node.y, ")\n  ");
      }
      function getId(sot) {
        return sot.id !== void 0 && sot.id !== null ? sot.id : sot;
      }
      function initializeGraphState(_ref, state) {
        var data = _ref.data, id10 = _ref.id, viewTransform = _ref.viewTransform, config = _ref.config;
        _validateGraphData(data);
        var graph;
        if (state && state.nodes) {
          graph = {
            nodes: data.nodes.map(function(n) {
              return state.nodes[n.id] ? _objectSpread(_objectSpread({}, n), (0, _utils.pick)(state.nodes[n.id], NODE_PROPS_WHITELIST)) : _objectSpread({}, n);
            }),
            links: data.links.map(function(l, index3) {
              return _mergeDataLinkWithD3Link(l, index3, state && state.d3Links, config, state);
            })
          };
        } else {
          graph = {
            nodes: data.nodes.map(function(n) {
              return _objectSpread({}, n);
            }),
            links: data.links.map(function(l) {
              return _objectSpread({}, l);
            })
          };
        }
        var newConfig = _objectSpread({}, (0, _utils.merge)(_graph3["default"], config || {})), links2 = _initializeLinks(graph.links, newConfig), nodes4 = _tagOrphanNodes(initializeNodes(graph.nodes), links2);
        var _graph = graph, d3Nodes = _graph.nodes, d3Links = _graph.links;
        var formatedId = id10.replace(/ /g, "_");
        var simulation = _createForceSimulation(newConfig.width, newConfig.height, newConfig.d3 && newConfig.d3.gravity);
        var minZoom = newConfig.minZoom, maxZoom = newConfig.maxZoom, focusZoom = newConfig.focusZoom;
        if (focusZoom > maxZoom) {
          newConfig.focusZoom = maxZoom;
        } else if (focusZoom < minZoom) {
          newConfig.focusZoom = minZoom;
        }
        return {
          id: formatedId,
          config: newConfig,
          links: links2,
          d3Links,
          nodes: nodes4,
          d3Nodes,
          highlightedNode: "",
          simulation,
          newGraphElements: false,
          configUpdated: false,
          transform: viewTransform || _d3Zoom.zoomIdentity,
          draggedNode: null
        };
      }
      function updateNodeHighlightedValue(nodes4, links2, config, id10) {
        var value = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
        var highlightedNode = value ? id10 : "";
        var node = _objectSpread(_objectSpread({}, nodes4[id10]), {}, {
          highlighted: value
        });
        var updatedNodes = _objectSpread(_objectSpread({}, nodes4), {}, _defineProperty({}, id10, node));
        if (links2[id10] && config.highlightDegree !== 0) {
          updatedNodes = Object.keys(links2[id10]).reduce(function(acc, linkId) {
            var updatedNode = _objectSpread(_objectSpread({}, updatedNodes[linkId]), {}, {
              highlighted: value
            });
            acc[linkId] = updatedNode;
            return acc;
          }, updatedNodes);
        }
        return {
          nodes: updatedNodes,
          highlightedNode
        };
      }
      function normalize(vector) {
        var norm = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));
        return norm === 0 ? vector : {
          x: vector.x / norm,
          y: vector.y / norm
        };
      }
      var SYMBOLS_WITH_OPTIMIZED_POSITIONING = new Set([_graph2["default"].SYMBOLS.CIRCLE]);
      function getNormalizedNodeCoordinates(_ref2, nodes4, config, strokeWidth) {
        var _config$node, _config$node2, _config$node3;
        var sourceId = _ref2.sourceId, targetId = _ref2.targetId, _ref2$sourceCoords = _ref2.sourceCoords, sourceCoords = _ref2$sourceCoords === void 0 ? {} : _ref2$sourceCoords, _ref2$targetCoords = _ref2.targetCoords, targetCoords = _ref2$targetCoords === void 0 ? {} : _ref2$targetCoords;
        var sourceNode = nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[sourceId];
        var targetNode = nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[targetId];
        if (!sourceNode || !targetNode) {
          return {
            sourceCoords,
            targetCoords
          };
        }
        if ((_config$node = config.node) !== null && _config$node !== void 0 && _config$node.viewGenerator || sourceNode !== null && sourceNode !== void 0 && sourceNode.viewGenerator || targetNode !== null && targetNode !== void 0 && targetNode.viewGenerator) {
          return {
            sourceCoords,
            targetCoords
          };
        }
        var sourceSymbolType = sourceNode.symbolType || ((_config$node2 = config.node) === null || _config$node2 === void 0 ? void 0 : _config$node2.symbolType);
        var targetSymbolType = targetNode.symbolType || ((_config$node3 = config.node) === null || _config$node3 === void 0 ? void 0 : _config$node3.symbolType);
        if (!SYMBOLS_WITH_OPTIMIZED_POSITIONING.has(sourceSymbolType) && !SYMBOLS_WITH_OPTIMIZED_POSITIONING.has(targetSymbolType)) {
          return {
            sourceCoords,
            targetCoords
          };
        }
        var x1 = sourceCoords.x, y1 = sourceCoords.y;
        var x22 = targetCoords.x, y22 = targetCoords.y;
        var directionVector = normalize({
          x: x22 - x1,
          y: y22 - y1
        });
        switch (sourceSymbolType) {
          case _graph2["default"].SYMBOLS.CIRCLE: {
            var sourceNodeSize = (sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.size) || config.node.size;
            sourceNodeSize = Math.sqrt(sourceNodeSize / Math.PI) * 0.95;
            x1 += sourceNodeSize * directionVector.x;
            y1 += sourceNodeSize * directionVector.y;
            break;
          }
        }
        switch (targetSymbolType) {
          case _graph2["default"].SYMBOLS.CIRCLE: {
            var _config$link, _config$link2;
            var strokeSize = strokeWidth * Math.min(((_config$link = config.link) === null || _config$link === void 0 ? void 0 : _config$link.markerWidth) || 0, ((_config$link2 = config.link) === null || _config$link2 === void 0 ? void 0 : _config$link2.markerHeight) || 0);
            var targetNodeSize = (targetNode === null || targetNode === void 0 ? void 0 : targetNode.size) || config.node.size;
            targetNodeSize = Math.sqrt(targetNodeSize / Math.PI) * 0.95;
            x22 -= (targetNodeSize + (config.directed ? strokeSize : 0)) * directionVector.x;
            y22 -= (targetNodeSize + (config.directed ? strokeSize : 0)) * directionVector.y;
            break;
          }
        }
        return {
          sourceCoords: {
            x: x1,
            y: y1
          },
          targetCoords: {
            x: x22,
            y: y22
          }
        };
      }
      function isPositionInBounds(position, currentState) {
        var transform3 = currentState.transform, config = currentState.config;
        var invertTransformZoom = 1 / transform3.k;
        return position.x > -transform3.x * invertTransformZoom && position.x < (config.width - transform3.x) * invertTransformZoom && position.y > -transform3.y * invertTransformZoom && position.y < (config.height - transform3.y) * invertTransformZoom;
      }
    }
  });
  var require_collapse_helper = __commonJS2({
    "../react-d3-graph/lib/components/graph/collapse.helper.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.computeNodeDegree = computeNodeDegree;
      exports2.getTargetLeafConnections = getTargetLeafConnections;
      exports2.isNodeVisible = isNodeVisible;
      exports2.toggleLinksConnections = toggleLinksConnections;
      exports2.toggleLinksMatrixConnections = toggleLinksMatrixConnections;
      var _graph = require_graph_helper();
      var _utils = require_utils();
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _isLeafDirected(inDegree, outDegree) {
        return inDegree <= 1 && outDegree < 1;
      }
      function _isLeafNotDirected(inDegree, outDegree) {
        return inDegree <= 1 && outDegree <= 1;
      }
      function _isLeaf(nodeId, linksMatrix, directed) {
        var _computeNodeDegree = computeNodeDegree(nodeId, linksMatrix), inDegree = _computeNodeDegree.inDegree, outDegree = _computeNodeDegree.outDegree;
        var fn = directed ? _isLeafDirected : _isLeafNotDirected;
        return fn(inDegree, outDegree);
      }
      function computeNodeDegree(nodeId) {
        var linksMatrix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return Object.keys(linksMatrix).reduce(function(acc, source2) {
          if (!linksMatrix[source2]) {
            return acc;
          }
          var currentNodeConnections = Object.keys(linksMatrix[source2]);
          return currentNodeConnections.reduce(function(_acc, target2) {
            if (nodeId === source2) {
              _acc.outDegree += linksMatrix[nodeId][target2];
            }
            if (nodeId === target2) {
              _acc.inDegree += linksMatrix[source2][nodeId];
            }
            return _acc;
          }, acc);
        }, {
          inDegree: 0,
          outDegree: 0
        });
      }
      function getTargetLeafConnections(rootNodeId) {
        var linksMatrix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var _ref = arguments.length > 2 ? arguments[2] : void 0, directed = _ref.directed;
        var rootConnectionsNodesIds = linksMatrix[rootNodeId] ? Object.keys(linksMatrix[rootNodeId]) : [];
        return rootConnectionsNodesIds.reduce(function(leafConnections, target2) {
          if (_isLeaf(target2, linksMatrix, directed)) {
            leafConnections.push({
              source: rootNodeId,
              target: target2
            });
          }
          return leafConnections;
        }, []);
      }
      function isNodeVisible(nodeId, nodes4, linksMatrix) {
        var node = nodes4[nodeId];
        if (!node) {
          if (true) {
            (0, _utils.logError)("graph/collapse.helper", "Trying to check if node ".concat(nodeId, " is visible but its not present in nodes: "), nodes4);
          }
          return false;
        }
        if (nodes4[nodeId]._orphan) {
          return true;
        }
        var _computeNodeDegree2 = computeNodeDegree(nodeId, linksMatrix), inDegree = _computeNodeDegree2.inDegree, outDegree = _computeNodeDegree2.outDegree;
        return inDegree > 0 || outDegree > 0;
      }
      function toggleLinksConnections(d3Links, connectionMatrix) {
        return d3Links.map(function(d3Link) {
          var source2 = d3Link.source, target2 = d3Link.target;
          var sourceId = (0, _graph.getId)(source2);
          var targetId = (0, _graph.getId)(target2);
          var connection = connectionMatrix && connectionMatrix[sourceId] && connectionMatrix[sourceId][targetId];
          var isHidden = !connection;
          return _objectSpread(_objectSpread({}, d3Link), {}, {
            isHidden
          });
        });
      }
      function toggleLinksMatrixConnections(linksMatrix, connections, _ref2) {
        var directed = _ref2.directed;
        return connections.reduce(function(newMatrix, link2) {
          if (!newMatrix[link2.source]) {
            newMatrix[link2.source] = {};
          }
          if (!newMatrix[link2.source][link2.target]) {
            newMatrix[link2.source][link2.target] = 0;
          }
          var newConnectionValue = newMatrix[link2.source][link2.target] === 0 ? 1 : 0;
          newMatrix[link2.source][link2.target] = newConnectionValue;
          if (!directed) {
            newMatrix[link2.target][link2.source] = newConnectionValue;
          }
          return newMatrix;
        }, _objectSpread({}, linksMatrix));
      }
    }
  });
  var require_selection_helper = __commonJS2({
    "../react-d3-graph/lib/components/graph/selection.helper.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Selection = void 0;
      var _graph = require_graph_helper();
      var _utils = require_utils();
      function _defineProperties(target2, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target2, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var Selection5 = /* @__PURE__ */ _createClass(function Selection6() {
        var _this = this;
        _classCallCheck(this, Selection6);
        _defineProperty(this, "nodes", void 0);
        _defineProperty(this, "links", void 0);
        _defineProperty(this, "update", function(other) {
          _this.nodes = new Set(other.nodes);
          _this.links = new Set(other.links);
        });
        _defineProperty(this, "linkIsSelected", function(linkId) {
          return _this.links.has(linkId);
        });
        _defineProperty(this, "nodeIsSelected", function(nodeId) {
          return _this.nodes.has(nodeId);
        });
        _defineProperty(this, "addLinks", function(linkIds) {
          linkIds.forEach(function(id10) {
            return _this.links.add(id10);
          });
        });
        _defineProperty(this, "addLink", function(linkId) {
          _this.addLinks([linkId]);
        });
        _defineProperty(this, "addNodes", function(nodeIds) {
          nodeIds.forEach(function(id10) {
            return _this.nodes.add(id10);
          });
        });
        _defineProperty(this, "addNode", function(nodeId) {
          _this.addNodes([nodeId]);
        });
        _defineProperty(this, "removeLink", function(linkId) {
          _this.links["delete"](linkId);
        });
        _defineProperty(this, "removeNode", function(nodeId) {
          _this.nodes["delete"](nodeId);
        });
        _defineProperty(this, "toggleLink", function(linkId) {
          _this.linkIsSelected(linkId) ? _this.removeLink(linkId) : _this.addLink(linkId);
        });
        _defineProperty(this, "toggleNode", function(nodeId) {
          _this.nodeIsSelected(nodeId) ? _this.removeNode(nodeId) : _this.addNode(nodeId);
        });
        _defineProperty(this, "clear", function() {
          _this.nodes.clear();
          _this.links.clear();
        });
        _defineProperty(this, "freeze", function() {
          return {
            nodes: Array.from(_this.nodes),
            links: Array.from(_this.links)
          };
        });
        this.nodes = new Set();
        this.links = new Set();
      });
      exports2.Selection = Selection5;
      _defineProperty(Selection5, "equal", function(a3, b) {
        var eq11 = function eq12(x5, y5) {
          if (x5.length !== y5.length) {
            return false;
          }
          for (var i = 0; i < x5.length; i++) {
            if (x5[i] !== y5[i]) {
              return false;
            }
          }
          return true;
        };
        return eq11(a3.nodes, b.nodes) && eq11(a3.links, b.links);
      });
    }
  });
  var require_marker_const = __commonJS2({
    "../react-d3-graph/lib/components/marker/marker.const.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.SIZES = exports2.MARKER_SMALL_SIZE = exports2.MARKER_MEDIUM_OFFSET = exports2.MARKER_LARGE_OFFSET = exports2.MARKERS = exports2.HIGHLIGHTED = void 0;
      var HIGHLIGHTED = "H";
      exports2.HIGHLIGHTED = HIGHLIGHTED;
      var MARKER_SMALL_SIZE = 16;
      exports2.MARKER_SMALL_SIZE = MARKER_SMALL_SIZE;
      var MARKER_MEDIUM_OFFSET = 2;
      exports2.MARKER_MEDIUM_OFFSET = MARKER_MEDIUM_OFFSET;
      var MARKER_LARGE_OFFSET = 4;
      exports2.MARKER_LARGE_OFFSET = MARKER_LARGE_OFFSET;
      var MARKERS = {
        MARKER_S: "marker-small",
        MARKER_SH: "marker-small-highlighted",
        MARKER_M: "marker-medium",
        MARKER_MH: "marker-medium-highlighted",
        MARKER_L: "marker-large",
        MARKER_LH: "marker-large-highlighted"
      };
      exports2.MARKERS = MARKERS;
      var SIZES = {
        S: "S",
        M: "M",
        L: "L"
      };
      exports2.SIZES = SIZES;
    }
  });
  var require_Link = __commonJS2({
    "../react-d3-graph/lib/components/link/Link.js"(exports2) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _react = _interopRequireDefault(require_react());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends() {
        _extends = Object.assign || function(target2) {
          for (var i = 1; i < arguments.length; i++) {
            var source2 = arguments[i];
            for (var key in source2) {
              if (Object.prototype.hasOwnProperty.call(source2, key)) {
                target2[key] = source2[key];
              }
            }
          }
          return target2;
        };
        return _extends.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target2, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target2, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized(self);
      }
      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var Link = /* @__PURE__ */ function(_React$Component) {
        _inherits(Link2, _React$Component);
        var _super = _createSuper(Link2);
        function Link2(props) {
          var _this;
          _classCallCheck(this, Link2);
          _this = _super.call(this, props);
          _defineProperty(_assertThisInitialized(_this), "handleOnClickLink", function(event) {
            return _this.props.onClickLink && _this.props.onClickLink(event, _this.props);
          });
          _defineProperty(_assertThisInitialized(_this), "handleOnRightClickLink", function(event) {
            return _this.props.onRightClickLink && _this.props.onRightClickLink(event, _this.props.source, _this.props.target);
          });
          _defineProperty(_assertThisInitialized(_this), "handleOnMouseOverLink", function(event) {
            return _this.props.onMouseOverLink && _this.props.onMouseOverLink(event, _this.props.source, _this.props.target);
          });
          _defineProperty(_assertThisInitialized(_this), "handleOnMouseOutLink", function(event) {
            return _this.props.onMouseOutLink && _this.props.onMouseOutLink(event, _this.props.source, _this.props.target);
          });
          _this.lineRef = /* @__PURE__ */ _react["default"].createRef();
          _this.labelRef = /* @__PURE__ */ _react["default"].createRef();
          return _this;
        }
        _createClass(Link2, [{
          key: "setLabelPosition",
          value: function setLabelPosition() {
            if (this.lineRef.current === null || this.labelRef.current === null) {
              return;
            }
            var length5 = this.lineRef.current.getTotalLength();
            var point5 = this.lineRef.current.getPointAtLength(length5 * 0.5);
            var bbox = this.labelRef.current.getBBox();
            this.labelRef.current.setAttributeNS(null, "x", point5.x - bbox.width / 2);
            this.labelRef.current.setAttributeNS(null, "y", point5.y - bbox.height / 2);
          }
        }, {
          key: "componentDidMount",
          value: function componentDidMount() {
            this.setLabelPosition();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            this.setLabelPosition();
          }
        }, {
          key: "render",
          value: function render() {
            var lineStyle = {
              strokeWidth: this.props.strokeWidth,
              stroke: this.props.stroke,
              opacity: this.props.opacity,
              fill: "none",
              cursor: this.props.mouseCursor,
              strokeDasharray: this.props.strokeDasharray,
              strokeDashoffset: this.props.strokeDasharray,
              strokeLinecap: this.props.strokeLinecap
            };
            var lineProps = {
              className: this.props.className,
              d: this.props.d,
              onClick: this.handleOnClickLink,
              onContextMenu: this.handleOnRightClickLink,
              onMouseOut: this.handleOnMouseOutLink,
              onMouseOver: this.handleOnMouseOverLink,
              style: lineStyle
            };
            var lineHitProps = _objectSpread(_objectSpread({}, lineProps), {}, {
              className: this.props.className + "-hit",
              style: {
                stroke: "transparent",
                strokeWidth: "10px",
                fill: "none",
                cursor: this.props.mouseCursor
              }
            });
            if (this.props.markerId) {
              lineProps.markerEnd = "url(#".concat(this.props.markerId, ")");
            } else if (this.props.markerEnd) {
              lineProps.markerEnd = "url(#".concat(this.props.markerEnd, ")");
            }
            if (this.props.markerStart) {
              lineProps.markerStart = "url(#".concat(this.props.markerStart, ")");
            }
            var _this$props = this.props, label = _this$props.label, id10 = _this$props.id;
            var labelNode = null;
            if (label === null) {
              labelNode = _react["default"]["null"];
            } else if (typeof label === "string") {
              var textProps = {
                dy: -1,
                style: {
                  fill: this.props.fontColor,
                  fontSize: this.props.fontSize,
                  fontWeight: this.props.fontWeight
                }
              };
              labelNode = /* @__PURE__ */ _react["default"].createElement("text", _extends({
                id: id10 + "_label",
                style: {
                  textAnchor: "middle"
                }
              }, textProps, {
                ref: this.labelRef,
                onClick: this.handleOnClickLink
              }), label);
            } else {
              labelNode = /* @__PURE__ */ _react["default"].createElement("svg", {
                ref: this.labelRef,
                id: id10 + "_label",
                onClick: this.handleOnClickLink
              }, label);
            }
            return /* @__PURE__ */ _react["default"].createElement("g", null, /* @__PURE__ */ _react["default"].createElement("path", _extends({}, lineHitProps, {
              id: id10 + "_hit"
            })), /* @__PURE__ */ _react["default"].createElement("path", _extends({}, lineProps, {
              id: id10,
              ref: this.lineRef
            })), labelNode);
          }
        }]);
        return Link2;
      }(_react["default"].Component);
      exports2["default"] = Link;
    }
  });
  function Path() {
    this._x0 = this._y0 = this._x1 = this._y1 = null;
    this._ = "";
  }
  function path() {
    return new Path();
  }
  var pi;
  var tau;
  var epsilon;
  var tauEpsilon;
  var path_default;
  var init_path = __esm({
    "../react-d3-graph/node_modules/d3-path/src/path.js"() {
      pi = Math.PI;
      tau = 2 * pi;
      epsilon = 1e-6;
      tauEpsilon = tau - epsilon;
      Path.prototype = path.prototype = {
        constructor: Path,
        moveTo: function(x5, y5) {
          this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y5);
        },
        closePath: function() {
          if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += "Z";
          }
        },
        lineTo: function(x5, y5) {
          this._ += "L" + (this._x1 = +x5) + "," + (this._y1 = +y5);
        },
        quadraticCurveTo: function(x1, y1, x5, y5) {
          this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x5) + "," + (this._y1 = +y5);
        },
        bezierCurveTo: function(x1, y1, x22, y22, x5, y5) {
          this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x5) + "," + (this._y1 = +y5);
        },
        arcTo: function(x1, y1, x22, y22, r) {
          x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r = +r;
          var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
          if (r < 0)
            throw new Error("negative radius: " + r);
          if (this._x1 === null) {
            this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
          } else if (!(l01_2 > epsilon))
            ;
          else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
            this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
          } else {
            var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }
            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
        },
        arc: function(x5, y5, r, a0, a1, ccw) {
          x5 = +x5, y5 = +y5, r = +r, ccw = !!ccw;
          var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x5 + dx, y0 = y5 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
          if (r < 0)
            throw new Error("negative radius: " + r);
          if (this._x1 === null) {
            this._ += "M" + x0 + "," + y0;
          } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
            this._ += "L" + x0 + "," + y0;
          }
          if (!r)
            return;
          if (da < 0)
            da = da % tau + tau;
          if (da > tauEpsilon) {
            this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x5 - dx) + "," + (y5 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
          } else if (da > epsilon) {
            this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x5 + r * Math.cos(a1)) + "," + (this._y1 = y5 + r * Math.sin(a1));
          }
        },
        rect: function(x5, y5, w, h) {
          this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y5) + "h" + +w + "v" + +h + "h" + -w + "Z";
        },
        toString: function() {
          return this._;
        }
      };
      path_default = path;
    }
  });
  var init_src14 = __esm({
    "../react-d3-graph/node_modules/d3-path/src/index.js"() {
      init_path();
    }
  });
  function constant_default9(x5) {
    return function constant2() {
      return x5;
    };
  }
  var init_constant7 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/constant.js"() {
    }
  });
  function acos(x5) {
    return x5 > 1 ? 0 : x5 < -1 ? pi2 : Math.acos(x5);
  }
  function asin(x5) {
    return x5 >= 1 ? halfPi : x5 <= -1 ? -halfPi : Math.asin(x5);
  }
  var abs;
  var atan2;
  var cos;
  var max4;
  var min4;
  var sin;
  var sqrt;
  var epsilon3;
  var pi2;
  var halfPi;
  var tau2;
  var init_math = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/math.js"() {
      abs = Math.abs;
      atan2 = Math.atan2;
      cos = Math.cos;
      max4 = Math.max;
      min4 = Math.min;
      sin = Math.sin;
      sqrt = Math.sqrt;
      epsilon3 = 1e-12;
      pi2 = Math.PI;
      halfPi = pi2 / 2;
      tau2 = 2 * pi2;
    }
  });
  function arcInnerRadius(d) {
    return d.innerRadius;
  }
  function arcOuterRadius(d) {
    return d.outerRadius;
  }
  function arcStartAngle(d) {
    return d.startAngle;
  }
  function arcEndAngle(d) {
    return d.endAngle;
  }
  function arcPadAngle(d) {
    return d && d.padAngle;
  }
  function intersect3(x0, y0, x1, y1, x22, y22, x32, y32) {
    var x10 = x1 - x0, y10 = y1 - y0, x322 = x32 - x22, y322 = y32 - y22, t = y322 * x10 - x322 * y10;
    if (t * t < epsilon3)
      return;
    t = (x322 * (y0 - y22) - y322 * (x0 - x22)) / t;
    return [x0 + t * x10, y0 + t * y10];
  }
  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt(max4(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
      cx0 = cx1, cy0 = cy1;
    return {
      cx: cx0,
      cy: cy0,
      x01: -ox,
      y01: -oy,
      x11: cx0 * (r1 / r - 1),
      y11: cy0 * (r1 / r - 1)
    };
  }
  function arc_default() {
    var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default9(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
    function arc() {
      var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
      if (!context)
        context = buffer = path_default();
      if (r1 < r0)
        r = r1, r1 = r0, r0 = r;
      if (!(r1 > epsilon3))
        context.moveTo(0, 0);
      else if (da > tau2 - epsilon3) {
        context.moveTo(r1 * cos(a0), r1 * sin(a0));
        context.arc(0, 0, r1, a0, a1, !cw);
        if (r0 > epsilon3) {
          context.moveTo(r0 * cos(a1), r0 * sin(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } else {
        var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon3 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min4(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
        if (rp > epsilon3) {
          var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
          if ((da0 -= p0 * 2) > epsilon3)
            p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
          else
            da0 = 0, a00 = a10 = (a0 + a1) / 2;
          if ((da1 -= p1 * 2) > epsilon3)
            p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
          else
            da1 = 0, a01 = a11 = (a0 + a1) / 2;
        }
        var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
        if (rc > epsilon3) {
          var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
          if (da < pi2 && (oc = intersect3(x01, y01, x00, y00, x11, y11, x10, y10))) {
            var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min4(rc, (r0 - lc) / (kc - 1));
            rc1 = min4(rc, (r1 - lc) / (kc + 1));
          }
        }
        if (!(da1 > epsilon3))
          context.moveTo(x01, y01);
        else if (rc1 > epsilon3) {
          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
          if (rc1 < rc)
            context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);
          else {
            context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
            context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
            context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
          }
        } else
          context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
        if (!(r0 > epsilon3) || !(da0 > epsilon3))
          context.lineTo(x10, y10);
        else if (rc0 > epsilon3) {
          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
          if (rc0 < rc)
            context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);
          else {
            context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
            context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
            context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
          }
        } else
          context.arc(0, 0, r0, a10, a00, cw);
      }
      context.closePath();
      if (buffer)
        return context = null, buffer + "" || null;
    }
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a3 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
      return [cos(a3) * r, sin(a3) * r];
    };
    arc.innerRadius = function(_) {
      return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default9(+_), arc) : innerRadius;
    };
    arc.outerRadius = function(_) {
      return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default9(+_), arc) : outerRadius;
    };
    arc.cornerRadius = function(_) {
      return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default9(+_), arc) : cornerRadius;
    };
    arc.padRadius = function(_) {
      return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default9(+_), arc) : padRadius;
    };
    arc.startAngle = function(_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default9(+_), arc) : startAngle;
    };
    arc.endAngle = function(_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default9(+_), arc) : endAngle;
    };
    arc.padAngle = function(_) {
      return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default9(+_), arc) : padAngle;
    };
    arc.context = function(_) {
      return arguments.length ? (context = _ == null ? null : _, arc) : context;
    };
    return arc;
  }
  var init_arc = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/arc.js"() {
      init_src14();
      init_constant7();
      init_math();
    }
  });
  function array_default(x5) {
    return typeof x5 === "object" && "length" in x5 ? x5 : Array.from(x5);
  }
  var slice3;
  var init_array3 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/array.js"() {
      slice3 = Array.prototype.slice;
    }
  });
  function Linear(context) {
    this._context = context;
  }
  function linear_default(context) {
    return new Linear(context);
  }
  var init_linear = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/linear.js"() {
      Linear.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._point = 0;
        },
        lineEnd: function() {
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0:
              this._point = 1;
              this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
            default:
              this._context.lineTo(x5, y5);
              break;
          }
        }
      };
    }
  });
  function x3(p) {
    return p[0];
  }
  function y3(p) {
    return p[1];
  }
  var init_point = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/point.js"() {
    }
  });
  function line_default(x5, y5) {
    var defined = constant_default9(true), context = null, curve = linear_default, output = null;
    x5 = typeof x5 === "function" ? x5 : x5 === void 0 ? x3 : constant_default9(x5);
    y5 = typeof y5 === "function" ? y5 : y5 === void 0 ? y3 : constant_default9(y5);
    function line(data) {
      var i, n = (data = array_default(data)).length, d, defined0 = false, buffer;
      if (context == null)
        output = curve(buffer = path_default());
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0)
            output.lineStart();
          else
            output.lineEnd();
        }
        if (defined0)
          output.point(+x5(d, i, data), +y5(d, i, data));
      }
      if (buffer)
        return output = null, buffer + "" || null;
    }
    line.x = function(_) {
      return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default9(+_), line) : x5;
    };
    line.y = function(_) {
      return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default9(+_), line) : y5;
    };
    line.defined = function(_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default9(!!_), line) : defined;
    };
    line.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
  }
  var init_line = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/line.js"() {
      init_src14();
      init_array3();
      init_constant7();
      init_linear();
      init_point();
    }
  });
  function area_default(x0, y0, y1) {
    var x1 = null, defined = constant_default9(true), context = null, curve = linear_default, output = null;
    x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x3 : constant_default9(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default9(0) : constant_default9(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y3 : constant_default9(+y1);
    function area(data) {
      var i, j, k2, n = (data = array_default(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
      if (context == null)
        output = curve(buffer = path_default());
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) {
            j = i;
            output.areaStart();
            output.lineStart();
          } else {
            output.lineEnd();
            output.lineStart();
            for (k2 = i - 1; k2 >= j; --k2) {
              output.point(x0z[k2], y0z[k2]);
            }
            output.lineEnd();
            output.areaEnd();
          }
        }
        if (defined0) {
          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
        }
      }
      if (buffer)
        return output = null, buffer + "" || null;
    }
    function arealine() {
      return line_default().defined(defined).curve(curve).context(context);
    }
    area.x = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default9(+_), x1 = null, area) : x0;
    };
    area.x0 = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default9(+_), area) : x0;
    };
    area.x1 = function(_) {
      return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default9(+_), area) : x1;
    };
    area.y = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default9(+_), y1 = null, area) : y0;
    };
    area.y0 = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default9(+_), area) : y0;
    };
    area.y1 = function(_) {
      return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default9(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function() {
      return arealine().x(x0).y(y0);
    };
    area.lineY1 = function() {
      return arealine().x(x0).y(y1);
    };
    area.lineX1 = function() {
      return arealine().x(x1).y(y0);
    };
    area.defined = function(_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default9(!!_), area) : defined;
    };
    area.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
  }
  var init_area = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/area.js"() {
      init_src14();
      init_array3();
      init_constant7();
      init_linear();
      init_line();
      init_point();
    }
  });
  function descending_default(a3, b) {
    return b < a3 ? -1 : b > a3 ? 1 : b >= a3 ? 0 : NaN;
  }
  var init_descending2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/descending.js"() {
    }
  });
  function identity_default(d) {
    return d;
  }
  var init_identity2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/identity.js"() {
    }
  });
  function pie_default() {
    var value = identity_default, sortValues = descending_default, sort3 = null, startAngle = constant_default9(0), endAngle = constant_default9(tau2), padAngle = constant_default9(0);
    function pie(data) {
      var i, n = (data = array_default(data)).length, j, k2, sum3 = 0, index3 = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
      for (i = 0; i < n; ++i) {
        if ((v = arcs[index3[i] = i] = +value(data[i], i, data)) > 0) {
          sum3 += v;
        }
      }
      if (sortValues != null)
        index3.sort(function(i2, j2) {
          return sortValues(arcs[i2], arcs[j2]);
        });
      else if (sort3 != null)
        index3.sort(function(i2, j2) {
          return sort3(data[i2], data[j2]);
        });
      for (i = 0, k2 = sum3 ? (da - n * pa) / sum3 : 0; i < n; ++i, a0 = a1) {
        j = index3[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k2 : 0) + pa, arcs[j] = {
          data: data[j],
          index: i,
          value: v,
          startAngle: a0,
          endAngle: a1,
          padAngle: p
        };
      }
      return arcs;
    }
    pie.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant_default9(+_), pie) : value;
    };
    pie.sortValues = function(_) {
      return arguments.length ? (sortValues = _, sort3 = null, pie) : sortValues;
    };
    pie.sort = function(_) {
      return arguments.length ? (sort3 = _, sortValues = null, pie) : sort3;
    };
    pie.startAngle = function(_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default9(+_), pie) : startAngle;
    };
    pie.endAngle = function(_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default9(+_), pie) : endAngle;
    };
    pie.padAngle = function(_) {
      return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default9(+_), pie) : padAngle;
    };
    return pie;
  }
  var init_pie = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/pie.js"() {
      init_array3();
      init_constant7();
      init_descending2();
      init_identity2();
      init_math();
    }
  });
  function Radial(curve) {
    this._curve = curve;
  }
  function curveRadial(curve) {
    function radial(context) {
      return new Radial(curve(context));
    }
    radial._curve = curve;
    return radial;
  }
  var curveRadialLinear;
  var init_radial2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/radial.js"() {
      init_linear();
      curveRadialLinear = curveRadial(linear_default);
      Radial.prototype = {
        areaStart: function() {
          this._curve.areaStart();
        },
        areaEnd: function() {
          this._curve.areaEnd();
        },
        lineStart: function() {
          this._curve.lineStart();
        },
        lineEnd: function() {
          this._curve.lineEnd();
        },
        point: function(a3, r) {
          this._curve.point(r * Math.sin(a3), r * -Math.cos(a3));
        }
      };
    }
  });
  function lineRadial(l) {
    var c3 = l.curve;
    l.angle = l.x, delete l.x;
    l.radius = l.y, delete l.y;
    l.curve = function(_) {
      return arguments.length ? c3(curveRadial(_)) : c3()._curve;
    };
    return l;
  }
  function lineRadial_default() {
    return lineRadial(line_default().curve(curveRadialLinear));
  }
  var init_lineRadial = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/lineRadial.js"() {
      init_radial2();
      init_line();
    }
  });
  function areaRadial_default() {
    var a3 = area_default().curve(curveRadialLinear), c3 = a3.curve, x0 = a3.lineX0, x1 = a3.lineX1, y0 = a3.lineY0, y1 = a3.lineY1;
    a3.angle = a3.x, delete a3.x;
    a3.startAngle = a3.x0, delete a3.x0;
    a3.endAngle = a3.x1, delete a3.x1;
    a3.radius = a3.y, delete a3.y;
    a3.innerRadius = a3.y0, delete a3.y0;
    a3.outerRadius = a3.y1, delete a3.y1;
    a3.lineStartAngle = function() {
      return lineRadial(x0());
    }, delete a3.lineX0;
    a3.lineEndAngle = function() {
      return lineRadial(x1());
    }, delete a3.lineX1;
    a3.lineInnerRadius = function() {
      return lineRadial(y0());
    }, delete a3.lineY0;
    a3.lineOuterRadius = function() {
      return lineRadial(y1());
    }, delete a3.lineY1;
    a3.curve = function(_) {
      return arguments.length ? c3(curveRadial(_)) : c3()._curve;
    };
    return a3;
  }
  var init_areaRadial = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/areaRadial.js"() {
      init_radial2();
      init_area();
      init_lineRadial();
    }
  });
  function pointRadial_default(x5, y5) {
    return [(y5 = +y5) * Math.cos(x5 -= Math.PI / 2), y5 * Math.sin(x5)];
  }
  var init_pointRadial = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/pointRadial.js"() {
    }
  });
  function bumpX(context) {
    return new Bump(context, true);
  }
  function bumpY(context) {
    return new Bump(context, false);
  }
  function bumpRadial(context) {
    return new BumpRadial(context);
  }
  var Bump;
  var BumpRadial;
  var init_bump = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/bump.js"() {
      init_pointRadial();
      Bump = class {
        constructor(context, x5) {
          this._context = context;
          this._x = x5;
        }
        areaStart() {
          this._line = 0;
        }
        areaEnd() {
          this._line = NaN;
        }
        lineStart() {
          this._point = 0;
        }
        lineEnd() {
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line;
        }
        point(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0: {
              this._point = 1;
              if (this._line)
                this._context.lineTo(x5, y5);
              else
                this._context.moveTo(x5, y5);
              break;
            }
            case 1:
              this._point = 2;
            default: {
              if (this._x)
                this._context.bezierCurveTo(this._x0 = (this._x0 + x5) / 2, this._y0, this._x0, y5, x5, y5);
              else
                this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y5) / 2, x5, this._y0, x5, y5);
              break;
            }
          }
          this._x0 = x5, this._y0 = y5;
        }
      };
      BumpRadial = class {
        constructor(context) {
          this._context = context;
        }
        lineStart() {
          this._point = 0;
        }
        lineEnd() {
        }
        point(x5, y5) {
          x5 = +x5, y5 = +y5;
          if (this._point++ === 0) {
            this._x0 = x5, this._y0 = y5;
          } else {
            const p0 = pointRadial_default(this._x0, this._y0);
            const p1 = pointRadial_default(this._x0, this._y0 = (this._y0 + y5) / 2);
            const p2 = pointRadial_default(x5, this._y0);
            const p3 = pointRadial_default(x5, y5);
            this._context.moveTo(...p0);
            this._context.bezierCurveTo(...p1, ...p2, ...p3);
          }
        }
      };
    }
  });
  function linkSource(d) {
    return d.source;
  }
  function linkTarget(d) {
    return d.target;
  }
  function link(curve) {
    let source2 = linkSource;
    let target2 = linkTarget;
    let x5 = x3;
    let y5 = y3;
    let context = null;
    let output = null;
    function link2() {
      let buffer;
      const argv = slice3.call(arguments);
      const s2 = source2.apply(this, argv);
      const t = target2.apply(this, argv);
      if (context == null)
        output = curve(buffer = path_default());
      output.lineStart();
      argv[0] = s2, output.point(+x5.apply(this, argv), +y5.apply(this, argv));
      argv[0] = t, output.point(+x5.apply(this, argv), +y5.apply(this, argv));
      output.lineEnd();
      if (buffer)
        return output = null, buffer + "" || null;
    }
    link2.source = function(_) {
      return arguments.length ? (source2 = _, link2) : source2;
    };
    link2.target = function(_) {
      return arguments.length ? (target2 = _, link2) : target2;
    };
    link2.x = function(_) {
      return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default9(+_), link2) : x5;
    };
    link2.y = function(_) {
      return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default9(+_), link2) : y5;
    };
    link2.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link2) : context;
    };
    return link2;
  }
  function linkHorizontal() {
    return link(bumpX);
  }
  function linkVertical() {
    return link(bumpY);
  }
  function linkRadial() {
    const l = link(bumpRadial);
    l.angle = l.x, delete l.x;
    l.radius = l.y, delete l.y;
    return l;
  }
  var init_link2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/link.js"() {
      init_src14();
      init_array3();
      init_constant7();
      init_bump();
      init_point();
    }
  });
  var sqrt3;
  var asterisk_default;
  var init_asterisk = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/asterisk.js"() {
      init_math();
      sqrt3 = sqrt(3);
      asterisk_default = {
        draw(context, size11) {
          const r = sqrt(size11 + min4(size11 / 28, 0.75)) * 0.59436;
          const t = r / 2;
          const u = t * sqrt3;
          context.moveTo(0, r);
          context.lineTo(0, -r);
          context.moveTo(-u, -t);
          context.lineTo(u, t);
          context.moveTo(-u, t);
          context.lineTo(u, -t);
        }
      };
    }
  });
  var circle_default;
  var init_circle = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/circle.js"() {
      init_math();
      circle_default = {
        draw(context, size11) {
          const r = sqrt(size11 / pi2);
          context.moveTo(r, 0);
          context.arc(0, 0, r, 0, tau2);
        }
      };
    }
  });
  var cross_default;
  var init_cross2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/cross.js"() {
      init_math();
      cross_default = {
        draw(context, size11) {
          const r = sqrt(size11 / 5) / 2;
          context.moveTo(-3 * r, -r);
          context.lineTo(-r, -r);
          context.lineTo(-r, -3 * r);
          context.lineTo(r, -3 * r);
          context.lineTo(r, -r);
          context.lineTo(3 * r, -r);
          context.lineTo(3 * r, r);
          context.lineTo(r, r);
          context.lineTo(r, 3 * r);
          context.lineTo(-r, 3 * r);
          context.lineTo(-r, r);
          context.lineTo(-3 * r, r);
          context.closePath();
        }
      };
    }
  });
  var tan30;
  var tan30_2;
  var diamond_default;
  var init_diamond = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/diamond.js"() {
      init_math();
      tan30 = sqrt(1 / 3);
      tan30_2 = tan30 * 2;
      diamond_default = {
        draw(context, size11) {
          const y5 = sqrt(size11 / tan30_2);
          const x5 = y5 * tan30;
          context.moveTo(0, -y5);
          context.lineTo(x5, 0);
          context.lineTo(0, y5);
          context.lineTo(-x5, 0);
          context.closePath();
        }
      };
    }
  });
  var diamond2_default;
  var init_diamond2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/diamond2.js"() {
      init_math();
      diamond2_default = {
        draw(context, size11) {
          const r = sqrt(size11) * 0.62625;
          context.moveTo(0, -r);
          context.lineTo(r, 0);
          context.lineTo(0, r);
          context.lineTo(-r, 0);
          context.closePath();
        }
      };
    }
  });
  var plus_default;
  var init_plus = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/plus.js"() {
      init_math();
      plus_default = {
        draw(context, size11) {
          const r = sqrt(size11 - min4(size11 / 7, 2)) * 0.87559;
          context.moveTo(-r, 0);
          context.lineTo(r, 0);
          context.moveTo(0, r);
          context.lineTo(0, -r);
        }
      };
    }
  });
  var square_default;
  var init_square = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/square.js"() {
      init_math();
      square_default = {
        draw(context, size11) {
          const w = sqrt(size11);
          const x5 = -w / 2;
          context.rect(x5, x5, w, w);
        }
      };
    }
  });
  var square2_default;
  var init_square2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/square2.js"() {
      init_math();
      square2_default = {
        draw(context, size11) {
          const r = sqrt(size11) * 0.4431;
          context.moveTo(r, r);
          context.lineTo(r, -r);
          context.lineTo(-r, -r);
          context.lineTo(-r, r);
          context.closePath();
        }
      };
    }
  });
  var ka;
  var kr;
  var kx;
  var ky;
  var star_default;
  var init_star = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/star.js"() {
      init_math();
      ka = 0.8908130915292852;
      kr = sin(pi2 / 10) / sin(7 * pi2 / 10);
      kx = sin(tau2 / 10) * kr;
      ky = -cos(tau2 / 10) * kr;
      star_default = {
        draw(context, size11) {
          const r = sqrt(size11 * ka);
          const x5 = kx * r;
          const y5 = ky * r;
          context.moveTo(0, -r);
          context.lineTo(x5, y5);
          for (let i = 1; i < 5; ++i) {
            const a3 = tau2 * i / 5;
            const c3 = cos(a3);
            const s2 = sin(a3);
            context.lineTo(s2 * r, -c3 * r);
            context.lineTo(c3 * x5 - s2 * y5, s2 * x5 + c3 * y5);
          }
          context.closePath();
        }
      };
    }
  });
  var sqrt32;
  var triangle_default;
  var init_triangle = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/triangle.js"() {
      init_math();
      sqrt32 = sqrt(3);
      triangle_default = {
        draw(context, size11) {
          const y5 = -sqrt(size11 / (sqrt32 * 3));
          context.moveTo(0, y5 * 2);
          context.lineTo(-sqrt32 * y5, -y5);
          context.lineTo(sqrt32 * y5, -y5);
          context.closePath();
        }
      };
    }
  });
  var sqrt33;
  var triangle2_default;
  var init_triangle2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/triangle2.js"() {
      init_math();
      sqrt33 = sqrt(3);
      triangle2_default = {
        draw(context, size11) {
          const s2 = sqrt(size11) * 0.6824;
          const t = s2 / 2;
          const u = s2 * sqrt33 / 2;
          context.moveTo(0, -s2);
          context.lineTo(u, t);
          context.lineTo(-u, t);
          context.closePath();
        }
      };
    }
  });
  var c2;
  var s;
  var k;
  var a2;
  var wye_default;
  var init_wye = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/wye.js"() {
      init_math();
      c2 = -0.5;
      s = sqrt(3) / 2;
      k = 1 / sqrt(12);
      a2 = (k / 2 + 1) * 3;
      wye_default = {
        draw(context, size11) {
          const r = sqrt(size11 / a2);
          const x0 = r / 2, y0 = r * k;
          const x1 = x0, y1 = r * k + r;
          const x22 = -x1, y22 = y1;
          context.moveTo(x0, y0);
          context.lineTo(x1, y1);
          context.lineTo(x22, y22);
          context.lineTo(c2 * x0 - s * y0, s * x0 + c2 * y0);
          context.lineTo(c2 * x1 - s * y1, s * x1 + c2 * y1);
          context.lineTo(c2 * x22 - s * y22, s * x22 + c2 * y22);
          context.lineTo(c2 * x0 + s * y0, c2 * y0 - s * x0);
          context.lineTo(c2 * x1 + s * y1, c2 * y1 - s * x1);
          context.lineTo(c2 * x22 + s * y22, c2 * y22 - s * x22);
          context.closePath();
        }
      };
    }
  });
  var x_default3;
  var init_x3 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol/x.js"() {
      init_math();
      x_default3 = {
        draw(context, size11) {
          const r = sqrt(size11 - min4(size11 / 6, 1.7)) * 0.6189;
          context.moveTo(-r, -r);
          context.lineTo(r, r);
          context.moveTo(-r, r);
          context.lineTo(r, -r);
        }
      };
    }
  });
  function Symbol2(type, size11) {
    let context = null;
    type = typeof type === "function" ? type : constant_default9(type || circle_default);
    size11 = typeof size11 === "function" ? size11 : constant_default9(size11 === void 0 ? 64 : +size11);
    function symbol() {
      let buffer;
      if (!context)
        context = buffer = path_default();
      type.apply(this, arguments).draw(context, +size11.apply(this, arguments));
      if (buffer)
        return context = null, buffer + "" || null;
    }
    symbol.type = function(_) {
      return arguments.length ? (type = typeof _ === "function" ? _ : constant_default9(_), symbol) : type;
    };
    symbol.size = function(_) {
      return arguments.length ? (size11 = typeof _ === "function" ? _ : constant_default9(+_), symbol) : size11;
    };
    symbol.context = function(_) {
      return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
  }
  var symbolsFill;
  var symbolsStroke;
  var init_symbol = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/symbol.js"() {
      init_src14();
      init_constant7();
      init_asterisk();
      init_circle();
      init_cross2();
      init_diamond();
      init_diamond2();
      init_plus();
      init_square();
      init_square2();
      init_star();
      init_triangle();
      init_triangle2();
      init_wye();
      init_x3();
      symbolsFill = [
        circle_default,
        cross_default,
        diamond_default,
        square_default,
        star_default,
        triangle_default,
        wye_default
      ];
      symbolsStroke = [
        circle_default,
        plus_default,
        x_default3,
        triangle2_default,
        asterisk_default,
        square2_default,
        diamond2_default
      ];
    }
  });
  function noop_default() {
  }
  var init_noop = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/noop.js"() {
    }
  });
  function point(that, x5, y5) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x5) / 6, (that._y0 + 4 * that._y1 + y5) / 6);
  }
  function Basis(context) {
    this._context = context;
  }
  function basis_default3(context) {
    return new Basis(context);
  }
  var init_basis2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/basis.js"() {
      Basis.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._y0 = this._y1 = NaN;
          this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 3:
              point(this, this._x1, this._y1);
            case 2:
              this._context.lineTo(this._x1, this._y1);
              break;
          }
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0:
              this._point = 1;
              this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3;
              this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
            default:
              point(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = x5;
          this._y0 = this._y1, this._y1 = y5;
        }
      };
    }
  });
  function BasisClosed(context) {
    this._context = context;
  }
  function basisClosed_default3(context) {
    return new BasisClosed(context);
  }
  var init_basisClosed2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/basisClosed.js"() {
      init_noop();
      init_basis2();
      BasisClosed.prototype = {
        areaStart: noop_default,
        areaEnd: noop_default,
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
          this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 1: {
              this._context.moveTo(this._x2, this._y2);
              this._context.closePath();
              break;
            }
            case 2: {
              this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
              this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
              this._context.closePath();
              break;
            }
            case 3: {
              this.point(this._x2, this._y2);
              this.point(this._x3, this._y3);
              this.point(this._x4, this._y4);
              break;
            }
          }
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0:
              this._point = 1;
              this._x2 = x5, this._y2 = y5;
              break;
            case 1:
              this._point = 2;
              this._x3 = x5, this._y3 = y5;
              break;
            case 2:
              this._point = 3;
              this._x4 = x5, this._y4 = y5;
              this._context.moveTo((this._x0 + 4 * this._x1 + x5) / 6, (this._y0 + 4 * this._y1 + y5) / 6);
              break;
            default:
              point(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = x5;
          this._y0 = this._y1, this._y1 = y5;
        }
      };
    }
  });
  function BasisOpen(context) {
    this._context = context;
  }
  function basisOpen_default(context) {
    return new BasisOpen(context);
  }
  var init_basisOpen = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/basisOpen.js"() {
      init_basis2();
      BasisOpen.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._y0 = this._y1 = NaN;
          this._point = 0;
        },
        lineEnd: function() {
          if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
          this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0:
              this._point = 1;
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3;
              var x0 = (this._x0 + 4 * this._x1 + x5) / 6, y0 = (this._y0 + 4 * this._y1 + y5) / 6;
              this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
              break;
            case 3:
              this._point = 4;
            default:
              point(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = x5;
          this._y0 = this._y1, this._y1 = y5;
        }
      };
    }
  });
  function Bundle(context, beta) {
    this._basis = new Basis(context);
    this._beta = beta;
  }
  var bundle_default;
  var init_bundle = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/bundle.js"() {
      init_basis2();
      Bundle.prototype = {
        lineStart: function() {
          this._x = [];
          this._y = [];
          this._basis.lineStart();
        },
        lineEnd: function() {
          var x5 = this._x, y5 = this._y, j = x5.length - 1;
          if (j > 0) {
            var x0 = x5[0], y0 = y5[0], dx = x5[j] - x0, dy = y5[j] - y0, i = -1, t;
            while (++i <= j) {
              t = i / j;
              this._basis.point(this._beta * x5[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y5[i] + (1 - this._beta) * (y0 + t * dy));
            }
          }
          this._x = this._y = null;
          this._basis.lineEnd();
        },
        point: function(x5, y5) {
          this._x.push(+x5);
          this._y.push(+y5);
        }
      };
      bundle_default = function custom(beta) {
        function bundle(context) {
          return beta === 1 ? new Basis(context) : new Bundle(context, beta);
        }
        bundle.beta = function(beta2) {
          return custom(+beta2);
        };
        return bundle;
      }(0.85);
    }
  });
  function point2(that, x5, y5) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x5), that._y2 + that._k * (that._y1 - y5), that._x2, that._y2);
  }
  function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  var cardinal_default;
  var init_cardinal = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/cardinal.js"() {
      Cardinal.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
          this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 2:
              this._context.lineTo(this._x2, this._y2);
              break;
            case 3:
              point2(this, this._x1, this._y1);
              break;
          }
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0:
              this._point = 1;
              this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
              this._x1 = x5, this._y1 = y5;
              break;
            case 2:
              this._point = 3;
            default:
              point2(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      cardinal_default = function custom2(tension) {
        function cardinal(context) {
          return new Cardinal(context, tension);
        }
        cardinal.tension = function(tension2) {
          return custom2(+tension2);
        };
        return cardinal;
      }(0);
    }
  });
  function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  var cardinalClosed_default;
  var init_cardinalClosed = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/cardinalClosed.js"() {
      init_noop();
      init_cardinal();
      CardinalClosed.prototype = {
        areaStart: noop_default,
        areaEnd: noop_default,
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
          this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 1: {
              this._context.moveTo(this._x3, this._y3);
              this._context.closePath();
              break;
            }
            case 2: {
              this._context.lineTo(this._x3, this._y3);
              this._context.closePath();
              break;
            }
            case 3: {
              this.point(this._x3, this._y3);
              this.point(this._x4, this._y4);
              this.point(this._x5, this._y5);
              break;
            }
          }
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0:
              this._point = 1;
              this._x3 = x5, this._y3 = y5;
              break;
            case 1:
              this._point = 2;
              this._context.moveTo(this._x4 = x5, this._y4 = y5);
              break;
            case 2:
              this._point = 3;
              this._x5 = x5, this._y5 = y5;
              break;
            default:
              point2(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      cardinalClosed_default = function custom3(tension) {
        function cardinal(context) {
          return new CardinalClosed(context, tension);
        }
        cardinal.tension = function(tension2) {
          return custom3(+tension2);
        };
        return cardinal;
      }(0);
    }
  });
  function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }
  var cardinalOpen_default;
  var init_cardinalOpen = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/cardinalOpen.js"() {
      init_cardinal();
      CardinalOpen.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
          this._point = 0;
        },
        lineEnd: function() {
          if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
          this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0:
              this._point = 1;
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3;
              this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
              break;
            case 3:
              this._point = 4;
            default:
              point2(this, x5, y5);
              break;
          }
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      cardinalOpen_default = function custom4(tension) {
        function cardinal(context) {
          return new CardinalOpen(context, tension);
        }
        cardinal.tension = function(tension2) {
          return custom4(+tension2);
        };
        return cardinal;
      }(0);
    }
  });
  function point3(that, x5, y5) {
    var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
    if (that._l01_a > epsilon3) {
      var a3 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
      x1 = (x1 * a3 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
      y1 = (y1 * a3 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > epsilon3) {
      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m2 = 3 * that._l23_a * (that._l23_a + that._l12_a);
      x22 = (x22 * b + that._x1 * that._l23_2a - x5 * that._l12_2a) / m2;
      y22 = (y22 * b + that._y1 * that._l23_2a - y5 * that._l12_2a) / m2;
    }
    that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
  }
  function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  var catmullRom_default;
  var init_catmullRom = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/catmullRom.js"() {
      init_math();
      init_cardinal();
      CatmullRom.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
          this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 2:
              this._context.lineTo(this._x2, this._y2);
              break;
            case 3:
              this.point(this._x2, this._y2);
              break;
          }
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          if (this._point) {
            var x23 = this._x2 - x5, y23 = this._y2 - y5;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
          }
          switch (this._point) {
            case 0:
              this._point = 1;
              this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3;
            default:
              point3(this, x5, y5);
              break;
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a;
          this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      catmullRom_default = function custom5(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
        }
        catmullRom.alpha = function(alpha2) {
          return custom5(+alpha2);
        };
        return catmullRom;
      }(0.5);
    }
  });
  function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  var catmullRomClosed_default;
  var init_catmullRomClosed = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/catmullRomClosed.js"() {
      init_cardinalClosed();
      init_noop();
      init_catmullRom();
      CatmullRomClosed.prototype = {
        areaStart: noop_default,
        areaEnd: noop_default,
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
          this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 1: {
              this._context.moveTo(this._x3, this._y3);
              this._context.closePath();
              break;
            }
            case 2: {
              this._context.lineTo(this._x3, this._y3);
              this._context.closePath();
              break;
            }
            case 3: {
              this.point(this._x3, this._y3);
              this.point(this._x4, this._y4);
              this.point(this._x5, this._y5);
              break;
            }
          }
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          if (this._point) {
            var x23 = this._x2 - x5, y23 = this._y2 - y5;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
          }
          switch (this._point) {
            case 0:
              this._point = 1;
              this._x3 = x5, this._y3 = y5;
              break;
            case 1:
              this._point = 2;
              this._context.moveTo(this._x4 = x5, this._y4 = y5);
              break;
            case 2:
              this._point = 3;
              this._x5 = x5, this._y5 = y5;
              break;
            default:
              point3(this, x5, y5);
              break;
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a;
          this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      catmullRomClosed_default = function custom6(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
        }
        catmullRom.alpha = function(alpha2) {
          return custom6(+alpha2);
        };
        return catmullRom;
      }(0.5);
    }
  });
  function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }
  var catmullRomOpen_default;
  var init_catmullRomOpen = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/catmullRomOpen.js"() {
      init_cardinalOpen();
      init_catmullRom();
      CatmullRomOpen.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
          this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function() {
          if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
          this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          if (this._point) {
            var x23 = this._x2 - x5, y23 = this._y2 - y5;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
          }
          switch (this._point) {
            case 0:
              this._point = 1;
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3;
              this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
              break;
            case 3:
              this._point = 4;
            default:
              point3(this, x5, y5);
              break;
          }
          this._l01_a = this._l12_a, this._l12_a = this._l23_a;
          this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
          this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
          this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
        }
      };
      catmullRomOpen_default = function custom7(alpha) {
        function catmullRom(context) {
          return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
        }
        catmullRom.alpha = function(alpha2) {
          return custom7(+alpha2);
        };
        return catmullRom;
      }(0.5);
    }
  });
  function LinearClosed(context) {
    this._context = context;
  }
  function linearClosed_default(context) {
    return new LinearClosed(context);
  }
  var init_linearClosed = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/linearClosed.js"() {
      init_noop();
      LinearClosed.prototype = {
        areaStart: noop_default,
        areaEnd: noop_default,
        lineStart: function() {
          this._point = 0;
        },
        lineEnd: function() {
          if (this._point)
            this._context.closePath();
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          if (this._point)
            this._context.lineTo(x5, y5);
          else
            this._point = 1, this._context.moveTo(x5, y5);
        }
      };
    }
  });
  function sign(x5) {
    return x5 < 0 ? -1 : 1;
  }
  function slope3(that, x22, y22) {
    var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  }
  function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  }
  function point4(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
  }
  function MonotoneX(context) {
    this._context = context;
  }
  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }
  function ReflectContext(context) {
    this._context = context;
  }
  function monotoneX(context) {
    return new MonotoneX(context);
  }
  function monotoneY(context) {
    return new MonotoneY(context);
  }
  var init_monotone = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/monotone.js"() {
      MonotoneX.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
          this._point = 0;
        },
        lineEnd: function() {
          switch (this._point) {
            case 2:
              this._context.lineTo(this._x1, this._y1);
              break;
            case 3:
              point4(this, this._t0, slope2(this, this._t0));
              break;
          }
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          var t1 = NaN;
          x5 = +x5, y5 = +y5;
          if (x5 === this._x1 && y5 === this._y1)
            return;
          switch (this._point) {
            case 0:
              this._point = 1;
              this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
              break;
            case 2:
              this._point = 3;
              point4(this, slope2(this, t1 = slope3(this, x5, y5)), t1);
              break;
            default:
              point4(this, this._t0, t1 = slope3(this, x5, y5));
              break;
          }
          this._x0 = this._x1, this._x1 = x5;
          this._y0 = this._y1, this._y1 = y5;
          this._t0 = t1;
        }
      };
      (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x5, y5) {
        MonotoneX.prototype.point.call(this, y5, x5);
      };
      ReflectContext.prototype = {
        moveTo: function(x5, y5) {
          this._context.moveTo(y5, x5);
        },
        closePath: function() {
          this._context.closePath();
        },
        lineTo: function(x5, y5) {
          this._context.lineTo(y5, x5);
        },
        bezierCurveTo: function(x1, y1, x22, y22, x5, y5) {
          this._context.bezierCurveTo(y1, x1, y22, x22, y5, x5);
        }
      };
    }
  });
  function Natural(context) {
    this._context = context;
  }
  function controlPoints(x5) {
    var i, n = x5.length - 1, m2, a3 = new Array(n), b = new Array(n), r = new Array(n);
    a3[0] = 0, b[0] = 2, r[0] = x5[0] + 2 * x5[1];
    for (i = 1; i < n - 1; ++i)
      a3[i] = 1, b[i] = 4, r[i] = 4 * x5[i] + 2 * x5[i + 1];
    a3[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x5[n - 1] + x5[n];
    for (i = 1; i < n; ++i)
      m2 = a3[i] / b[i - 1], b[i] -= m2, r[i] -= m2 * r[i - 1];
    a3[n - 1] = r[n - 1] / b[n - 1];
    for (i = n - 2; i >= 0; --i)
      a3[i] = (r[i] - a3[i + 1]) / b[i];
    b[n - 1] = (x5[n] + a3[n - 1]) / 2;
    for (i = 0; i < n - 1; ++i)
      b[i] = 2 * x5[i + 1] - a3[i + 1];
    return [a3, b];
  }
  function natural_default(context) {
    return new Natural(context);
  }
  var init_natural = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/natural.js"() {
      Natural.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x = [];
          this._y = [];
        },
        lineEnd: function() {
          var x5 = this._x, y5 = this._y, n = x5.length;
          if (n) {
            this._line ? this._context.lineTo(x5[0], y5[0]) : this._context.moveTo(x5[0], y5[0]);
            if (n === 2) {
              this._context.lineTo(x5[1], y5[1]);
            } else {
              var px = controlPoints(x5), py = controlPoints(y5);
              for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
                this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x5[i1], y5[i1]);
              }
            }
          }
          if (this._line || this._line !== 0 && n === 1)
            this._context.closePath();
          this._line = 1 - this._line;
          this._x = this._y = null;
        },
        point: function(x5, y5) {
          this._x.push(+x5);
          this._y.push(+y5);
        }
      };
    }
  });
  function Step(context, t) {
    this._context = context;
    this._t = t;
  }
  function step_default(context) {
    return new Step(context, 0.5);
  }
  function stepBefore(context) {
    return new Step(context, 0);
  }
  function stepAfter(context) {
    return new Step(context, 1);
  }
  var init_step = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/curve/step.js"() {
      Step.prototype = {
        areaStart: function() {
          this._line = 0;
        },
        areaEnd: function() {
          this._line = NaN;
        },
        lineStart: function() {
          this._x = this._y = NaN;
          this._point = 0;
        },
        lineEnd: function() {
          if (0 < this._t && this._t < 1 && this._point === 2)
            this._context.lineTo(this._x, this._y);
          if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
          if (this._line >= 0)
            this._t = 1 - this._t, this._line = 1 - this._line;
        },
        point: function(x5, y5) {
          x5 = +x5, y5 = +y5;
          switch (this._point) {
            case 0:
              this._point = 1;
              this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
              break;
            case 1:
              this._point = 2;
            default: {
              if (this._t <= 0) {
                this._context.lineTo(this._x, y5);
                this._context.lineTo(x5, y5);
              } else {
                var x1 = this._x * (1 - this._t) + x5 * this._t;
                this._context.lineTo(x1, this._y);
                this._context.lineTo(x1, y5);
              }
              break;
            }
          }
          this._x = x5, this._y = y5;
        }
      };
    }
  });
  function none_default(series, order) {
    if (!((n = series.length) > 1))
      return;
    for (var i = 1, j, s0, s1 = series[order[0]], n, m2 = s1.length; i < n; ++i) {
      s0 = s1, s1 = series[order[i]];
      for (j = 0; j < m2; ++j) {
        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
      }
    }
  }
  var init_none = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/none.js"() {
    }
  });
  function none_default2(series) {
    var n = series.length, o = new Array(n);
    while (--n >= 0)
      o[n] = n;
    return o;
  }
  var init_none2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/none.js"() {
    }
  });
  function stackValue(d, key) {
    return d[key];
  }
  function stackSeries(key) {
    const series = [];
    series.key = key;
    return series;
  }
  function stack_default() {
    var keys = constant_default9([]), order = none_default2, offset = none_default, value = stackValue;
    function stack(data) {
      var sz = Array.from(keys.apply(this, arguments), stackSeries), i, n = sz.length, j = -1, oz;
      for (const d of data) {
        for (i = 0, ++j; i < n; ++i) {
          (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
        }
      }
      for (i = 0, oz = array_default(order(sz)); i < n; ++i) {
        sz[oz[i]].index = i;
      }
      offset(sz, oz);
      return sz;
    }
    stack.keys = function(_) {
      return arguments.length ? (keys = typeof _ === "function" ? _ : constant_default9(Array.from(_)), stack) : keys;
    };
    stack.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant_default9(+_), stack) : value;
    };
    stack.order = function(_) {
      return arguments.length ? (order = _ == null ? none_default2 : typeof _ === "function" ? _ : constant_default9(Array.from(_)), stack) : order;
    };
    stack.offset = function(_) {
      return arguments.length ? (offset = _ == null ? none_default : _, stack) : offset;
    };
    return stack;
  }
  var init_stack = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/stack.js"() {
      init_array3();
      init_constant7();
      init_none();
      init_none2();
    }
  });
  function expand_default(series, order) {
    if (!((n = series.length) > 0))
      return;
    for (var i, n, j = 0, m2 = series[0].length, y5; j < m2; ++j) {
      for (y5 = i = 0; i < n; ++i)
        y5 += series[i][j][1] || 0;
      if (y5)
        for (i = 0; i < n; ++i)
          series[i][j][1] /= y5;
    }
    none_default(series, order);
  }
  var init_expand = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/expand.js"() {
      init_none();
    }
  });
  function diverging_default(series, order) {
    if (!((n = series.length) > 0))
      return;
    for (var i, j = 0, d, dy, yp, yn, n, m2 = series[order[0]].length; j < m2; ++j) {
      for (yp = yn = 0, i = 0; i < n; ++i) {
        if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
          d[0] = yp, d[1] = yp += dy;
        } else if (dy < 0) {
          d[1] = yn, d[0] = yn += dy;
        } else {
          d[0] = 0, d[1] = dy;
        }
      }
    }
  }
  var init_diverging = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/diverging.js"() {
    }
  });
  function silhouette_default(series, order) {
    if (!((n = series.length) > 0))
      return;
    for (var j = 0, s0 = series[order[0]], n, m2 = s0.length; j < m2; ++j) {
      for (var i = 0, y5 = 0; i < n; ++i)
        y5 += series[i][j][1] || 0;
      s0[j][1] += s0[j][0] = -y5 / 2;
    }
    none_default(series, order);
  }
  var init_silhouette = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/silhouette.js"() {
      init_none();
    }
  });
  function wiggle_default(series, order) {
    if (!((n = series.length) > 0) || !((m2 = (s0 = series[order[0]]).length) > 0))
      return;
    for (var y5 = 0, j = 1, s0, m2, n; j < m2; ++j) {
      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
        var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
        for (var k2 = 0; k2 < i; ++k2) {
          var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
          s3 += skj0 - skj1;
        }
        s1 += sij0, s2 += s3 * sij0;
      }
      s0[j - 1][1] += s0[j - 1][0] = y5;
      if (s1)
        y5 -= s2 / s1;
    }
    s0[j - 1][1] += s0[j - 1][0] = y5;
    none_default(series, order);
  }
  var init_wiggle = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/offset/wiggle.js"() {
      init_none();
    }
  });
  function appearance_default(series) {
    var peaks = series.map(peak);
    return none_default2(series).sort(function(a3, b) {
      return peaks[a3] - peaks[b];
    });
  }
  function peak(series) {
    var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
    while (++i < n)
      if ((vi = +series[i][1]) > vj)
        vj = vi, j = i;
    return j;
  }
  var init_appearance = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/appearance.js"() {
      init_none2();
    }
  });
  function ascending_default(series) {
    var sums = series.map(sum2);
    return none_default2(series).sort(function(a3, b) {
      return sums[a3] - sums[b];
    });
  }
  function sum2(series) {
    var s2 = 0, i = -1, n = series.length, v;
    while (++i < n)
      if (v = +series[i][1])
        s2 += v;
    return s2;
  }
  var init_ascending2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/ascending.js"() {
      init_none2();
    }
  });
  function descending_default2(series) {
    return ascending_default(series).reverse();
  }
  var init_descending3 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/descending.js"() {
      init_ascending2();
    }
  });
  function insideOut_default(series) {
    var n = series.length, i, j, sums = series.map(sum2), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
    for (i = 0; i < n; ++i) {
      j = order[i];
      if (top < bottom) {
        top += sums[j];
        tops.push(j);
      } else {
        bottom += sums[j];
        bottoms.push(j);
      }
    }
    return bottoms.reverse().concat(tops);
  }
  var init_insideOut = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/insideOut.js"() {
      init_appearance();
      init_ascending2();
    }
  });
  function reverse_default(series) {
    return none_default2(series).reverse();
  }
  var init_reverse2 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/order/reverse.js"() {
      init_none2();
    }
  });
  var src_exports6 = {};
  __export(src_exports6, {
    arc: () => arc_default,
    area: () => area_default,
    areaRadial: () => areaRadial_default,
    curveBasis: () => basis_default3,
    curveBasisClosed: () => basisClosed_default3,
    curveBasisOpen: () => basisOpen_default,
    curveBumpX: () => bumpX,
    curveBumpY: () => bumpY,
    curveBundle: () => bundle_default,
    curveCardinal: () => cardinal_default,
    curveCardinalClosed: () => cardinalClosed_default,
    curveCardinalOpen: () => cardinalOpen_default,
    curveCatmullRom: () => catmullRom_default,
    curveCatmullRomClosed: () => catmullRomClosed_default,
    curveCatmullRomOpen: () => catmullRomOpen_default,
    curveLinear: () => linear_default,
    curveLinearClosed: () => linearClosed_default,
    curveMonotoneX: () => monotoneX,
    curveMonotoneY: () => monotoneY,
    curveNatural: () => natural_default,
    curveStep: () => step_default,
    curveStepAfter: () => stepAfter,
    curveStepBefore: () => stepBefore,
    line: () => line_default,
    lineRadial: () => lineRadial_default,
    link: () => link,
    linkHorizontal: () => linkHorizontal,
    linkRadial: () => linkRadial,
    linkVertical: () => linkVertical,
    pie: () => pie_default,
    pointRadial: () => pointRadial_default,
    radialArea: () => areaRadial_default,
    radialLine: () => lineRadial_default,
    stack: () => stack_default,
    stackOffsetDiverging: () => diverging_default,
    stackOffsetExpand: () => expand_default,
    stackOffsetNone: () => none_default,
    stackOffsetSilhouette: () => silhouette_default,
    stackOffsetWiggle: () => wiggle_default,
    stackOrderAppearance: () => appearance_default,
    stackOrderAscending: () => ascending_default,
    stackOrderDescending: () => descending_default2,
    stackOrderInsideOut: () => insideOut_default,
    stackOrderNone: () => none_default2,
    stackOrderReverse: () => reverse_default,
    symbol: () => Symbol2,
    symbolAsterisk: () => asterisk_default,
    symbolCircle: () => circle_default,
    symbolCross: () => cross_default,
    symbolDiamond: () => diamond_default,
    symbolDiamond2: () => diamond2_default,
    symbolPlus: () => plus_default,
    symbolSquare: () => square_default,
    symbolSquare2: () => square2_default,
    symbolStar: () => star_default,
    symbolTriangle: () => triangle_default,
    symbolTriangle2: () => triangle2_default,
    symbolWye: () => wye_default,
    symbolX: () => x_default3,
    symbols: () => symbolsFill,
    symbolsFill: () => symbolsFill,
    symbolsStroke: () => symbolsStroke
  });
  var init_src15 = __esm({
    "../react-d3-graph/node_modules/d3-shape/src/index.js"() {
      init_arc();
      init_area();
      init_line();
      init_pie();
      init_areaRadial();
      init_lineRadial();
      init_pointRadial();
      init_link2();
      init_symbol();
      init_asterisk();
      init_circle();
      init_cross2();
      init_diamond();
      init_diamond2();
      init_plus();
      init_square();
      init_square2();
      init_star();
      init_triangle();
      init_triangle2();
      init_wye();
      init_x3();
      init_basisClosed2();
      init_basisOpen();
      init_basis2();
      init_bump();
      init_bundle();
      init_cardinalClosed();
      init_cardinalOpen();
      init_cardinal();
      init_catmullRomClosed();
      init_catmullRomOpen();
      init_catmullRom();
      init_linearClosed();
      init_linear();
      init_monotone();
      init_natural();
      init_step();
      init_stack();
      init_expand();
      init_diverging();
      init_none();
      init_silhouette();
      init_wiggle();
      init_appearance();
      init_ascending2();
      init_descending3();
      init_insideOut();
      init_none2();
      init_reverse2();
    }
  });
  var require_node_const = __commonJS2({
    "../react-d3-graph/lib/components/node/node.const.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _graph = _interopRequireDefault(require_graph_config());
      var _const = _interopRequireDefault(require_const());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var _default = _objectSpread({
        ARC: {
          START_ANGLE: 0,
          END_ANGLE: 2 * Math.PI
        },
        DEFAULT_NODE_SIZE: _graph["default"].node.size,
        NODE_LABEL_DX: ".90em",
        NODE_LABEL_DY: ".35em"
      }, _const["default"]);
      exports2["default"] = _default;
    }
  });
  var require_node_helper = __commonJS2({
    "../react-d3-graph/lib/components/node/node.helper.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _d3Shape = (init_src15(), src_exports6);
      var _node = _interopRequireDefault(require_node_const());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _convertTypeToD3Symbol(typeName) {
        switch (typeName) {
          case _node["default"].SYMBOLS.CIRCLE:
            return _d3Shape.symbolCircle;
          case _node["default"].SYMBOLS.CROSS:
            return _d3Shape.symbolCross;
          case _node["default"].SYMBOLS.DIAMOND:
            return _d3Shape.symbolDiamond;
          case _node["default"].SYMBOLS.SQUARE:
            return _d3Shape.symbolSquare;
          case _node["default"].SYMBOLS.STAR:
            return _d3Shape.symbolStar;
          case _node["default"].SYMBOLS.TRIANGLE:
            return _d3Shape.symbolTriangle;
          case _node["default"].SYMBOLS.WYE:
            return _d3Shape.symbolWye;
          default:
            return _d3Shape.symbolCircle;
        }
      }
      function buildSvgSymbol() {
        var size11 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _node["default"].DEFAULT_NODE_SIZE;
        var symbolTypeDesc = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _node["default"].SYMBOLS.CIRCLE;
        return (0, _d3Shape.symbol)().size(function() {
          return size11;
        }).type(function() {
          return _convertTypeToD3Symbol(symbolTypeDesc);
        })();
      }
      function getLabelPlacementProps(dx, labelPosition) {
        switch (labelPosition) {
          case "right":
            return {
              dx: dx ? "".concat(dx) : _node["default"].NODE_LABEL_DX,
              dy: "0",
              dominantBaseline: "middle",
              textAnchor: "start"
            };
          case "left":
            return {
              dx: dx ? "".concat(-dx) : "-".concat(_node["default"].NODE_LABEL_DX),
              dy: "0",
              dominantBaseline: "middle",
              textAnchor: "end"
            };
          case "top":
            return {
              dx: "0",
              dy: dx ? "".concat(-dx) : "-".concat(_node["default"].NODE_LABEL_DX),
              dominantBaseline: "baseline",
              textAnchor: "middle"
            };
          case "bottom":
            return {
              dx: "0",
              dy: dx ? "".concat(dx) : _node["default"].NODE_LABEL_DX,
              dominantBaseline: "hanging",
              textAnchor: "middle"
            };
          case "center":
            return {
              dx: "0",
              dy: "0",
              dominantBaseline: "middle",
              textAnchor: "middle"
            };
          default:
            return {
              dx: dx ? "".concat(dx) : _node["default"].NODE_LABEL_DX,
              dy: _node["default"].NODE_LABEL_DY
            };
        }
      }
      var _default = {
        buildSvgSymbol,
        getLabelPlacementProps
      };
      exports2["default"] = _default;
    }
  });
  var require_Node = __commonJS2({
    "../react-d3-graph/lib/components/node/Node.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _react = _interopRequireDefault(require_react());
      var _node = _interopRequireDefault(require_node_helper());
      var _node2 = _interopRequireDefault(require_node_const());
      var _utils = require_utils();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends() {
        _extends = Object.assign || function(target2) {
          for (var i = 1; i < arguments.length; i++) {
            var source2 = arguments[i];
            for (var key in source2) {
              if (Object.prototype.hasOwnProperty.call(source2, key)) {
                target2[key] = source2[key];
              }
            }
          }
          return target2;
        };
        return _extends.apply(this, arguments);
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target2, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target2, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized(self);
      }
      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var Node = /* @__PURE__ */ function(_React$Component) {
        _inherits(Node2, _React$Component);
        var _super = _createSuper(Node2);
        function Node2() {
          var _this;
          _classCallCheck(this, Node2);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty(_assertThisInitialized(_this), "handleOnClickNode", function(event) {
            return _this.props.onClickNode && _this.props.onClickNode(event, _this.props.id);
          });
          _defineProperty(_assertThisInitialized(_this), "handleOnRightClickNode", function(event) {
            return _this.props.onRightClickNode && _this.props.onRightClickNode(event, _this.props.id);
          });
          _defineProperty(_assertThisInitialized(_this), "handleOnMouseOverNode", function(event) {
            return _this.props.onMouseOverNode && _this.props.onMouseOverNode(event, _this.props.id);
          });
          _defineProperty(_assertThisInitialized(_this), "handleOnMouseOutNode", function(event) {
            return _this.props.onMouseOut && _this.props.onMouseOut(event, _this.props.id);
          });
          return _this;
        }
        _createClass(Node2, [{
          key: "render",
          value: function render() {
            var nodeProps = {
              cursor: this.props.cursor,
              onClick: this.handleOnClickNode,
              onContextMenu: this.handleOnRightClickNode,
              onMouseOut: this.handleOnMouseOutNode,
              onMouseOver: this.handleOnMouseOverNode,
              opacity: this.props.opacity
            };
            var textProps = _objectSpread(_objectSpread({}, _node["default"].getLabelPlacementProps(this.props.dx, this.props.labelPosition)), {}, {
              fill: this.props.fontColor,
              fontSize: this.props.fontSize,
              fontWeight: this.props.fontWeight,
              opacity: this.props.opacity
            }, this.props.labelClass && {
              className: this.props.labelClass
            });
            var size11 = this.props.size;
            var isSizeNumericalValue = _typeof(size11) !== "object";
            var gtx = this.props.cx, gty = this.props.cy, label = null, node = null;
            if (this.props.svg || this.props.viewGenerator) {
              var height = isSizeNumericalValue ? size11 / 10 : size11.height / 10;
              var width = isSizeNumericalValue ? size11 / 10 : size11.width / 10;
              var tx = width / 2;
              var ty = height / 2;
              var transform3 = "translate(".concat(tx, ",").concat(ty, ")");
              label = /* @__PURE__ */ _react["default"].createElement("text", _extends({}, textProps, {
                transform: transform3
              }), this.props.label);
              if (this.props.viewGenerator && !this.props.overrideGlobalViewGenerator) {
                node = /* @__PURE__ */ _react["default"].createElement("svg", _extends({}, nodeProps, {
                  width,
                  height
                }), this.props.viewGenerator(this.props));
              } else {
                node = /* @__PURE__ */ _react["default"].createElement("image", _extends({}, nodeProps, {
                  href: this.props.svg,
                  width,
                  height
                }));
              }
              gtx -= tx;
              gty -= ty;
            } else {
              if (!isSizeNumericalValue) {
                (0, _utils.logWarning)("node.size should be a number when not using custom nodes.");
                size11 = _node2["default"].DEFAULT_NODE_SIZE;
              }
              nodeProps.d = _node["default"].buildSvgSymbol(size11, this.props.type);
              nodeProps.fill = this.props.fill;
              nodeProps.stroke = this.props.stroke;
              nodeProps.strokeWidth = this.props.strokeWidth;
              label = /* @__PURE__ */ _react["default"].createElement("text", textProps, this.props.label);
              node = /* @__PURE__ */ _react["default"].createElement("path", nodeProps);
            }
            var gProps = {
              className: this.props.className,
              cx: this.props.cx,
              cy: this.props.cy,
              id: this.props.id,
              transform: "translate(".concat(gtx, ",").concat(gty, ")")
            };
            return /* @__PURE__ */ _react["default"].createElement("g", gProps, node, this.props.renderLabel && label);
          }
        }]);
        return Node2;
      }(_react["default"].Component);
      exports2["default"] = Node;
    }
  });
  var require_Marker = __commonJS2({
    "../react-d3-graph/lib/components/marker/Marker.js"(exports2) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _react = _interopRequireDefault(require_react());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target2, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target2, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized(self);
      }
      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      var Marker = /* @__PURE__ */ function(_React$Component) {
        _inherits(Marker2, _React$Component);
        var _super = _createSuper(Marker2);
        function Marker2() {
          _classCallCheck(this, Marker2);
          return _super.apply(this, arguments);
        }
        _createClass(Marker2, [{
          key: "render",
          value: function render() {
            return /* @__PURE__ */ _react["default"].createElement("marker", {
              className: "marker",
              id: this.props.id,
              viewBox: "0 -5 10 10",
              refX: this.props.refX,
              refY: "0",
              markerWidth: this.props.markerWidth,
              markerHeight: this.props.markerHeight,
              orient: "auto",
              fill: this.props.fill
            }, /* @__PURE__ */ _react["default"].createElement("path", {
              d: "M0,-5L10,0L0,5"
            }));
          }
        }]);
        return Marker2;
      }(_react["default"].Component);
      exports2["default"] = Marker;
    }
  });
  var require_link_const = __commonJS2({
    "../react-d3-graph/lib/components/link/link.const.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.SELF_LINK_DIRECTION = exports2.LINE_TYPES = void 0;
      var LINE_TYPES = {
        STRAIGHT: "STRAIGHT",
        CURVE_SMOOTH: "CURVE_SMOOTH",
        CURVE_FULL: "CURVE_FULL",
        CATMULL_ROM: "CATMULL_ROM"
      };
      exports2.LINE_TYPES = LINE_TYPES;
      var SELF_LINK_DIRECTION = {
        TOP_LEFT: "TOP_LEFT",
        TOP_RIGHT: "TOP_RIGHT",
        BOTTOM_LEFT: "BOTTOM_LEFT",
        BOTTOM_RIGHT: "BOTTOM_RIGHT"
      };
      exports2.SELF_LINK_DIRECTION = SELF_LINK_DIRECTION;
    }
  });
  var require_link_helper = __commonJS2({
    "../react-d3-graph/lib/components/link/link.helper.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.buildLinkPathDefinition = buildLinkPathDefinition;
      var _link = require_link_const();
      var _RADIUS_STRATEGIES;
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter4) {
        if (typeof Symbol !== "undefined" && iter4[Symbol.iterator] != null || iter4["@@iterator"] != null)
          return Array.from(iter4);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function straightLineRadius(points) {
        return points.map(function(point5, i) {
          var x5 = point5.x, y5 = point5.y;
          if (i == 0) {
            return "M".concat(x5, ",").concat(y5);
          } else {
            return "L".concat(x5, ",").concat(y5);
          }
        }).join(" ");
      }
      function smoothCurveRadius(points) {
        return points.map(function(point5, i) {
          var x5 = point5.x, y5 = point5.y;
          if (i == 0) {
            return "M".concat(x5, ",").concat(y5);
          } else {
            var _points = points[i - 1], x1 = _points.x, y1 = _points.y;
            var dx = x1 - x5;
            var dy = y1 - y5;
            var radius = Math.sqrt(dx * dx + dy * dy);
            return "A".concat(radius, ",").concat(radius, " 0 0,1 ").concat(x5, ",").concat(y5);
          }
        }).join(" ");
      }
      function fullCurveRadius(points) {
        return points.map(function(point5, i) {
          var x5 = point5.x, y5 = point5.y;
          if (i == 0) {
            return "M".concat(x5, ",").concat(y5);
          } else {
            return "A1,1 0 0,1 ".concat(x5, ",").concat(y5);
          }
        }).join(" ");
      }
      function smooth3(p0, p1, p2) {
        var length02 = Math.sqrt(Math.pow(p2.x - p0.x, 2) + Math.pow(p2.y - p0.y, 2));
        var length01 = Math.sqrt(Math.pow(p1.x - p0.x, 2) + Math.pow(p1.y - p0.y, 2));
        var length12 = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
        var d = {
          x: (p2.x - p0.x) / length02,
          y: (p2.y - p0.y) / length02
        };
        var mid1 = {
          x: (p0.x + p1.x) / 2,
          y: (p0.y + p1.y) / 2
        };
        var mid2 = {
          x: (p1.x + p2.x) / 2,
          y: (p1.y + p2.y) / 2
        };
        var n1 = {
          x: (p0.y - p1.y) / length01,
          y: (p1.x - p0.x) / length01
        };
        var n2 = {
          x: (p1.y - p2.y) / length12,
          y: (p2.x - p1.x) / length12
        };
        var l1 = {
          x: p1.x - mid1.x,
          y: p1.y - mid1.y
        };
        var l2 = {
          x: p2.x - mid2.x,
          y: p2.y - mid2.y
        };
        var s1 = (n1.x * l1.y - n1.y * l1.x) / (d.x * n1.y - d.y * n1.x);
        var s2 = (n2.x * l2.y - n2.y * l2.x) / (d.x * n2.y - d.y * n2.x);
        var q1 = {
          x: p1.x + d.x * s1,
          y: p1.y + d.y * s1
        };
        var q2 = {
          x: p1.x - d.x * s2,
          y: p1.y - d.y * s2
        };
        return ["M".concat(p0.x, ",").concat(p0.y), "Q".concat(q1.x, ",").concat(q1.y, " ").concat(p1.x, ",").concat(p1.y), "Q".concat(q2.x, ",").concat(q2.y, " ").concat(p2.x, ",").concat(p2.y)].join(" ");
      }
      function catmullRom(points) {
        if (points.length === 2) {
          return straightLineRadius(points);
        }
        if (points.length === 3) {
          var p0 = points[0];
          var p1 = points[1];
          var p2 = points[2];
          return smooth3(p0, p1, p2);
        }
        var alpha = 0.5;
        var fin = points.length - 1;
        var knots = [0];
        for (var i = 1; i < fin; i++) {
          var _points$i = points[i], x1 = _points$i.x, y1 = _points$i.y;
          var _points2 = points[i + 1], x22 = _points2.x, y22 = _points2.y;
          var length5 = Math.sqrt(Math.pow(x22 - x1, 2) + Math.pow(y22 - y1, 2));
          var t = Math.pow(length5, alpha) + knots[knots.length - 1];
        }
        return points.map(function(point5, i2) {
          var x5 = point5.x, y5 = point5.y;
          if (i2 == 0) {
            return "M".concat(x5, ",").concat(y5);
          } else if (i2 == 1 || i2 == fin) {
            return "T".concat(x5, ",").concat(y5);
          } else {
            var _p = points[i2 - 2];
            var _p2 = points[i2 - 1];
            var _p3 = point5;
            var p3 = points[i2 + 1];
            var t0 = knots[i2 - 2];
            var t1 = knots[i2 - 1];
            var t2 = knots[i2];
            var t3 = knotss[i2 + 1];
            var c1 = (t2 - t1) / (t2 - t0);
            var c22 = (t1 - t0) / (t2 - t0);
            var d1 = (t3 - t2) / (t3 - t1);
            var d2 = (t2 - t1) / (t3 - t1);
            var m1 = {
              x: (t2 - t1) * (c1 * (_p2.x - _p.x) / (t1 - t0) + c22 * (_p3.x - _p2.x) / (t2 - t1)),
              y: (t2 - t1) * (c1 * (_p2.y - _p.y) / (t1 - t0) + c22 * (_p3.y - _p2.y) / (t2 - t1))
            };
            var m2 = {
              x: (t2 - t1) * (d1 * (_p3.x - _p2.x) / (t2 - t1) + d2 * (p3.x - _p3.x) / (t3 - t2)),
              y: (t2 - t1) * (d1 * (_p3.y - _p2.y) / (t2 - t1) + d2 * (p3.y - _p3.y) / (t3 - t2))
            };
            var q1 = {
              x: _p2.x + m1.x / 3,
              y: _p2.y + m1.y / 3
            };
            var q2 = {
              x: _p3.x - m2.x / 3,
              y: _p3.y - m2.y / 3
            };
            return "C".concat(q1.x, ",").concat(q1.y, " ").concat(q2.x, ",").concat(q2.y, " ").concat(x5).concat(y5);
          }
        }).join(" ");
      }
      var RADIUS_STRATEGIES = (_RADIUS_STRATEGIES = {}, _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.STRAIGHT, straightLineRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CURVE_SMOOTH, smoothCurveRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CURVE_FULL, fullCurveRadius), _defineProperty(_RADIUS_STRATEGIES, _link.LINE_TYPES.CATMULL_ROM, catmullRom), _RADIUS_STRATEGIES);
      function getRadiusStrategy(type) {
        return RADIUS_STRATEGIES[type] || RADIUS_STRATEGIES[_link.LINE_TYPES.STRAIGHT];
      }
      function buildLinkPathDefinition() {
        var sourceCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var targetCoords = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _link.LINE_TYPES.STRAIGHT;
        var breakPoints = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];
        var sourceId = arguments.length > 4 ? arguments[4] : void 0;
        var targetId = arguments.length > 5 ? arguments[5] : void 0;
        var parallelIdx = arguments.length > 6 ? arguments[6] : void 0;
        var parallelCount = arguments.length > 7 ? arguments[7] : void 0;
        var parallelSpread = arguments.length > 8 ? arguments[8] : void 0;
        var selfLinkDirection = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : _link.SELF_LINK_DIRECTION.TOP_RIGHT;
        var sx = sourceCoords.x, sy = sourceCoords.y;
        var tx = targetCoords.x, ty = targetCoords.y;
        if (sourceId === targetId && sx === tx && sy === ty) {
          switch (selfLinkDirection) {
            case _link.SELF_LINK_DIRECTION.TOP_LEFT:
              return "M".concat(sx, ",").concat(sy, " A40,30 45 1,1 ").concat(tx + 1, ",").concat(ty - 1);
            case _link.SELF_LINK_DIRECTION.BOTTOM_LEFT:
              return "M".concat(sx, ",").concat(sy, " A40,30 -45 1,1 ").concat(tx - 1, ",").concat(ty - 1);
            case _link.SELF_LINK_DIRECTION.BOTTOM_RIGHT:
              return "M".concat(sx, ",").concat(sy, " A40,30 45 1,1 ").concat(tx - 1, ",").concat(ty + 1);
            default:
              return "M".concat(sx, ",").concat(sy, " A40,30 -45 1,1 ").concat(tx + 1, ",").concat(ty + 1);
          }
        }
        if (breakPoints.length === 0 && parallelCount > 1) {
          var length5 = Math.sqrt(Math.pow(Math.abs(sx - tx), 2) + Math.pow(Math.abs(sy - ty), 2));
          var tightestArcDeviation = length5 * parallelSpread * Math.pow(0.85, Math.floor(parallelCount / 2));
          var deviationSize = (parallelCount % 2 == 0 ? function() {
            var mid = parallelCount / 2;
            return parallelIdx - mid + 0.5;
          }() : function() {
            var mid = (parallelCount - 1) / 2;
            return parallelIdx - mid;
          }()) * tightestArcDeviation;
          if (Math.abs(deviationSize) < 1e-5) {
            breakPoints = [];
          } else {
            var midPt = {
              x: (sx + tx) / 2,
              y: (sy + ty) / 2
            };
            var dirVec = {
              x: (sy - ty) / length5,
              y: (tx - sx) / length5
            };
            var arcPt = {
              x: midPt.x + dirVec.x * deviationSize,
              y: midPt.y + dirVec.y * deviationSize
            };
            breakPoints = [arcPt];
          }
        }
        var validType = _link.LINE_TYPES[type] || _link.LINE_TYPES.STRAIGHT;
        var calcPathFn = getRadiusStrategy(validType);
        var linkPoints = [sourceCoords].concat(_toConsumableArray(breakPoints), [targetCoords]);
        var linkPath = calcPathFn(linkPoints);
        return "".concat(linkPath);
      }
    }
  });
  var require_marker_helper = __commonJS2({
    "../react-d3-graph/lib/components/marker/marker.helper.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.getMarkerId = void 0;
      exports2.getMarkerSize = getMarkerSize;
      var _marker = require_marker_const();
      var _graph = _interopRequireDefault(require_graph_const());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _markerKeyBuilder(size11, highlighted) {
        return "MARKER_".concat(size11).concat(highlighted);
      }
      function _getMarkerSize(transform3, mMax, lMax) {
        if (transform3 < mMax) {
          return _marker.SIZES.S;
        } else if (transform3 >= mMax && transform3 < lMax) {
          return _marker.SIZES.M;
        } else {
          return _marker.SIZES.L;
        }
      }
      function _computeMarkerId(highlight, transform3, _ref) {
        var maxZoom = _ref.maxZoom;
        var mMax = maxZoom / 4;
        var lMax = maxZoom / 2;
        var size11 = _getMarkerSize(transform3, mMax, lMax);
        var highlighted = highlight ? _marker.HIGHLIGHTED : "";
        var markerKey = _markerKeyBuilder(size11, highlighted);
        return _marker.MARKERS[markerKey];
      }
      function _memoizedComputeMarkerId() {
        var cache = {};
        return function(highlight, transform3, _ref2) {
          var maxZoom = _ref2.maxZoom;
          var cacheKey = "".concat(highlight, ";").concat(transform3, ";").concat(maxZoom);
          if (cache[cacheKey]) {
            return cache[cacheKey];
          }
          var markerId = _computeMarkerId(highlight, transform3, {
            maxZoom
          });
          cache[cacheKey] = markerId;
          return markerId;
        };
      }
      var getMarkerId = _memoizedComputeMarkerId();
      exports2.getMarkerId = getMarkerId;
      function getMarkerSize(config) {
        var small = _marker.MARKER_SMALL_SIZE;
        var medium = small + _marker.MARKER_MEDIUM_OFFSET * config.maxZoom / 3;
        var large = small + _marker.MARKER_LARGE_OFFSET * config.maxZoom / 3;
        if (config.node && !config.node.viewGenerator) {
          switch (config.node.symbolType) {
            case _graph["default"].SYMBOLS.CIRCLE:
              small = 0;
              medium = 0;
              large = 0;
              break;
          }
        }
        return {
          small,
          medium,
          large
        };
      }
    }
  });
  var require_graph_builder = __commonJS2({
    "../react-d3-graph/lib/components/graph/graph.builder.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.buildLinkProps = buildLinkProps;
      exports2.buildNodeProps = buildNodeProps;
      var _graph = _interopRequireDefault(require_graph_const());
      var _utils = require_utils();
      var _link = require_link_helper();
      var _marker = require_marker_helper();
      var _graph2 = require_graph_helper();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      function _getNodeOpacity(node, highlightedNode, highlightedLink, config) {
        var highlight = node.highlighted || node.id === (highlightedLink && highlightedLink.source) || node.id === (highlightedLink && highlightedLink.target);
        var someLinkHighlighted = highlightedLink && highlightedLink.source && highlightedLink.target;
        var someNodeHighlighted = !!(highlightedNode || someLinkHighlighted);
        var opacity;
        if (someNodeHighlighted && config.highlightDegree === 0) {
          opacity = highlight ? config.node.opacity : config.highlightOpacity;
        } else if (someNodeHighlighted) {
          opacity = highlight ? config.node.opacity : config.highlightOpacity;
        } else {
          opacity = node.opacity || config.node.opacity;
        }
        return opacity;
      }
      function buildLinkProps(link2, nodes4, links2, config, linkCallbacks, highlightedNode, highlightedLink, transform3, selected2) {
        var _link$offsetSource, _config$link$offsetSo, _config$link, _link$offsetTarget, _config$link$offsetTa, _config$link2, _nodes$source, _nodes$source2, _nodes$target, _nodes$target2;
        var source2 = link2.source, target2 = link2.target;
        var offsetSource = ((_link$offsetSource = link2.offsetSource) === null || _link$offsetSource === void 0 ? void 0 : _link$offsetSource.call(link2, nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[source2], nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[target2], link2.breakpoints)) || ((_config$link$offsetSo = (_config$link = config.link).offsetSource) === null || _config$link$offsetSo === void 0 ? void 0 : _config$link$offsetSo.call(_config$link, nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[source2], nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[target2], link2.breakpoints)) || {
          dx: 0,
          dy: 0
        };
        var offsetTarget = ((_link$offsetTarget = link2.offsetTarget) === null || _link$offsetTarget === void 0 ? void 0 : _link$offsetTarget.call(link2, nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[source2], nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[target2], link2.breakpoints)) || ((_config$link$offsetTa = (_config$link2 = config.link).offsetTarget) === null || _config$link$offsetTa === void 0 ? void 0 : _config$link$offsetTa.call(_config$link2, nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[source2], nodes4 === null || nodes4 === void 0 ? void 0 : nodes4[target2], link2.breakpoints)) || {
          dx: 0,
          dy: 0
        };
        var x1 = ((nodes4 === null || nodes4 === void 0 ? void 0 : (_nodes$source = nodes4[source2]) === null || _nodes$source === void 0 ? void 0 : _nodes$source.x) || 0) + offsetSource.dx;
        var y1 = ((nodes4 === null || nodes4 === void 0 ? void 0 : (_nodes$source2 = nodes4[source2]) === null || _nodes$source2 === void 0 ? void 0 : _nodes$source2.y) || 0) + offsetSource.dy;
        var x22 = ((nodes4 === null || nodes4 === void 0 ? void 0 : (_nodes$target = nodes4[target2]) === null || _nodes$target === void 0 ? void 0 : _nodes$target.x) || 0) + offsetTarget.dx;
        var y22 = ((nodes4 === null || nodes4 === void 0 ? void 0 : (_nodes$target2 = nodes4[target2]) === null || _nodes$target2 === void 0 ? void 0 : _nodes$target2.y) || 0) + offsetTarget.dy;
        var type = link2.type || config.link.type;
        var selfLinkDirection = link2.selfLinkDirection || config.link.selfLinkDirection;
        var parallelSpread = link2.parallelSpread || config.link.parallelSpread;
        var mainNodeParticipates = false;
        switch (config.highlightDegree) {
          case 0:
            break;
          case 2:
            mainNodeParticipates = true;
            break;
          default:
            mainNodeParticipates = source2 === highlightedNode || target2 === highlightedNode;
            break;
        }
        var guiltyNode = mainNodeParticipates && nodes4[source2].highlighted && nodes4[target2].highlighted;
        var guiltyLink = source2 === (highlightedLink && highlightedLink.source) && target2 === (highlightedLink && highlightedLink.target);
        var highlight = guiltyNode || guiltyLink;
        var opacity = link2.opacity || config.link.opacity;
        if (highlightedNode || highlightedLink && highlightedLink.source) {
          opacity = highlight ? config.link.opacity : config.highlightOpacity;
        }
        var stroke = link2.color || config.link.color;
        if (highlight) {
          stroke = config.link.highlightColor === _graph["default"].KEYWORDS.SAME ? config.link.color : config.link.highlightColor;
        }
        var strokeDasharray = link2.strokeDasharray || config.link.strokeDasharray;
        var strokeDashoffset = link2.strokeDashoffset || config.link.strokeDashoffset;
        var strokeLinecap = link2.strokeLinecap || config.link.strokeLinecap;
        var strokeWidth = (link2.strokeWidth || config.link.strokeWidth) * (1 / transform3);
        if (config.link.semanticStrokeWidth) {
          var linkValue = links2[source2][target2] || links2[target2][source2] || 1;
          strokeWidth += linkValue * strokeWidth / 10;
        }
        var markerId = config.directed ? (0, _marker.getMarkerId)(highlight, transform3, config) : null;
        var markerStart = config.link.markerStart || link2.markerStart;
        var markerEnd = config.link.markerEnd || link2.markerEnd;
        var t = 1 / transform3;
        var fontSize = null, fontColor = null, fontWeight = null, label = null;
        if (config.link.renderLabel) {
          var labelProperty = link2.labelProperty || config.link.labelProperty;
          if (typeof labelProperty === "function") {
            label = labelProperty(link2);
          } else {
            label = link2[labelProperty];
          }
          fontSize = link2.fontSize || config.link.fontSize;
          fontColor = link2.fontColor || config.link.fontColor;
          fontWeight = highlight ? config.link.highlightFontWeight : config.link.fontWeight;
        }
        var _getNormalizedNodeCoo = (0, _graph2.getNormalizedNodeCoordinates)({
          sourceId: source2,
          targetId: target2,
          sourceCoords: {
            x: x1,
            y: y1
          },
          targetCoords: {
            x: x22,
            y: y22
          }
        }, nodes4, config, strokeWidth), sourceCoords = _getNormalizedNodeCoo.sourceCoords, targetCoords = _getNormalizedNodeCoo.targetCoords;
        var d = (0, _link.buildLinkPathDefinition)(sourceCoords, targetCoords, type, link2.breakPoints, link2.source, link2.target, link2.parallelIdx, link2.parallelCount, parallelSpread, selfLinkDirection);
        return {
          className: _graph["default"].LINK_CLASS_NAME,
          d,
          fontColor,
          fontSize: config.link.fontScaling ? fontSize * t : fontSize,
          fontWeight,
          label,
          markerId,
          markerStart,
          markerEnd,
          mouseCursor: config.link.mouseCursor,
          opacity,
          selected: selected2,
          source: source2,
          stroke,
          strokeWidth: strokeWidth / t,
          strokeDasharray,
          strokeDashoffset,
          strokeLinecap,
          target: target2,
          onClickLink: linkCallbacks.onClickLink,
          onMouseOutLink: linkCallbacks.onMouseOutLink,
          onMouseOverLink: linkCallbacks.onMouseOverLink,
          onRightClickLink: linkCallbacks.onRightClickLink
        };
      }
      function buildNodeProps(node, config) {
        var nodeCallbacks = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var highlightedNode = arguments.length > 3 ? arguments[3] : void 0;
        var highlightedLink = arguments.length > 4 ? arguments[4] : void 0;
        var transform3 = arguments.length > 5 ? arguments[5] : void 0;
        var selected2 = arguments.length > 6 ? arguments[6] : void 0;
        var highlight = node.highlighted || node.id === (highlightedLink && highlightedLink.source) || node.id === (highlightedLink && highlightedLink.target);
        var opacity = _getNodeOpacity(node, highlightedNode, highlightedLink, config);
        var fill2 = node.color || config.node.color;
        if (highlight && config.node.highlightColor !== _graph["default"].KEYWORDS.SAME) {
          fill2 = config.node.highlightColor;
        }
        var stroke = node.strokeColor || config.node.strokeColor;
        if (highlight && config.node.highlightStrokeColor !== _graph["default"].KEYWORDS.SAME) {
          stroke = config.node.highlightStrokeColor;
        }
        var label = node[config.node.labelProperty] || node.id;
        if (typeof config.node.labelProperty === "function") {
          label = config.node.labelProperty(node);
        }
        var labelPosition = node.labelPosition || config.node.labelPosition;
        var strokeWidth = node.strokeWidth || config.node.strokeWidth;
        if (highlight && config.node.highlightStrokeWidth !== _graph["default"].KEYWORDS.SAME) {
          strokeWidth = config.node.highlightStrokeWidth;
        }
        var t = 1 / transform3;
        var nodeSize = node.size || config.node.size;
        var isSizeNumericValue = _typeof(nodeSize) !== "object";
        var offset = 0;
        if (isSizeNumericValue) {
          offset = nodeSize;
        } else if (labelPosition === "top" || labelPosition === "bottom") {
          offset = nodeSize.height;
        } else if (labelPosition === "right" || labelPosition === "left") {
          offset = nodeSize.width;
        }
        var fontSize = node.fontSize || config.node.fontSize;
        var highlightFontSize = node.highlightFontSize || config.node.highlightFontSize;
        var finalFontSize = highlight ? highlightFontSize : fontSize;
        var dx = finalFontSize * t + offset / 100 + 1.5;
        var svg = node.svg || config.node.svg;
        var fontColor = node.fontColor || config.node.fontColor;
        var renderLabel = config.node.renderLabel;
        if (!(0, _utils.isNil)(node.renderLabel) && typeof node.renderLabel === "boolean") {
          renderLabel = node.renderLabel;
        }
        var labelClass = config.node.labelClass;
        if (!(0, _utils.isNil)(node.labelClass) && typeof node.labelClass === "string") {
          labelClass = node.labelClass;
        }
        return _objectSpread(_objectSpread({}, node), {}, {
          className: _graph["default"].NODE_CLASS_NAME,
          cursor: config.node.mouseCursor,
          cx: (node === null || node === void 0 ? void 0 : node.x) || "0",
          cy: (node === null || node === void 0 ? void 0 : node.y) || "0",
          dx,
          fill: fill2,
          fontColor,
          fontSize: config.node.fontScaling ? finalFontSize * t : finalFontSize,
          fontWeight: highlight ? config.node.highlightFontWeight : config.node.fontWeight,
          id: node.id,
          label,
          labelPosition,
          opacity,
          overrideGlobalViewGenerator: !node.viewGenerator && node.svg,
          renderLabel,
          labelClass,
          selected: selected2,
          size: isSizeNumericValue ? nodeSize * t : {
            height: nodeSize.height,
            width: nodeSize.width
          },
          stroke,
          strokeWidth: strokeWidth * t,
          svg,
          type: node.symbolType || config.node.symbolType,
          viewGenerator: node.viewGenerator || config.node.viewGenerator,
          onClickNode: nodeCallbacks.onClickNode,
          onMouseOut: nodeCallbacks.onMouseOut,
          onMouseOverNode: nodeCallbacks.onMouseOverNode,
          onRightClickNode: nodeCallbacks.onRightClickNode
        });
      }
    }
  });
  var require_graph_renderer = __commonJS2({
    "../react-d3-graph/lib/components/graph/graph.renderer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.renderGraph = renderGraph;
      var _react = _interopRequireDefault(require_react());
      var _graph = _interopRequireDefault(require_graph_const());
      var _marker = require_marker_const();
      var _Link = _interopRequireDefault(require_Link());
      var _Node = _interopRequireDefault(require_Node());
      var _Marker = _interopRequireDefault(require_Marker());
      var _graph2 = require_graph_builder();
      var _graph3 = require_graph_helper();
      var _collapse = require_collapse_helper();
      var _marker2 = require_marker_helper();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends() {
        _extends = Object.assign || function(target2) {
          for (var i = 1; i < arguments.length; i++) {
            var source2 = arguments[i];
            for (var key in source2) {
              if (Object.prototype.hasOwnProperty.call(source2, key)) {
                target2[key] = source2[key];
              }
            }
          }
          return target2;
        };
        return _extends.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _renderLinks(nodes4, links2, linksMatrix, config, linkCallbacks, highlightedNode, highlightedLink, transform3, selection3) {
        var outLinks = links2;
        if (config.collapsible) {
          outLinks = outLinks.filter(function(_ref) {
            var isHidden = _ref.isHidden;
            return !isHidden;
          });
        }
        var parallels = outLinks.reduce(function(parallels2, link2) {
          var source2 = link2.source, target2 = link2.target;
          var sourceId = (0, _graph3.getId)(source2);
          var targetId = (0, _graph3.getId)(target2);
          var connects = sourceId < targetId ? "".concat(sourceId).concat(_graph["default"].COORDS_SEPARATOR).concat(targetId) : "".concat(targetId).concat(_graph["default"].COORDS_SEPARATOR).concat(sourceId);
          parallels2[connects] = parallels2[connects] || [];
          parallels2[connects].push(link2);
          return parallels2;
        }, {});
        var result = [];
        var _loop = function _loop2(key2) {
          var count2 = parallels[key2].length;
          var idx = 0;
          result.push(parallels[key2].map(function(link2) {
            var myIdx = idx;
            idx++;
            var source2 = link2.source, target2 = link2.target;
            var sourceId = (0, _graph3.getId)(source2);
            var targetId = (0, _graph3.getId)(target2);
            var isLoop = sourceId === targetId;
            var trailer = count2 > 1 ? "".concat(_graph["default"].COORDS_SEPARATOR).concat(myIdx) : "";
            var key3 = link2.id ? link2.id : "".concat(sourceId).concat(_graph["default"].COORDS_SEPARATOR).concat(targetId).concat(trailer);
            return _objectSpread(_objectSpread({}, link2), {}, {
              id: key3,
              parallelIdx: myIdx,
              parallelCount: count2,
              isLoop
            });
          }));
        };
        for (var key in parallels) {
          _loop(key);
        }
        outLinks = result.flat();
        return outLinks.map(function(link2) {
          var source2 = link2.source, target2 = link2.target;
          var sourceId = (0, _graph3.getId)(source2);
          var targetId = (0, _graph3.getId)(target2);
          var key2 = link2.id;
          var props = (0, _graph2.buildLinkProps)(_objectSpread(_objectSpread({}, link2), {}, {
            source: "".concat(sourceId),
            target: "".concat(targetId)
          }), nodes4, linksMatrix, config, linkCallbacks, "".concat(highlightedNode), highlightedLink, transform3, selection3.linkIsSelected(key2));
          return /* @__PURE__ */ _react["default"].createElement(_Link["default"], _extends({
            key: key2,
            id: key2
          }, props));
        });
      }
      function _renderNodes(nodes4, nodeCallbacks, config, highlightedNode, highlightedLink, transform3, selection3, linksMatrix) {
        var outNodes = Object.keys(nodes4);
        if (config.collapsible) {
          outNodes = outNodes.filter(function(nodeId) {
            return (0, _collapse.isNodeVisible)(nodeId, nodes4, linksMatrix);
          });
        }
        return outNodes.map(function(nodeId) {
          var props = (0, _graph2.buildNodeProps)(_objectSpread(_objectSpread({}, nodes4[nodeId]), {}, {
            id: "".concat(nodeId)
          }), config, nodeCallbacks, highlightedNode, highlightedLink, transform3, selection3.nodeIsSelected(nodeId));
          return /* @__PURE__ */ _react["default"].createElement(_Node["default"], _extends({
            key: nodeId
          }, props));
        });
      }
      function _renderDefs() {
        var markerCache = {};
        return function(config) {
          var highlightColor = !config.link.highlightColor || config.link.highlightColor === "SAME" ? config.link.color : config.link.highlightColor;
          var color3 = config.link.color;
          var key = "".concat(color3, "___").concat(highlightColor);
          if (!markerCache[key]) {
            var _getMarkerSize = (0, _marker2.getMarkerSize)(config), small = _getMarkerSize.small, medium = _getMarkerSize.medium, large = _getMarkerSize.large;
            var markerProps = {
              markerWidth: config.link.markerWidth,
              markerHeight: config.link.markerHeight
            };
            markerCache[key] = /* @__PURE__ */ _react["default"].createElement("defs", null, /* @__PURE__ */ _react["default"].createElement(_Marker["default"], _extends({
              id: _marker.MARKERS.MARKER_S,
              refX: small,
              fill: color3
            }, markerProps)), /* @__PURE__ */ _react["default"].createElement(_Marker["default"], _extends({
              id: _marker.MARKERS.MARKER_SH,
              refX: small,
              fill: highlightColor
            }, markerProps)), /* @__PURE__ */ _react["default"].createElement(_Marker["default"], _extends({
              id: _marker.MARKERS.MARKER_M,
              refX: medium,
              fill: color3
            }, markerProps)), /* @__PURE__ */ _react["default"].createElement(_Marker["default"], _extends({
              id: _marker.MARKERS.MARKER_MH,
              refX: medium,
              fill: highlightColor
            }, markerProps)), /* @__PURE__ */ _react["default"].createElement(_Marker["default"], _extends({
              id: _marker.MARKERS.MARKER_L,
              refX: large,
              fill: color3
            }, markerProps)), /* @__PURE__ */ _react["default"].createElement(_Marker["default"], _extends({
              id: _marker.MARKERS.MARKER_LH,
              refX: large,
              fill: highlightColor
            }, markerProps)), config.defs.map(function(m2) {
              m2.key = m2.props.id;
              return m2;
            }));
          }
          return markerCache[key];
        };
      }
      var _memoizedRenderDefs = _renderDefs();
      function renderGraph(nodes4, nodeCallbacks, links2, linksMatrix, linkCallbacks, config, highlightedNode, highlightedLink, transform3, selection3) {
        return {
          nodes: _renderNodes(nodes4, nodeCallbacks, config, highlightedNode, highlightedLink, transform3, selection3, linksMatrix),
          links: _renderLinks(nodes4, links2, linksMatrix, config, linkCallbacks, highlightedNode, highlightedLink, transform3, selection3),
          defs: _memoizedRenderDefs(config)
        };
      }
    }
  });
  var require_Graph = __commonJS2({
    "../react-d3-graph/lib/components/graph/Graph.js"(exports2) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _react = _interopRequireDefault(require_react());
      var _d3Drag = (init_src3(), src_exports2);
      var _d3Force = (init_src6(), src_exports3);
      var _d3Zoom = (init_src11(), src_exports4);
      var _d3Selection = (init_src2(), src_exports);
      var _d3Array = (init_src13(), src_exports5);
      var _graph = _interopRequireDefault(require_graph_const());
      var _graph2 = _interopRequireDefault(require_graph_config());
      var _err = _interopRequireDefault(require_err());
      var _collapse = require_collapse_helper();
      var _selection = require_selection_helper();
      var _graph3 = require_graph_helper();
      var _graph4 = require_graph_renderer();
      var _utils = require_utils();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends() {
        _extends = Object.assign || function(target2) {
          for (var i = 1; i < arguments.length; i++) {
            var source2 = arguments[i];
            for (var key in source2) {
              if (Object.prototype.hasOwnProperty.call(source2, key)) {
                target2[key] = source2[key];
              }
            }
          }
          return target2;
        };
        return _extends.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source2 = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
            _defineProperty(target2, key, source2[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
            Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source2, key));
          });
        }
        return target2;
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it)
              o = it;
            var i = 0;
            var F = function F2() {
            };
            return { s: F, n: function n() {
              if (i >= o.length)
                return { done: true };
              return { done: false, value: o[i++] };
            }, e: function e(_e) {
              throw _e;
            }, f: F };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function s2() {
          it = it.call(o);
        }, n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        }, e: function e(_e2) {
          didErr = true;
          err = _e2;
        }, f: function f() {
          try {
            if (!normalCompletion && it["return"] != null)
              it["return"]();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target2, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target2, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized(self);
      }
      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var Graph2 = /* @__PURE__ */ function(_React$Component) {
        _inherits(Graph3, _React$Component);
        var _super = _createSuper(Graph3);
        function Graph3(props) {
          var _this;
          _classCallCheck(this, Graph3);
          _this = _super.call(this, props);
          _defineProperty(_assertThisInitialized(_this), "_generateFocusAnimationProps", function() {
            if (_this.state.enableFocusAnimation) {
              if (_this.focusAnimationTimeout) {
                clearTimeout(_this.focusAnimationTimeout);
              }
              _this.focusAnimationTimeout = setTimeout(function() {
                return _this.setState({
                  enableFocusAnimation: false
                });
              }, _this.state.config.focusAnimationDuration * 1e3);
            }
            var transitionDuration = _this.state.enableFocusAnimation ? _this.state.config.focusAnimationDuration : 0;
            return {
              style: {
                transitionDuration: "".concat(transitionDuration, "s")
              },
              transform: _this.state.focusTransformation
            };
          });
          _defineProperty(_assertThisInitialized(_this), "_nodeIdFromEvent", function(e) {
            var target2 = e.sourceEvent.target;
            while (target2 && !target2.classList.contains("node")) {
              target2 = target2.parentElement;
            }
            return target2 && target2.id || null;
          });
          _defineProperty(_assertThisInitialized(_this), "makeClick", function(e) {
            var _MouseEvent;
            return new MouseEvent("click", (_MouseEvent = {
              altKey: e.altKey,
              ctrlKey: e.ctrlKey,
              shiftKey: e.shiftKey,
              metaKey: e.metaKey,
              bubbles: e.bubbles,
              button: e.button,
              buttons: e.buttons,
              clientX: e.clientX,
              clientY: e.clientY,
              screenX: e.screenX,
              screenY: e.screenY
            }, _defineProperty(_MouseEvent, "bubbles", e.bubbles), _defineProperty(_MouseEvent, "cancelable", e.cancelable), _defineProperty(_MouseEvent, "composed", e.composed), _defineProperty(_MouseEvent, "view", e.view), _MouseEvent));
          });
          _defineProperty(_assertThisInitialized(_this), "_onDragEnd", function(e) {
            if (_this.nodeMouseDown && !_this.isDraggingNode) {
              var click = _this.makeClick(e.sourceEvent);
              _this.isDraggingNode = false;
              _this.nodeMouseDown = null;
              _this.allowNodeClick = true;
              e.sourceEvent.target.dispatchEvent(click);
              _this.allowNodeClick = false;
              return;
            }
            _this.isDraggingNode = false;
            _this.nodeMouseDown = null;
            if (_this.state.draggedNodes) {
              _this.state.draggedNodes.forEach(function(node) {
                _this.onNodePositionChange(node);
              });
              _this._tick({
                draggedNodes: null
              });
            }
            !_this.state.config.staticGraph && _this.state.config.automaticRearrangeAfterDropNode && _this.state.simulation.alphaTarget(_this.state.config.d3.alphaTarget).restart();
          });
          _defineProperty(_assertThisInitialized(_this), "_onDragMove", function(e) {
            if (_this.nodeMouseDown) {
              var delta = Math.pow(e.x - _this.nodeMouseDown.x, 2) + Math.pow(e.y - _this.nodeMouseDown.y, 2);
              if (!_this.isDraggingNode && delta > 30) {
                var id10 = _this._nodeIdFromEvent(e);
                var draggedNode = _this.state.nodes[id10];
                _this.isDraggingNode = true;
                if (!_this.selection.nodeIsSelected(id10)) {
                  var oldSelection = _this.selection.freeze();
                  if (!e.sourceEvent.shiftKey) {
                    _this.selection.clear();
                  }
                  _this.selection.addNode(id10);
                  _this.onSelectionChange(oldSelection, _this.selection.freeze());
                }
              }
            }
            if (!_this.state.config.staticGraph && _this.isDraggingNode) {
              var ids = Array.from(_this.selection.nodes);
              var draggedNodes = ids.flatMap(function(id11) {
                var draggedNode2 = _this.state.nodes[id11];
                draggedNode2.oldX = draggedNode2.x;
                draggedNode2.oldY = draggedNode2.y;
                var newX = draggedNode2.x + e.dx;
                var newY = draggedNode2.y + e.dy;
                var shouldUpdateNode = !_this.state.config.bounded || (0, _graph3.isPositionInBounds)({
                  x: newX,
                  y: newY
                }, _this.state);
                if (shouldUpdateNode) {
                  draggedNode2.x = newX;
                  draggedNode2.y = newY;
                  draggedNode2["fx"] = draggedNode2.x;
                  draggedNode2["fy"] = draggedNode2.y;
                  return [draggedNode2];
                } else {
                  return [];
                }
              });
              _this._tick({
                draggedNodes
              });
            }
          });
          _defineProperty(_assertThisInitialized(_this), "_onDragStart", function(e) {
            _this.nodeMouseDown = e.sourceEvent;
            _this.isDraggingNode = false;
            _this.pauseSimulation();
            if (_this.state.enableFocusAnimation) {
              _this.setState({
                enableFocusAnimation: false
              });
            }
          });
          _defineProperty(_assertThisInitialized(_this), "_setNodeHighlightedValue", function(id10) {
            var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            return _this._tick((0, _graph3.updateNodeHighlightedValue)(_this.state.nodes, _this.state.links, _this.state.config, id10, value));
          });
          _defineProperty(_assertThisInitialized(_this), "_tick", function() {
            var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var cb = arguments.length > 1 ? arguments[1] : void 0;
            return cb ? _this.setState(state, cb) : _this.setState(state);
          });
          _defineProperty(_assertThisInitialized(_this), "_zoomEq", function(z1, z2) {
            return z1 && z2 && z1.x !== null && z1.x !== void 0 && z1.y !== null && z1.y !== void 0 && z1.k !== null && z1.k !== void 0 && z1.x === z2.x && z1.y === z2.y && z1.k === z2.k;
          });
          _defineProperty(_assertThisInitialized(_this), "_zoomConfig", function() {
            var selector = (0, _d3Selection.select)("#".concat(_this.state.id, "-").concat(_graph["default"].GRAPH_WRAPPER_ID));
            _this.zoomObject = (0, _d3Zoom.zoom)().scaleExtent([_this.state.config.minZoom, _this.state.config.maxZoom]);
            if (!_this.state.config.freezeAllDragEvents) {
              _this.zoomObject.on("zoom", function(e) {
                _this._zoomed(e);
                _this.onGraphMouseMove(e);
              }).on("start", _this.onGraphMouseDown).on("end", _this.onGraphMouseUp);
            }
            if (_this.state.config.initialZoom !== null) {
              _this.zoomObject.scaleTo(selector, _this.state.config.initialZoom);
            } else if (_this.state.transform && !_this._zoomEq(_this.state.transform, _this.state.previousZoom)) {
              _this.zoomObject.transform(selector, _this.state.transform);
            }
            selector.call(_this.zoomObject).on("dblclick.zoom", null);
          });
          _defineProperty(_assertThisInitialized(_this), "_zoomed_setState", (0, _utils.debounce)(function(state) {
            _this.setState(state);
          }));
          _defineProperty(_assertThisInitialized(_this), "_zoomed", function(e) {
            if (!_this.allowPanAndZoom) {
              return;
            }
            var transform3 = e.transform;
            (0, _d3Selection.selectAll)("#".concat(_this.state.id, "-").concat(_graph["default"].GRAPH_CONTAINER_ID)).attr("transform", transform3);
            var majk = _this.state.config.grid.majorStep * transform3.k;
            var t = "translate(" + (transform3.x % majk - majk) + "," + (transform3.y % majk - majk) + ") scale(" + transform3.k + ")";
            (0, _d3Selection.selectAll)("#".concat(_this.state.id, "-").concat(_graph["default"].GRAPH_GRID_ID)).attr("transform", t);
            var newZoom = !_this._zoomEq(_this.state.previousZoom, transform3);
            if (_this.debouncedOnZoomChange && newZoom && !_this.state.config.panAndZoom) {
              _this.debouncedOnZoomChange(_this.state.previousZoom, transform3);
              _this._zoomed_setState({
                transform: transform3,
                previousZoom: transform3
              });
            } else if (newZoom) {
              _this._zoomed_setState({
                transform: transform3
              });
            } else if (_this.state.previousZoom === void 0) {
              _this.setState({
                previousZoom: transform3
              });
            }
          });
          _defineProperty(_assertThisInitialized(_this), "isGraphMouseEvent", function(e) {
            var _e$target, _e$target$attributes, _e$target$attributes$, _e$target2, _e$target2$parentElem;
            var tagName = e.target && e.target.tagName;
            var name3 = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$attributes = _e$target.attributes) === null || _e$target$attributes === void 0 ? void 0 : (_e$target$attributes$ = _e$target$attributes.name) === null || _e$target$attributes$ === void 0 ? void 0 : _e$target$attributes$.value;
            var svgContainerName = "svg-container-".concat(_this.state.id);
            var svgGridId = "".concat(_this.state.id, "-").concat(_graph["default"].GRAPH_GRID_ID);
            return tagName.toUpperCase() === "SVG" && name3 === svgContainerName || tagName.toUpperCase() === "LINE" && (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : (_e$target2$parentElem = _e$target2.parentElement) === null || _e$target2$parentElem === void 0 ? void 0 : _e$target2$parentElem.id) == svgGridId;
          });
          _defineProperty(_assertThisInitialized(_this), "updateSelectorRect", function(rect, start3, now3) {
            var bounds = document.getElementById("svg-container-".concat(_this.state.id)).getBoundingClientRect();
            var x5, y5, width, height;
            if (start3[0] > now3[0]) {
              x5 = now3[0];
              width = start3[0] - x5;
            } else {
              x5 = start3[0];
              width = now3[0] - x5;
            }
            if (start3[1] > now3[1]) {
              y5 = now3[1];
              height = start3[1] - y5;
            } else {
              y5 = start3[1];
              height = now3[1] - y5;
            }
            x5 = (x5 - _this.state.transform.x - bounds.left) / _this.state.transform.k;
            y5 = (y5 - _this.state.transform.y - bounds.top) / _this.state.transform.k;
            width = width / _this.state.transform.k;
            height = height / _this.state.transform.k;
            rect.setAttribute("x", x5);
            rect.setAttribute("y", y5);
            rect.setAttribute("width", width);
            rect.setAttribute("height", height);
            return [x5, y5, x5 + width, y5 + height];
          });
          _defineProperty(_assertThisInitialized(_this), "onGraphMouseUp", function(e) {
            if (!e.sourceEvent || e.sourceEvent.type !== "mouseup") {
              return;
            }
            var selection3 = (0, _d3Selection.select)("#".concat(_this.state.id, "-").concat(_graph["default"].GRAPH_WRAPPER_ID));
            if (_this.graphMouseDown && !_this.graphDragging) {
              var click = _this.makeClick(e.sourceEvent);
              _this.allowGraphClick = true;
              e.sourceEvent.target.dispatchEvent(click);
              _this.allowGraphClick = false;
            } else if (_this.graphMouseDown && _this.graphDragging) {
              if (_this.graphMouseDown.shiftKey) {
                var transform3 = _d3Zoom.zoomIdentity.translate(_this.state.transform.x, _this.state.transform.y).scale(_this.state.transform.k);
                selection3.call(_this.zoomObject.transform, transform3).call(_this.zoomObject);
                _this._zoomConfig();
                document.getElementById("".concat(_this.state.id, "-").concat(_graph["default"].GRAPH_CONTAINER_ID)).removeChild(_this.graphDragging.selectorBox);
              }
            }
            _this.allowPanAndZoom = true;
            _this.graphDragging = null;
            _this.graphMouseDown = null;
          });
          _defineProperty(_assertThisInitialized(_this), "onGraphMouseMove", function(e) {
            if (!e.sourceEvent || e.sourceEvent.type !== "mousemove") {
              return;
            }
            if (_this.graphMouseDown && !_this.graphDragging) {
              var delta = Math.pow(e.sourceEvent.x - _this.graphMouseDown.x, 2) + Math.pow(e.sourceEvent.y - _this.graphMouseDown.y, 2);
              if (delta > 30) {
                if (_this.graphMouseDown.shiftKey) {
                  _this.allowPanAndZoom = false;
                  var g = document.getElementById("".concat(_this.state.id, "-").concat(_graph["default"].GRAPH_CONTAINER_ID));
                  var selectorBox = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                  selectorBox.setAttribute("id", "".concat(_this.state.id, "-SELECTIONBOX"));
                  selectorBox.setAttribute("style", "fill:rgba(0, 0, 0, 0.1);");
                  _this.updateSelectorRect(selectorBox, (0, _d3Selection.pointer)(e), (0, _d3Selection.pointer)(e));
                  g.prepend(selectorBox);
                  _this.graphDragging = {
                    start: e,
                    startSelection: _this.selection.freeze(),
                    selectorBox
                  };
                } else {
                  _this.graphDragging = {
                    start: e,
                    startSelection: _this.selection.freeze()
                  };
                }
              }
            }
            if (_this.graphDragging && _this.graphMouseDown.shiftKey) {
              var bounds = _this.updateSelectorRect(_this.graphDragging.selectorBox, (0, _d3Selection.pointer)(_this.graphDragging.start), (0, _d3Selection.pointer)(e));
              var oldSelection = _this.selection.freeze();
              _this.selection.clear();
              _this.selection.addNodes(_this.graphDragging.startSelection.nodes);
              var selected2 = Object.values(_this.state.nodes).flatMap(function(node) {
                var inBounds = node.x >= bounds[0] && node.x <= bounds[2] && node.y >= bounds[1] && node.y <= bounds[3];
                return inBounds ? [node.id] : [];
              });
              _this.selection.addNodes(selected2);
              _this.onSelectionChange(oldSelection, _this.selection.freeze());
            }
          });
          _defineProperty(_assertThisInitialized(_this), "onGraphMouseDown", function(e) {
            if (e.sourceEvent && e.sourceEvent.type === "mousedown" && _this.isGraphMouseEvent(e.sourceEvent)) {
              _this.graphMouseDown = e.sourceEvent;
              _this.graphDragging = null;
              if (e.sourceEvent.shiftKey) {
                _this.allowPanAndZoom = false;
              }
            }
          });
          _defineProperty(_assertThisInitialized(_this), "onClickGraph", function(e) {
            if (!_this.allowGraphClick) {
              return;
            }
            if (_this.state.enableFocusAnimation) {
              _this.setState({
                enableFocusAnimation: false
              });
            }
            if (_this.isGraphMouseEvent(e)) {
              _this.props.onClickGraph && _this.props.onClickGraph(e);
              if (!e.shiftKey) {
                var oldSelection = _this.selection.freeze();
                _this.selection.clear();
                _this.onSelectionChange(oldSelection, _this.selection.freeze());
              }
            }
          });
          _defineProperty(_assertThisInitialized(_this), "onClickNode", function(event, clickedNodeId) {
            if (!_this.allowNodeClick) {
              return;
            }
            var clickedNode = _this.state.nodes[clickedNodeId];
            if (!_this.nodeClickTimer) {
              var ttl = _this.props.onDoubleClickNode ? _graph["default"].TTL_DOUBLE_CLICK_IN_MS : 0;
              _this.nodeClickTimer = setTimeout(function() {
                if (_this.state.config.collapsible) {
                  var leafConnections = (0, _collapse.getTargetLeafConnections)(clickedNodeId, _this.state.links, _this.state.config);
                  var links2 = (0, _collapse.toggleLinksMatrixConnections)(_this.state.links, leafConnections, _this.state.config);
                  var d3Links = (0, _collapse.toggleLinksConnections)(_this.state.d3Links, links2);
                  var firstLeaf = leafConnections === null || leafConnections === void 0 ? void 0 : leafConnections["0"];
                  var isExpanding = false;
                  if (firstLeaf) {
                    var visibility = links2[firstLeaf.source][firstLeaf.target];
                    isExpanding = visibility === 1;
                  }
                  _this._tick({
                    links: links2,
                    d3Links
                  }, function() {
                    var oldSelection2 = _this.selection.freeze();
                    if (!event.shiftKey) {
                      _this.selection.clear();
                    }
                    _this.selection.toggleNode(clickedNodeId);
                    _this.onSelectionChange(oldSelection2, _this.selection.freeze());
                    _this.props.onClickNode && _this.props.onClickNode(event, clickedNodeId, clickedNode);
                    if (isExpanding) {
                      _this._graphNodeDragConfig();
                    }
                  });
                } else {
                  var oldSelection = _this.selection.freeze();
                  if (!event.shiftKey) {
                    _this.selection.clear();
                  }
                  _this.selection.toggleNode(clickedNodeId);
                  _this.onSelectionChange(oldSelection, _this.selection.freeze());
                  _this.props.onClickNode && _this.props.onClickNode(event, clickedNodeId, clickedNode);
                }
                _this.nodeClickTimer = null;
              }, ttl);
            } else {
              _this.props.onDoubleClickNode && _this.props.onDoubleClickNode(event, clickedNodeId, clickedNode);
              _this.nodeClickTimer = clearTimeout(_this.nodeClickTimer);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "onRightClickNode", function(event, id10) {
            var clickedNode = _this.state.nodes[id10];
            _this.props.onRightClickNode && _this.props.onRightClickNode(event, id10, clickedNode);
          });
          _defineProperty(_assertThisInitialized(_this), "onMouseOverNode", function(event, id10) {
            if (_this.isDraggingNode) {
              return;
            }
            var clickedNode = _this.state.nodes[id10];
            _this.props.onMouseOverNode && _this.props.onMouseOverNode(event, id10, clickedNode);
            _this.state.config.nodeHighlightBehavior && _this._setNodeHighlightedValue(id10, true);
          });
          _defineProperty(_assertThisInitialized(_this), "onMouseOutNode", function(event, id10) {
            if (_this.isDraggingNode) {
              return;
            }
            var clickedNode = _this.state.nodes[id10];
            _this.props.onMouseOutNode && _this.props.onMouseOutNode(event, id10, clickedNode);
            _this.state.config.nodeHighlightBehavior && _this._setNodeHighlightedValue(id10, false);
          });
          _defineProperty(_assertThisInitialized(_this), "onClickLink", function(event, link2) {
            var oldSelection = _this.selection.freeze();
            if (!event.shiftKey) {
              _this.selection.clear();
            }
            _this.selection.toggleLink(link2.id);
            _this.onSelectionChange(oldSelection, _this.selection.freeze());
            _this.props.onClickLink && _this.props.onClickLink(link2.source, link2.target);
          });
          _defineProperty(_assertThisInitialized(_this), "onMouseOverLink", function(event, source2, target2) {
            _this.props.onMouseOverLink && _this.props.onMouseOverLink(event, source2, target2);
            if (_this.state.config.linkHighlightBehavior) {
              var highlightedLink = {
                source: source2,
                target: target2
              };
              _this._tick({
                highlightedLink
              });
            }
          });
          _defineProperty(_assertThisInitialized(_this), "onMouseOutLink", function(event, source2, target2) {
            _this.props.onMouseOutLink && _this.props.onMouseOutLink(source2, target2);
            if (_this.state.config.linkHighlightBehavior) {
              var highlightedLink = void 0;
              _this._tick({
                highlightedLink
              });
            }
          });
          _defineProperty(_assertThisInitialized(_this), "onNodePositionChange", function(node) {
            if (!_this.props.onNodePositionChange) {
              return;
            }
            var id10 = node.id, x5 = node.x, y5 = node.y;
            _this.props.onNodePositionChange(id10, x5, y5);
          });
          _defineProperty(_assertThisInitialized(_this), "onSelectionChange", function(oldSelection, newSelection) {
            if (!_this.props.onSelectionChange) {
              return;
            }
            if (!_selection.Selection.equal(oldSelection, newSelection)) {
              _this.props.onSelectionChange(oldSelection, newSelection);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "onKeyUp", function(ev) {
            if (!_this.props.keybindings || !_this.state.activeKeybindings) {
              return;
            }
            function keyname(e) {
              var ctrl = e.ctrlKey ? "Ctrl+" : "";
              var alt = e.altKey ? "Alt+" : "";
              var shift = e.shiftKey ? "Shift+" : "";
              var letter = e.key;
              return ctrl + alt + shift + letter;
            }
            var x5 = (_this.mousePosition[0] - _this.state.transform.x) / _this.state.transform.k;
            var y5 = (_this.mousePosition[1] - _this.state.transform.y) / _this.state.transform.k;
            (_this.props.keybindings[keyname(ev)] || function(_) {
              return;
            })(ev, x5, y5);
          });
          _defineProperty(_assertThisInitialized(_this), "enableKeybindings", function() {
            document.querySelector("#svg-container-".concat(_this.state.id)).focus();
            _this.setState({
              activeKeybindings: true
            });
          });
          _defineProperty(_assertThisInitialized(_this), "disableKeybindings", function() {
            document.querySelector("#svg-container-".concat(_this.state.id)).blur();
            _this.setState({
              activeKeybindings: false
            });
          });
          _defineProperty(_assertThisInitialized(_this), "updateMousePosition", function(event) {
            _this.mousePosition = (0, _d3Selection.pointer)(event);
          });
          _defineProperty(_assertThisInitialized(_this), "pauseSimulation", function() {
            return _this.state.simulation.stop();
          });
          _defineProperty(_assertThisInitialized(_this), "resetNodesPositions", function() {
            if (!_this.state.config.staticGraph) {
              var initialNodesState = (0, _graph3.initializeNodes)(_this.props.data.nodes);
              for (var nodeId in _this.state.nodes) {
                var node = _this.state.nodes[nodeId];
                if (node.fx && node.fy) {
                  Reflect.deleteProperty(node, "fx");
                  Reflect.deleteProperty(node, "fy");
                }
                if (nodeId in initialNodesState) {
                  var initialNode = initialNodesState[nodeId];
                  node.x = initialNode.x;
                  node.y = initialNode.y;
                }
              }
              _this.state.simulation.alphaTarget(_this.state.config.d3.alphaTarget).restart();
              _this._tick();
            }
          });
          _defineProperty(_assertThisInitialized(_this), "restartSimulation", function() {
            return !_this.state.config.staticGraph && _this.state.simulation.restart();
          });
          if (!_this.props.id) {
            (0, _utils.throwErr)(_this.constructor.name, _err["default"].GRAPH_NO_ID_PROP);
          }
          _this.grid = /* @__PURE__ */ _react["default"].createRef();
          _this.container = /* @__PURE__ */ _react["default"].createRef();
          _this.focusAnimationTimeout = null;
          _this.nodeClickTimer = null;
          _this.nodeMouseDown = null;
          _this.isDraggingNode = false;
          _this.allowNodeClick = false;
          _this.graphMouseDown = null;
          _this.graphDragging = null;
          _this.allowGraphClick = false;
          _this.zoomObject = null;
          _this.allowPanAndZoom = true;
          _this.mousePosition = [0, 0];
          _this.selection = new _selection.Selection();
          if (_this.props.selection) {
            _this.selection.update(_this.props.selection);
          }
          _this.state = {
            activeKeybindings: false
          };
          _this.state = (0, _graph3.initializeGraphState)(_this.props, _this.state);
          _this.debouncedOnZoomChange = _this.props.onZoomChange ? (0, _utils.debounce)(_this.props.onZoomChange, 100) : null;
          return _this;
        }
        _createClass(Graph3, [{
          key: "_graphLinkForceConfig",
          value: function _graphLinkForceConfig() {
            var forceLink = (0, _d3Force.forceLink)(this.state.d3Links).id(function(l) {
              return l.id;
            }).distance(this.state.config.d3.linkLength).strength(this.state.config.d3.linkStrength);
            this.state.simulation.force(_graph["default"].LINK_CLASS_NAME, forceLink);
          }
        }, {
          key: "_graphNodeDragConfig",
          value: function _graphNodeDragConfig() {
            var customNodeDrag = (0, _d3Drag.drag)().on("start", this._onDragStart).on("drag", this._onDragMove).on("end", this._onDragEnd);
            (0, _d3Selection.select)("#".concat(this.state.id, "-").concat(_graph["default"].GRAPH_WRAPPER_ID)).selectAll(".node").call(customNodeDrag);
          }
        }, {
          key: "_graphBindD3ToReactComponent",
          value: function _graphBindD3ToReactComponent() {
            var _this2 = this;
            if (!this.state.config.d3.disableLinkForce) {
              this.state.simulation.nodes(this.state.d3Nodes).on("tick", function() {
                var newNodes = {};
                var _iterator = _createForOfIteratorHelper(_this2.state.d3Nodes), _step;
                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    var node = _step.value;
                    newNodes[node.id] = node;
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
                _this2._tick({
                  d3Nodes: _this2.state.d3Nodes,
                  nodes: newNodes
                });
              });
              this._graphLinkForceConfig();
            }
            if (!this.state.config.freezeAllDragEvents) {
              this._graphNodeDragConfig();
            }
          }
        }, {
          key: "_mouseConfig",
          value: function _mouseConfig() {
            (0, _d3Selection.select)("#svg-container-".concat(this.state.id)).on("mousemove", this.updateMousePosition).on("mouseenter", this.enableKeybindings).on("mouseleave", this.disableKeybindings);
          }
        }, {
          key: "UNSAFE_componentWillReceiveProps",
          value: function UNSAFE_componentWillReceiveProps(nextProps) {
            var _checkForGraphElement = (0, _graph3.checkForGraphElementsChanges)(nextProps, this.state), graphElementsUpdated = _checkForGraphElement.graphElementsUpdated, newGraphElements = _checkForGraphElement.newGraphElements;
            var state = graphElementsUpdated ? (0, _graph3.initializeGraphState)(nextProps, this.state) : this.state;
            var newConfig = nextProps.config || {};
            var _checkForGraphConfigC = (0, _graph3.checkForGraphConfigChanges)(nextProps, this.state), configUpdated = _checkForGraphConfigC.configUpdated, d3ConfigUpdated = _checkForGraphConfigC.d3ConfigUpdated;
            var config = configUpdated ? (0, _utils.merge)(_graph2["default"], newConfig) : this.state.config;
            newGraphElements && this.pauseSimulation();
            var moveTo = this._zoomEq(nextProps.viewTransform, this.state.transform) ? void 0 : nextProps.viewTransform;
            var zoomUpdated = moveTo !== void 0 || configUpdated || d3ConfigUpdated;
            var transform3 = moveTo || this.state.transform;
            var showGrid = nextProps.showGrid;
            var focusedNodeId = nextProps.data.focusedNodeId;
            var d3FocusedNode = this.state.d3Nodes.find(function(node) {
              return "".concat(node.id) === "".concat(focusedNodeId);
            });
            var containerElId = "".concat(this.state.id, "-").concat(_graph["default"].GRAPH_WRAPPER_ID);
            var focusTransformation = (0, _graph3.getCenterAndZoomTransformation)(d3FocusedNode, this.state.config, containerElId) || this.state.focusTransformation || moveTo;
            var enableFocusAnimation = this.props.data.focusedNodeId !== nextProps.data.focusedNodeId || moveTo;
            if (nextProps.onZoomChange) {
              this.debouncedOnZoomChange = (0, _utils.debounce)(nextProps.onZoomChange, 100);
            }
            if (nextProps.selection) {
              this.selection.update(nextProps.selection);
            }
            this.setState(_objectSpread(_objectSpread({}, state), {}, {
              showGrid,
              config,
              configUpdated,
              d3ConfigUpdated,
              newGraphElements,
              transform: transform3,
              zoomUpdated,
              focusedNodeId,
              enableFocusAnimation,
              focusTransformation
            }));
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate() {
            var shouldUpdateZoomConfig = false;
            var shouldPause = this.state.config.staticGraph || this.state.config.staticGraphWithDragAndDrop;
            if (shouldPause) {
              this.pauseSimulation();
            }
            if (!this.state.config.staticGraph && (this.state.newGraphElements || this.state.d3ConfigUpdated)) {
              this._graphBindD3ToReactComponent();
              shouldUpdateZoomConfig = true;
              if (!this.state.config.staticGraphWithDragAndDrop) {
                this.restartSimulation();
              }
              this.setState({
                newGraphElements: false,
                d3ConfigUpdated: false
              });
            } else if (this.state.configUpdated) {
              shouldUpdateZoomConfig = true;
              this._graphNodeDragConfig();
            }
            if (this.props.showGrid) {
              this._drawGrid(this.state.config.grid);
            } else {
              this._destroyGrid();
            }
            if (this.state.configUpdated) {
              shouldUpdateZoomConfig = true;
              this.setState({
                configUpdated: false
              });
            }
            if (this.state.zoomUpdated) {
              shouldUpdateZoomConfig = true;
              this.setState({
                zoomUpdated: false
              });
            }
            if (shouldUpdateZoomConfig) {
              this._zoomConfig();
            }
          }
        }, {
          key: "componentDidMount",
          value: function componentDidMount() {
            if (!this.state.config.staticGraph) {
              this._graphBindD3ToReactComponent();
            }
            if (this.props.showGrid) {
              this._drawGrid(this.state.config.grid);
            }
            this._zoomConfig();
            this._mouseConfig();
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.pauseSimulation();
            if (this.nodeClickTimer) {
              clearTimeout(this.nodeClickTimer);
              this.nodeClickTimer = null;
            }
            if (this.focusAnimationTimeout) {
              clearTimeout(this.focusAnimationTimeout);
              this.focusAnimationTimeout = null;
            }
          }
        }, {
          key: "_drawGrid",
          value: function _drawGrid(gridCfg) {
            var container = this.container.current;
            var grid = (0, _d3Selection.select)("#" + this.grid.current.id).selectAll("line");
            var height = container.offsetHeight / this.state.config.minZoom;
            var width = container.offsetWidth / this.state.config.minZoom;
            var overflow = gridCfg.majorStep / this.state.config.minZoom;
            var make5 = function make6(fill2, span, step, major, minor, color3, width2) {
              var count2 = Math.ceil((fill2 + 2 * overflow) / step);
              var arr = (0, _d3Array.range)(0, count2 + 1);
              var gridView = grid.data(arr).enter();
              gridView.append("line").attr(major + "1", function(d) {
                return d * step;
              }).attr(major + "2", function(d) {
                return d * step;
              }).attr(minor + "1", -overflow).attr(minor + "2", span + overflow).style("stroke", color3).style("stroke-width", width2);
            };
            make5(width, height, gridCfg.minorStep, "x", "y", gridCfg.minorColor, gridCfg.minorWidth);
            make5(height, width, gridCfg.minorStep, "y", "x", gridCfg.minorColor, gridCfg.minorWidth);
            make5(width, height, gridCfg.majorStep, "x", "y", gridCfg.majorColor, gridCfg.majorWidth);
            make5(height, width, gridCfg.majorStep, "y", "x", gridCfg.majorColor, gridCfg.majorWidth);
          }
        }, {
          key: "_destroyGrid",
          value: function _destroyGrid() {
            (0, _d3Selection.select)("#" + this.grid.current.id).selectAll("line").remove();
          }
        }, {
          key: "render",
          value: function render() {
            var _renderGraph = (0, _graph4.renderGraph)(this.state.nodes, {
              onClickNode: this.onClickNode,
              onDoubleClickNode: this.onDoubleClickNode,
              onRightClickNode: this.onRightClickNode,
              onMouseOverNode: this.onMouseOverNode,
              onMouseOut: this.onMouseOutNode
            }, this.state.d3Links, this.state.links, {
              onClickLink: this.onClickLink,
              onRightClickLink: this.props.onRightClickLink,
              onMouseOverLink: this.onMouseOverLink,
              onMouseOutLink: this.onMouseOutLink
            }, this.state.config, this.state.highlightedNode, this.state.highlightedLink, this.state.transform.k, this.selection), nodes4 = _renderGraph.nodes, links2 = _renderGraph.links, defs = _renderGraph.defs;
            var svgStyle = {
              outline: "none",
              height: this.state.config.height,
              width: this.state.config.width
            };
            var containerProps = this._generateFocusAnimationProps();
            return /* @__PURE__ */ _react["default"].createElement("div", {
              id: "".concat(this.state.id, "-").concat(_graph["default"].GRAPH_WRAPPER_ID),
              style: this.props.style,
              ref: this.container
            }, /* @__PURE__ */ _react["default"].createElement("svg", {
              name: "svg-container-".concat(this.state.id),
              id: "svg-container-".concat(this.state.id),
              style: svgStyle,
              tabIndex: "0",
              onClick: this.onClickGraph,
              onKeyUp: this.onKeyUp
            }, defs, /* @__PURE__ */ _react["default"].createElement("g", {
              id: "".concat(this.state.id, "-").concat(_graph["default"].GRAPH_GRID_ID),
              ref: this.grid
            }), /* @__PURE__ */ _react["default"].createElement("g", _extends({
              id: "".concat(this.state.id, "-").concat(_graph["default"].GRAPH_CONTAINER_ID)
            }, containerProps), nodes4, links2)));
          }
        }]);
        return Graph3;
      }(_react["default"].Component);
      exports2["default"] = Graph2;
    }
  });
  var require_lib = __commonJS2({
    "../react-d3-graph/lib/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      Object.defineProperty(exports2, "Graph", {
        enumerable: true,
        get: function get18() {
          return _Graph["default"];
        }
      });
      Object.defineProperty(exports2, "Link", {
        enumerable: true,
        get: function get18() {
          return _Link["default"];
        }
      });
      Object.defineProperty(exports2, "Node", {
        enumerable: true,
        get: function get18() {
          return _Node["default"];
        }
      });
      var _Graph = _interopRequireDefault(require_Graph());
      var _Node = _interopRequireDefault(require_Node());
      var _Link = _interopRequireDefault(require_Link());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
    }
  });
  __export(exports, {
    T: () => T2,
    removeSubsumed: () => removeSubsumed
  });
  function sub(x5, offset, len) {
    var result = new Array(len);
    var j = 0;
    var i = offset;
    while (j < len) {
      result[j] = x5[i];
      j = j + 1 | 0;
      i = i + 1 | 0;
    }
    ;
    return result;
  }
  function app(_f, _args) {
    while (true) {
      var args = _args;
      var f = _f;
      var init_arity = f.length;
      var arity = init_arity === 0 ? 1 : init_arity;
      var len = args.length;
      var d = arity - len | 0;
      if (d === 0) {
        return f.apply(null, args);
      }
      if (d >= 0) {
        return function(f2, args2) {
          return function(x5) {
            return app(f2, args2.concat([x5]));
          };
        }(f, args);
      }
      _args = sub(args, arity, -d | 0);
      _f = f.apply(null, sub(args, 0, arity));
      continue;
    }
    ;
  }
  function _1(o, a0) {
    var arity = o.length;
    if (arity === 1) {
      return o(a0);
    } else {
      switch (arity) {
        case 1:
          return o(a0);
        case 2:
          return function(param) {
            return o(a0, param);
          };
        case 3:
          return function(param, param$1) {
            return o(a0, param, param$1);
          };
        case 4:
          return function(param, param$1, param$2) {
            return o(a0, param, param$1, param$2);
          };
        case 5:
          return function(param, param$1, param$2, param$3) {
            return o(a0, param, param$1, param$2, param$3);
          };
        case 6:
          return function(param, param$1, param$2, param$3, param$4) {
            return o(a0, param, param$1, param$2, param$3, param$4);
          };
        case 7:
          return function(param, param$1, param$2, param$3, param$4, param$5) {
            return o(a0, param, param$1, param$2, param$3, param$4, param$5);
          };
        default:
          return app(o, [a0]);
      }
    }
  }
  function __1(o) {
    var arity = o.length;
    if (arity === 1) {
      return o;
    } else {
      return function(a0) {
        return _1(o, a0);
      };
    }
  }
  function _2(o, a0, a1) {
    var arity = o.length;
    if (arity === 2) {
      return o(a0, a1);
    } else {
      switch (arity) {
        case 1:
          return app(o(a0), [a1]);
        case 2:
          return o(a0, a1);
        case 3:
          return function(param) {
            return o(a0, a1, param);
          };
        case 4:
          return function(param, param$1) {
            return o(a0, a1, param, param$1);
          };
        case 5:
          return function(param, param$1, param$2) {
            return o(a0, a1, param, param$1, param$2);
          };
        case 6:
          return function(param, param$1, param$2, param$3) {
            return o(a0, a1, param, param$1, param$2, param$3);
          };
        case 7:
          return function(param, param$1, param$2, param$3, param$4) {
            return o(a0, a1, param, param$1, param$2, param$3, param$4);
          };
        default:
          return app(o, [
            a0,
            a1
          ]);
      }
    }
  }
  function __2(o) {
    var arity = o.length;
    if (arity === 2) {
      return o;
    } else {
      return function(a0, a1) {
        return _2(o, a0, a1);
      };
    }
  }
  function _6(o, a0, a1, a22, a3, a4, a5) {
    var arity = o.length;
    if (arity === 6) {
      return o(a0, a1, a22, a3, a4, a5);
    } else {
      switch (arity) {
        case 1:
          return app(o(a0), [
            a1,
            a22,
            a3,
            a4,
            a5
          ]);
        case 2:
          return app(o(a0, a1), [
            a22,
            a3,
            a4,
            a5
          ]);
        case 3:
          return app(o(a0, a1, a22), [
            a3,
            a4,
            a5
          ]);
        case 4:
          return app(o(a0, a1, a22, a3), [
            a4,
            a5
          ]);
        case 5:
          return app(o(a0, a1, a22, a3, a4), [a5]);
        case 6:
          return o(a0, a1, a22, a3, a4, a5);
        case 7:
          return function(param) {
            return o(a0, a1, a22, a3, a4, a5, param);
          };
        default:
          return app(o, [
            a0,
            a1,
            a22,
            a3,
            a4,
            a5
          ]);
      }
    }
  }
  var for_in = function(o, foo) {
    for (var x5 in o) {
      foo(x5);
    }
  };
  var update_dummy = function(x5, y5) {
    var k2;
    if (Array.isArray(y5)) {
      for (k2 = 0; k2 < y5.length; ++k2) {
        x5[k2] = y5[k2];
      }
      if (y5.TAG !== void 0) {
        x5.TAG = y5.TAG;
      }
    } else {
      for (var k2 in y5) {
        x5[k2] = y5[k2];
      }
    }
  };
  function caml_equal(a3, b) {
    if (a3 === b) {
      return true;
    }
    var a_type = typeof a3;
    if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a3 === null) {
      return false;
    }
    var b_type = typeof b;
    if (a_type === "function" || b_type === "function") {
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "equal: functional value",
        Error: new Error()
      };
    }
    if (b_type === "number" || b_type === "undefined" || b === null) {
      return false;
    }
    var tag_a = a3.TAG | 0;
    var tag_b = b.TAG | 0;
    if (tag_a === 248) {
      return a3[1] === b[1];
    }
    if (tag_a === 251) {
      throw {
        RE_EXN_ID: "Invalid_argument",
        _1: "equal: abstract value",
        Error: new Error()
      };
    }
    if (tag_a !== tag_b) {
      return false;
    }
    var len_a = a3.length | 0;
    var len_b = b.length | 0;
    if (len_a === len_b) {
      if (Array.isArray(a3)) {
        var _i = 0;
        while (true) {
          var i = _i;
          if (i === len_a) {
            return true;
          }
          if (!caml_equal(a3[i], b[i])) {
            return false;
          }
          _i = i + 1 | 0;
          continue;
        }
        ;
      } else if (a3 instanceof Date && b instanceof Date) {
        return !(a3 > b || a3 < b);
      } else {
        var result = {
          contents: true
        };
        var do_key_a = function(key) {
          if (!b.hasOwnProperty(key)) {
            result.contents = false;
            return;
          }
        };
        var do_key_b = function(key) {
          if (!a3.hasOwnProperty(key) || !caml_equal(b[key], a3[key])) {
            result.contents = false;
            return;
          }
        };
        for_in(a3, do_key_a);
        if (result.contents) {
          for_in(b, do_key_b);
        }
        return result.contents;
      }
    } else {
      return false;
    }
  }
  function sub2(x5, offset, len) {
    var result = new Array(len);
    var j = 0;
    var i = offset;
    while (j < len) {
      result[j] = x5[i];
      j = j + 1 | 0;
      i = i + 1 | 0;
    }
    ;
    return result;
  }
  function app2(_f, _args) {
    while (true) {
      var args = _args;
      var f = _f;
      var init_arity = f.length;
      var arity = init_arity === 0 ? 1 : init_arity;
      var len = args.length;
      var d = arity - len | 0;
      if (d === 0) {
        return f.apply(null, args);
      }
      if (d >= 0) {
        return function(f2, args2) {
          return function(x5) {
            return app2(f2, args2.concat([x5]));
          };
        }(f, args);
      }
      _args = sub2(args, arity, -d | 0);
      _f = f.apply(null, sub2(args, 0, arity));
      continue;
    }
    ;
  }
  function _12(o, a0) {
    var arity = o.length;
    if (arity === 1) {
      return o(a0);
    } else {
      switch (arity) {
        case 1:
          return o(a0);
        case 2:
          return function(param) {
            return o(a0, param);
          };
        case 3:
          return function(param, param$1) {
            return o(a0, param, param$1);
          };
        case 4:
          return function(param, param$1, param$2) {
            return o(a0, param, param$1, param$2);
          };
        case 5:
          return function(param, param$1, param$2, param$3) {
            return o(a0, param, param$1, param$2, param$3);
          };
        case 6:
          return function(param, param$1, param$2, param$3, param$4) {
            return o(a0, param, param$1, param$2, param$3, param$4);
          };
        case 7:
          return function(param, param$1, param$2, param$3, param$4, param$5) {
            return o(a0, param, param$1, param$2, param$3, param$4, param$5);
          };
        default:
          return app2(o, [a0]);
      }
    }
  }
  function __12(o) {
    var arity = o.length;
    if (arity === 1) {
      return o;
    } else {
      return function(a0) {
        return _12(o, a0);
      };
    }
  }
  function _22(o, a0, a1) {
    var arity = o.length;
    if (arity === 2) {
      return o(a0, a1);
    } else {
      switch (arity) {
        case 1:
          return app2(o(a0), [a1]);
        case 2:
          return o(a0, a1);
        case 3:
          return function(param) {
            return o(a0, a1, param);
          };
        case 4:
          return function(param, param$1) {
            return o(a0, a1, param, param$1);
          };
        case 5:
          return function(param, param$1, param$2) {
            return o(a0, a1, param, param$1, param$2);
          };
        case 6:
          return function(param, param$1, param$2, param$3) {
            return o(a0, a1, param, param$1, param$2, param$3);
          };
        case 7:
          return function(param, param$1, param$2, param$3, param$4) {
            return o(a0, a1, param, param$1, param$2, param$3, param$4);
          };
        default:
          return app2(o, [
            a0,
            a1
          ]);
      }
    }
  }
  function __22(o) {
    var arity = o.length;
    if (arity === 2) {
      return o;
    } else {
      return function(a0, a1) {
        return _22(o, a0, a1);
      };
    }
  }
  function _3(o, a0, a1, a22) {
    var arity = o.length;
    if (arity === 3) {
      return o(a0, a1, a22);
    } else {
      switch (arity) {
        case 1:
          return app2(o(a0), [
            a1,
            a22
          ]);
        case 2:
          return app2(o(a0, a1), [a22]);
        case 3:
          return o(a0, a1, a22);
        case 4:
          return function(param) {
            return o(a0, a1, a22, param);
          };
        case 5:
          return function(param, param$1) {
            return o(a0, a1, a22, param, param$1);
          };
        case 6:
          return function(param, param$1, param$2) {
            return o(a0, a1, a22, param, param$1, param$2);
          };
        case 7:
          return function(param, param$1, param$2, param$3) {
            return o(a0, a1, a22, param, param$1, param$2, param$3);
          };
        default:
          return app2(o, [
            a0,
            a1,
            a22
          ]);
      }
    }
  }
  function __3(o) {
    var arity = o.length;
    if (arity === 3) {
      return o;
    } else {
      return function(a0, a1, a22) {
        return _3(o, a0, a1, a22);
      };
    }
  }
  function MakeComparable(M) {
    var cmp12 = M.cmp;
    var cmp$1 = __22(cmp12);
    return {
      cmp: cmp$1
    };
  }
  function some(x5) {
    if (x5 === void 0) {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: 0
      };
    } else if (x5 !== null && x5.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: x5.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
      };
    } else {
      return x5;
    }
  }
  function undefined_to_opt(x5) {
    if (x5 === void 0) {
      return;
    } else {
      return some(x5);
    }
  }
  function valFromOption(x5) {
    if (!(x5 !== null && x5.BS_PRIVATE_NESTED_SOME_NONE !== void 0)) {
      return x5;
    }
    var depth = x5.BS_PRIVATE_NESTED_SOME_NONE;
    if (depth === 0) {
      return;
    } else {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
      };
    }
  }
  function entries(dict) {
    var keys = Object.keys(dict);
    var l = keys.length;
    var values = new Array(l);
    for (var i = 0; i < l; ++i) {
      var key = keys[i];
      values[i] = [
        key,
        dict[key]
      ];
    }
    return values;
  }
  function fromList(entries2) {
    var dict = {};
    var _param = entries2;
    while (true) {
      var param = _param;
      if (!param) {
        return dict;
      }
      var match2 = param.hd;
      dict[match2[0]] = match2[1];
      _param = param.tl;
      continue;
    }
    ;
  }
  function decodeString(json) {
    if (typeof json === "string") {
      return json;
    }
  }
  function decodeNumber(json) {
    if (typeof json === "number") {
      return json;
    }
  }
  function decodeObject(json) {
    if (typeof json === "object" && !Array.isArray(json) && json !== null) {
      return some(json);
    }
  }
  function decodeArray(json) {
    if (Array.isArray(json)) {
      return json;
    }
  }
  function decodeBoolean(json) {
    if (typeof json === "boolean") {
      return json;
    }
  }
  function caml_int_compare2(x5, y5) {
    if (x5 < y5) {
      return -1;
    } else if (x5 === y5) {
      return 0;
    } else {
      return 1;
    }
  }
  function caml_bool_compare2(x5, y5) {
    if (x5) {
      if (y5) {
        return 0;
      } else {
        return 1;
      }
    } else if (y5) {
      return -1;
    } else {
      return 0;
    }
  }
  function caml_string_compare2(s1, s2) {
    if (s1 === s2) {
      return 0;
    } else if (s1 < s2) {
      return -1;
    } else {
      return 1;
    }
  }
  function get(arr, i) {
    if (i >= 0 && i < arr.length) {
      return some(arr[i]);
    }
  }
  function getExn(arr, i) {
    if (!(i >= 0 && i < arr.length)) {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "belt_Array.ml",
          27,
          4
        ],
        Error: new Error()
      };
    }
    return arr[i];
  }
  function set(arr, i, v) {
    if (i >= 0 && i < arr.length) {
      arr[i] = v;
      return true;
    } else {
      return false;
    }
  }
  function range(start3, finish) {
    var cut = finish - start3 | 0;
    if (cut < 0) {
      return [];
    }
    var arr = new Array(cut + 1 | 0);
    for (var i = 0; i <= cut; ++i) {
      arr[i] = start3 + i | 0;
    }
    return arr;
  }
  function concat(a1, a22) {
    var l1 = a1.length;
    var l2 = a22.length;
    var a1a2 = new Array(l1 + l2 | 0);
    for (var i = 0; i < l1; ++i) {
      a1a2[i] = a1[i];
    }
    for (var i$1 = 0; i$1 < l2; ++i$1) {
      a1a2[l1 + i$1 | 0] = a22[i$1];
    }
    return a1a2;
  }
  function concatMany(arrs) {
    var lenArrs = arrs.length;
    var totalLen = 0;
    for (var i = 0; i < lenArrs; ++i) {
      totalLen = totalLen + arrs[i].length | 0;
    }
    var result = new Array(totalLen);
    totalLen = 0;
    for (var j = 0; j < lenArrs; ++j) {
      var cur = arrs[j];
      for (var k2 = 0, k_finish = cur.length; k2 < k_finish; ++k2) {
        result[totalLen] = cur[k2];
        totalLen = totalLen + 1 | 0;
      }
    }
    return result;
  }
  function forEachU(a3, f) {
    for (var i = 0, i_finish = a3.length; i < i_finish; ++i) {
      f(a3[i]);
    }
  }
  function forEach(a3, f) {
    return forEachU(a3, __12(f));
  }
  function mapU(a3, f) {
    var l = a3.length;
    var r = new Array(l);
    for (var i = 0; i < l; ++i) {
      r[i] = f(a3[i]);
    }
    return r;
  }
  function map(a3, f) {
    return mapU(a3, __12(f));
  }
  function keepU(a3, f) {
    var l = a3.length;
    var r = new Array(l);
    var j = 0;
    for (var i = 0; i < l; ++i) {
      var v = a3[i];
      if (f(v)) {
        r[j] = v;
        j = j + 1 | 0;
      }
    }
    r.length = j;
    return r;
  }
  function keep(a3, f) {
    return keepU(a3, __12(f));
  }
  function keepWithIndexU(a3, f) {
    var l = a3.length;
    var r = new Array(l);
    var j = 0;
    for (var i = 0; i < l; ++i) {
      var v = a3[i];
      if (f(v, i)) {
        r[j] = v;
        j = j + 1 | 0;
      }
    }
    r.length = j;
    return r;
  }
  function keepWithIndex(a3, f) {
    return keepWithIndexU(a3, __22(f));
  }
  function keepMapU(a3, f) {
    var l = a3.length;
    var r = new Array(l);
    var j = 0;
    for (var i = 0; i < l; ++i) {
      var v = a3[i];
      var v$1 = f(v);
      if (v$1 !== void 0) {
        r[j] = valFromOption(v$1);
        j = j + 1 | 0;
      }
    }
    r.length = j;
    return r;
  }
  function keepMap(a3, f) {
    return keepMapU(a3, __12(f));
  }
  function reduceU(a3, x5, f) {
    var r = x5;
    for (var i = 0, i_finish = a3.length; i < i_finish; ++i) {
      r = f(r, a3[i]);
    }
    return r;
  }
  function reduce(a3, x5, f) {
    return reduceU(a3, x5, __22(f));
  }
  function reduceWithIndexU(a3, x5, f) {
    var r = x5;
    for (var i = 0, i_finish = a3.length; i < i_finish; ++i) {
      r = f(r, a3[i], i);
    }
    return r;
  }
  function reduceWithIndex(a3, x5, f) {
    return reduceWithIndexU(a3, x5, __3(f));
  }
  function everyU(arr, b) {
    var len = arr.length;
    var _i = 0;
    while (true) {
      var i = _i;
      if (i === len) {
        return true;
      }
      if (!b(arr[i])) {
        return false;
      }
      _i = i + 1 | 0;
      continue;
    }
    ;
  }
  function every(arr, f) {
    return everyU(arr, __12(f));
  }
  function someU(arr, b) {
    var len = arr.length;
    var _i = 0;
    while (true) {
      var i = _i;
      if (i === len) {
        return false;
      }
      if (b(arr[i])) {
        return true;
      }
      _i = i + 1 | 0;
      continue;
    }
    ;
  }
  function some2(arr, f) {
    return someU(arr, __12(f));
  }
  function sortedLengthAuxMore(xs, _prec, _acc, len, lt) {
    while (true) {
      var acc = _acc;
      var prec = _prec;
      if (acc >= len) {
        return acc;
      }
      var v = xs[acc];
      if (!lt(v, prec)) {
        return acc;
      }
      _acc = acc + 1 | 0;
      _prec = v;
      continue;
    }
    ;
  }
  function strictlySortedLengthU(xs, lt) {
    var len = xs.length;
    if (len === 0 || len === 1) {
      return len;
    }
    var x0 = xs[0];
    var x1 = xs[1];
    if (lt(x0, x1)) {
      var _prec = x1;
      var _acc = 2;
      while (true) {
        var acc = _acc;
        var prec = _prec;
        if (acc >= len) {
          return acc;
        }
        var v = xs[acc];
        if (!lt(prec, v)) {
          return acc;
        }
        _acc = acc + 1 | 0;
        _prec = v;
        continue;
      }
      ;
    } else if (lt(x1, x0)) {
      return -sortedLengthAuxMore(xs, x1, 2, len, lt) | 0;
    } else {
      return 1;
    }
  }
  function treeHeight(n) {
    if (n !== void 0) {
      return n.h;
    } else {
      return 0;
    }
  }
  function create(l, x5, d, r) {
    var hl = treeHeight(l);
    var hr = treeHeight(r);
    return {
      k: x5,
      v: d,
      h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0,
      l,
      r
    };
  }
  function singleton(x5, d) {
    return {
      k: x5,
      v: d,
      h: 1,
      l: void 0,
      r: void 0
    };
  }
  function heightGe(l, r) {
    if (r !== void 0) {
      if (l !== void 0) {
        return l.h >= r.h;
      } else {
        return false;
      }
    } else {
      return true;
    }
  }
  function updateValue(n, newValue) {
    if (n.v === newValue) {
      return n;
    } else {
      return {
        k: n.k,
        v: newValue,
        h: n.h,
        l: n.l,
        r: n.r
      };
    }
  }
  function bal(l, x5, d, r) {
    var hl = l !== void 0 ? l.h : 0;
    var hr = r !== void 0 ? r.h : 0;
    if (hl > (hr + 2 | 0)) {
      var ll = l.l;
      var lr = l.r;
      if (treeHeight(ll) >= treeHeight(lr)) {
        return create(ll, l.k, l.v, create(lr, x5, d, r));
      } else {
        return create(create(ll, l.k, l.v, lr.l), lr.k, lr.v, create(lr.r, x5, d, r));
      }
    }
    if (hr <= (hl + 2 | 0)) {
      return {
        k: x5,
        v: d,
        h: hl >= hr ? hl + 1 | 0 : hr + 1 | 0,
        l,
        r
      };
    }
    var rl = r.l;
    var rr = r.r;
    if (treeHeight(rr) >= treeHeight(rl)) {
      return create(create(l, x5, d, rl), r.k, r.v, rr);
    } else {
      return create(create(l, x5, d, rl.l), rl.k, rl.v, create(rl.r, r.k, r.v, rr));
    }
  }
  function removeMinAuxWithRef(n, kr2, vr) {
    var ln = n.l;
    if (ln !== void 0) {
      return bal(removeMinAuxWithRef(ln, kr2, vr), n.k, n.v, n.r);
    } else {
      kr2.contents = n.k;
      vr.contents = n.v;
      return n.r;
    }
  }
  function isEmpty(x5) {
    return x5 === void 0;
  }
  function forEachU2(_n, f) {
    while (true) {
      var n = _n;
      if (n === void 0) {
        return;
      }
      forEachU2(n.l, f);
      f(n.k, n.v);
      _n = n.r;
      continue;
    }
    ;
  }
  function mapU2(n, f) {
    if (n === void 0) {
      return;
    }
    var newLeft = mapU2(n.l, f);
    var newD = f(n.v);
    var newRight = mapU2(n.r, f);
    return {
      k: n.k,
      v: newD,
      h: n.h,
      l: newLeft,
      r: newRight
    };
  }
  function mapWithKeyU(n, f) {
    if (n === void 0) {
      return;
    }
    var key = n.k;
    var newLeft = mapWithKeyU(n.l, f);
    var newD = f(key, n.v);
    var newRight = mapWithKeyU(n.r, f);
    return {
      k: key,
      v: newD,
      h: n.h,
      l: newLeft,
      r: newRight
    };
  }
  function addMinElement(n, k2, v) {
    if (n !== void 0) {
      return bal(addMinElement(n.l, k2, v), n.k, n.v, n.r);
    } else {
      return singleton(k2, v);
    }
  }
  function addMaxElement(n, k2, v) {
    if (n !== void 0) {
      return bal(n.l, n.k, n.v, addMaxElement(n.r, k2, v));
    } else {
      return singleton(k2, v);
    }
  }
  function join(ln, v, d, rn) {
    if (ln === void 0) {
      return addMinElement(rn, v, d);
    }
    if (rn === void 0) {
      return addMaxElement(ln, v, d);
    }
    var lv = ln.k;
    var ld = ln.v;
    var lh = ln.h;
    var ll = ln.l;
    var lr = ln.r;
    var rv = rn.k;
    var rd = rn.v;
    var rh = rn.h;
    var rl = rn.l;
    var rr = rn.r;
    if (lh > (rh + 2 | 0)) {
      return bal(ll, lv, ld, join(lr, v, d, rn));
    } else if (rh > (lh + 2 | 0)) {
      return bal(join(ln, v, d, rl), rv, rd, rr);
    } else {
      return create(ln, v, d, rn);
    }
  }
  function concat2(t1, t2) {
    if (t1 === void 0) {
      return t2;
    }
    if (t2 === void 0) {
      return t1;
    }
    var kr2 = {
      contents: t2.k
    };
    var vr = {
      contents: t2.v
    };
    var t2r = removeMinAuxWithRef(t2, kr2, vr);
    return join(t1, kr2.contents, vr.contents, t2r);
  }
  function concatOrJoin(t1, v, d, t2) {
    if (d !== void 0) {
      return join(t1, v, valFromOption(d), t2);
    } else {
      return concat2(t1, t2);
    }
  }
  function keepMapU2(n, p) {
    if (n === void 0) {
      return;
    }
    var v = n.k;
    var d = n.v;
    var newLeft = keepMapU2(n.l, p);
    var pvd = p(v, d);
    var newRight = keepMapU2(n.r, p);
    if (pvd !== void 0) {
      return join(newLeft, v, valFromOption(pvd), newRight);
    } else {
      return concat2(newLeft, newRight);
    }
  }
  function lengthNode(n) {
    var l = n.l;
    var r = n.r;
    var sizeL = l !== void 0 ? lengthNode(l) : 0;
    var sizeR = r !== void 0 ? lengthNode(r) : 0;
    return (1 + sizeL | 0) + sizeR | 0;
  }
  function size(n) {
    if (n !== void 0) {
      return lengthNode(n);
    } else {
      return 0;
    }
  }
  function toListAux(_n, _accu) {
    while (true) {
      var accu = _accu;
      var n = _n;
      if (n === void 0) {
        return accu;
      }
      var k2 = n.k;
      var v = n.v;
      var l = n.l;
      var r = n.r;
      _accu = {
        hd: [
          k2,
          v
        ],
        tl: toListAux(r, accu)
      };
      _n = l;
      continue;
    }
    ;
  }
  function toList(s2) {
    return toListAux(s2, 0);
  }
  function fillArrayKey(_n, _i, arr) {
    while (true) {
      var i = _i;
      var n = _n;
      var v = n.k;
      var l = n.l;
      var r = n.r;
      var next = l !== void 0 ? fillArrayKey(l, i, arr) : i;
      arr[next] = v;
      var rnext = next + 1 | 0;
      if (r === void 0) {
        return rnext;
      }
      _i = rnext;
      _n = r;
      continue;
    }
    ;
  }
  function fillArrayValue(_n, _i, arr) {
    while (true) {
      var i = _i;
      var n = _n;
      var l = n.l;
      var r = n.r;
      var next = l !== void 0 ? fillArrayValue(l, i, arr) : i;
      arr[next] = n.v;
      var rnext = next + 1 | 0;
      if (r === void 0) {
        return rnext;
      }
      _i = rnext;
      _n = r;
      continue;
    }
    ;
  }
  function fillArray(_n, _i, arr) {
    while (true) {
      var i = _i;
      var n = _n;
      var l = n.l;
      var v = n.k;
      var r = n.r;
      var next = l !== void 0 ? fillArray(l, i, arr) : i;
      arr[next] = [
        v,
        n.v
      ];
      var rnext = next + 1 | 0;
      if (r === void 0) {
        return rnext;
      }
      _i = rnext;
      _n = r;
      continue;
    }
    ;
  }
  function toArray(n) {
    if (n === void 0) {
      return [];
    }
    var size11 = lengthNode(n);
    var v = new Array(size11);
    fillArray(n, 0, v);
    return v;
  }
  function keysToArray(n) {
    if (n === void 0) {
      return [];
    }
    var size11 = lengthNode(n);
    var v = new Array(size11);
    fillArrayKey(n, 0, v);
    return v;
  }
  function valuesToArray(n) {
    if (n === void 0) {
      return [];
    }
    var size11 = lengthNode(n);
    var v = new Array(size11);
    fillArrayValue(n, 0, v);
    return v;
  }
  function fromSortedArrayRevAux(arr, off, len) {
    switch (len) {
      case 0:
        return;
      case 1:
        var match2 = arr[off];
        return singleton(match2[0], match2[1]);
      case 2:
        var match_0 = arr[off];
        var match_1 = arr[off - 1 | 0];
        var match$1 = match_1;
        var match$2 = match_0;
        return {
          k: match$1[0],
          v: match$1[1],
          h: 2,
          l: singleton(match$2[0], match$2[1]),
          r: void 0
        };
      case 3:
        var match_0$1 = arr[off];
        var match_1$1 = arr[off - 1 | 0];
        var match_2 = arr[off - 2 | 0];
        var match$3 = match_2;
        var match$4 = match_1$1;
        var match$5 = match_0$1;
        return {
          k: match$4[0],
          v: match$4[1],
          h: 2,
          l: singleton(match$5[0], match$5[1]),
          r: singleton(match$3[0], match$3[1])
        };
      default:
        var nl = len / 2 | 0;
        var left = fromSortedArrayRevAux(arr, off, nl);
        var match$6 = arr[off - nl | 0];
        var right = fromSortedArrayRevAux(arr, (off - nl | 0) - 1 | 0, (len - nl | 0) - 1 | 0);
        return create(left, match$6[0], match$6[1], right);
    }
  }
  function fromSortedArrayAux(arr, off, len) {
    switch (len) {
      case 0:
        return;
      case 1:
        var match2 = arr[off];
        return singleton(match2[0], match2[1]);
      case 2:
        var match_0 = arr[off];
        var match_1 = arr[off + 1 | 0];
        var match$1 = match_1;
        var match$2 = match_0;
        return {
          k: match$1[0],
          v: match$1[1],
          h: 2,
          l: singleton(match$2[0], match$2[1]),
          r: void 0
        };
      case 3:
        var match_0$1 = arr[off];
        var match_1$1 = arr[off + 1 | 0];
        var match_2 = arr[off + 2 | 0];
        var match$3 = match_2;
        var match$4 = match_1$1;
        var match$5 = match_0$1;
        return {
          k: match$4[0],
          v: match$4[1],
          h: 2,
          l: singleton(match$5[0], match$5[1]),
          r: singleton(match$3[0], match$3[1])
        };
      default:
        var nl = len / 2 | 0;
        var left = fromSortedArrayAux(arr, off, nl);
        var match$6 = arr[off + nl | 0];
        var right = fromSortedArrayAux(arr, (off + nl | 0) + 1 | 0, (len - nl | 0) - 1 | 0);
        return create(left, match$6[0], match$6[1], right);
    }
  }
  function get2(_n, x5, cmp12) {
    while (true) {
      var n = _n;
      if (n === void 0) {
        return;
      }
      var v = n.k;
      var c3 = cmp12(x5, v);
      if (c3 === 0) {
        return some(n.v);
      }
      _n = c3 < 0 ? n.l : n.r;
      continue;
    }
    ;
  }
  function has(_n, x5, cmp12) {
    while (true) {
      var n = _n;
      if (n === void 0) {
        return false;
      }
      var v = n.k;
      var c3 = cmp12(x5, v);
      if (c3 === 0) {
        return true;
      }
      _n = c3 < 0 ? n.l : n.r;
      continue;
    }
    ;
  }
  function rotateWithLeftChild(k2) {
    var k1 = k2.l;
    k2.l = k1.r;
    k1.r = k2;
    var hlk2 = treeHeight(k2.l);
    var hrk2 = treeHeight(k2.r);
    k2.h = (hlk2 > hrk2 ? hlk2 : hrk2) + 1 | 0;
    var hlk1 = treeHeight(k1.l);
    var hk2 = k2.h;
    k1.h = (hlk1 > hk2 ? hlk1 : hk2) + 1 | 0;
    return k1;
  }
  function rotateWithRightChild(k1) {
    var k2 = k1.r;
    k1.r = k2.l;
    k2.l = k1;
    var hlk1 = treeHeight(k1.l);
    var hrk1 = treeHeight(k1.r);
    k1.h = (hlk1 > hrk1 ? hlk1 : hrk1) + 1 | 0;
    var hrk2 = treeHeight(k2.r);
    var hk1 = k1.h;
    k2.h = (hrk2 > hk1 ? hrk2 : hk1) + 1 | 0;
    return k2;
  }
  function doubleWithLeftChild(k3) {
    var x5 = k3.l;
    var v = rotateWithRightChild(x5);
    k3.l = v;
    return rotateWithLeftChild(k3);
  }
  function doubleWithRightChild(k2) {
    var x5 = k2.r;
    var v = rotateWithLeftChild(x5);
    k2.r = v;
    return rotateWithRightChild(k2);
  }
  function heightUpdateMutate(t) {
    var hlt = treeHeight(t.l);
    var hrt = treeHeight(t.r);
    t.h = (hlt > hrt ? hlt : hrt) + 1 | 0;
    return t;
  }
  function balMutate(nt) {
    var l = nt.l;
    var r = nt.r;
    var hl = treeHeight(l);
    var hr = treeHeight(r);
    if (hl > (2 + hr | 0)) {
      var ll = l.l;
      var lr = l.r;
      if (heightGe(ll, lr)) {
        return heightUpdateMutate(rotateWithLeftChild(nt));
      } else {
        return heightUpdateMutate(doubleWithLeftChild(nt));
      }
    }
    if (hr > (2 + hl | 0)) {
      var rl = r.l;
      var rr = r.r;
      if (heightGe(rr, rl)) {
        return heightUpdateMutate(rotateWithRightChild(nt));
      } else {
        return heightUpdateMutate(doubleWithRightChild(nt));
      }
    }
    nt.h = (hl > hr ? hl : hr) + 1 | 0;
    return nt;
  }
  function updateMutate(t, x5, data, cmp12) {
    if (t === void 0) {
      return singleton(x5, data);
    }
    var k2 = t.k;
    var c3 = cmp12(x5, k2);
    if (c3 === 0) {
      t.v = data;
      return t;
    }
    var l = t.l;
    var r = t.r;
    if (c3 < 0) {
      var ll = updateMutate(l, x5, data, cmp12);
      t.l = ll;
    } else {
      t.r = updateMutate(r, x5, data, cmp12);
    }
    return balMutate(t);
  }
  function fromArray(xs, cmp12) {
    var len = xs.length;
    if (len === 0) {
      return;
    }
    var next = strictlySortedLengthU(xs, function(param, param$1) {
      return cmp12(param[0], param$1[0]) < 0;
    });
    var result;
    if (next >= 0) {
      result = fromSortedArrayAux(xs, 0, next);
    } else {
      next = -next | 0;
      result = fromSortedArrayRevAux(xs, next - 1 | 0, next);
    }
    for (var i = next; i < len; ++i) {
      var match2 = xs[i];
      result = updateMutate(result, match2[0], match2[1], cmp12);
    }
    return result;
  }
  function set2(t, newK, newD, cmp12) {
    if (t === void 0) {
      return singleton(newK, newD);
    }
    var k2 = t.k;
    var c3 = cmp12(newK, k2);
    if (c3 === 0) {
      return updateValue(t, newD);
    }
    var l = t.l;
    var r = t.r;
    var v = t.v;
    if (c3 < 0) {
      return bal(set2(l, newK, newD, cmp12), k2, v, r);
    } else {
      return bal(l, k2, v, set2(r, newK, newD, cmp12));
    }
  }
  function updateU(t, newK, f, cmp12) {
    if (t !== void 0) {
      var k2 = t.k;
      var c3 = cmp12(newK, k2);
      if (c3 === 0) {
        var newD = f(some(t.v));
        if (newD !== void 0) {
          return updateValue(t, valFromOption(newD));
        }
        var l = t.l;
        var r = t.r;
        if (l === void 0) {
          return r;
        }
        if (r === void 0) {
          return l;
        }
        var kr2 = {
          contents: r.k
        };
        var vr = {
          contents: r.v
        };
        var r$1 = removeMinAuxWithRef(r, kr2, vr);
        return bal(l, kr2.contents, vr.contents, r$1);
      }
      var l$1 = t.l;
      var r$2 = t.r;
      var v = t.v;
      if (c3 < 0) {
        var ll = updateU(l$1, newK, f, cmp12);
        if (l$1 === ll) {
          return t;
        } else {
          return bal(ll, k2, v, r$2);
        }
      }
      var rr = updateU(r$2, newK, f, cmp12);
      if (r$2 === rr) {
        return t;
      } else {
        return bal(l$1, k2, v, rr);
      }
    }
    var newD$1 = f(void 0);
    if (newD$1 !== void 0) {
      return singleton(newK, valFromOption(newD$1));
    } else {
      return t;
    }
  }
  function removeAux0(n, x5, cmp12) {
    var v = n.k;
    var l = n.l;
    var r = n.r;
    var c3 = cmp12(x5, v);
    if (c3 === 0) {
      if (l === void 0) {
        return r;
      }
      if (r === void 0) {
        return l;
      }
      var kr2 = {
        contents: r.k
      };
      var vr = {
        contents: r.v
      };
      var r$1 = removeMinAuxWithRef(r, kr2, vr);
      return bal(l, kr2.contents, vr.contents, r$1);
    }
    if (c3 < 0) {
      if (l === void 0) {
        return n;
      }
      var ll = removeAux0(l, x5, cmp12);
      if (ll === l) {
        return n;
      } else {
        return bal(ll, v, n.v, r);
      }
    }
    if (r === void 0) {
      return n;
    }
    var rr = removeAux0(r, x5, cmp12);
    if (rr === r) {
      return n;
    } else {
      return bal(l, v, n.v, rr);
    }
  }
  function remove(n, x5, cmp12) {
    if (n !== void 0) {
      return removeAux0(n, x5, cmp12);
    }
  }
  function splitAuxPivot(n, x5, pres, cmp12) {
    var v = n.k;
    var d = n.v;
    var l = n.l;
    var r = n.r;
    var c3 = cmp12(x5, v);
    if (c3 === 0) {
      pres.contents = some(d);
      return [
        l,
        r
      ];
    }
    if (c3 < 0) {
      if (l === void 0) {
        return [
          void 0,
          n
        ];
      }
      var match2 = splitAuxPivot(l, x5, pres, cmp12);
      return [
        match2[0],
        join(match2[1], v, d, r)
      ];
    }
    if (r === void 0) {
      return [
        n,
        void 0
      ];
    }
    var match$1 = splitAuxPivot(r, x5, pres, cmp12);
    return [
      join(l, v, d, match$1[0]),
      match$1[1]
    ];
  }
  function mergeU(s1, s2, f, cmp12) {
    if (s1 === void 0) {
      if (s2 !== void 0) {
        return keepMapU2(s2, function(k2, v) {
          return f(k2, void 0, some(v));
        });
      } else {
        return;
      }
    }
    if (s2 === void 0) {
      return keepMapU2(s1, function(k2, v) {
        return f(k2, some(v), void 0);
      });
    }
    if (s1.h >= s2.h) {
      var v1 = s1.k;
      var d1 = s1.v;
      var l1 = s1.l;
      var r1 = s1.r;
      var d2 = {
        contents: void 0
      };
      var match2 = splitAuxPivot(s2, v1, d2, cmp12);
      var d2$1 = d2.contents;
      var newLeft = mergeU(l1, match2[0], f, cmp12);
      var newD = f(v1, some(d1), d2$1);
      var newRight = mergeU(r1, match2[1], f, cmp12);
      return concatOrJoin(newLeft, v1, newD, newRight);
    }
    var v2 = s2.k;
    var d2$2 = s2.v;
    var l2 = s2.l;
    var r2 = s2.r;
    var d1$1 = {
      contents: void 0
    };
    var match$1 = splitAuxPivot(s1, v2, d1$1, cmp12);
    var d1$2 = d1$1.contents;
    var newLeft$1 = mergeU(match$1[0], l2, f, cmp12);
    var newD$1 = f(v2, d1$2, some(d2$2));
    var newRight$1 = mergeU(match$1[1], r2, f, cmp12);
    return concatOrJoin(newLeft$1, v2, newD$1, newRight$1);
  }
  var isEmpty2 = isEmpty;
  var has2 = has;
  var forEachU3 = forEachU2;
  var size2 = size;
  var toList2 = toList;
  var toArray2 = toArray;
  var fromArray2 = fromArray;
  var keysToArray2 = keysToArray;
  var valuesToArray2 = valuesToArray;
  var get3 = get2;
  var mapU3 = mapU2;
  var mapWithKeyU2 = mapWithKeyU;
  function fromArray3(data, id10) {
    var cmp12 = id10.cmp;
    return {
      cmp: cmp12,
      data: fromArray2(data, cmp12)
    };
  }
  function remove2(m2, x5) {
    var odata = m2.data;
    var cmp12 = m2.cmp;
    var newData = remove(odata, x5, cmp12);
    if (newData === odata) {
      return m2;
    } else {
      return {
        cmp: cmp12,
        data: newData
      };
    }
  }
  function set3(m2, key, d) {
    var cmp12 = m2.cmp;
    return {
      cmp: cmp12,
      data: set2(m2.data, key, d, cmp12)
    };
  }
  function updateU2(m2, key, f) {
    var cmp12 = m2.cmp;
    return {
      cmp: cmp12,
      data: updateU(m2.data, key, f, cmp12)
    };
  }
  function update(m2, key, f) {
    return updateU2(m2, key, __12(f));
  }
  function mergeU2(s1, s2, f) {
    var cmp12 = s1.cmp;
    return {
      cmp: cmp12,
      data: mergeU(s1.data, s2.data, f, cmp12)
    };
  }
  function merge(s1, s2, f) {
    return mergeU2(s1, s2, __3(f));
  }
  function make(id10) {
    return {
      cmp: id10.cmp,
      data: void 0
    };
  }
  function isEmpty3(map14) {
    return isEmpty2(map14.data);
  }
  function forEach3(m2, f) {
    return forEachU3(m2.data, __22(f));
  }
  function mapU4(m2, f) {
    return {
      cmp: m2.cmp,
      data: mapU3(m2.data, f)
    };
  }
  function map3(m2, f) {
    return mapU4(m2, __12(f));
  }
  function mapWithKeyU3(m2, f) {
    return {
      cmp: m2.cmp,
      data: mapWithKeyU2(m2.data, f)
    };
  }
  function mapWithKey2(m2, f) {
    return mapWithKeyU3(m2, __22(f));
  }
  function size3(map14) {
    return size2(map14.data);
  }
  function toList3(map14) {
    return toList2(map14.data);
  }
  function toArray3(m2) {
    return toArray2(m2.data);
  }
  function keysToArray3(m2) {
    return keysToArray2(m2.data);
  }
  function valuesToArray3(m2) {
    return valuesToArray2(m2.data);
  }
  function get4(map14, x5) {
    return get3(map14.data, x5, map14.cmp);
  }
  function has3(map14, x5) {
    return has2(map14.data, x5, map14.cmp);
  }
  function create2(l, v, r) {
    var hl = l !== void 0 ? l.h : 0;
    var hr = r !== void 0 ? r.h : 0;
    return {
      v,
      h: (hl >= hr ? hl : hr) + 1 | 0,
      l,
      r
    };
  }
  function singleton2(x5) {
    return {
      v: x5,
      h: 1,
      l: void 0,
      r: void 0
    };
  }
  function heightGe2(l, r) {
    if (r !== void 0) {
      if (l !== void 0) {
        return l.h >= r.h;
      } else {
        return false;
      }
    } else {
      return true;
    }
  }
  function bal2(l, v, r) {
    var hl = l !== void 0 ? l.h : 0;
    var hr = r !== void 0 ? r.h : 0;
    if (hl > (hr + 2 | 0)) {
      var ll = l.l;
      var lr = l.r;
      if (heightGe2(ll, lr)) {
        return create2(ll, l.v, create2(lr, v, r));
      } else {
        return create2(create2(ll, l.v, lr.l), lr.v, create2(lr.r, v, r));
      }
    }
    if (hr <= (hl + 2 | 0)) {
      return {
        v,
        h: (hl >= hr ? hl : hr) + 1 | 0,
        l,
        r
      };
    }
    var rl = r.l;
    var rr = r.r;
    if (heightGe2(rr, rl)) {
      return create2(create2(l, v, rl), r.v, rr);
    } else {
      return create2(create2(l, v, rl.l), rl.v, create2(rl.r, r.v, rr));
    }
  }
  function removeMinAuxWithRef2(n, v) {
    var ln = n.l;
    if (ln !== void 0) {
      return bal2(removeMinAuxWithRef2(ln, v), n.v, n.r);
    } else {
      v.contents = n.v;
      return n.r;
    }
  }
  function isEmpty4(n) {
    return n === void 0;
  }
  function addMinElement2(n, v) {
    if (n !== void 0) {
      return bal2(addMinElement2(n.l, v), n.v, n.r);
    } else {
      return singleton2(v);
    }
  }
  function addMaxElement2(n, v) {
    if (n !== void 0) {
      return bal2(n.l, n.v, addMaxElement2(n.r, v));
    } else {
      return singleton2(v);
    }
  }
  function joinShared(ln, v, rn) {
    if (ln === void 0) {
      return addMinElement2(rn, v);
    }
    if (rn === void 0) {
      return addMaxElement2(ln, v);
    }
    var lh = ln.h;
    var rh = rn.h;
    if (lh > (rh + 2 | 0)) {
      return bal2(ln.l, ln.v, joinShared(ln.r, v, rn));
    } else if (rh > (lh + 2 | 0)) {
      return bal2(joinShared(ln, v, rn.l), rn.v, rn.r);
    } else {
      return create2(ln, v, rn);
    }
  }
  function concatShared(t1, t2) {
    if (t1 === void 0) {
      return t2;
    }
    if (t2 === void 0) {
      return t1;
    }
    var v = {
      contents: t2.v
    };
    var t2r = removeMinAuxWithRef2(t2, v);
    return joinShared(t1, v.contents, t2r);
  }
  function lengthNode2(n) {
    var l = n.l;
    var r = n.r;
    var sizeL = l !== void 0 ? lengthNode2(l) : 0;
    var sizeR = r !== void 0 ? lengthNode2(r) : 0;
    return (1 + sizeL | 0) + sizeR | 0;
  }
  function size4(n) {
    if (n !== void 0) {
      return lengthNode2(n);
    } else {
      return 0;
    }
  }
  function toListAux2(_n, _accu) {
    while (true) {
      var accu = _accu;
      var n = _n;
      if (n === void 0) {
        return accu;
      }
      _accu = {
        hd: n.v,
        tl: toListAux2(n.r, accu)
      };
      _n = n.l;
      continue;
    }
    ;
  }
  function toList4(s2) {
    return toListAux2(s2, 0);
  }
  function fillArray2(_n, _i, arr) {
    while (true) {
      var i = _i;
      var n = _n;
      var v = n.v;
      var l = n.l;
      var r = n.r;
      var next = l !== void 0 ? fillArray2(l, i, arr) : i;
      arr[next] = v;
      var rnext = next + 1 | 0;
      if (r === void 0) {
        return rnext;
      }
      _i = rnext;
      _n = r;
      continue;
    }
    ;
  }
  function toArray4(n) {
    if (n === void 0) {
      return [];
    }
    var size11 = lengthNode2(n);
    var v = new Array(size11);
    fillArray2(n, 0, v);
    return v;
  }
  function fromSortedArrayRevAux2(arr, off, len) {
    switch (len) {
      case 0:
        return;
      case 1:
        return singleton2(arr[off]);
      case 2:
        var x0 = arr[off];
        var x1 = arr[off - 1 | 0];
        return {
          v: x1,
          h: 2,
          l: singleton2(x0),
          r: void 0
        };
      case 3:
        var x0$1 = arr[off];
        var x1$1 = arr[off - 1 | 0];
        var x22 = arr[off - 2 | 0];
        return {
          v: x1$1,
          h: 2,
          l: singleton2(x0$1),
          r: singleton2(x22)
        };
      default:
        var nl = len / 2 | 0;
        var left = fromSortedArrayRevAux2(arr, off, nl);
        var mid = arr[off - nl | 0];
        var right = fromSortedArrayRevAux2(arr, (off - nl | 0) - 1 | 0, (len - nl | 0) - 1 | 0);
        return create2(left, mid, right);
    }
  }
  function fromSortedArrayAux2(arr, off, len) {
    switch (len) {
      case 0:
        return;
      case 1:
        return singleton2(arr[off]);
      case 2:
        var x0 = arr[off];
        var x1 = arr[off + 1 | 0];
        return {
          v: x1,
          h: 2,
          l: singleton2(x0),
          r: void 0
        };
      case 3:
        var x0$1 = arr[off];
        var x1$1 = arr[off + 1 | 0];
        var x22 = arr[off + 2 | 0];
        return {
          v: x1$1,
          h: 2,
          l: singleton2(x0$1),
          r: singleton2(x22)
        };
      default:
        var nl = len / 2 | 0;
        var left = fromSortedArrayAux2(arr, off, nl);
        var mid = arr[off + nl | 0];
        var right = fromSortedArrayAux2(arr, (off + nl | 0) + 1 | 0, (len - nl | 0) - 1 | 0);
        return create2(left, mid, right);
    }
  }
  function has4(_t, x5, cmp12) {
    while (true) {
      var t = _t;
      if (t === void 0) {
        return false;
      }
      var v = t.v;
      var c3 = cmp12(x5, v);
      if (c3 === 0) {
        return true;
      }
      _t = c3 < 0 ? t.l : t.r;
      continue;
    }
    ;
  }
  function subset(_s1, _s2, cmp12) {
    while (true) {
      var s2 = _s2;
      var s1 = _s1;
      if (s1 === void 0) {
        return true;
      }
      if (s2 === void 0) {
        return false;
      }
      var v1 = s1.v;
      var l1 = s1.l;
      var r1 = s1.r;
      var v2 = s2.v;
      var l2 = s2.l;
      var r2 = s2.r;
      var c3 = cmp12(v1, v2);
      if (c3 === 0) {
        if (!subset(l1, l2, cmp12)) {
          return false;
        }
        _s2 = r2;
        _s1 = r1;
        continue;
      }
      if (c3 < 0) {
        if (!subset(create2(l1, v1, void 0), l2, cmp12)) {
          return false;
        }
        _s1 = r1;
        continue;
      }
      if (!subset(create2(void 0, v1, r1), r2, cmp12)) {
        return false;
      }
      _s1 = l1;
      continue;
    }
    ;
  }
  function rotateWithLeftChild2(k2) {
    var k1 = k2.l;
    k2.l = k1.r;
    k1.r = k2;
    var n = k2.l;
    var hlk2 = n !== void 0 ? n.h : 0;
    var n$1 = k2.r;
    var hrk2 = n$1 !== void 0 ? n$1.h : 0;
    k2.h = (hlk2 > hrk2 ? hlk2 : hrk2) + 1 | 0;
    var n$2 = k1.l;
    var hlk1 = n$2 !== void 0 ? n$2.h : 0;
    var hk2 = k2.h;
    k1.h = (hlk1 > hk2 ? hlk1 : hk2) + 1 | 0;
    return k1;
  }
  function rotateWithRightChild2(k1) {
    var k2 = k1.r;
    k1.r = k2.l;
    k2.l = k1;
    var n = k1.l;
    var hlk1 = n !== void 0 ? n.h : 0;
    var n$1 = k1.r;
    var hrk1 = n$1 !== void 0 ? n$1.h : 0;
    k1.h = (hlk1 > hrk1 ? hlk1 : hrk1) + 1 | 0;
    var n$2 = k2.r;
    var hrk2 = n$2 !== void 0 ? n$2.h : 0;
    var hk1 = k1.h;
    k2.h = (hrk2 > hk1 ? hrk2 : hk1) + 1 | 0;
    return k2;
  }
  function doubleWithLeftChild2(k3) {
    var k3l = k3.l;
    var v = rotateWithRightChild2(k3l);
    k3.l = v;
    return rotateWithLeftChild2(k3);
  }
  function doubleWithRightChild2(k2) {
    var k2r = k2.r;
    var v = rotateWithLeftChild2(k2r);
    k2.r = v;
    return rotateWithRightChild2(k2);
  }
  function heightUpdateMutate2(t) {
    var n = t.l;
    var hlt = n !== void 0 ? n.h : 0;
    var n$1 = t.r;
    var hrt = n$1 !== void 0 ? n$1.h : 0;
    t.h = (hlt > hrt ? hlt : hrt) + 1 | 0;
    return t;
  }
  function balMutate2(nt) {
    var l = nt.l;
    var r = nt.r;
    var hl = l !== void 0 ? l.h : 0;
    var hr = r !== void 0 ? r.h : 0;
    if (hl > (2 + hr | 0)) {
      var ll = l.l;
      var lr = l.r;
      if (heightGe2(ll, lr)) {
        return heightUpdateMutate2(rotateWithLeftChild2(nt));
      } else {
        return heightUpdateMutate2(doubleWithLeftChild2(nt));
      }
    }
    if (hr > (2 + hl | 0)) {
      var rl = r.l;
      var rr = r.r;
      if (heightGe2(rr, rl)) {
        return heightUpdateMutate2(rotateWithRightChild2(nt));
      } else {
        return heightUpdateMutate2(doubleWithRightChild2(nt));
      }
    }
    nt.h = (hl > hr ? hl : hr) + 1 | 0;
    return nt;
  }
  function addMutate(cmp12, t, x5) {
    if (t === void 0) {
      return singleton2(x5);
    }
    var k2 = t.v;
    var c3 = cmp12(x5, k2);
    if (c3 === 0) {
      return t;
    }
    var l = t.l;
    var r = t.r;
    if (c3 < 0) {
      var ll = addMutate(cmp12, l, x5);
      t.l = ll;
    } else {
      t.r = addMutate(cmp12, r, x5);
    }
    return balMutate2(t);
  }
  function fromArray4(xs, cmp12) {
    var len = xs.length;
    if (len === 0) {
      return;
    }
    var next = strictlySortedLengthU(xs, function(x5, y5) {
      return cmp12(x5, y5) < 0;
    });
    var result;
    if (next >= 0) {
      result = fromSortedArrayAux2(xs, 0, next);
    } else {
      next = -next | 0;
      result = fromSortedArrayRevAux2(xs, next - 1 | 0, next);
    }
    for (var i = next; i < len; ++i) {
      result = addMutate(cmp12, result, xs[i]);
    }
    return result;
  }
  function add(t, x5, cmp12) {
    if (t === void 0) {
      return singleton2(x5);
    }
    var k2 = t.v;
    var c3 = cmp12(x5, k2);
    if (c3 === 0) {
      return t;
    }
    var l = t.l;
    var r = t.r;
    if (c3 < 0) {
      var ll = add(l, x5, cmp12);
      if (ll === l) {
        return t;
      } else {
        return bal2(ll, k2, r);
      }
    }
    var rr = add(r, x5, cmp12);
    if (rr === r) {
      return t;
    } else {
      return bal2(l, k2, rr);
    }
  }
  function remove3(t, x5, cmp12) {
    if (t === void 0) {
      return t;
    }
    var v = t.v;
    var l = t.l;
    var r = t.r;
    var c3 = cmp12(x5, v);
    if (c3 === 0) {
      if (l === void 0) {
        return r;
      }
      if (r === void 0) {
        return l;
      }
      var v$1 = {
        contents: r.v
      };
      var r$1 = removeMinAuxWithRef2(r, v$1);
      return bal2(l, v$1.contents, r$1);
    }
    if (c3 < 0) {
      var ll = remove3(l, x5, cmp12);
      if (ll === l) {
        return t;
      } else {
        return bal2(ll, v, r);
      }
    }
    var rr = remove3(r, x5, cmp12);
    if (rr === r) {
      return t;
    } else {
      return bal2(l, v, rr);
    }
  }
  function splitAuxNoPivot(cmp12, n, x5) {
    var v = n.v;
    var l = n.l;
    var r = n.r;
    var c3 = cmp12(x5, v);
    if (c3 === 0) {
      return [
        l,
        r
      ];
    }
    if (c3 < 0) {
      if (l === void 0) {
        return [
          void 0,
          n
        ];
      }
      var match2 = splitAuxNoPivot(cmp12, l, x5);
      return [
        match2[0],
        joinShared(match2[1], v, r)
      ];
    }
    if (r === void 0) {
      return [
        n,
        void 0
      ];
    }
    var match$1 = splitAuxNoPivot(cmp12, r, x5);
    return [
      joinShared(l, v, match$1[0]),
      match$1[1]
    ];
  }
  function splitAuxPivot2(cmp12, n, x5, pres) {
    var v = n.v;
    var l = n.l;
    var r = n.r;
    var c3 = cmp12(x5, v);
    if (c3 === 0) {
      pres.contents = true;
      return [
        l,
        r
      ];
    }
    if (c3 < 0) {
      if (l === void 0) {
        return [
          void 0,
          n
        ];
      }
      var match2 = splitAuxPivot2(cmp12, l, x5, pres);
      return [
        match2[0],
        joinShared(match2[1], v, r)
      ];
    }
    if (r === void 0) {
      return [
        n,
        void 0
      ];
    }
    var match$1 = splitAuxPivot2(cmp12, r, x5, pres);
    return [
      joinShared(l, v, match$1[0]),
      match$1[1]
    ];
  }
  function union(s1, s2, cmp12) {
    if (s1 === void 0) {
      return s2;
    }
    if (s2 === void 0) {
      return s1;
    }
    var h1 = s1.h;
    var h2 = s2.h;
    if (h1 >= h2) {
      if (h2 === 1) {
        return add(s1, s2.v, cmp12);
      }
      var v1 = s1.v;
      var l1 = s1.l;
      var r1 = s1.r;
      var match2 = splitAuxNoPivot(cmp12, s2, v1);
      return joinShared(union(l1, match2[0], cmp12), v1, union(r1, match2[1], cmp12));
    }
    if (h1 === 1) {
      return add(s2, s1.v, cmp12);
    }
    var v2 = s2.v;
    var l2 = s2.l;
    var r2 = s2.r;
    var match$1 = splitAuxNoPivot(cmp12, s1, v2);
    return joinShared(union(match$1[0], l2, cmp12), v2, union(match$1[1], r2, cmp12));
  }
  function intersect(s1, s2, cmp12) {
    if (s1 === void 0) {
      return;
    }
    if (s2 === void 0) {
      return;
    }
    var v1 = s1.v;
    var l1 = s1.l;
    var r1 = s1.r;
    var pres = {
      contents: false
    };
    var match2 = splitAuxPivot2(cmp12, s2, v1, pres);
    var ll = intersect(l1, match2[0], cmp12);
    var rr = intersect(r1, match2[1], cmp12);
    if (pres.contents) {
      return joinShared(ll, v1, rr);
    } else {
      return concatShared(ll, rr);
    }
  }
  function diff(s1, s2, cmp12) {
    if (s1 === void 0) {
      return s1;
    }
    if (s2 === void 0) {
      return s1;
    }
    var v1 = s1.v;
    var l1 = s1.l;
    var r1 = s1.r;
    var pres = {
      contents: false
    };
    var match2 = splitAuxPivot2(cmp12, s2, v1, pres);
    var ll = diff(l1, match2[0], cmp12);
    var rr = diff(r1, match2[1], cmp12);
    if (pres.contents) {
      return concatShared(ll, rr);
    } else {
      return joinShared(ll, v1, rr);
    }
  }
  var fromArray5 = fromArray4;
  var isEmpty5 = isEmpty4;
  var has5 = has4;
  var subset2 = subset;
  var size5 = size4;
  var toList5 = toList4;
  var toArray5 = toArray4;
  function fromArray6(data, id10) {
    var cmp12 = id10.cmp;
    return {
      cmp: cmp12,
      data: fromArray5(data, cmp12)
    };
  }
  function remove4(m2, e) {
    var data = m2.data;
    var cmp12 = m2.cmp;
    var newData = remove3(data, e, cmp12);
    if (newData === data) {
      return m2;
    } else {
      return {
        cmp: cmp12,
        data: newData
      };
    }
  }
  function add2(m2, e) {
    var data = m2.data;
    var cmp12 = m2.cmp;
    var newData = add(data, e, cmp12);
    if (newData === data) {
      return m2;
    } else {
      return {
        cmp: cmp12,
        data: newData
      };
    }
  }
  function union2(m2, n) {
    var cmp12 = m2.cmp;
    return {
      cmp: cmp12,
      data: union(m2.data, n.data, cmp12)
    };
  }
  function intersect2(m2, n) {
    var cmp12 = m2.cmp;
    return {
      cmp: cmp12,
      data: intersect(m2.data, n.data, cmp12)
    };
  }
  function diff2(m2, n) {
    var cmp12 = m2.cmp;
    return {
      cmp: cmp12,
      data: diff(m2.data, n.data, cmp12)
    };
  }
  function subset3(m2, n) {
    var cmp12 = m2.cmp;
    return subset2(m2.data, n.data, cmp12);
  }
  function make2(id10) {
    return {
      cmp: id10.cmp,
      data: void 0
    };
  }
  function isEmpty6(m2) {
    return isEmpty5(m2.data);
  }
  function size6(m2) {
    return size5(m2.data);
  }
  function toList6(m2) {
    return toList5(m2.data);
  }
  function toArray6(m2) {
    return toArray5(m2.data);
  }
  function has6(m2, e) {
    return has5(m2.data, e, m2.cmp);
  }
  var for_in2 = function(o, foo) {
    for (var x5 in o) {
      foo(x5);
    }
  };
  function caml_compare(a3, b) {
    if (a3 === b) {
      return 0;
    }
    var a_type = typeof a3;
    var b_type = typeof b;
    switch (a_type) {
      case "boolean":
        if (b_type === "boolean") {
          return caml_bool_compare2(a3, b);
        }
        break;
      case "function":
        if (b_type === "function") {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "compare: functional value",
            Error: new Error()
          };
        }
        break;
      case "number":
        if (b_type === "number") {
          return caml_int_compare2(a3, b);
        }
        break;
      case "string":
        if (b_type === "string") {
          return caml_string_compare2(a3, b);
        } else {
          return 1;
        }
      case "undefined":
        return -1;
      default:
    }
    switch (b_type) {
      case "string":
        return -1;
      case "undefined":
        return 1;
      default:
        if (a_type === "boolean") {
          return 1;
        }
        if (b_type === "boolean") {
          return -1;
        }
        if (a_type === "function") {
          return 1;
        }
        if (b_type === "function") {
          return -1;
        }
        if (a_type === "number") {
          if (b === null || b.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
            return 1;
          } else {
            return -1;
          }
        }
        if (b_type === "number") {
          if (a3 === null || a3.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
            return -1;
          } else {
            return 1;
          }
        }
        if (a3 === null) {
          if (b.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
            return 1;
          } else {
            return -1;
          }
        }
        if (b === null) {
          if (a3.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
            return -1;
          } else {
            return 1;
          }
        }
        if (a3.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
          if (b.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
            return aux_obj_compare(a3, b);
          } else {
            return -1;
          }
        }
        var tag_a = a3.TAG | 0;
        var tag_b = b.TAG | 0;
        if (tag_a === 248) {
          return caml_int_compare2(a3[1], b[1]);
        }
        if (tag_a === 251) {
          throw {
            RE_EXN_ID: "Invalid_argument",
            _1: "equal: abstract value",
            Error: new Error()
          };
        }
        if (tag_a !== tag_b) {
          if (tag_a < tag_b) {
            return -1;
          } else {
            return 1;
          }
        }
        var len_a = a3.length | 0;
        var len_b = b.length | 0;
        if (len_a === len_b) {
          if (Array.isArray(a3)) {
            var _i = 0;
            while (true) {
              var i = _i;
              if (i === len_a) {
                return 0;
              }
              var res = caml_compare(a3[i], b[i]);
              if (res !== 0) {
                return res;
              }
              _i = i + 1 | 0;
              continue;
            }
            ;
          } else if (a3 instanceof Date && b instanceof Date) {
            return a3 - b;
          } else {
            return aux_obj_compare(a3, b);
          }
        } else if (len_a < len_b) {
          var _i$1 = 0;
          while (true) {
            var i$1 = _i$1;
            if (i$1 === len_a) {
              return -1;
            }
            var res$1 = caml_compare(a3[i$1], b[i$1]);
            if (res$1 !== 0) {
              return res$1;
            }
            _i$1 = i$1 + 1 | 0;
            continue;
          }
          ;
        } else {
          var _i$2 = 0;
          while (true) {
            var i$2 = _i$2;
            if (i$2 === len_b) {
              return 1;
            }
            var res$2 = caml_compare(a3[i$2], b[i$2]);
            if (res$2 !== 0) {
              return res$2;
            }
            _i$2 = i$2 + 1 | 0;
            continue;
          }
          ;
        }
    }
  }
  function aux_obj_compare(a3, b) {
    var min_key_lhs = {
      contents: void 0
    };
    var min_key_rhs = {
      contents: void 0
    };
    var do_key = function(param, key) {
      var min_key = param[2];
      var b2 = param[1];
      if (!(!b2.hasOwnProperty(key) || caml_compare(param[0][key], b2[key]) > 0)) {
        return;
      }
      var mk = min_key.contents;
      if (mk !== void 0 && key >= mk) {
        return;
      } else {
        min_key.contents = key;
        return;
      }
    };
    var partial_arg2 = [
      a3,
      b,
      min_key_rhs
    ];
    var do_key_a = function(param) {
      return do_key(partial_arg2, param);
    };
    var partial_arg$12 = [
      b,
      a3,
      min_key_lhs
    ];
    var do_key_b = function(param) {
      return do_key(partial_arg$12, param);
    };
    for_in2(a3, do_key_a);
    for_in2(b, do_key_b);
    var match2 = min_key_lhs.contents;
    var match$1 = min_key_rhs.contents;
    if (match2 !== void 0) {
      if (match$1 !== void 0) {
        return caml_string_compare2(match2, match$1);
      } else {
        return -1;
      }
    } else if (match$1 !== void 0) {
      return 1;
    } else {
      return 0;
    }
  }
  function caml_greaterthan(a3, b) {
    return caml_compare(a3, b) > 0;
  }
  function caml_lessthan(a3, b) {
    return caml_compare(a3, b) < 0;
  }
  var id = {
    contents: 0
  };
  function create3(str) {
    id.contents = id.contents + 1 | 0;
    return str + ("/" + id.contents);
  }
  function add3(xs, x5) {
    return {
      hd: x5,
      tl: xs
    };
  }
  function copyAuxCont(_cellX, _prec) {
    while (true) {
      var prec = _prec;
      var cellX = _cellX;
      if (!cellX) {
        return prec;
      }
      var next = {
        hd: cellX.hd,
        tl: 0
      };
      prec.tl = next;
      _prec = next;
      _cellX = cellX.tl;
      continue;
    }
    ;
  }
  function copyAuxWithMap(_cellX, _prec, f) {
    while (true) {
      var prec = _prec;
      var cellX = _cellX;
      if (!cellX) {
        return;
      }
      var next = {
        hd: f(cellX.hd),
        tl: 0
      };
      prec.tl = next;
      _prec = next;
      _cellX = cellX.tl;
      continue;
    }
    ;
  }
  function concat3(xs, ys) {
    if (!xs) {
      return ys;
    }
    var cell = {
      hd: xs.hd,
      tl: 0
    };
    copyAuxCont(xs.tl, cell).tl = ys;
    return cell;
  }
  function mapU5(xs, f) {
    if (!xs) {
      return 0;
    }
    var cell = {
      hd: f(xs.hd),
      tl: 0
    };
    copyAuxWithMap(xs.tl, cell, f);
    return cell;
  }
  function map4(xs, f) {
    return mapU5(xs, __12(f));
  }
  function length(xs) {
    var _x = xs;
    var _acc = 0;
    while (true) {
      var acc = _acc;
      var x5 = _x;
      if (!x5) {
        return acc;
      }
      _acc = acc + 1 | 0;
      _x = x5.tl;
      continue;
    }
    ;
  }
  function fillAux(arr, _i, _x) {
    while (true) {
      var x5 = _x;
      var i = _i;
      if (!x5) {
        return;
      }
      arr[i] = x5.hd;
      _x = x5.tl;
      _i = i + 1 | 0;
      continue;
    }
    ;
  }
  function fromArray7(a3) {
    var _i = a3.length - 1 | 0;
    var _res = 0;
    while (true) {
      var res = _res;
      var i = _i;
      if (i < 0) {
        return res;
      }
      _res = {
        hd: a3[i],
        tl: res
      };
      _i = i - 1 | 0;
      continue;
    }
    ;
  }
  function toArray7(x5) {
    var len = length(x5);
    var arr = new Array(len);
    fillAux(arr, 0, x5);
    return arr;
  }
  function reduceU6(_l, _accu, f) {
    while (true) {
      var accu = _accu;
      var l = _l;
      if (!l) {
        return accu;
      }
      _accu = f(accu, l.hd);
      _l = l.tl;
      continue;
    }
    ;
  }
  function reduce4(l, accu, f) {
    return reduceU6(l, accu, __22(f));
  }
  function getExn6(x5) {
    if (x5 !== void 0) {
      return valFromOption(x5);
    }
    throw {
      RE_EXN_ID: "Not_found",
      Error: new Error()
    };
  }
  function mapU6(opt, f) {
    if (opt !== void 0) {
      return some(f(valFromOption(opt)));
    }
  }
  function map5(opt, f) {
    return mapU6(opt, __12(f));
  }
  function flatMapU(opt, f) {
    if (opt !== void 0) {
      return f(valFromOption(opt));
    }
  }
  function flatMap(opt, f) {
    return flatMapU(opt, __12(f));
  }
  function getWithDefault3(opt, $$default) {
    if (opt !== void 0) {
      return valFromOption(opt);
    } else {
      return $$default;
    }
  }
  function isSome(param) {
    return param !== void 0;
  }
  function isNone(x5) {
    return x5 === void 0;
  }
  var spliceObjApply = function(obj, name3, args) {
    var i, argLen;
    argLen = args.length;
    var applied = [];
    for (i = 0; i < argLen - 1; ++i) {
      applied.push(args[i]);
    }
    var lastOne = args[argLen - 1];
    for (i = 0; i < lastOne.length; ++i) {
      applied.push(lastOne[i]);
    }
    return obj[name3].apply(obj, applied);
  };
  var RpcError = /* @__PURE__ */ create3("Rpc-RepWeb.RpcError");
  var Either2 = {};
  var Either3 = {};
  var Either4 = {};
  var Either5 = {};
  var Either6 = {};
  function read(t, d) {
    return _12(t.reader, d);
  }
  function write(t, d) {
    return _12(t.writer, d);
  }
  function name(t) {
    return t.name;
  }
  function convert(t, new_name, read_conv, write_conv) {
    return {
      reader: function(bytes) {
        return _12(read_conv, _12(t.reader, bytes));
      },
      writer: function(x5) {
        return _12(t.writer, _12(write_conv, x5));
      },
      name: new_name
    };
  }
  function alias(t, new_name) {
    return {
      reader: t.reader,
      writer: t.writer,
      name: new_name
    };
  }
  function recur(f) {
    return {
      reader: function(bytes) {
        return _12(_12(f, void 0).reader, bytes);
      },
      writer: function(x5) {
        return _12(_12(f, void 0).writer, x5);
      },
      name: "<rec>"
    };
  }
  var empty = new Uint8Array([]);
  function unit__reader(param) {
  }
  function unit__writer(param) {
    return empty;
  }
  var unit_ = {
    reader: unit__reader,
    writer: unit__writer,
    name: "unit"
  };
  function bool__reader(w) {
    var match2 = w[0];
    if (match2 === 0) {
      return false;
    }
    if (match2 === 1) {
      return true;
    }
    throw {
      RE_EXN_ID: RpcError,
      Error: new Error()
    };
  }
  function bool__writer(b) {
    if (b) {
      return new Uint8Array([1]);
    } else {
      return new Uint8Array([0]);
    }
  }
  var bool_ = {
    reader: bool__reader,
    writer: bool__writer,
    name: "bool"
  };
  function iter(f, _i, _x) {
    while (true) {
      var x5 = _x;
      var i = _i;
      if (i === 0) {
        return x5;
      }
      _x = _12(f, x5);
      _i = i - 1 | 0;
      continue;
    }
    ;
  }
  function packInt(i) {
    var shift = function(i2, s2) {
      return iter(function(x5) {
        return x5 / 2 | 0;
      }, s2, i2) % 256;
    };
    var b1 = shift(i, 0);
    var b2 = shift(i, 8);
    var b3 = shift(i, 16);
    var b4 = shift(i, 24);
    var b5 = shift(i, 32);
    var b6 = shift(i, 40);
    var b7 = shift(i, 48);
    var b8 = shift(i, 56);
    return new Uint8Array([
      b8,
      b7,
      b6,
      b5,
      b4,
      b3,
      b2,
      b1
    ]);
  }
  function unpackInt(b) {
    var unshift = function(i, s2) {
      return iter(function(x5) {
        return x5 << 1;
      }, s2, i);
    };
    var b1 = b[7];
    var b2 = b[6];
    var b3 = b[5];
    var b4 = b[4];
    var b5 = b[3];
    var b6 = b[2];
    var b7 = b[1];
    var b8 = b[0];
    return ((((((b1 + unshift(b2, 8) | 0) + unshift(b3, 16) | 0) + unshift(b4, 24) | 0) + unshift(b5, 32) | 0) + unshift(b6, 40) | 0) + unshift(b7, 48) | 0) + unshift(b8, 56) | 0;
  }
  var int_ = {
    reader: unpackInt,
    writer: packInt,
    name: "int"
  };
  function float__reader(buffer) {
    var b2 = buffer.slice();
    b2.reverse();
    var b = b2.buffer;
    var f = new Float64Array(b);
    return f[0];
  }
  function float__writer(f) {
    var b = new Float64Array(1);
    b.set([f]);
    return new Uint8Array(b.buffer).reverse();
  }
  var float_ = {
    reader: float__reader,
    writer: float__writer,
    name: "float"
  };
  function string__reader(buffer) {
    var arr = [];
    buffer.forEach(function(x5) {
      arr.push(String.fromCharCode(x5));
    });
    return spliceObjApply("", "concat", [arr]);
  }
  function string__writer(s2) {
    return new Uint8Array(s2.split("").map(function(c3) {
      return c3.charCodeAt(0) | 0;
    }));
  }
  var string_ = {
    reader: string__reader,
    writer: string__writer,
    name: "string"
  };
  function getBytes(bytes, start3, len) {
    return bytes.subarray(start3, start3 + len | 0);
  }
  function concat4(bytes) {
    var length5 = bytes.reduce(function(len, ba) {
      return len + ba.length | 0;
    }, 0);
    var newBytes = new Uint8Array(length5);
    var offset = {
      contents: 0
    };
    bytes.forEach(function(b) {
      newBytes.set(b, offset.contents);
      offset.contents = offset.contents + b.length | 0;
    });
    return newBytes;
  }
  function tupleN_(length5) {
    var readTuple = function(bytes) {
      var readLens = function(_n, _offset2, _answer2) {
        while (true) {
          var answer2 = _answer2;
          var offset2 = _offset2;
          var n = _n;
          if (n === 0) {
            return answer2;
          }
          var len2 = unpackInt(getBytes(bytes, offset2, 8));
          _answer2 = answer2.concat([len2]);
          _offset2 = offset2 + 8 | 0;
          _n = n - 1 | 0;
          continue;
        }
        ;
      };
      var lens = readLens(length5, 0, []);
      var _offset = length5 << 3;
      var _answer = [];
      while (true) {
        var answer = _answer;
        var offset = _offset;
        var len = lens.shift();
        if (len === void 0) {
          return answer;
        }
        var bytes$1 = getBytes(bytes, offset, len);
        _answer = answer.concat([bytes$1]);
        _offset = offset + len | 0;
        continue;
      }
      ;
    };
    var writeTuple = function(byteArr) {
      var lens = byteArr.map(function(bytes) {
        return packInt(bytes.length);
      });
      return concat4(lens.concat(byteArr));
    };
    return {
      reader: readTuple,
      writer: writeTuple,
      name: "tuple"
    };
  }
  function tuple2_(at, bt) {
    return convert(tupleN_(2), "".concat("(", at.name, ", ", bt.name, ")"), function(arr) {
      if (arr.length !== 2) {
        throw {
          RE_EXN_ID: RpcError,
          Error: new Error()
        };
      }
      var a3 = arr[0];
      var b = arr[1];
      return [
        _12(at.reader, a3),
        _12(bt.reader, b)
      ];
    }, function(param) {
      return [
        _12(at.writer, param[0]),
        _12(bt.writer, param[1])
      ];
    });
  }
  function tuple3_(at, bt, ct) {
    return convert(tupleN_(3), "".concat("(", at.name, ", ", bt.name, ", ", ct.name, ")"), function(arr) {
      if (arr.length !== 3) {
        throw {
          RE_EXN_ID: RpcError,
          Error: new Error()
        };
      }
      var a3 = arr[0];
      var b = arr[1];
      var c3 = arr[2];
      return [
        _12(at.reader, a3),
        _12(bt.reader, b),
        _12(ct.reader, c3)
      ];
    }, function(param) {
      return [
        _12(at.writer, param[0]),
        _12(bt.writer, param[1]),
        _12(ct.writer, param[2])
      ];
    });
  }
  function tuple4_(at, bt, ct, dt) {
    return convert(tupleN_(4), "".concat("(", at.name, ", ", bt.name, ", ", ct.name, ", ", dt.name, ")"), function(arr) {
      if (arr.length !== 4) {
        throw {
          RE_EXN_ID: RpcError,
          Error: new Error()
        };
      }
      var a3 = arr[0];
      var b = arr[1];
      var c3 = arr[2];
      var d = arr[3];
      return [
        _12(at.reader, a3),
        _12(bt.reader, b),
        _12(ct.reader, c3),
        _12(dt.reader, d)
      ];
    }, function(param) {
      return [
        _12(at.writer, param[0]),
        _12(bt.writer, param[1]),
        _12(ct.writer, param[2]),
        _12(dt.writer, param[3])
      ];
    });
  }
  function tuple5_(at, bt, ct, dt, et) {
    return convert(tupleN_(5), "".concat("(", at.name, ", ", bt.name, ", ", ct.name, ", ", dt.name, ", ", et.name, ")"), function(arr) {
      if (arr.length !== 5) {
        throw {
          RE_EXN_ID: RpcError,
          Error: new Error()
        };
      }
      var a3 = arr[0];
      var b = arr[1];
      var c3 = arr[2];
      var d = arr[3];
      var e = arr[4];
      return [
        _12(at.reader, a3),
        _12(bt.reader, b),
        _12(ct.reader, c3),
        _12(dt.reader, d),
        _12(et.reader, e)
      ];
    }, function(param) {
      return [
        _12(at.writer, param[0]),
        _12(bt.writer, param[1]),
        _12(ct.writer, param[2]),
        _12(dt.writer, param[3]),
        _12(et.writer, param[4])
      ];
    });
  }
  function tuple6_(at, bt, ct, dt, et, ft) {
    return convert(tupleN_(6), "".concat("(", at.name, ", ", bt.name, ", ", ct.name, ", ", dt.name, ", ", et.name, ", ", ft.name, ")"), function(arr) {
      if (arr.length !== 6) {
        throw {
          RE_EXN_ID: RpcError,
          Error: new Error()
        };
      }
      var a3 = arr[0];
      var b = arr[1];
      var c3 = arr[2];
      var d = arr[3];
      var e = arr[4];
      var f = arr[5];
      return [
        _12(at.reader, a3),
        _12(bt.reader, b),
        _12(ct.reader, c3),
        _12(dt.reader, d),
        _12(et.reader, e),
        _12(ft.reader, f)
      ];
    }, function(param) {
      return [
        _12(at.writer, param[0]),
        _12(bt.writer, param[1]),
        _12(ct.writer, param[2]),
        _12(dt.writer, param[3]),
        _12(et.writer, param[4]),
        _12(ft.writer, param[5])
      ];
    });
  }
  function readEither(bytes) {
    var len = bytes.length - 1 | 0;
    return [
      bytes[0],
      getBytes(bytes, 1, len)
    ];
  }
  function writeEither(param) {
    return concat4([
      new Uint8Array([param[0]]),
      param[1]
    ]);
  }
  var eitherN_ = {
    reader: readEither,
    writer: writeEither,
    name: "either"
  };
  function either2_(at, bt) {
    return convert(eitherN_, "Rpc.Datatype.Either2.t".concat("<", at.name, ", ", bt.name, ">"), function(param) {
      var data = param[1];
      var idx = param[0];
      if (idx === 0) {
        return {
          TAG: 0,
          _0: _12(at.reader, data)
        };
      }
      if (idx !== 1) {
        throw {
          RE_EXN_ID: RpcError,
          Error: new Error()
        };
      }
      return {
        TAG: 1,
        _0: _12(bt.reader, data)
      };
    }, function(value) {
      if (value.TAG === 0) {
        return [
          0,
          _12(at.writer, value._0)
        ];
      } else {
        return [
          1,
          _12(bt.writer, value._0)
        ];
      }
    });
  }
  function either3_(at, bt, ct) {
    return convert(eitherN_, "Rpc.Datatype.Either3.t".concat("<", at.name, ", ", bt.name, ", ", ct.name, ">"), function(param) {
      var data = param[1];
      switch (param[0]) {
        case 0:
          return {
            TAG: 0,
            _0: _12(at.reader, data)
          };
        case 1:
          return {
            TAG: 1,
            _0: _12(bt.reader, data)
          };
        case 2:
          return {
            TAG: 2,
            _0: _12(ct.reader, data)
          };
        default:
          throw {
            RE_EXN_ID: RpcError,
            Error: new Error()
          };
      }
    }, function(value) {
      switch (value.TAG | 0) {
        case 0:
          return [
            0,
            _12(at.writer, value._0)
          ];
        case 1:
          return [
            1,
            _12(bt.writer, value._0)
          ];
        case 2:
          return [
            2,
            _12(ct.writer, value._0)
          ];
      }
    });
  }
  function either4_(at, bt, ct, dt) {
    return convert(eitherN_, "Rpc.Datatype.Either4.t".concat("<", at.name, ", ", bt.name, ", ", ct.name, ", ", dt.name, ">"), function(param) {
      var data = param[1];
      switch (param[0]) {
        case 0:
          return {
            TAG: 0,
            _0: _12(at.reader, data)
          };
        case 1:
          return {
            TAG: 1,
            _0: _12(bt.reader, data)
          };
        case 2:
          return {
            TAG: 2,
            _0: _12(ct.reader, data)
          };
        case 3:
          return {
            TAG: 3,
            _0: _12(dt.reader, data)
          };
        default:
          throw {
            RE_EXN_ID: RpcError,
            Error: new Error()
          };
      }
    }, function(value) {
      switch (value.TAG | 0) {
        case 0:
          return [
            0,
            _12(at.writer, value._0)
          ];
        case 1:
          return [
            1,
            _12(bt.writer, value._0)
          ];
        case 2:
          return [
            2,
            _12(ct.writer, value._0)
          ];
        case 3:
          return [
            3,
            _12(dt.writer, value._0)
          ];
      }
    });
  }
  function either5_(at, bt, ct, dt, et) {
    return convert(eitherN_, "Rpc.Datatype.Either5.t".concat("<", at.name, ", ", bt.name, ", ", ct.name, ", ", dt.name, ", ", et.name, ">"), function(param) {
      var data = param[1];
      switch (param[0]) {
        case 0:
          return {
            TAG: 0,
            _0: _12(at.reader, data)
          };
        case 1:
          return {
            TAG: 1,
            _0: _12(bt.reader, data)
          };
        case 2:
          return {
            TAG: 2,
            _0: _12(ct.reader, data)
          };
        case 3:
          return {
            TAG: 3,
            _0: _12(dt.reader, data)
          };
        case 4:
          return {
            TAG: 4,
            _0: _12(et.reader, data)
          };
        default:
          throw {
            RE_EXN_ID: RpcError,
            Error: new Error()
          };
      }
    }, function(value) {
      switch (value.TAG | 0) {
        case 0:
          return [
            0,
            _12(at.writer, value._0)
          ];
        case 1:
          return [
            1,
            _12(bt.writer, value._0)
          ];
        case 2:
          return [
            2,
            _12(ct.writer, value._0)
          ];
        case 3:
          return [
            3,
            _12(dt.writer, value._0)
          ];
        case 4:
          return [
            4,
            _12(et.writer, value._0)
          ];
      }
    });
  }
  function either6_(at, bt, ct, dt, et, ft) {
    return convert(eitherN_, "Rpc.Datatype.Either6.t".concat("<", at.name, ", ", bt.name, ", ", ct.name, ", ", dt.name, ", ", et.name, ", ", ft.name, ">"), function(param) {
      var data = param[1];
      switch (param[0]) {
        case 0:
          return {
            TAG: 0,
            _0: _12(at.reader, data)
          };
        case 1:
          return {
            TAG: 1,
            _0: _12(bt.reader, data)
          };
        case 2:
          return {
            TAG: 2,
            _0: _12(ct.reader, data)
          };
        case 3:
          return {
            TAG: 3,
            _0: _12(dt.reader, data)
          };
        case 4:
          return {
            TAG: 4,
            _0: _12(et.reader, data)
          };
        case 5:
          return {
            TAG: 5,
            _0: _12(ft.reader, data)
          };
        default:
          throw {
            RE_EXN_ID: RpcError,
            Error: new Error()
          };
      }
    }, function(value) {
      switch (value.TAG | 0) {
        case 0:
          return [
            0,
            _12(at.writer, value._0)
          ];
        case 1:
          return [
            1,
            _12(bt.writer, value._0)
          ];
        case 2:
          return [
            2,
            _12(ct.writer, value._0)
          ];
        case 3:
          return [
            3,
            _12(dt.writer, value._0)
          ];
        case 4:
          return [
            4,
            _12(et.writer, value._0)
          ];
        case 5:
          return [
            5,
            _12(ft.writer, value._0)
          ];
      }
    });
  }
  function option_(at) {
    var match2 = either2_(at, unit_);
    var w = match2.writer;
    var r = match2.reader;
    return {
      reader: function(bytes) {
        var v = _12(r, bytes);
        if (v.TAG === 0) {
          return some(v._0);
        }
      },
      writer: function(opt) {
        if (opt !== void 0) {
          return _12(w, {
            TAG: 0,
            _0: valFromOption(opt)
          });
        } else {
          return _12(w, {
            TAG: 1,
            _0: void 0
          });
        }
      },
      name: "option<" + at.name + ">"
    };
  }
  function array_(at) {
    var arrayReader = function(bytes) {
      var length5 = unpackInt(getBytes(bytes, 0, 8));
      var ans = [];
      var f = function(_remaining, _offset) {
        while (true) {
          var offset = _offset;
          var remaining = _remaining;
          if (remaining === 0) {
            return;
          }
          var el_len = unpackInt(getBytes(bytes, offset, 8));
          var x5 = _12(at.reader, getBytes(bytes, offset + 8 | 0, el_len));
          ans.push(x5);
          _offset = (offset + 8 | 0) + el_len | 0;
          _remaining = remaining - 1 | 0;
          continue;
        }
        ;
      };
      f(length5, 8);
      return ans;
    };
    var arrayWriter = function(xs) {
      var len_bytes = packInt(xs.length);
      var encoded_elements = map(xs, function(x5) {
        var b = _12(at.writer, x5);
        var len_b = packInt(b.length);
        return concat4([
          len_b,
          b
        ]);
      });
      return concat4(concat([len_bytes], encoded_elements));
    };
    return {
      reader: arrayReader,
      writer: arrayWriter,
      name: "array<" + at.name + ">"
    };
  }
  function list_(at) {
    var match2 = array_(at);
    var w = match2.writer;
    var r = match2.reader;
    return {
      reader: function(bytes) {
        return fromArray7(_12(r, bytes));
      },
      writer: function(xs) {
        return _12(w, toArray7(xs));
      },
      name: "list<" + at.name + ">"
    };
  }
  var Datatype = {
    Either2,
    Either3,
    Either4,
    Either5,
    Either6,
    read,
    write,
    name,
    convert,
    alias,
    recur,
    unit_,
    bool_,
    int_,
    float_,
    string_,
    option_,
    array_,
    list_,
    tuple2_,
    tuple3_,
    tuple4_,
    tuple5_,
    tuple6_,
    tupleN_,
    either2_,
    either3_,
    either4_,
    either5_,
    either6_,
    eitherN_
  };
  var zero = 0n;
  var one = 1n;
  function inc(t) {
    return t + one;
  }
  var internal = {
    counter: BigInt((Date.now() | 0) % 1e3)
  };
  function create4(param) {
    var value = internal.counter;
    internal.counter = inc(internal.counter);
    return value;
  }
  var two = BigInt(2);
  var six = BigInt(6);
  var thirtytwo = BigInt(32);
  var rnd = BigInt(-1640531527);
  function merge2(t1, t2) {
    return t1 ^ t2 + rnd + (t1 << six) + (t1 >> two);
  }
  function combine(ts) {
    return ts.reduce(merge2, zero);
  }
  var s_const = create4(void 0);
  function fromString(s2) {
    return s2.split("").reduce(function(hash14, chr) {
      return hash14 * thirtytwo + BigInt(chr.charCodeAt(0) | 0);
    }, s_const);
  }
  function record1(name3, f) {
    var $$const = create4(void 0);
    return function(t) {
      return combine([
        $$const,
        fromString(name3),
        _12(f, t[name3])
      ]);
    };
  }
  function record2(param, param$1) {
    var f2 = param$1[1];
    var name22 = param$1[0];
    var f1 = param[1];
    var name1 = param[0];
    var $$const = create4(void 0);
    return function(t) {
      return combine([
        $$const,
        fromString(name1),
        _12(f1, t[name1]),
        fromString(name22),
        _12(f2, t[name22])
      ]);
    };
  }
  function record3(param, param$1, param$2) {
    var f3 = param$2[1];
    var n3 = param$2[0];
    var f2 = param$1[1];
    var n2 = param$1[0];
    var f1 = param[1];
    var n1 = param[0];
    var $$const = create4(void 0);
    return function(t) {
      return combine([
        $$const,
        fromString(n1),
        _12(f1, t[n1]),
        fromString(n2),
        _12(f2, t[n2]),
        fromString(n3),
        _12(f3, t[n3])
      ]);
    };
  }
  function record6(param, param$1, param$2, param$3, param$4, param$5) {
    var f6 = param$5[1];
    var n6 = param$5[0];
    var f5 = param$4[1];
    var n5 = param$4[0];
    var f4 = param$3[1];
    var n4 = param$3[0];
    var f3 = param$2[1];
    var n3 = param$2[0];
    var f2 = param$1[1];
    var n2 = param$1[0];
    var f1 = param[1];
    var n1 = param[0];
    var $$const = create4(void 0);
    return function(t) {
      return combine([
        $$const,
        fromString(n1),
        _12(f1, t[n1]),
        fromString(n2),
        _12(f2, t[n2]),
        fromString(n3),
        _12(f3, t[n3]),
        fromString(n4),
        _12(f4, t[n4]),
        fromString(n5),
        _12(f5, t[n5]),
        fromString(n6),
        _12(f6, t[n6])
      ]);
    };
  }
  function record7(param, param$1, param$2, param$3, param$4, param$5, param$6) {
    var f7 = param$6[1];
    var n7 = param$6[0];
    var f6 = param$5[1];
    var n6 = param$5[0];
    var f5 = param$4[1];
    var n5 = param$4[0];
    var f4 = param$3[1];
    var n4 = param$3[0];
    var f3 = param$2[1];
    var n3 = param$2[0];
    var f2 = param$1[1];
    var n2 = param$1[0];
    var f1 = param[1];
    var n1 = param[0];
    var $$const = create4(void 0);
    return function(t) {
      return combine([
        $$const,
        fromString(n1),
        _12(f1, t[n1]),
        fromString(n2),
        _12(f2, t[n2]),
        fromString(n3),
        _12(f3, t[n3]),
        fromString(n4),
        _12(f4, t[n4]),
        fromString(n5),
        _12(f5, t[n5]),
        fromString(n6),
        _12(f6, t[n6]),
        fromString(n7),
        _12(f7, t[n7])
      ]);
    };
  }
  function record11(param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10) {
    var f11 = param$10[1];
    var n11 = param$10[0];
    var f10 = param$9[1];
    var n10 = param$9[0];
    var f9 = param$8[1];
    var n9 = param$8[0];
    var f8 = param$7[1];
    var n8 = param$7[0];
    var f7 = param$6[1];
    var n7 = param$6[0];
    var f6 = param$5[1];
    var n6 = param$5[0];
    var f5 = param$4[1];
    var n5 = param$4[0];
    var f4 = param$3[1];
    var n4 = param$3[0];
    var f3 = param$2[1];
    var n3 = param$2[0];
    var f2 = param$1[1];
    var n2 = param$1[0];
    var f1 = param[1];
    var n1 = param[0];
    var $$const = create4(void 0);
    return function(t) {
      return combine([
        $$const,
        fromString(n1),
        _12(f1, t[n1]),
        fromString(n2),
        _12(f2, t[n2]),
        fromString(n3),
        _12(f3, t[n3]),
        fromString(n4),
        _12(f4, t[n4]),
        fromString(n5),
        _12(f5, t[n5]),
        fromString(n6),
        _12(f6, t[n6]),
        fromString(n7),
        _12(f7, t[n7]),
        fromString(n8),
        _12(f8, t[n8]),
        fromString(n9),
        _12(f9, t[n9]),
        fromString(n10),
        _12(f10, t[n10]),
        fromString(n11),
        _12(f11, t[n11])
      ]);
    };
  }
  function fromInt(i) {
    return BigInt(i);
  }
  var arr_hash = create4(void 0);
  function fromArray8(arr, f) {
    return combine([
      arr_hash,
      combine(map(arr, f))
    ]);
  }
  var unique = create4;
  function fromString2(s2) {
    return s2;
  }
  function toString(t) {
    return "TAG: ".concat(t);
  }
  function toJson(prim) {
    return prim;
  }
  function join2(prim0, prim1) {
    return prim0.concat(prim1);
  }
  function concat5(ts) {
    return reduce4(ts, [], join2);
  }
  function tag(t, s2) {
    return t.concat([{
      TAG: 1,
      _0: s2
    }]);
  }
  function fromString$1(s2) {
    return [{
      TAG: 0,
      _0: s2
    }];
  }
  function fromStrings(ss) {
    return [{
      TAG: 0,
      _0: spliceObjApply("", "concat", [ss])
    }];
  }
  function _pretag(t, tags2) {
    return tags2.map(function(t2) {
      return {
        TAG: 1,
        _0: t2
      };
    }).concat(t);
  }
  function _posttag(t, tags2) {
    return t.concat(tags2.map(function(t2) {
      return {
        TAG: 1,
        _0: t2
      };
    }));
  }
  var Tag = {
    toString,
    fromString: fromString2,
    toJson,
    fromJson: decodeString
  };
  function create5(a3) {
    return {
      TAG: 0,
      _0: a3,
      _1: []
    };
  }
  function error_s(s2) {
    return {
      TAG: 1,
      _0: fromString$1(s2)
    };
  }
  function error_ss(ss) {
    return {
      TAG: 1,
      _0: fromStrings(ss)
    };
  }
  function tag2(t, tag$1) {
    if (t.TAG === 0) {
      return {
        TAG: 0,
        _0: t._0,
        _1: t._1.concat([Tag.fromString(tag$1)])
      };
    } else {
      return {
        TAG: 1,
        _0: tag(t._0, tag$1)
      };
    }
  }
  function map6(t, f) {
    if (t.TAG === 0) {
      return {
        TAG: 0,
        _0: _12(f, t._0),
        _1: t._1
      };
    } else {
      return {
        TAG: 1,
        _0: t._0
      };
    }
  }
  function flatMap2(t, f) {
    if (t.TAG === 0) {
      var t$1 = _12(f, t._0);
      var tags$p = t._1;
      if (t$1.TAG === 0) {
        return {
          TAG: 0,
          _0: t$1._0,
          _1: tags$p.concat(t$1._1)
        };
      } else {
        return {
          TAG: 1,
          _0: _pretag(t$1._0, tags$p)
        };
      }
    } else {
      return {
        TAG: 1,
        _0: t._0
      };
    }
  }
  function iter2(t, f) {
    if (t.TAG === 0) {
      return _12(f, t._0);
    }
  }
  function both(ts) {
    var e = ts[0];
    if (e.TAG === 0) {
      var e$1 = ts[1];
      var tags2 = e._1;
      if (e$1.TAG === 0) {
        return {
          TAG: 0,
          _0: [
            e._0,
            e$1._0
          ],
          _1: tags2.concat(e$1._1)
        };
      } else {
        return {
          TAG: 1,
          _0: _pretag(e$1._0, tags2)
        };
      }
    }
    var e$p = ts[1];
    var e$2 = e._0;
    if (e$p.TAG === 0) {
      return {
        TAG: 1,
        _0: _posttag(e$2, e$p._1)
      };
    } else {
      return {
        TAG: 1,
        _0: join2(e$2, e$p._0)
      };
    }
  }
  function all(ts) {
    if (!ts) {
      return {
        TAG: 0,
        _0: 0,
        _1: []
      };
    }
    var e = both([
      ts.hd,
      all(ts.tl)
    ]);
    if (e.TAG !== 0) {
      return {
        TAG: 1,
        _0: e._0
      };
    }
    var match2 = e._0;
    return {
      TAG: 0,
      _0: add3(match2[1], match2[0]),
      _1: e._1
    };
  }
  function allUnit(ts) {
    if (!ts) {
      return {
        TAG: 0,
        _0: void 0,
        _1: []
      };
    }
    var e = both([
      ts.hd,
      allUnit(ts.tl)
    ]);
    if (e.TAG === 0) {
      return {
        TAG: 0,
        _0: void 0,
        _1: e._1
      };
    } else {
      return {
        TAG: 1,
        _0: e._0
      };
    }
  }
  function fromOption(opt, err) {
    if (opt !== void 0) {
      return {
        TAG: 0,
        _0: valFromOption(opt),
        _1: []
      };
    } else {
      return {
        TAG: 1,
        _0: err
      };
    }
  }
  function fromOption_s(opt, err_s) {
    return fromOption(opt, fromString$1(err_s));
  }
  function fromOption_ss(opt, err_ss) {
    return fromOption(opt, fromStrings(err_ss));
  }
  function fromBool(b, err) {
    if (b) {
      return {
        TAG: 0,
        _0: void 0,
        _1: []
      };
    } else {
      return {
        TAG: 1,
        _0: err
      };
    }
  }
  function fromBool_s(opt, err_s) {
    return fromBool(opt, fromString$1(err_s));
  }
  function fromBool_ss(opt, err_ss) {
    return fromBool(opt, fromStrings(err_ss));
  }
  function both3(ts) {
    var e1 = ts[0];
    if (e1.TAG === 0) {
      var e22 = ts[1];
      var t1 = e1._1;
      if (e22.TAG === 0) {
        var e = ts[2];
        var t2 = e22._1;
        if (e.TAG === 0) {
          return {
            TAG: 0,
            _0: [
              e1._0,
              e22._0,
              e._0
            ],
            _1: t1.concat(t2, e._1)
          };
        } else {
          return {
            TAG: 1,
            _0: _pretag(e._0, t1.concat(t2))
          };
        }
      }
      var e3 = ts[2];
      var e2$1 = e22._0;
      if (e3.TAG === 0) {
        return {
          TAG: 1,
          _0: _posttag(_pretag(e2$1, t1), e3._1)
        };
      } else {
        return {
          TAG: 1,
          _0: _pretag(join2(e2$1, e3._0), t1)
        };
      }
    }
    var e2$2 = ts[1];
    var e1$1 = e1._0;
    if (e2$2.TAG === 0) {
      var e3$1 = ts[2];
      var t2$1 = e2$2._1;
      if (e3$1.TAG === 0) {
        return {
          TAG: 1,
          _0: _posttag(e1$1, t2$1.concat(e3$1._1))
        };
      } else {
        return {
          TAG: 1,
          _0: join2(_posttag(e1$1, t2$1), e3$1._0)
        };
      }
    }
    var e3$2 = ts[2];
    var e2$3 = e2$2._0;
    if (e3$2.TAG === 0) {
      return {
        TAG: 1,
        _0: _posttag(join2(e1$1, e2$3), e3$2._1)
      };
    } else {
      return {
        TAG: 1,
        _0: concat5({
          hd: e1$1,
          tl: {
            hd: e2$3,
            tl: {
              hd: e3$2._0,
              tl: 0
            }
          }
        })
      };
    }
  }
  function both4(param) {
    return map6(both([
      both([
        param[0],
        param[1]
      ]),
      both([
        param[2],
        param[3]
      ])
    ]), function(param2) {
      var match2 = param2[1];
      var match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match2[0],
        match2[1]
      ];
    });
  }
  function both5(param) {
    return map6(both([
      both([
        param[0],
        param[1]
      ]),
      both3([
        param[2],
        param[3],
        param[4]
      ])
    ]), function(param2) {
      var match2 = param2[1];
      var match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match2[0],
        match2[1],
        match2[2]
      ];
    });
  }
  function both6(param) {
    return map6(both([
      both3([
        param[0],
        param[1],
        param[2]
      ]),
      both3([
        param[3],
        param[4],
        param[5]
      ])
    ]), function(param2) {
      var match2 = param2[1];
      var match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match$1[2],
        match2[0],
        match2[1],
        match2[2]
      ];
    });
  }
  function both7(param) {
    return map6(both([
      both3([
        param[0],
        param[1],
        param[2]
      ]),
      both4([
        param[3],
        param[4],
        param[5],
        param[6]
      ])
    ]), function(param2) {
      var match2 = param2[1];
      var match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match$1[2],
        match2[0],
        match2[1],
        match2[2],
        match2[3]
      ];
    });
  }
  function both9(param) {
    return map6(both([
      both4([
        param[0],
        param[1],
        param[2],
        param[3]
      ]),
      both5([
        param[4],
        param[5],
        param[6],
        param[7],
        param[8]
      ])
    ]), function(param2) {
      var match2 = param2[1];
      var match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match$1[2],
        match$1[3],
        match2[0],
        match2[1],
        match2[2],
        match2[3],
        match2[4]
      ];
    });
  }
  function both10(param) {
    return map6(both([
      both5([
        param[0],
        param[1],
        param[2],
        param[3],
        param[4]
      ]),
      both5([
        param[5],
        param[6],
        param[7],
        param[8],
        param[9]
      ])
    ]), function(param2) {
      var match2 = param2[1];
      var match$1 = param2[0];
      return [
        match$1[0],
        match$1[1],
        match$1[2],
        match$1[3],
        match$1[4],
        match2[0],
        match2[1],
        match2[2],
        match2[3],
        match2[4]
      ];
    });
  }
  function both11(param) {
    return map6(both3([
      both4([
        param[0],
        param[1],
        param[2],
        param[3]
      ]),
      both4([
        param[4],
        param[5],
        param[6],
        param[7]
      ]),
      both3([
        param[8],
        param[9],
        param[10]
      ])
    ]), function(param2) {
      var match2 = param2[2];
      var match$1 = param2[1];
      var match$2 = param2[0];
      return [
        match$2[0],
        match$2[1],
        match$2[2],
        match$2[3],
        match$1[0],
        match$1[1],
        match$1[2],
        match$1[3],
        match2[0],
        match2[1],
        match2[2]
      ];
    });
  }
  function both12(param) {
    return map6(both3([
      both4([
        param[0],
        param[1],
        param[2],
        param[3]
      ]),
      both4([
        param[4],
        param[5],
        param[6],
        param[7]
      ]),
      both4([
        param[8],
        param[9],
        param[10],
        param[11]
      ])
    ]), function(param2) {
      var match2 = param2[2];
      var match$1 = param2[1];
      var match$2 = param2[0];
      return [
        match$2[0],
        match$2[1],
        match$2[2],
        match$2[3],
        match$1[0],
        match$1[1],
        match$1[2],
        match$1[3],
        match2[0],
        match2[1],
        match2[2],
        match2[3]
      ];
    });
  }
  function match(t) {
    if (t.TAG === 0) {
      return {
        TAG: 0,
        _0: t._0
      };
    } else {
      return {
        TAG: 1,
        _0: t._0
      };
    }
  }
  var t_rpc = Datatype.int_;
  function toJson2(t) {
    return t;
  }
  function fromJson(j) {
    return map6(fromOption_s(decodeNumber(j), "JSON is not a number (reading Int)"), function(prim) {
      return prim | 0;
    });
  }
  var hash = fromInt;
  function baseEncode(prim0, prim1) {
    return prim0.toString(prim1);
  }
  function baseDecode(prim0, prim1) {
    return parseInt(prim0, prim1);
  }
  var t_rpc2 = Datatype.array_;
  var toJson3 = map;
  function fromJson2(j, decode) {
    return flatMap2(fromOption_s(decodeArray(j), "JSON is not a valid array (reading array)"), function(arr) {
      return reduce(arr, create5([]), function(xs, x5) {
        return flatMap2(xs, function(xs2) {
          return map6(_12(decode, x5), function(x6) {
            return concat(xs2, [x6]);
          });
        });
      });
    });
  }
  function filter(prim0, prim1) {
    return prim0.filter(__12(prim1));
  }
  function find(prim0, prim1) {
    return undefined_to_opt(prim0.find(__12(prim1)));
  }
  function flatMap3(t, f) {
    return concatMany(map(t, f));
  }
  function mapPartial(t, f) {
    return reduce(t, [], function(arr, x5) {
      var y5 = _12(f, x5);
      if (y5 !== void 0) {
        return concat(arr, [valFromOption(y5)]);
      } else {
        return arr;
      }
    });
  }
  var dedup = (a3) => [...new Set(a3)];
  var get7 = get;
  var getExn7 = getExn;
  var set4 = set;
  var range2 = range;
  var concat6 = concat;
  var concatMany2 = concatMany;
  var forEach5 = forEach;
  var map7 = map;
  var keep2 = keep;
  var keepWithIndex2 = keepWithIndex;
  var keepMap2 = keepMap;
  var reduce5 = reduce;
  var reduceWithIndex2 = reduceWithIndex;
  var some5 = some2;
  var every4 = every;
  var hash2 = fromArray8;
  var t_rpc3 = Datatype.option_;
  var none_hash = unique(void 0);
  var some_hash = unique(void 0);
  function hash3(t, f) {
    if (t !== void 0) {
      return combine([
        some_hash,
        _12(f, valFromOption(t))
      ]);
    } else {
      return none_hash;
    }
  }
  function iter3(x5, f) {
    if (x5 !== void 0) {
      return _12(f, valFromOption(x5));
    }
  }
  function both2(param) {
    var b = param[1];
    return flatMap(param[0], function(a3) {
      return map5(b, function(b2) {
        return [
          a3,
          b2
        ];
      });
    });
  }
  function toJson4(t, jsonify) {
    if (t !== void 0) {
      return _12(jsonify, valFromOption(t));
    } else {
      return null;
    }
  }
  function fromJson3(json, decode) {
    if (json === null) {
      return create5(void 0);
    } else {
      return map6(_12(decode, json), function(x5) {
        return some(x5);
      });
    }
  }
  var getExn8 = getExn6;
  var map8 = map5;
  var flatMap4 = flatMap;
  var getWithDefault4 = getWithDefault3;
  var isSome2 = isSome;
  var isNone2 = isNone;
  var t_rpc4 = Datatype.list_;
  function isEmpty7(t) {
    if (t) {
      return false;
    } else {
      return true;
    }
  }
  function toJson5(t, jsonify) {
    return toArray7(map4(t, jsonify));
  }
  function fromJson4(json, decode) {
    return flatMap2(fromOption_s(decodeArray(json), "JSON is not a valid array (reading list)"), function(arr) {
      return all(map4(fromArray7(arr), decode));
    });
  }
  var length2 = length;
  var add4 = add3;
  var concat7 = concat3;
  var map9 = map4;
  var fromArray9 = fromArray7;
  var toArray8 = toArray7;
  var reduce6 = reduce4;
  var empty2 = 0;
  function addMutate2(t, x5, data) {
    if (t === void 0) {
      return singleton(x5, data);
    }
    var k2 = t.k;
    if (x5 === k2) {
      t.k = x5;
      t.v = data;
      return t;
    }
    var l = t.l;
    var r = t.r;
    if (x5 < k2) {
      var ll = addMutate2(l, x5, data);
      t.l = ll;
    } else {
      t.r = addMutate2(r, x5, data);
    }
    return balMutate(t);
  }
  function fromArray10(xs) {
    var len = xs.length;
    if (len === 0) {
      return;
    }
    var next = strictlySortedLengthU(xs, function(param, param$1) {
      return param[0] < param$1[0];
    });
    var result;
    if (next >= 0) {
      result = fromSortedArrayAux(xs, 0, next);
    } else {
      next = -next | 0;
      result = fromSortedArrayRevAux(xs, next - 1 | 0, next);
    }
    for (var i = next; i < len; ++i) {
      var match2 = xs[i];
      result = addMutate2(result, match2[0], match2[1]);
    }
    return result;
  }
  var fromArray11 = fromArray10;
  var t_rpc5 = Datatype.string_;
  function toJson6(prim) {
    return prim;
  }
  function fromJson5(j) {
    return fromOption_ss(decodeString(j), [
      "Not a JSON string: ",
      String(j)
    ]);
  }
  var approxWidths = fromArray11([
    [
      " ",
      0.3
    ],
    [
      "!",
      0.33
    ],
    [
      ".",
      0.33
    ],
    [
      ",",
      0.33
    ],
    [
      ";",
      0.33
    ],
    [
      ":",
      0.33
    ],
    [
      '"',
      0.4
    ],
    [
      "'",
      0.25
    ],
    [
      "/",
      0.35
    ],
    [
      "\\",
      0.35
    ],
    [
      "@",
      1.2
    ],
    [
      "#",
      0.66
    ],
    [
      "$",
      0.66
    ],
    [
      "\xC2\xA3",
      0.66
    ],
    [
      "&",
      0.8
    ],
    [
      "*",
      0.45
    ],
    [
      "(",
      0.4
    ],
    [
      ")",
      0.4
    ],
    [
      "[",
      0.4
    ],
    [
      "]",
      0.4
    ],
    [
      "{",
      0.4
    ],
    [
      "}",
      0.4
    ],
    [
      "|",
      0.3
    ],
    [
      "+",
      0.7
    ],
    [
      "-",
      0.4
    ],
    [
      "\xE2\x80\x93",
      0.66
    ],
    [
      "\xE2\x80\x94",
      1.15
    ],
    [
      "=",
      0.7
    ],
    [
      "_",
      0.66
    ],
    [
      "0",
      0.66
    ],
    [
      "1",
      0.6
    ],
    [
      "2",
      0.66
    ],
    [
      "3",
      0.66
    ],
    [
      "4",
      0.66
    ],
    [
      "5",
      0.66
    ],
    [
      "6",
      0.66
    ],
    [
      "7",
      0.66
    ],
    [
      "8",
      0.66
    ],
    [
      "9",
      0.66
    ],
    [
      "a",
      0.66
    ],
    [
      "b",
      0.66
    ],
    [
      "c",
      0.6
    ],
    [
      "d",
      0.66
    ],
    [
      "e",
      0.66
    ],
    [
      "f",
      0.33
    ],
    [
      "g",
      0.66
    ],
    [
      "h",
      0.66
    ],
    [
      "i",
      0.25
    ],
    [
      "j",
      0.25
    ],
    [
      "k",
      0.66
    ],
    [
      "l",
      0.25
    ],
    [
      "m",
      1
    ],
    [
      "n",
      0.66
    ],
    [
      "o",
      0.66
    ],
    [
      "p",
      0.66
    ],
    [
      "q",
      0.66
    ],
    [
      "r",
      0.4
    ],
    [
      "s",
      0.66
    ],
    [
      "t",
      0.33
    ],
    [
      "u",
      0.66
    ],
    [
      "v",
      0.65
    ],
    [
      "w",
      0.9
    ],
    [
      "x",
      0.66
    ],
    [
      "y",
      0.66
    ],
    [
      "z",
      0.66
    ],
    [
      "A",
      0.8
    ],
    [
      "B",
      0.8
    ],
    [
      "C",
      0.85
    ],
    [
      "D",
      0.85
    ],
    [
      "E",
      0.8
    ],
    [
      "F",
      0.75
    ],
    [
      "G",
      0.95
    ],
    [
      "H",
      0.85
    ],
    [
      "I",
      0.33
    ],
    [
      "J",
      0.6
    ],
    [
      "K",
      0.8
    ],
    [
      "L",
      0.66
    ],
    [
      "M",
      1
    ],
    [
      "N",
      0.85
    ],
    [
      "O",
      0.95
    ],
    [
      "P",
      0.8
    ],
    [
      "Q",
      0.95
    ],
    [
      "R",
      0.85
    ],
    [
      "S",
      0.8
    ],
    [
      "T",
      0.65
    ],
    [
      "U",
      0.85
    ],
    [
      "V",
      0.8
    ],
    [
      "W",
      1.15
    ],
    [
      "X",
      0.8
    ],
    [
      "Y",
      0.8
    ],
    [
      "Z",
      0.75
    ]
  ]);
  var hash4 = fromString;
  var t_rpc6 = Datatype.int_;
  var internal2 = {
    counter: Date.now() | 0
  };
  function create6(param) {
    var value = internal2.counter;
    internal2.counter = internal2.counter + 1 | 0;
    return value;
  }
  function combine2(ts) {
    return reduce5(ts, 0, function(tot, t) {
      return (tot << 1) + t | 0;
    });
  }
  function compare(t, t$p) {
    if (t === t$p) {
      return 0;
    } else if (caml_lessthan(t, t$p)) {
      return -1;
    } else {
      return 1;
    }
  }
  function toString2(t) {
    return baseEncode(t, 16);
  }
  function fromString4(s2) {
    return baseDecode(s2, 16);
  }
  function toJson7(t) {
    return toJson6(toString2(t));
  }
  function fromJson6(j) {
    return map6(fromJson5(j), fromString4);
  }
  function cmp9(t, t$p) {
    if (caml_greaterthan(t, t$p)) {
      return 1;
    } else if (caml_lessthan(t, t$p)) {
      return -1;
    } else {
      return 0;
    }
  }
  var Cmp = MakeComparable({
    cmp: cmp9
  });
  var empty3 = make2(Cmp);
  function fromList2(lst) {
    return reduce6(lst, empty3, add2);
  }
  function fromArray13(__x) {
    return fromArray6(__x, Cmp);
  }
  function toJson$1(t) {
    return toJson5(toList6(t), toJson7);
  }
  function fromJson$12(json) {
    return map6(fromJson4(json, fromJson6), fromList2);
  }
  function empty$1(param) {
    return make(Cmp);
  }
  function mapPartial2(t, f) {
    return merge(t, make(Cmp), function(k2, v, param) {
      return flatMap4(v, function(v2) {
        return _22(f, k2, v2);
      });
    });
  }
  function fromList$1(lst) {
    return reduce6(lst, make(Cmp), function(t, param) {
      return set3(t, param[0], param[1]);
    });
  }
  function fromArray$1(param) {
    return fromArray3(param, Cmp);
  }
  function toJson$22(t, encode) {
    return fromList(map9(toList3(t), function(param) {
      return [
        toString2(param[0]),
        _12(encode, param[1])
      ];
    }));
  }
  function fromJson$2(json, decode) {
    return flatMap2(fromOption_s(decodeObject(json), "JSON is not an object (reading UUID)"), function(dict) {
      return map6(all(fromArray9(map7(entries(dict), function(param) {
        var k2 = param[0];
        return map6(_12(decode, param[1]), function(v) {
          return [
            fromString4(k2),
            v
          ];
        });
      }))), fromList$1);
    });
  }
  var $$Set = {
    toJson: toJson$1,
    fromJson: fromJson$12,
    empty: empty3,
    isEmpty: isEmpty6,
    has: has6,
    add: add2,
    remove: remove4,
    union: union2,
    intersect: intersect2,
    diff: diff2,
    subset: subset3,
    size: size6,
    toList: toList6,
    fromList: fromList2,
    toArray: toArray6,
    fromArray: fromArray13
  };
  var $$Map = {
    toJson: toJson$22,
    fromJson: fromJson$2,
    empty: empty$1,
    isEmpty: isEmpty3,
    has: has3,
    set: set3,
    get: get4,
    remove: remove2,
    update,
    map: map3,
    mapWithKey: mapWithKey2,
    mapPartial: mapPartial2,
    forEach: forEach3,
    merge,
    keys: keysToArray3,
    values: valuesToArray3,
    size: size3,
    toList: toList3,
    toArray: toArray3,
    fromList: fromList$1,
    fromArray: fromArray$1
  };
  function some7(x5) {
    if (x5 === void 0) {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: 0
      };
    } else if (x5 !== null && x5.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: x5.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
      };
    } else {
      return x5;
    }
  }
  function undefined_to_opt2(x5) {
    if (x5 === void 0) {
      return;
    } else {
      return some7(x5);
    }
  }
  function valFromOption2(x5) {
    if (!(x5 !== null && x5.BS_PRIVATE_NESTED_SOME_NONE !== void 0)) {
      return x5;
    }
    var depth = x5.BS_PRIVATE_NESTED_SOME_NONE;
    if (depth === 0) {
      return;
    } else {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
      };
    }
  }
  function nodes(t) {
    return t.base[0];
  }
  function links(t) {
    return t.base[1];
  }
  function matchMaximal(t, graph, mapping) {
    return _2(t.expand, graph, mapping);
  }
  function reject(t, graph, mapping) {
    return _2(t.reject, graph, mapping);
  }
  var parent = create6(void 0);
  var children = map7(range2(1, 2), function(param) {
    return create6(void 0);
  });
  var links$1 = map7(children, function(child2) {
    return [
      parent,
      child2,
      1
    ];
  });
  var base_0 = $$Map.fromArray(concatMany2([
    [[
      parent,
      3
    ]],
    map7(children, function(id10) {
      return [
        id10,
        3
      ];
    })
  ]));
  var base = [
    base_0,
    links$1
  ];
  function expand(param, mapping) {
    var glinks = param[1];
    var gnodes = param[0];
    var parentIso = getExn8($$Map.get(mapping, parent));
    var allLinks = mapPartial(glinks, function(lnk) {
      if (lnk[2] === 0 && lnk[0] === parentIso && getWithDefault4(map8($$Map.get(gnodes, lnk[1]), function(schema2) {
        return schema2.TAG === 2 ? true : false;
      }), false)) {
        return lnk;
      }
    });
    var nDimParents = function(id10) {
      return keep2(glinks, function(param2) {
        if (param2[1] === id10) {
          return getWithDefault4(map8($$Map.get(gnodes, param2[0]), function(sch) {
            if (sch.TAG === 2) {
              return true;
            } else {
              return false;
            }
          }), false);
        } else {
          return false;
        }
      }).length;
    };
    var childrenIso = keep2(map7(allLinks, function(param2) {
      var child2 = param2[1];
      return [
        child2,
        getExn8($$Map.get(gnodes, child2))
      ];
    }), function(param2) {
      return nDimParents(param2[0]) === 1;
    });
    return [
      $$Map.fromArray(concat6([[
        parentIso,
        getExn8($$Map.get(gnodes, parentIso))
      ]], childrenIso)),
      allLinks
    ];
  }
  function reject$1(param, mapping) {
    var glinks = param[1];
    var gnodes = param[0];
    var nDimParents = function(id10) {
      return keep2(glinks, function(param2) {
        if (param2[1] === id10) {
          return getWithDefault4(map8($$Map.get(gnodes, param2[0]), function(sch) {
            if (sch.TAG === 2) {
              return true;
            } else {
              return false;
            }
          }), false);
        } else {
          return false;
        }
      }).length;
    };
    var childrenIso = keepMap2(children, function(child2) {
      return $$Map.get(mapping, child2);
    });
    return some5(childrenIso, function(child2) {
      return nDimParents(child2) !== 1;
    });
  }
  var sumDimension = {
    base,
    expand,
    reject: reject$1
  };
  var parents = map7(range2(1, 2), function(param) {
    return create6(void 0);
  });
  var child = create6(void 0);
  var links$2 = map7(parents, function(p) {
    return [
      p,
      child,
      1
    ];
  });
  var base_0$1 = $$Map.fromArray(concatMany2([
    map7(parents, function(id10) {
      return [
        id10,
        3
      ];
    }),
    [[
      child,
      3
    ]]
  ]));
  var base$1 = [
    base_0$1,
    links$2
  ];
  function expand$1(param, mapping) {
    var gnodes = param[0];
    var childIso = getExn8($$Map.get(mapping, child));
    var allLinks = mapPartial(param[1], function(lnk) {
      if (lnk[2] === 0 && lnk[1] === childIso && getWithDefault4(map8($$Map.get(gnodes, lnk[0]), function(schema2) {
        return schema2.TAG === 2 ? true : false;
      }), false)) {
        return lnk;
      }
    });
    var parentsIso = map7(allLinks, function(param2) {
      var parent2 = param2[0];
      return [
        parent2,
        getExn8($$Map.get(gnodes, parent2))
      ];
    });
    return [
      $$Map.fromArray(concat6([[
        childIso,
        getExn8($$Map.get(gnodes, childIso))
      ]], parentsIso)),
      allLinks
    ];
  }
  function prodDimension_reject(param, param$1) {
    return false;
  }
  var prodDimension = {
    base: base$1,
    expand: expand$1,
    reject: prodDimension_reject
  };
  var parent$1 = create6(void 0);
  var classChild = create6(void 0);
  var children$1 = map7(range2(1, 1), function(param) {
    return create6(void 0);
  });
  var links$3 = concat6([[
    parent$1,
    classChild,
    1
  ]], map7(children$1, function(child2) {
    return [
      parent$1,
      child2,
      1
    ];
  }));
  var base_0$2 = $$Map.fromArray(concat6([
    [
      parent$1,
      3
    ],
    [
      classChild,
      {
        is_class: true
      }
    ]
  ], map7(children$1, function(id10) {
    return [
      id10,
      {
        is_class: false
      }
    ];
  })));
  var base$2 = [
    base_0$2,
    links$3
  ];
  function expand$2(param, mapping) {
    var glinks = param[1];
    var gnodes = param[0];
    var parentIso = getExn8($$Map.get(mapping, parent$1));
    var classChildIso = getExn8($$Map.get(mapping, classChild));
    var nParents = function(id10) {
      return keep2(glinks, function(param2) {
        return caml_equal(param2[1], id10);
      }).length;
    };
    var allLinks = mapPartial(glinks, function(lnk) {
      var tgt = lnk[1];
      if (lnk[2] === 0 && lnk[0] === parentIso && (tgt === classChildIso || getWithDefault4(map8($$Map.get(gnodes, tgt), function(schema2) {
        return schema2.TAG === 3 ? !getWithDefault4(schema2._0.is_class, false) : false;
      }), false))) {
        return lnk;
      }
    });
    var childrenIso = keep2(map7(allLinks, function(param2) {
      var child2 = param2[1];
      return [
        child2,
        getExn8($$Map.get(gnodes, child2))
      ];
    }), function(param2) {
      return nParents(param2[0]) === 1;
    });
    return [
      $$Map.fromArray(concat6([[
        parentIso,
        getExn8($$Map.get(gnodes, parentIso))
      ]], childrenIso)),
      allLinks
    ];
  }
  function reject$2(param, mapping) {
    var glinks = param[1];
    var tgtIds = $$Set.fromArray($$Map.values(mapping));
    var children5 = mapPartial(glinks, function(param2) {
      var tgt = param2[1];
      if ($$Set.has(tgtIds, tgt)) {
        return some7(tgt);
      }
    });
    var nParents = function(id10) {
      return keep2(glinks, function(param2) {
        return caml_equal(param2[1], id10);
      }).length;
    };
    return some5(children5, function(id10) {
      return nParents(id10) > 1;
    });
  }
  var pickCollection = {
    base: base$2,
    expand: expand$2,
    reject: reject$2
  };
  var parent$2 = create6(void 0);
  var children$2 = map7(range2(1, 1), function(param) {
    return [
      create6(void 0),
      create6(void 0)
    ];
  });
  var links$4 = flatMap3(children$2, function(param) {
    var src = param[0];
    return [
      [
        parent$2,
        src,
        1
      ],
      [
        src,
        param[1],
        1
      ]
    ];
  });
  var base_0$3 = $$Map.fromArray(concat6([[
    parent$2,
    3
  ]], flatMap3(children$2, function(param) {
    return [
      [
        param[0],
        3
      ],
      [
        param[1],
        {
          is_class: true
        }
      ]
    ];
  })));
  var base$3 = [
    base_0$3,
    links$4
  ];
  function expand$3(param, mapping) {
    var glinks = param[1];
    var gnodes = param[0];
    var parentIso = getExn8($$Map.get(mapping, parent$2));
    var allLinks = mapPartial(glinks, function(lnk) {
      var tgt = lnk[1];
      if (lnk[2] === 0 && lnk[0] === parentIso && getWithDefault4(map8($$Map.get(gnodes, tgt), function(schema2) {
        return schema2.TAG === 2 ? some5(glinks, function(lnk$p) {
          return lnk$p[2] === 0 && lnk$p[0] === tgt ? getWithDefault4(map8($$Map.get(gnodes, lnk$p[1]), function(schema3) {
            return schema3.TAG === 3 ? getWithDefault4(schema3._0.is_class, false) : false;
          }), false) : false;
        }) : false;
      }), false)) {
        return lnk;
      }
    });
    var nDimParents = function(id10) {
      return keep2(glinks, function(param2) {
        if (param2[1] === id10) {
          return getWithDefault4(map8($$Map.get(gnodes, param2[0]), function(sch) {
            if (sch.TAG === 2) {
              return true;
            } else {
              return false;
            }
          }), false);
        } else {
          return false;
        }
      }).length;
    };
    var children5 = keep2(map7(allLinks, function(param2) {
      var child2 = param2[1];
      return [
        child2,
        getExn8($$Map.get(gnodes, child2))
      ];
    }), function(param2) {
      return nDimParents(param2[0]) === 1;
    });
    return [
      $$Map.fromArray(concat6([[
        parentIso,
        getExn8($$Map.get(gnodes, parentIso))
      ]], children5)),
      allLinks
    ];
  }
  function reject$3(param, mapping) {
    var glinks = param[1];
    var gnodes = param[0];
    var nDimParents = function(id10) {
      return keep2(glinks, function(param2) {
        if (param2[1] === id10) {
          return getWithDefault4(map8($$Map.get(gnodes, param2[0]), function(sch) {
            if (sch.TAG === 2) {
              return true;
            } else {
              return false;
            }
          }), false);
        } else {
          return false;
        }
      }).length;
    };
    var childrenIso = keepMap2(children$2, function(param2) {
      return $$Map.get(mapping, param2[0]);
    });
    return some5(childrenIso, function(child2) {
      return nDimParents(child2) !== 1;
    });
  }
  var filterCollection = {
    base: base$3,
    expand: expand$3,
    reject: reject$3
  };
  var root = create6(void 0);
  var intermediate = create6(void 0);
  var child$1 = create6(void 0);
  var base_0$4 = $$Map.fromArray([
    [
      root,
      3
    ],
    [
      intermediate,
      {
        is_class: true
      }
    ],
    [
      child$1,
      0
    ]
  ]);
  var base_1 = [
    [
      root,
      intermediate,
      1
    ],
    [
      intermediate,
      child$1,
      2
    ]
  ];
  var base$4 = [
    base_0$4,
    base_1
  ];
  function expand$4(param, mapping) {
    var gnodes = param[0];
    var rootIso = getExn8($$Map.get(mapping, root));
    var intermediateIso = getExn8($$Map.get(mapping, intermediate));
    var allLinks = mapPartial(param[1], function(lnk) {
      if (lnk[2] === 1 && lnk[0] === intermediateIso) {
        return lnk;
      }
    });
    var childrenIso = map7(allLinks, function(param2) {
      var child2 = param2[1];
      return [
        child2,
        getExn8($$Map.get(gnodes, child2))
      ];
    });
    return [
      $$Map.fromArray(concat6([
        [
          rootIso,
          getExn8($$Map.get(gnodes, rootIso))
        ],
        [
          intermediateIso,
          getExn8($$Map.get(gnodes, intermediateIso))
        ]
      ], childrenIso)),
      allLinks
    ];
  }
  function forEachCollection_reject(param, param$1) {
    return false;
  }
  var forEachCollection = {
    base: base$4,
    expand: expand$4,
    reject: forEachCollection_reject
  };
  var root$1 = create6(void 0);
  var intermediate$1 = create6(void 0);
  var child$2 = create6(void 0);
  var base_0$5 = $$Map.fromArray([
    [
      root$1,
      {
        is_class: false
      }
    ],
    [
      intermediate$1,
      3
    ],
    [
      child$2,
      {
        is_class: true
      }
    ]
  ]);
  var base_1$1 = [
    [
      root$1,
      intermediate$1,
      2
    ],
    [
      intermediate$1,
      child$2,
      1
    ]
  ];
  var base$5 = [
    base_0$5,
    base_1$1
  ];
  function expand$5(param, mapping) {
    var gnodes = param[0];
    var rootIso = getExn8($$Map.get(mapping, root$1));
    var intermediateIso = getExn8($$Map.get(mapping, intermediate$1));
    var allLinks = keep2(param[1], function(param2) {
      if (param2[2] === 1 && param2[0] === rootIso) {
        return param2[1] === intermediateIso;
      } else {
        return false;
      }
    });
    return [
      $$Map.fromArray([
        [
          rootIso,
          getExn8($$Map.get(gnodes, rootIso))
        ],
        [
          intermediateIso,
          getExn8($$Map.get(gnodes, intermediateIso))
        ]
      ]),
      allLinks
    ];
  }
  function reject$4(param, mapping) {
    var intermediateIso = getExn8($$Map.get(mapping, intermediate$1));
    var intermediateParents = keep2(param[1], function(param2) {
      return caml_equal(param2[1], intermediateIso);
    });
    return intermediateParents.length !== 1;
  }
  var reduceCollection = {
    base: base$5,
    expand: expand$5,
    reject: reject$4
  };
  var parent$3 = create6(void 0);
  var children$3 = map7(range2(1, 2), function(param) {
    return create6(void 0);
  });
  var links$5 = map7(children$3, function(child2) {
    return [
      parent$3,
      child2,
      1
    ];
  });
  var base_0$6 = $$Map.fromArray(concatMany2([
    [[
      parent$3,
      2
    ]],
    map7(children$3, function(id10) {
      return [
        id10,
        3
      ];
    })
  ]));
  var base$6 = [
    base_0$6,
    links$5
  ];
  function expand$6(param, mapping) {
    var gnodes = param[0];
    var parentIso = getExn8($$Map.get(mapping, parent$3));
    var allLinks = mapPartial(param[1], function(lnk) {
      if (lnk[2] === 0 && lnk[0] === parentIso && getWithDefault4(map8($$Map.get(gnodes, lnk[1]), function(schema2) {
        return schema2.TAG === 2 ? true : false;
      }), false)) {
        return lnk;
      }
    });
    var childrenIso = map7(allLinks, function(param2) {
      var child2 = param2[1];
      return [
        child2,
        getExn8($$Map.get(gnodes, child2))
      ];
    });
    return [
      $$Map.fromArray(concat6([[
        parentIso,
        getExn8($$Map.get(gnodes, parentIso))
      ]], childrenIso)),
      allLinks
    ];
  }
  function reject$5(param, mapping) {
    var gnodes = param[0];
    var parentIso = $$Map.get(mapping, parent$3);
    var allChildren = keepMap2(param[1], function(param2) {
      var tgt = param2[1];
      var src = param2[0];
      return flatMap4(parentIso, function(p) {
        if (src === p) {
          return some7(tgt);
        }
      });
    });
    var isDim = function(id10) {
      return getWithDefault4(map8($$Map.get(gnodes, id10), function(schema2) {
        if (schema2.TAG === 2) {
          return true;
        } else {
          return false;
        }
      }), false);
    };
    return some5(allChildren, function(n) {
      return !isDim(n);
    });
  }
  var implicitCoordinateSystem = {
    base: base$6,
    expand: expand$6,
    reject: reject$5
  };
  var root$2 = create6(void 0);
  var coordRoot = create6(void 0);
  var coordChildren = map7(range2(1, 1), function(param) {
    return create6(void 0);
  });
  var dataChildren = map7(range2(1, 1), function(param) {
    return create6(void 0);
  });
  var coordLinks = map7(coordChildren, function(child2) {
    return [
      coordRoot,
      child2,
      1
    ];
  });
  var rootLinks = concat6([[
    root$2,
    coordRoot,
    1
  ]], map7(dataChildren, function(child2) {
    return [
      root$2,
      child2,
      1
    ];
  }));
  var base_0$7 = $$Map.fromArray(concatMany2([
    [
      [
        root$2,
        2
      ],
      [
        coordRoot,
        2
      ]
    ],
    map7(coordChildren, function(id10) {
      return [
        id10,
        3
      ];
    }),
    map7(dataChildren, function(id10) {
      return [
        id10,
        3
      ];
    })
  ]));
  var base_1$2 = concat6(coordLinks, rootLinks);
  var base$7 = [
    base_0$7,
    base_1$2
  ];
  function expand$7(param, mapping) {
    var gnodes = param[0];
    var rootIso = getExn8($$Map.get(mapping, root$2));
    var coordRootIso = getExn8($$Map.get(mapping, coordRoot));
    var allLinks = mapPartial(param[1], function(lnk) {
      var kind = lnk[2];
      var tgt = lnk[1];
      var src = lnk[0];
      if (kind === 0 && (src === coordRootIso || src === rootIso) && getWithDefault4(map8($$Map.get(gnodes, tgt), function(schema2) {
        return schema2.TAG === 2 ? true : false;
      }), false) || kind === 0 && src === rootIso && tgt === coordRootIso) {
        return lnk;
      }
    });
    var childrenIso = map7(allLinks, function(param2) {
      var child2 = param2[1];
      return [
        child2,
        getExn8($$Map.get(gnodes, child2))
      ];
    });
    return [
      $$Map.fromArray(concat6([[
        rootIso,
        getExn8($$Map.get(gnodes, rootIso))
      ]], childrenIso)),
      allLinks
    ];
  }
  function reject$6(param, mapping) {
    var glinks = param[1];
    var gnodes = param[0];
    var rootIso = $$Map.get(mapping, root$2);
    var coordRootIso = $$Map.get(mapping, coordRoot);
    var allRootChildren = keepMap2(glinks, function(param2) {
      var tgt = param2[1];
      var src = param2[0];
      return flatMap4(both2([
        rootIso,
        coordRootIso
      ]), function(param3) {
        if (src === param3[0] && tgt !== param3[1]) {
          return some7(tgt);
        }
      });
    });
    var allCoordChildren = keepMap2(glinks, function(param2) {
      var tgt = param2[1];
      var src = param2[0];
      return flatMap4(coordRootIso, function(c3) {
        if (src === c3) {
          return some7(tgt);
        }
      });
    });
    var isDim = function(id10) {
      return getWithDefault4(map8($$Map.get(gnodes, id10), function(schema2) {
        if (schema2.TAG === 2) {
          return true;
        } else {
          return false;
        }
      }), false);
    };
    if (some5(allRootChildren, function(n) {
      return !isDim(n);
    })) {
      return true;
    } else {
      return some5(allCoordChildren, function(n) {
        return !isDim(n);
      });
    }
  }
  var explicitCoordinateSystem = {
    base: base$7,
    expand: expand$7,
    reject: reject$6
  };
  function get11(dict, k2) {
    if (k2 in dict) {
      return some7(dict[k2]);
    }
  }
  function fromList3(entries2) {
    var dict = {};
    var _param = entries2;
    while (true) {
      var param = _param;
      if (!param) {
        return dict;
      }
      var match2 = param.hd;
      dict[match2[0]] = match2[1];
      _param = param.tl;
      continue;
    }
    ;
  }
  function decodeObject2(json) {
    if (typeof json === "object" && !Array.isArray(json) && json !== null) {
      return some7(json);
    }
  }
  function decodeArray2(json) {
    if (Array.isArray(json)) {
      return json;
    }
  }
  var toJson8 = toJson6;
  var fromJson7 = fromJson5;
  var s_const2 = unique(void 0);
  var aux_const = unique(void 0);
  var arb_const = unique(void 0);
  function hash5(t) {
    switch (t) {
      case 0:
        return s_const2;
      case 1:
        return aux_const;
      case 2:
        return arb_const;
    }
  }
  function toString3(t) {
    switch (t) {
      case 0:
        return "Semantic";
      case 1:
        return "Auxiliary";
      case 2:
        return "Arbitrary";
    }
  }
  function fromString5(s2) {
    switch (s2) {
      case "Arbitrary":
        return 2;
      case "Auxiliary":
        return 1;
      case "Semantic":
        return 0;
      default:
        return;
    }
  }
  function toJson9(t) {
    return toJson6(toString3(t));
  }
  function fromJson8(json) {
    return flatMap2(fromJson5(json), function(s2) {
      return fromOption_ss(fromString5(s2), [
        "Function '",
        s2,
        "' is not one of Semantic, Auxiliary, or Arbitrary"
      ]);
    });
  }
  var t_rpc7 = Datatype.bool_;
  function toJson10(prim) {
    return prim;
  }
  function fromJson9(json) {
    return fromOption_s(decodeBoolean(json), "JSON is not a valid boolean");
  }
  function hash6(t) {
    return fromString(t ? "true" : "false");
  }
  function collapse(lst, jsons, idxs, getGid, toJsonHelper) {
    return reduce6(lst, [
      jsons,
      idxs
    ], function(param, t$p) {
      var ids = param[1];
      var json = param[0];
      if ($$Set.has(ids, _1(getGid, t$p))) {
        return [
          json,
          ids
        ];
      }
      var match2 = _2(toJsonHelper, t$p, ids);
      return [
        concat7(json, match2[0]),
        $$Set.union(ids, match2[1])
      ];
    });
  }
  function recurse(lst, fromJsonHelper, global_dict, schema2, representations, schemes, dimensions, tokens) {
    return flatMap2(lst, function(lst2) {
      return reduce6(lst2, create5([
        representations,
        schemes,
        dimensions,
        tokens
      ]), function(maps, uuid) {
        var keep_fst = function(param, v1, v2) {
          if (v1 !== void 0) {
            return some7(valFromOption2(v1));
          } else if (v2 !== void 0) {
            return some7(valFromOption2(v2));
          } else {
            return;
          }
        };
        return flatMap2(maps, function(param) {
          var tokens2 = param[3];
          var dimensions2 = param[2];
          var schemes2 = param[1];
          var representations2 = param[0];
          var alreadyExists;
          switch (schema2) {
            case 0:
              alreadyExists = $$Map.has(representations2, uuid);
              break;
            case 1:
              alreadyExists = $$Map.has(schemes2, uuid);
              break;
            case 2:
              alreadyExists = $$Map.has(dimensions2, uuid);
              break;
            case 3:
              alreadyExists = $$Map.has(tokens2, uuid);
              break;
          }
          if (alreadyExists) {
            return create5([
              representations2,
              schemes2,
              dimensions2,
              tokens2
            ]);
          } else {
            return map6(_6(fromJsonHelper, global_dict, uuid, representations2, schemes2, dimensions2, tokens2), function(param2) {
              return [
                $$Map.merge(representations2, param2[0], keep_fst),
                $$Map.merge(schemes2, param2[1], keep_fst),
                $$Map.merge(dimensions2, param2[2], keep_fst),
                $$Map.merge(tokens2, param2[3], keep_fst)
              ];
            });
          }
        });
      });
    });
  }
  function Make(Dimension2, Scheme2, Representation2) {
    var id10 = function(t) {
      return t.id;
    };
    var validate2 = function(t) {
      return allUnit({
        hd: fromBool_ss(t.explicit === !isNone2(t.graphic), [
          "Token '",
          toString2(t.id),
          "' must be explicit iff it has a graphic instance"
        ]),
        tl: {
          hd: allUnit(map9(t.sub_tokens, validate2)),
          tl: {
            hd: allUnit(map9(t.anchored_tokens, validate2)),
            tl: {
              hd: allUnit(map9(t.anchored_dimensions, Dimension2.validate)),
              tl: {
                hd: allUnit(map9(t.anchored_schemes, Scheme2.validate)),
                tl: {
                  hd: allUnit(map9(t.anchored_representations, Representation2.validate)),
                  tl: 0
                }
              }
            }
          }
        }
      });
    };
    var _toJsonHelper = function(t, idxs) {
      var idxs0 = $$Set.add(idxs, t.id);
      var match2 = collapse(t.sub_tokens, empty2, idxs0, id10, _toJsonHelper);
      var match$1 = collapse(t.anchored_tokens, match2[0], match2[1], id10, _toJsonHelper);
      var match$2 = collapse(t.anchored_dimensions, match$1[0], match$1[1], Dimension2.id, Dimension2._toJsonHelper);
      var match$3 = collapse(t.anchored_schemes, match$2[0], match$2[1], Scheme2.id, Scheme2._toJsonHelper);
      var match$4 = collapse(t.anchored_representations, match$3[0], match$3[1], Representation2.id, Representation2._toJsonHelper);
      return [
        add4(match$4[0], [
          t.id,
          fromList3({
            hd: [
              "concept",
              toJson6(t.concept)
            ],
            tl: {
              hd: [
                "graphic",
                toJson4(t.graphic, toJson8)
              ],
              tl: {
                hd: [
                  "is_class",
                  toJson10(t.is_class)
                ],
                tl: {
                  hd: [
                    "function",
                    toJson9(t.function)
                  ],
                  tl: {
                    hd: [
                      "explicit",
                      toJson10(t.explicit)
                    ],
                    tl: {
                      hd: [
                        "sub_tokens",
                        toJson5(map9(t.sub_tokens, id10), toJson7)
                      ],
                      tl: {
                        hd: [
                          "anchored_tokens",
                          toJson5(map9(t.anchored_tokens, id10), toJson7)
                        ],
                        tl: {
                          hd: [
                            "anchored_dimensions",
                            toJson5(map9(t.anchored_dimensions, Dimension2.id), toJson7)
                          ],
                          tl: {
                            hd: [
                              "anchored_schemes",
                              toJson5(map9(t.anchored_schemes, Scheme2.id), toJson7)
                            ],
                            tl: {
                              hd: [
                                "anchored_representations",
                                toJson5(map9(t.anchored_representations, Representation2.id), toJson7)
                              ],
                              tl: 0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          })
        ]),
        match$4[1]
      ];
    };
    var toJson23 = function(t) {
      return fromList3(add4(map9(_toJsonHelper(t, $$Set.empty)[0], function(param) {
        return [
          toString2(param[0]),
          param[1]
        ];
      }), [
        "start",
        toJson7(t.id)
      ]));
    };
    var _fromJsonHelper = function(global_dict, id11, representations0, schemes0, dimensions0, tokens0) {
      return flatMap2(tag2(tag2(fromOption_ss(get11(global_dict, toString2(id11)), [
        "Cannot find object matching ID '",
        toString2(id11),
        "'"
      ]), "Reading Schema.Token.t"), "Reading ID ".concat(toString2(id11))), function(json) {
        return flatMap2(fromOption_s(decodeObject2(json), "JSON is not a valid object"), function(dict) {
          var get_value = function(key, decode) {
            return flatMap2(fromOption_ss(get11(dict, key), [
              "Unable to find key '",
              key,
              "'"
            ]), decode);
          };
          var concept = get_value("concept", fromJson5);
          var graphic = get_value("graphic", function(j) {
            return fromJson3(j, fromJson7);
          });
          var is_class = get_value("is_class", fromJson9);
          var $$function = get_value("function", fromJson8);
          var explicit = get_value("explicit", fromJson9);
          var sub_token_ids = get_value("sub_tokens", function(j) {
            return fromJson4(j, fromJson6);
          });
          var anchored_token_ids = get_value("anchored_tokens", function(j) {
            return fromJson4(j, fromJson6);
          });
          var anchored_dimension_ids = get_value("anchored_dimensions", function(j) {
            return fromJson4(j, fromJson6);
          });
          var anchored_scheme_ids = get_value("anchored_schemes", function(j) {
            return fromJson4(j, fromJson6);
          });
          var anchored_representation_ids = get_value("anchored_representations", function(j) {
            return fromJson4(j, fromJson6);
          });
          return flatMap2(recurse(tag2(sub_token_ids, "Reading sub-tokens"), _fromJsonHelper, global_dict, 3, representations0, schemes0, dimensions0, tokens0), function(param) {
            return flatMap2(recurse(tag2(anchored_token_ids, "Reading anchored tokens"), _fromJsonHelper, global_dict, 3, param[0], param[1], param[2], param[3]), function(param2) {
              return flatMap2(recurse(tag2(anchored_dimension_ids, "Reading anchored dimensions"), Dimension2._fromJsonHelper, global_dict, 2, param2[0], param2[1], param2[2], param2[3]), function(param3) {
                return flatMap2(recurse(tag2(anchored_scheme_ids, "Reading anchored schemes"), Scheme2._fromJsonHelper, global_dict, 1, param3[0], param3[1], param3[2], param3[3]), function(param4) {
                  var tokens4 = param4[3];
                  var dimensions4 = param4[2];
                  var schemes4 = param4[1];
                  var representations4 = param4[0];
                  return flatMap2(recurse(tag2(anchored_representation_ids, "Reading anchored schemes"), Representation2._fromJsonHelper, global_dict, 0, representations4, schemes4, dimensions4, tokens4), function(param5) {
                    var tokens5 = param5[3];
                    var dimensions5 = param5[2];
                    var schemes5 = param5[1];
                    var representations5 = param5[0];
                    var id_get = function(map14, id12) {
                      return fromOption_ss($$Map.get(map14, id12), [
                        "Unable to find value with ID '",
                        toString2(id12),
                        "' (reading Schema.Token.t)"
                      ]);
                    };
                    var sub_tokens = flatMap2(tag2(sub_token_ids, "Loading sub-tokens"), function(sub_token_ids2) {
                      return all(map9(sub_token_ids2, function(id12) {
                        return id_get(tokens5, id12);
                      }));
                    });
                    var anchored_tokens = flatMap2(tag2(anchored_token_ids, "Loading anchored tokens"), function(anchored_token_ids2) {
                      return all(map9(anchored_token_ids2, function(id12) {
                        return id_get(tokens5, id12);
                      }));
                    });
                    var anchored_dimensions = flatMap2(tag2(anchored_dimension_ids, "Loading anchored dimensions"), function(anchored_dimension_ids2) {
                      return all(map9(anchored_dimension_ids2, function(id12) {
                        return id_get(dimensions5, id12);
                      }));
                    });
                    var anchored_schemes = flatMap2(tag2(anchored_scheme_ids, "Loading anchored schemes"), function(anchored_scheme_ids2) {
                      return all(map9(anchored_scheme_ids2, function(id12) {
                        return id_get(schemes5, id12);
                      }));
                    });
                    var anchored_representations = flatMap2(tag2(anchored_representation_ids, "Loading anchored representations"), function(anchored_representation_ids2) {
                      return all(map9(anchored_representation_ids2, function(id12) {
                        return id_get(representations5, id12);
                      }));
                    });
                    return flatMap2(both10([
                      concept,
                      graphic,
                      is_class,
                      $$function,
                      explicit,
                      sub_tokens,
                      anchored_tokens,
                      anchored_dimensions,
                      anchored_schemes,
                      anchored_representations
                    ]), function(param6) {
                      var t_concept = param6[0];
                      var t_graphic = param6[1];
                      var t_is_class = param6[2];
                      var t_function = param6[3];
                      var t_explicit = param6[4];
                      var t_sub_tokens = param6[5];
                      var t_anchored_tokens = param6[6];
                      var t_anchored_dimensions = param6[7];
                      var t_anchored_schemes = param6[8];
                      var t_anchored_representations = param6[9];
                      var t = {
                        id: id11,
                        concept: t_concept,
                        graphic: t_graphic,
                        is_class: t_is_class,
                        function: t_function,
                        explicit: t_explicit,
                        sub_tokens: t_sub_tokens,
                        anchored_tokens: t_anchored_tokens,
                        anchored_dimensions: t_anchored_dimensions,
                        anchored_schemes: t_anchored_schemes,
                        anchored_representations: t_anchored_representations
                      };
                      return tag2(create5([
                        representations4,
                        schemes4,
                        dimensions4,
                        $$Map.set(tokens4, id11, t)
                      ]), "Successfully read Token with ID ".concat(toString2(id11)));
                    });
                  });
                });
              });
            });
          });
        });
      });
    };
    var fromJson22 = function(json) {
      return flatMap2(fromOption_s(decodeObject2(json), "JSON is not a valid object (reading Schema.Token.t)"), function(dict) {
        var id11 = flatMap2(fromOption_s(get11(dict, "start"), "Unable to find start of model (reading Schema.Token.t)"), fromJson6);
        return flatMap2(id11, function(id12) {
          return flatMap2(_fromJsonHelper(dict, id12, $$Map.empty(void 0), $$Map.empty(void 0), $$Map.empty(void 0), $$Map.empty(void 0)), function(param) {
            return fromOption_s($$Map.get(param[3], id12), "Missing start of model (reading Schema.Token.t)");
          });
        });
      });
    };
    return {
      id: id10,
      validate: validate2,
      _toJsonHelper,
      toJson: toJson23,
      _fromJsonHelper,
      fromJson: fromJson22
    };
  }
  var g_const = unique(void 0);
  var h_const = unique(void 0);
  function hash7(t) {
    if (t) {
      return h_const;
    } else {
      return g_const;
    }
  }
  function fromString6(s2) {
    switch (s2) {
      case "Global":
        return 0;
      case "Local":
        return 1;
      default:
        return;
    }
  }
  function toJson11(t) {
    return toJson6(t ? "Local" : "Global");
  }
  function fromJson10(json) {
    return flatMap2(fromJson5(json), function(s2) {
      return fromOption_ss(fromString6(s2), [
        "Scope '",
        s2,
        "' is not one of Global or Local"
      ]);
    });
  }
  function Make2(Dimension2, Token2) {
    var id10 = function(t) {
      return t.id;
    };
    var validate2 = function(t) {
      return allUnit({
        hd: fromBool_ss(t.explicit === !isNone2(t.graphic_structure), [
          "Scheme '",
          toString2(t.id),
          "' must be explicit if and only if it has a graphic instance"
        ]),
        tl: {
          hd: fromBool_ss(length2(t.dimensions) > 2 || !isEmpty7(t.tokens), [
            "Scheme '",
            toString2(t.id),
            "' must have either at least two dimensions, or at least one dimension and one token"
          ]),
          tl: {
            hd: allUnit(map9(t.tokens, Token2.validate)),
            tl: {
              hd: allUnit(map9(t.dimensions, Dimension2.validate)),
              tl: {
                hd: allUnit(map9(t.schemes, validate2)),
                tl: 0
              }
            }
          }
        }
      });
    };
    var _toJsonHelper = function(t, idxs) {
      var idxs0 = $$Set.add(idxs, t.id);
      var match2 = collapse(t.tokens, empty2, idxs0, Token2.id, Token2._toJsonHelper);
      var match$1 = collapse(t.dimensions, match2[0], match2[1], Dimension2.id, Dimension2._toJsonHelper);
      var match$2 = collapse(t.schemes, match$1[0], match$1[1], id10, _toJsonHelper);
      return [
        add4(match$2[0], [
          t.id,
          fromList3({
            hd: [
              "concept_structure",
              toJson6(t.concept_structure)
            ],
            tl: {
              hd: [
                "graphic_structure",
                toJson4(t.graphic_structure, toJson8)
              ],
              tl: {
                hd: [
                  "function",
                  toJson9(t.function)
                ],
                tl: {
                  hd: [
                    "explicit",
                    toJson10(t.explicit)
                  ],
                  tl: {
                    hd: [
                      "scope",
                      toJson11(t.scope)
                    ],
                    tl: {
                      hd: [
                        "tokens",
                        toJson5(map9(t.tokens, Token2.id), toJson7)
                      ],
                      tl: {
                        hd: [
                          "dimensions",
                          toJson5(map9(t.dimensions, Dimension2.id), toJson7)
                        ],
                        tl: {
                          hd: [
                            "schemes",
                            toJson5(map9(t.schemes, id10), toJson7)
                          ],
                          tl: {
                            hd: [
                              "organisation",
                              toJson6(t.organisation)
                            ],
                            tl: 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          })
        ]),
        match$2[1]
      ];
    };
    var toJson23 = function(t) {
      return fromList3(add4(map9(_toJsonHelper(t, $$Set.empty)[0], function(param) {
        return [
          toString2(param[0]),
          param[1]
        ];
      }), [
        "start",
        toJson7(t.id)
      ]));
    };
    var _fromJsonHelper = function(global_dict, id11, representations0, schemes0, dimensions0, tokens0) {
      return flatMap2(tag2(tag2(fromOption_ss(get11(global_dict, toString2(id11)), [
        "Cannot find object matching ID '",
        toString2(id11),
        "'"
      ]), "Reading Schema.Scheme.t"), "Reading ID ".concat(toString2(id11))), function(json) {
        return flatMap2(fromOption_s(decodeObject2(json), "JSON is not a valid object (reading Scheme.Scheme.t)"), function(dict) {
          var get_value = function(key, decode) {
            return flatMap2(fromOption_ss(get11(dict, key), [
              "Unable to find key '",
              key,
              "' (reading Schema.Scheme.t)"
            ]), decode);
          };
          var concept_structure = get_value("concept_structure", fromJson5);
          var graphic_structure = get_value("graphic_structure", function(j) {
            return fromJson3(j, fromJson7);
          });
          var $$function = get_value("function", fromJson8);
          var explicit = get_value("explicit", fromJson9);
          var scope = get_value("scope", fromJson10);
          var organisation = get_value("organisation", fromJson5);
          var token_ids = get_value("tokens", function(j) {
            return fromJson4(j, fromJson6);
          });
          var dimension_ids = get_value("dimensions", function(j) {
            return fromJson4(j, fromJson6);
          });
          var scheme_ids = get_value("schemes", function(j) {
            return fromJson4(j, fromJson6);
          });
          return flatMap2(recurse(tag2(token_ids, "Reading tokens"), Token2._fromJsonHelper, global_dict, 3, representations0, schemes0, dimensions0, tokens0), function(param) {
            return flatMap2(recurse(tag2(dimension_ids, "Reading dimensions"), Dimension2._fromJsonHelper, global_dict, 2, param[0], param[1], param[2], param[3]), function(param2) {
              return flatMap2(recurse(tag2(scheme_ids, "Reading schemes"), _fromJsonHelper, global_dict, 1, param2[0], param2[1], param2[2], param2[3]), function(param3) {
                var tokens3 = param3[3];
                var dimensions3 = param3[2];
                var schemes3 = param3[1];
                var representations3 = param3[0];
                var id_get = function(map14, id12) {
                  return fromOption_ss($$Map.get(map14, id12), [
                    "Unable to find value with ID '",
                    toString2(id12),
                    "' (reading Schema.Scheme.t)"
                  ]);
                };
                var tokens = flatMap2(tag2(token_ids, "Loading tokens"), function(token_ids2) {
                  return all(map9(token_ids2, function(id12) {
                    return id_get(tokens3, id12);
                  }));
                });
                var dimensions = flatMap2(tag2(dimension_ids, "Loading dimensions"), function(dimension_ids2) {
                  return all(map9(dimension_ids2, function(id12) {
                    return id_get(dimensions3, id12);
                  }));
                });
                var schemes = flatMap2(tag2(scheme_ids, "Loading schemes"), function(scheme_ids2) {
                  return all(map9(scheme_ids2, function(id12) {
                    return id_get(schemes3, id12);
                  }));
                });
                return flatMap2(both9([
                  concept_structure,
                  graphic_structure,
                  $$function,
                  explicit,
                  scope,
                  tokens,
                  dimensions,
                  schemes,
                  organisation
                ]), function(param4) {
                  var t_concept_structure = param4[0];
                  var t_graphic_structure = param4[1];
                  var t_function = param4[2];
                  var t_explicit = param4[3];
                  var t_scope = param4[4];
                  var t_tokens = param4[5];
                  var t_dimensions = param4[6];
                  var t_schemes = param4[7];
                  var t_organisation = param4[8];
                  var t = {
                    id: id11,
                    concept_structure: t_concept_structure,
                    graphic_structure: t_graphic_structure,
                    function: t_function,
                    explicit: t_explicit,
                    scope: t_scope,
                    tokens: t_tokens,
                    dimensions: t_dimensions,
                    schemes: t_schemes,
                    organisation: t_organisation
                  };
                  return tag2(create5([
                    representations3,
                    $$Map.set(schemes3, id11, t),
                    dimensions3,
                    tokens3
                  ]), "Successfully read Scheme with ID ".concat(toString2(id11)));
                });
              });
            });
          });
        });
      });
    };
    var fromJson22 = function(json) {
      return flatMap2(fromOption_s(decodeObject2(json), "JSON is not a valid object (reading Schema.Scheme.t)"), function(dict) {
        var id11 = flatMap2(fromOption_s(get11(dict, "start"), "Unable to find start of model (reading Schema.Scheme.t)"), fromJson6);
        return flatMap2(id11, function(id12) {
          return flatMap2(_fromJsonHelper(dict, id12, $$Map.empty(void 0), $$Map.empty(void 0), $$Map.empty(void 0), $$Map.empty(void 0)), function(param) {
            return fromOption_s($$Map.get(param[1], id12), "Missing start of model (reading Schema.Scheme.t)");
          });
        });
      });
    };
    return {
      id: id10,
      validate: validate2,
      _toJsonHelper,
      toJson: toJson23,
      _fromJsonHelper,
      fromJson: fromJson22
    };
  }
  function init_mod(loc, shape) {
    var undef_module = function(param) {
      throw {
        RE_EXN_ID: "Undefined_recursive_module",
        _1: loc,
        Error: new Error()
      };
    };
    var loop = function(shape2, struct_, idx) {
      if (typeof shape2 === "number") {
        switch (shape2) {
          case 0:
            struct_[idx] = undef_module;
            return;
          case 1:
            struct_[idx] = {
              LAZY_DONE: true,
              VAL: undef_module
            };
            return;
          case 2:
            struct_[idx] = [
              undef_module,
              undef_module,
              undef_module,
              0
            ];
            return;
        }
      } else {
        if (shape2.TAG === 0) {
          var comps = shape2._0;
          var v = {};
          struct_[idx] = v;
          var len = comps.length;
          for (var i = 0; i < len; ++i) {
            var match2 = comps[i];
            loop(match2[0], v, match2[1]);
          }
          return;
        }
        struct_[idx] = shape2._0;
        return;
      }
    };
    var res = {};
    var dummy_name = "dummy";
    loop(shape, res, dummy_name);
    return res[dummy_name];
  }
  function update_mod(shape, o, n) {
    var aux = function(shape2, o2, n2, parent2, i2) {
      if (typeof shape2 === "number") {
        switch (shape2) {
          case 0:
            parent2[i2] = n2;
            return;
          case 1:
          case 2:
            return update_dummy(o2, n2);
        }
      } else {
        if (shape2.TAG !== 0) {
          return;
        }
        var comps2 = shape2._0;
        for (var i$1 = 0, i_finish2 = comps2.length; i$1 < i_finish2; ++i$1) {
          var match3 = comps2[i$1];
          var name4 = match3[1];
          aux(match3[0], o2[name4], n2[name4], o2, name4);
        }
        return;
      }
    };
    if (typeof shape === "number") {
      throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "caml_module.ml",
          107,
          10
        ],
        Error: new Error()
      };
    }
    if (shape.TAG === 0) {
      var comps = shape._0;
      for (var i = 0, i_finish = comps.length; i < i_finish; ++i) {
        var match2 = comps[i];
        var name3 = match2[1];
        aux(match2[0], o[name3], n[name3], o, name3);
      }
      return;
    }
    throw {
      RE_EXN_ID: "Assert_failure",
      _1: [
        "caml_module.ml",
        107,
        10
      ],
      Error: new Error()
    };
  }
  var n_const = unique(void 0);
  var o_const = unique(void 0);
  var i_const = unique(void 0);
  var r_const = unique(void 0);
  function hash8(t) {
    switch (t) {
      case 0:
        return n_const;
      case 1:
        return o_const;
      case 2:
        return i_const;
      case 3:
        return r_const;
    }
  }
  function toString4(t) {
    switch (t) {
      case 0:
        return "Nominal";
      case 1:
        return "Ordinal";
      case 2:
        return "Interval";
      case 3:
        return "Ratio";
    }
  }
  function fromString7(s2) {
    switch (s2) {
      case "Interval":
        return 2;
      case "Nominal":
        return 0;
      case "Ordinal":
        return 1;
      case "Ratio":
        return 3;
      default:
        return;
    }
  }
  function toJson12(t) {
    return toJson6(toString4(t));
  }
  function fromJson11(json) {
    return flatMap2(fromJson5(json), function(s2) {
      return fromOption_ss(fromString7(s2), [
        "Quantity scale '",
        s2,
        "' is not one of Nominal, Ordinal, Interval, or Ratio"
      ]);
    });
  }
  var toJson13 = toJson6;
  var fromJson12 = fromJson5;
  var toJson14 = toJson6;
  var fromJson13 = fromJson5;
  function Make3(Token2) {
    var id10 = function(t) {
      return t.id;
    };
    var validate2 = function(t) {
      return allUnit({
        hd: fromBool_s(t.concept !== "", "Dimension concept cannot be empty"),
        tl: {
          hd: fromBool_ss(t.explicit === !isNone2(t.graphic), [
            "Dimension '",
            toString2(t.id),
            "' must be explicit if and only if it has a graphic instance"
          ]),
          tl: {
            hd: allUnit(map9(t.dimensions, validate2)),
            tl: {
              hd: allUnit(map9(t.tokens, Token2.validate)),
              tl: 0
            }
          }
        }
      });
    };
    var _toJsonHelper = function(t, idxs) {
      var idxs0 = $$Set.add(idxs, t.id);
      var match2 = collapse(t.dimensions, empty2, idxs0, id10, _toJsonHelper);
      var match$1 = collapse(t.tokens, match2[0], match2[1], Token2.id, Token2._toJsonHelper);
      return [
        add4(match$1[0], [
          t.id,
          fromList3({
            hd: [
              "concept",
              toJson6(t.concept)
            ],
            tl: {
              hd: [
                "concept_scale",
                toJson12(t.concept_scale)
              ],
              tl: {
                hd: [
                  "concept_attributes",
                  toJson5(t.concept_attributes, toJson13)
                ],
                tl: {
                  hd: [
                    "graphic",
                    toJson4(t.graphic, toJson8)
                  ],
                  tl: {
                    hd: [
                      "graphic_scale",
                      toJson12(t.graphic_scale)
                    ],
                    tl: {
                      hd: [
                        "graphic_attributes",
                        toJson5(t.graphic_attributes, toJson14)
                      ],
                      tl: {
                        hd: [
                          "function",
                          toJson9(t.function)
                        ],
                        tl: {
                          hd: [
                            "scope",
                            toJson11(t.scope)
                          ],
                          tl: {
                            hd: [
                              "explicit",
                              toJson10(t.explicit)
                            ],
                            tl: {
                              hd: [
                                "dimensions",
                                toJson5(map9(t.dimensions, id10), toJson7)
                              ],
                              tl: {
                                hd: [
                                  "tokens",
                                  toJson5(map9(t.tokens, Token2.id), toJson7)
                                ],
                                tl: {
                                  hd: [
                                    "organisation",
                                    toJson6(t.organisation)
                                  ],
                                  tl: 0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          })
        ]),
        match$1[1]
      ];
    };
    var toJson23 = function(t) {
      return fromList3(add4(map9(_toJsonHelper(t, $$Set.empty)[0], function(param) {
        return [
          toString2(param[0]),
          param[1]
        ];
      }), [
        "start",
        toJson7(t.id)
      ]));
    };
    var _fromJsonHelper = function(global_dict, id11, representations0, schemes0, dimensions0, tokens0) {
      return flatMap2(tag2(tag2(fromOption_ss(get11(global_dict, toString2(id11)), [
        "Cannot find object matching ID '",
        toString2(id11),
        "'"
      ]), "Reading Schema.Dimension.t"), "Reading ID ".concat(toString2(id11))), function(json) {
        return flatMap2(fromOption_s(decodeObject2(json), "JSON is not a valid object"), function(dict) {
          var get_value = function(key, decode) {
            return flatMap2(fromOption_ss(get11(dict, key), [
              "Unable to find key '",
              key,
              "'"
            ]), decode);
          };
          var concept = get_value("concept", fromJson5);
          var concept_scale = get_value("concept_scale", fromJson11);
          var concept_attributes = get_value("concept_attributes", function(j) {
            return fromJson4(j, fromJson12);
          });
          var graphic = get_value("graphic", function(j) {
            return fromJson3(j, fromJson7);
          });
          var graphic_scale = get_value("graphic_scale", fromJson11);
          var graphic_attributes = get_value("graphic_attributes", function(j) {
            return fromJson4(j, fromJson13);
          });
          var $$function = get_value("function", fromJson8);
          var scope = get_value("scope", fromJson10);
          var explicit = get_value("explicit", fromJson9);
          var organisation = get_value("organisation", fromJson5);
          var dimension_ids = get_value("dimensions", function(j) {
            return fromJson4(j, fromJson6);
          });
          var token_ids = get_value("tokens", function(j) {
            return fromJson4(j, fromJson6);
          });
          return flatMap2(recurse(tag2(dimension_ids, "Reading dimensions"), _fromJsonHelper, global_dict, 2, representations0, schemes0, dimensions0, tokens0), function(param) {
            return flatMap2(recurse(tag2(token_ids, "Reading tokens"), Token2._fromJsonHelper, global_dict, 3, param[0], param[1], param[2], param[3]), function(param2) {
              var tokens2 = param2[3];
              var dimensions2 = param2[2];
              var schemes2 = param2[1];
              var representations2 = param2[0];
              var id_get = function(map14, id12) {
                return fromOption_ss($$Map.get(map14, id12), [
                  "Unable to find value with ID '",
                  toString2(id12),
                  "' (reading Schema.Scheme.t)"
                ]);
              };
              var dimensions = flatMap2(tag2(dimension_ids, "Loading dimensions"), function(dimension_ids2) {
                return all(map9(dimension_ids2, function(id12) {
                  return id_get(dimensions2, id12);
                }));
              });
              var tokens = flatMap2(tag2(token_ids, "Loading tokens"), function(token_ids2) {
                return all(map9(token_ids2, function(id12) {
                  return id_get(tokens2, id12);
                }));
              });
              return flatMap2(both12([
                concept,
                concept_scale,
                concept_attributes,
                graphic,
                graphic_scale,
                graphic_attributes,
                $$function,
                scope,
                explicit,
                dimensions,
                tokens,
                organisation
              ]), function(param3) {
                var t_concept = param3[0];
                var t_concept_scale = param3[1];
                var t_concept_attributes = param3[2];
                var t_graphic = param3[3];
                var t_graphic_scale = param3[4];
                var t_graphic_attributes = param3[5];
                var t_function = param3[6];
                var t_scope = param3[7];
                var t_explicit = param3[8];
                var t_dimensions = param3[9];
                var t_tokens = param3[10];
                var t_organisation = param3[11];
                var t = {
                  id: id11,
                  concept: t_concept,
                  concept_scale: t_concept_scale,
                  concept_attributes: t_concept_attributes,
                  graphic: t_graphic,
                  graphic_scale: t_graphic_scale,
                  graphic_attributes: t_graphic_attributes,
                  function: t_function,
                  scope: t_scope,
                  explicit: t_explicit,
                  dimensions: t_dimensions,
                  tokens: t_tokens,
                  organisation: t_organisation
                };
                return tag2(create5([
                  representations2,
                  schemes2,
                  $$Map.set(dimensions2, id11, t),
                  tokens2
                ]), "Successfully read Dimension with ID ".concat(toString2(id11)));
              });
            });
          });
        });
      });
    };
    var fromJson22 = function(json) {
      return flatMap2(fromOption_s(decodeObject2(json), "JSON is not a valid object (reading Schema.Dimension.t)"), function(dict) {
        var id11 = flatMap2(fromOption_s(get11(dict, "start"), "Unable to find start of model (reading Schema.Dimension.t)"), fromJson6);
        return flatMap2(id11, function(id12) {
          return flatMap2(_fromJsonHelper(dict, id12, $$Map.empty(void 0), $$Map.empty(void 0), $$Map.empty(void 0), $$Map.empty(void 0)), function(param) {
            return fromOption_s($$Map.get(param[2], id12), "Missing start of model (reading Schema.Dimension.t)");
          });
        });
      });
    };
    return {
      id: id10,
      validate: validate2,
      _toJsonHelper,
      toJson: toJson23,
      _fromJsonHelper,
      fromJson: fromJson22
    };
  }
  function Make4(Token2, Dimension2, Scheme2) {
    var id10 = function(t) {
      return t.id;
    };
    var validate2 = function(t) {
      return allUnit({
        hd: fromBool_ss(length2(t.tokens) > 0 || length2(t.dimensions) > 0 || length2(t.schemes) > 0, [
          "Representation '",
          toString2(t.id),
          "' must have at least one token, dimension, or scheme"
        ]),
        tl: {
          hd: allUnit(map9(t.tokens, Token2.validate)),
          tl: {
            hd: allUnit(map9(t.dimensions, Dimension2.validate)),
            tl: {
              hd: allUnit(map9(t.schemes, Scheme2.validate)),
              tl: {
                hd: allUnit(map9(t.subrepresentations, validate2)),
                tl: 0
              }
            }
          }
        }
      });
    };
    var _toJsonHelper = function(t, idxs) {
      var idxs0 = $$Set.add(idxs, t.id);
      var match2 = collapse(t.tokens, empty2, idxs0, Token2.id, Token2._toJsonHelper);
      var match$1 = collapse(t.dimensions, match2[0], match2[1], Dimension2.id, Dimension2._toJsonHelper);
      var match$2 = collapse(t.schemes, match$1[0], match$1[1], Scheme2.id, Scheme2._toJsonHelper);
      var match$3 = collapse(t.subrepresentations, match$2[0], match$2[1], id10, _toJsonHelper);
      return [
        add4(match$3[0], [
          t.id,
          fromList3({
            hd: [
              "domain",
              toJson6(t.domain)
            ],
            tl: {
              hd: [
                "display",
                toJson8(t.display)
              ],
              tl: {
                hd: [
                  "tokens",
                  toJson5(map9(t.tokens, Token2.id), toJson7)
                ],
                tl: {
                  hd: [
                    "dimensions",
                    toJson5(map9(t.dimensions, Dimension2.id), toJson7)
                  ],
                  tl: {
                    hd: [
                      "schemes",
                      toJson5(map9(t.schemes, Scheme2.id), toJson7)
                    ],
                    tl: {
                      hd: [
                        "subrepresentations",
                        toJson5(map9(t.subrepresentations, id10), toJson7)
                      ],
                      tl: 0
                    }
                  }
                }
              }
            }
          })
        ]),
        match$3[1]
      ];
    };
    var toJson23 = function(t) {
      return fromList3(add4(map9(_toJsonHelper(t, $$Set.empty)[0], function(param) {
        return [
          toString2(param[0]),
          param[1]
        ];
      }), [
        "start",
        toJson7(t.id)
      ]));
    };
    var _fromJsonHelper = function(global_dict, id11, representations0, schemes0, dimensions0, tokens0) {
      return flatMap2(tag2(tag2(fromOption_ss(get11(global_dict, toString2(id11)), [
        "Cannot find object matching ID '",
        toString2(id11),
        "'"
      ]), "Reading Schema.Representation.t"), "Reading ID ".concat(toString2(id11))), function(json) {
        return flatMap2(fromOption_s(decodeObject2(json), "JSON is not a valid object"), function(dict) {
          var get_value = function(key, decode) {
            return flatMap2(fromOption_ss(get11(dict, key), [
              "Unable to find key '",
              key,
              "'"
            ]), decode);
          };
          var domain = get_value("domain", fromJson5);
          var display = get_value("display", fromJson7);
          var token_ids = get_value("tokens", function(j) {
            return fromJson4(j, fromJson6);
          });
          var dimension_ids = get_value("dimensions", function(j) {
            return fromJson4(j, fromJson6);
          });
          var scheme_ids = get_value("schemes", function(j) {
            return fromJson4(j, fromJson6);
          });
          var subrepresentation_ids = get_value("subrepresentations", function(j) {
            return fromJson4(j, fromJson6);
          });
          return flatMap2(recurse(tag2(token_ids, "Reading tokens"), Token2._fromJsonHelper, global_dict, 3, representations0, schemes0, dimensions0, tokens0), function(param) {
            return flatMap2(recurse(tag2(dimension_ids, "Reading dimensions"), Dimension2._fromJsonHelper, global_dict, 2, param[0], param[1], param[2], param[3]), function(param2) {
              return flatMap2(recurse(tag2(scheme_ids, "Reading schemes"), Scheme2._fromJsonHelper, global_dict, 1, param2[0], param2[1], param2[2], param2[3]), function(param3) {
                return flatMap2(recurse(tag2(subrepresentation_ids, "Reading subrepresentations"), _fromJsonHelper, global_dict, 0, param3[0], param3[1], param3[2], param3[3]), function(param4) {
                  var tokens4 = param4[3];
                  var dimensions4 = param4[2];
                  var schemes4 = param4[1];
                  var representations4 = param4[0];
                  var id_get = function(map14, id12) {
                    return fromOption_ss($$Map.get(map14, id12), [
                      "Unable to find value with ID '",
                      toString2(id12),
                      "'"
                    ]);
                  };
                  var tokens = flatMap2(tag2(token_ids, "Loading tokens"), function(token_ids2) {
                    return all(map9(token_ids2, function(id12) {
                      return id_get(tokens4, id12);
                    }));
                  });
                  var dimensions = flatMap2(tag2(dimension_ids, "Loading dimensions"), function(dimension_ids2) {
                    return all(map9(dimension_ids2, function(id12) {
                      return id_get(dimensions4, id12);
                    }));
                  });
                  var schemes = flatMap2(tag2(scheme_ids, "Loading schemes"), function(scheme_ids2) {
                    return all(map9(scheme_ids2, function(id12) {
                      return id_get(schemes4, id12);
                    }));
                  });
                  var subrepresentations = flatMap2(tag2(subrepresentation_ids, "Loading subrepresentations"), function(subrepresentation_ids2) {
                    return all(map9(subrepresentation_ids2, function(id12) {
                      return id_get(representations4, id12);
                    }));
                  });
                  return flatMap2(both6([
                    domain,
                    display,
                    tokens,
                    dimensions,
                    schemes,
                    subrepresentations
                  ]), function(param5) {
                    var t_domain = param5[0];
                    var t_display = param5[1];
                    var t_tokens = param5[2];
                    var t_dimensions = param5[3];
                    var t_schemes = param5[4];
                    var t_subrepresentations = param5[5];
                    var t = {
                      id: id11,
                      domain: t_domain,
                      display: t_display,
                      tokens: t_tokens,
                      dimensions: t_dimensions,
                      schemes: t_schemes,
                      subrepresentations: t_subrepresentations
                    };
                    return tag2(create5([
                      $$Map.set(representations4, id11, t),
                      schemes4,
                      dimensions4,
                      tokens4
                    ]), "Successfully read Representation with ID ".concat(toString2(id11)));
                  });
                });
              });
            });
          });
        });
      });
    };
    var fromJson22 = function(json) {
      return flatMap2(fromOption_s(decodeObject2(json), "JSON is not a valid object (reading Schema.Representation.t)"), function(dict) {
        var id11 = flatMap2(fromOption_s(get11(dict, "start"), "Unable to find start of model (reading Schema.Representation.t)"), fromJson6);
        return flatMap2(id11, function(id12) {
          return flatMap2(_fromJsonHelper(dict, id12, $$Map.empty(void 0), $$Map.empty(void 0), $$Map.empty(void 0), $$Map.empty(void 0)), function(param) {
            return fromOption_s($$Map.get(param[0], id12), "Missing start of model (reading Schema.Representation.t)");
          });
        });
      });
    };
    return {
      id: id10,
      validate: validate2,
      _toJsonHelper,
      toJson: toJson23,
      _fromJsonHelper,
      fromJson: fromJson22
    };
  }
  var Representation = init_mod([
    "Schema.res",
    18,
    4
  ], {
    TAG: 0,
    _0: [
      [
        0,
        "id"
      ],
      [
        0,
        "validate"
      ],
      [
        0,
        "toJson"
      ],
      [
        0,
        "fromJson"
      ],
      [
        0,
        "_toJsonHelper"
      ],
      [
        0,
        "_fromJsonHelper"
      ]
    ]
  });
  var Dimension = init_mod([
    "Schema.res",
    43,
    4
  ], {
    TAG: 0,
    _0: [
      [
        0,
        "id"
      ],
      [
        0,
        "validate"
      ],
      [
        0,
        "toJson"
      ],
      [
        0,
        "fromJson"
      ],
      [
        0,
        "_toJsonHelper"
      ],
      [
        0,
        "_fromJsonHelper"
      ]
    ]
  });
  var Scheme = init_mod([
    "Schema.res",
    65,
    4
  ], {
    TAG: 0,
    _0: [
      [
        0,
        "id"
      ],
      [
        0,
        "validate"
      ],
      [
        0,
        "toJson"
      ],
      [
        0,
        "fromJson"
      ],
      [
        0,
        "_toJsonHelper"
      ],
      [
        0,
        "_fromJsonHelper"
      ]
    ]
  });
  var Token = init_mod([
    "Schema.res",
    88,
    4
  ], {
    TAG: 0,
    _0: [
      [
        0,
        "id"
      ],
      [
        0,
        "validate"
      ],
      [
        0,
        "toJson"
      ],
      [
        0,
        "fromJson"
      ],
      [
        0,
        "_toJsonHelper"
      ],
      [
        0,
        "_fromJsonHelper"
      ]
    ]
  });
  var $$let = Make4(Token, Dimension, Scheme);
  update_mod({
    TAG: 0,
    _0: [
      [
        0,
        "id"
      ],
      [
        0,
        "validate"
      ],
      [
        0,
        "toJson"
      ],
      [
        0,
        "fromJson"
      ],
      [
        0,
        "_toJsonHelper"
      ],
      [
        0,
        "_fromJsonHelper"
      ]
    ]
  }, Representation, {
    id: $$let.id,
    validate: $$let.validate,
    toJson: $$let.toJson,
    fromJson: $$let.fromJson,
    _toJsonHelper: $$let._toJsonHelper,
    _fromJsonHelper: $$let._fromJsonHelper
  });
  var $$let$1 = Make3(Token);
  update_mod({
    TAG: 0,
    _0: [
      [
        0,
        "id"
      ],
      [
        0,
        "validate"
      ],
      [
        0,
        "toJson"
      ],
      [
        0,
        "fromJson"
      ],
      [
        0,
        "_toJsonHelper"
      ],
      [
        0,
        "_fromJsonHelper"
      ]
    ]
  }, Dimension, {
    id: $$let$1.id,
    validate: $$let$1.validate,
    toJson: $$let$1.toJson,
    fromJson: $$let$1.fromJson,
    _toJsonHelper: $$let$1._toJsonHelper,
    _fromJsonHelper: $$let$1._fromJsonHelper
  });
  var $$let$2 = Make2(Dimension, Token);
  update_mod({
    TAG: 0,
    _0: [
      [
        0,
        "id"
      ],
      [
        0,
        "validate"
      ],
      [
        0,
        "toJson"
      ],
      [
        0,
        "fromJson"
      ],
      [
        0,
        "_toJsonHelper"
      ],
      [
        0,
        "_fromJsonHelper"
      ]
    ]
  }, Scheme, {
    id: $$let$2.id,
    validate: $$let$2.validate,
    toJson: $$let$2.toJson,
    fromJson: $$let$2.fromJson,
    _toJsonHelper: $$let$2._toJsonHelper,
    _fromJsonHelper: $$let$2._fromJsonHelper
  });
  var $$let$3 = Make(Dimension, Scheme, Representation);
  update_mod({
    TAG: 0,
    _0: [
      [
        0,
        "id"
      ],
      [
        0,
        "validate"
      ],
      [
        0,
        "toJson"
      ],
      [
        0,
        "fromJson"
      ],
      [
        0,
        "_toJsonHelper"
      ],
      [
        0,
        "_fromJsonHelper"
      ]
    ]
  }, Token, {
    id: $$let$3.id,
    validate: $$let$3.validate,
    toJson: $$let$3.toJson,
    fromJson: $$let$3.fromJson,
    _toJsonHelper: $$let$3._toJsonHelper,
    _fromJsonHelper: $$let$3._fromJsonHelper
  });
  function toJson15(t) {
    return fromList3({
      hd: [
        "id",
        toJson7(t.id)
      ],
      tl: {
        hd: [
          "nodes",
          toJson3(t.nodes, toJson7)
        ],
        tl: {
          hd: [
            "message",
            toJson6(t.message)
          ],
          tl: {
            hd: [
              "details",
              toJson6(t.details)
            ],
            tl: {
              hd: [
                "suggestion",
                toJson4(t.suggestion, toJson6)
              ],
              tl: 0
            }
          }
        }
      }
    });
  }
  function fromJson14(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Unable to parse object for ModelError"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var id10 = getValue("id", fromJson6);
      var nodes4 = getValue("nodes", function(__x) {
        return fromJson2(__x, fromJson6);
      });
      var message2 = getValue("message", fromJson5);
      var details2 = getValue("details", fromJson5);
      var suggestion2 = getValue("suggestion", function(__x) {
        return fromJson3(__x, fromJson5);
      });
      return map6(both5([
        id10,
        nodes4,
        message2,
        details2,
        suggestion2
      ]), function(param) {
        return {
          id: param[0],
          nodes: param[1],
          message: param[2],
          details: param[3],
          suggestion: param[4]
        };
      });
    });
  }
  function stableId(nodes4, message2) {
    var msg = String(reduceWithIndex2(Array.from(message2, function(s2) {
      return getExn8(s2.codePointAt(0));
    }), 0, function(b, a3, i) {
      if (i % 5 === 0 && i < 60) {
        return (b << 1) + (a3 - 32 | 0) | 0;
      } else {
        return b;
      }
    }));
    return fromString4(toString2(combine2(nodes4)) + msg + "1");
  }
  function create7(nodes4, message2, details2, suggestion2, param) {
    return {
      id: stableId(nodes4, message2),
      nodes: nodes4,
      message: message2,
      details: details2,
      suggestion: suggestion2
    };
  }
  function nodes2(t) {
    return t.nodes;
  }
  function message(t) {
    return t.message;
  }
  function kindToString(kind) {
    if (kind === "representation") {
      return "Representation";
    } else if (kind === "token") {
      return "R-Symbol";
    } else if (kind === "dimension") {
      return "R-Dimension";
    } else if (kind === "placeholder") {
      return "Placeholder";
    } else {
      return "R-Scheme";
    }
  }
  function internalError(code, details2) {
    return create7([], "Internal Error: " + code, details2, "Notify Aaron about this so he can fix it :-) ", void 0);
  }
  function needsParentError(nodes4) {
    return create7(nodes4, "Schema has no parent, but it needs one.", "All schemas, except for Representation schemas, must either be in the hierarchy, or be anchored below a R-symbol in the hierarchy. This schema is neither in the hierarchy, nor anchored.", "Connect this schema below another schema.", void 0);
  }
  function noFunctionError(nodes4) {
    return create7(nodes4, 'Missing "Function" of schema.', 'This schema requires a "Function", whether it is semantic, auxiliary, or arbitrary. This has not been set.', 'Select the appropriate "Function" from the dropdown menu.', void 0);
  }
  function noExplicitError(nodes4) {
    return create7(nodes4, 'Missing whether schema is "Explicit".', 'This schema needs to be marked as "Explicit", or not, depending on whether it is explicit in the representation. This has not been set.', 'Select the appropriate "Explicit" value (Yes or No) from the dropdown menu.', void 0);
  }
  function noScopeError(nodes4) {
    return create7(nodes4, 'Missing the "Scope" of the schema.', 'This schema is either "Global" or "Local" in "Scope". This has not been set.', 'Select the appropriate "Scope" value (Global or Local) from the dropdown menu.', void 0);
  }
  function noQuantityScaleError(nodes4, kind) {
    var kind$1 = kind === "concept" ? "Concept" : "Graphic";
    return create7(nodes4, 'Missing the "' + kind$1 + ' Scale" of the R-dimension.', `This R-dimension's "` + kind$1 + ' Scale" must be one of "Nominal", "Ordinal", "Interval", or "Ratio". This has not been set.', 'Select the appropriate "' + kind$1 + ' Scale" value from the dropdown menu.', void 0);
  }
  var cyclesError = create7([], "Model has a cycle.", "Models should not contain cycles: that is, the hierarchy and anchoring links should always connect a higher schema to a lower schema. We have found a situation where a lower schema is connected to a higher schema.", "We've detected a cycle. Find the link going the 'wrong way', and remove it.", void 0);
  var noRootError = create7([], "Could not determine root of model.", "Each model should have a root. Somehow, we failed to find a root!", void 0, void 0);
  function unexpectedAnchorsError(nodes4, kind) {
    var kind$1 = kindToString(kind);
    return create7(nodes4, kind$1 + " schema has unexpected anchored children.", "Anchoring is a type of link that is uniquely below R-symbol schemas. However, this node is a " + kind$1 + " schema.", "(1) Make this schema an R-symbol. (2) Connect the children using hierarchy. (3) Remove the children.", void 0);
  }
  function badHierarchyError(nodes4, parent2, child2) {
    var parent$12 = kindToString(parent2);
    var child$12 = kindToString(child2);
    var childArticle = child$12.startsWith("R-") ? "an" : "a";
    return create7(nodes4, parent$12 + " has " + childArticle + " " + child$12 + " below it.", parent$12 + " schemas cannot have " + child$12 + " schemas as direct descendants.", "Remove this " + child$12 + " schema, or connect it elsewhere in the model.", void 0);
  }
  function kindToString2(kind) {
    if (kind === "representation") {
      return "Representation";
    } else if (kind === "token") {
      return "R-Symbol";
    } else if (kind === "dimension") {
      return "R-Dimension";
    } else if (kind === "placeholder") {
      return "Placeholder";
    } else {
      return "R-Scheme";
    }
  }
  function defaultConceptWarning(nodes4, field, $$default, kind) {
    var kind$1 = kindToString2(kind);
    return create7(nodes4, kind$1 + " is using default " + field + ".", "We give each " + kind$1 + " the default " + field + ' "' + $$default + '", but this is intended only as a placeholder.', "Replace this " + kind$1 + " schema's " + field + ".", void 0);
  }
  function defaultReferenceWarning(nodes4, label, kind) {
    var kind$1 = kindToString2(kind);
    return create7(nodes4, kind$1 + " is using default " + label + ".", "We give each " + kind$1 + " the default " + label + ' "#Ref#", but this is intended only as a placeholder.', "Replace this " + kind$1 + "schema's " + label + ".", void 0);
  }
  function multipleRootsWarning(roots) {
    return create7(roots, "More than one model detected.", "There are multiple models in this file, or a model with multiple roots.", void 0, void 0);
  }
  var toJson16 = toJson15;
  var fromJson15 = fromJson14;
  var create8 = create7;
  function mapU7(opt, f) {
    if (opt.TAG === 0) {
      return {
        TAG: 0,
        _0: f(opt._0)
      };
    } else {
      return {
        TAG: 1,
        _0: opt._0
      };
    }
  }
  function map10(opt, f) {
    return mapU7(opt, __12(f));
  }
  function flatMapU2(opt, f) {
    if (opt.TAG === 0) {
      return f(opt._0);
    } else {
      return {
        TAG: 1,
        _0: opt._0
      };
    }
  }
  function flatMap5(opt, f) {
    return flatMapU2(opt, __12(f));
  }
  function mapError(t, f) {
    if (t.TAG === 0) {
      return {
        TAG: 0,
        _0: t._0
      };
    } else {
      return {
        TAG: 1,
        _0: _12(f, t._0)
      };
    }
  }
  function fromOption2(opt, err) {
    if (opt !== void 0) {
      return {
        TAG: 0,
        _0: valFromOption(opt)
      };
    } else {
      return {
        TAG: 1,
        _0: _12(err, void 0)
      };
    }
  }
  function thenError(t, err, reduce_errs) {
    if (t.TAG === 0) {
      return {
        TAG: 1,
        _0: err
      };
    } else {
      return {
        TAG: 1,
        _0: _12(reduce_errs, [
          t._0,
          err
        ])
      };
    }
  }
  function all2(results, reduce_errs) {
    var oks = [];
    var errors = [];
    forEach5(results, function(r) {
      if (r.TAG === 0) {
        oks.push(r._0);
        return;
      }
      errors.push(r._0);
    });
    if (errors.length !== 0) {
      return {
        TAG: 1,
        _0: _12(reduce_errs, errors)
      };
    } else {
      return {
        TAG: 0,
        _0: oks
      };
    }
  }
  function allUnit2(results, reduce_errs) {
    var errors = [];
    forEach5(results, function(r) {
      if (r.TAG === 0) {
        return;
      }
      errors.push(r._0);
    });
    if (errors.length !== 0) {
      return {
        TAG: 1,
        _0: _12(reduce_errs, errors)
      };
    } else {
      return {
        TAG: 0,
        _0: void 0
      };
    }
  }
  function both72(param, reduce_errs) {
    return map10(all2([
      param[0],
      param[1],
      param[2],
      param[3],
      param[4],
      param[5],
      param[6]
    ], reduce_errs), function(prim) {
      return prim;
    });
  }
  function both102(param, reduce_errs) {
    return map10(all2([
      param[0],
      param[1],
      param[2],
      param[3],
      param[4],
      param[5],
      param[6],
      param[7],
      param[8],
      param[9]
    ], reduce_errs), function(prim) {
      return prim;
    });
  }
  function both112(param, reduce_errs) {
    return map10(all2([
      param[0],
      param[1],
      param[2],
      param[3],
      param[4],
      param[5],
      param[6],
      param[7],
      param[8],
      param[9],
      param[10]
    ], reduce_errs), function(prim) {
      return prim;
    });
  }
  function both13(param, reduce_errs) {
    return map10(all2([
      param[0],
      param[1],
      param[2],
      param[3],
      param[4],
      param[5],
      param[6],
      param[7],
      param[8],
      param[9],
      param[10],
      param[11],
      param[12]
    ], reduce_errs), function(prim) {
      return prim;
    });
  }
  function both16(param, reduce_errs) {
    return map10(all2([
      param[0],
      param[1],
      param[2],
      param[3],
      param[4],
      param[5],
      param[6],
      param[7],
      param[8],
      param[9],
      param[10],
      param[11],
      param[12],
      param[13],
      param[14],
      param[15]
    ], reduce_errs), function(prim) {
      return prim;
    });
  }
  var map11 = map10;
  var flatMap6 = flatMap5;
  function create9(first, second, kind) {
    return {
      first,
      second,
      kind
    };
  }
  function combineMessages(msgs) {
    return reduce5(msgs, [
      [],
      []
    ], function(param, param$1) {
      return [
        concat6(param[0], param$1[0]),
        concat6(param[1], param$1[1])
      ];
    });
  }
  function toposort(links2, all_ids) {
    var result = [];
    var links$12 = filter(links2, function(param) {
      var k2 = param[2];
      if (k2 === 0) {
        return true;
      } else {
        return k2 === 1;
      }
    });
    var roots = filter(all_ids, function(id10) {
      return isNone2(find(links$12, function(param) {
        return id10 === param[1];
      }));
    });
    var firstRoots = roots.slice(0);
    var f = function(_links) {
      while (true) {
        var links3 = _links;
        if (roots.length === 0) {
          return;
        }
        var root4 = getExn8(undefined_to_opt2(roots.pop()));
        result.push(root4);
        _links = filter(links3, function(links4, root5) {
          return function(l) {
            if (l[0] !== root5) {
              return true;
            }
            var t = l[1];
            var match2 = filter(links4, function(param) {
              return t === param[1];
            });
            var len = match2.length;
            if (len !== 1) {
              if (len !== 0) {
              } else {
                roots.push(t);
              }
            } else {
              var l$p = match2[0];
              if (l$p === l) {
                roots.push(t);
              }
            }
            return false;
          };
        }(links3, root4));
        continue;
      }
      ;
    };
    f(links$12);
    if (firstRoots.length === 0 && all_ids.length !== 0) {
      return [
        firstRoots,
        result,
        [cyclesError]
      ];
    } else {
      return [
        firstRoots,
        result,
        []
      ];
    }
  }
  function filter3(allowPlaceholdersOpt, below, schemas, desiredKind, f) {
    var allowPlaceholders = allowPlaceholdersOpt !== void 0 ? allowPlaceholdersOpt : true;
    return mapPartial(below, function(id10) {
      var r = $$Map.get(schemas, id10);
      if (r === void 0) {
        return {
          TAG: 1,
          _0: [
            [internalError("MISSING", "Expected node with ID " + toString2(id10) + " is missing")],
            []
          ]
        };
      }
      var k2 = r[0];
      if (k2 === desiredKind || k2 === 4 && allowPlaceholders) {
        return _2(f, id10, r[1]);
      }
    });
  }
  function hasAnchorsResult(node, anchors, schemas, kind) {
    if (anchors.length === 0) {
      return {
        TAG: 0,
        _0: void 0
      };
    }
    var msgs = allUnit2(mapPartial(anchors, function(id10) {
      return map8($$Map.get(schemas, id10), function(param) {
        var v = param[1];
        if (v.TAG === 0) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return {
            TAG: 1,
            _0: v._0
          };
        }
      });
    }), combineMessages);
    var anchors$1 = {
      TAG: 1,
      _0: [
        [unexpectedAnchorsError([node], kind)],
        []
      ]
    };
    return allUnit2([
      msgs,
      anchors$1
    ], combineMessages);
  }
  function slots_to_representation(id10, slots, schemas, below, anchored) {
    var filter$1 = function(allowPlaceholdersOpt, k2, f) {
      var allowPlaceholders = allowPlaceholdersOpt !== void 0 ? allowPlaceholdersOpt : true;
      return filter3(allowPlaceholders, below, schemas, k2, f);
    };
    var s2 = slots.domain;
    var domain = s2 === "#Rep#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultConceptWarning([id10], "domain", "#Rep#", "representation")]
      ]
    } : {
      TAG: 0,
      _0: s2
    };
    var s$1 = slots.display;
    var display = s$1 === "#Ref#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultReferenceWarning([id10], "display", "representation")]
      ]
    } : {
      TAG: 0,
      _0: s$1
    };
    var tokens = map11(all2(filter$1(void 0, 3, function(param, t) {
      if (t.TAG !== 0) {
        return {
          TAG: 1,
          _0: t._0
        };
      }
      var t$1 = t._0;
      if (t$1.TAG === 3) {
        return {
          TAG: 0,
          _0: t$1._0
        };
      }
    }), combineMessages), fromArray9);
    var dimensions = map11(all2(filter$1(void 0, 2, function(param, d) {
      if (d.TAG !== 0) {
        return {
          TAG: 1,
          _0: d._0
        };
      }
      var d$1 = d._0;
      if (d$1.TAG === 2) {
        return {
          TAG: 0,
          _0: d$1._0
        };
      }
    }), combineMessages), fromArray9);
    var schemes = map11(all2(filter$1(void 0, 1, function(param, s3) {
      if (s3.TAG !== 0) {
        return {
          TAG: 1,
          _0: s3._0
        };
      }
      var s$12 = s3._0;
      if (s$12.TAG === 1) {
        return {
          TAG: 0,
          _0: s$12._0
        };
      }
    }), combineMessages), fromArray9);
    var subrepresentations = map11(all2(filter$1(void 0, 0, function(param, r) {
      if (r.TAG !== 0) {
        return {
          TAG: 1,
          _0: r._0
        };
      }
      var r$1 = r._0;
      if (r$1.TAG === 0) {
        return {
          TAG: 0,
          _0: r$1._0
        };
      }
    }), combineMessages), fromArray9);
    var anchors__ = hasAnchorsResult(id10, anchored, schemas, "representation");
    return map11(both72([
      domain,
      display,
      tokens,
      dimensions,
      schemes,
      subrepresentations,
      anchors__
    ], combineMessages), function(param) {
      return {
        TAG: 0,
        _0: {
          id: id10,
          domain: param[0],
          display: param[1],
          tokens: param[2],
          dimensions: param[3],
          schemes: param[4],
          subrepresentations: param[5]
        }
      };
    });
  }
  function slots_to_scheme(id10, slots, schemas, below, anchored) {
    var filter$1 = function(allowPlaceholdersOpt, k2, f) {
      var allowPlaceholders = allowPlaceholdersOpt !== void 0 ? allowPlaceholdersOpt : true;
      return filter3(allowPlaceholders, below, schemas, k2, f);
    };
    var s2 = slots.concept_structure;
    var concept_structure = s2 === "#Sch#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultConceptWarning([id10], "concept structure", "#Sch#", "scheme")]
      ]
    } : {
      TAG: 0,
      _0: s2
    };
    var s$1 = slots.graphic_structure;
    var graphic_structure = s$1 === "#Ref#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultReferenceWarning([id10], "graphic structure", "scheme")]
      ]
    } : {
      TAG: 0,
      _0: s$1
    };
    var $$function = fromOption2(slots.function, function(param) {
      return [
        [noFunctionError([id10])],
        []
      ];
    });
    var explicit = fromOption2(slots.explicit, function(param) {
      return [
        [noExplicitError([id10])],
        []
      ];
    });
    var scope = fromOption2(slots.scope, function(param) {
      return [
        [noScopeError([id10])],
        []
      ];
    });
    var organisation = {
      TAG: 0,
      _0: slots.organisation
    };
    var tokens = map11(all2(filter$1(void 0, 3, function(param, t) {
      if (t.TAG !== 0) {
        return {
          TAG: 1,
          _0: t._0
        };
      }
      var t$1 = t._0;
      if (t$1.TAG === 3) {
        return {
          TAG: 0,
          _0: t$1._0
        };
      }
    }), combineMessages), fromArray9);
    var dimensions = map11(all2(filter$1(void 0, 2, function(param, d) {
      if (d.TAG !== 0) {
        return {
          TAG: 1,
          _0: d._0
        };
      }
      var d$1 = d._0;
      if (d$1.TAG === 2) {
        return {
          TAG: 0,
          _0: d$1._0
        };
      }
    }), combineMessages), fromArray9);
    var schemes = map11(all2(filter$1(void 0, 1, function(param, s3) {
      if (s3.TAG !== 0) {
        return {
          TAG: 1,
          _0: s3._0
        };
      }
      var s$12 = s3._0;
      if (s$12.TAG === 1) {
        return {
          TAG: 0,
          _0: s$12._0
        };
      }
    }), combineMessages), fromArray9);
    var representations__ = allUnit2(filter$1(false, 0, function(id$p, param) {
      return {
        TAG: 1,
        _0: [
          [badHierarchyError([
            id10,
            id$p
          ], "scheme", "representation")],
          []
        ]
      };
    }), combineMessages);
    var anchors__ = hasAnchorsResult(id10, anchored, schemas, "scheme");
    return map11(both112([
      concept_structure,
      graphic_structure,
      $$function,
      explicit,
      scope,
      tokens,
      dimensions,
      schemes,
      organisation,
      representations__,
      anchors__
    ], combineMessages), function(param) {
      return {
        TAG: 1,
        _0: {
          id: id10,
          concept_structure: param[0],
          graphic_structure: param[1],
          function: param[2],
          explicit: param[3],
          scope: param[4],
          tokens: param[5],
          dimensions: param[6],
          schemes: param[7],
          organisation: param[8]
        }
      };
    });
  }
  function slots_to_dimension(id10, slots, schemas, below, anchored) {
    var filter$1 = function(allowPlaceholdersOpt, k2, f) {
      var allowPlaceholders = allowPlaceholdersOpt !== void 0 ? allowPlaceholdersOpt : true;
      return filter3(allowPlaceholders, below, schemas, k2, f);
    };
    var s2 = slots.concept;
    var concept = s2 === "#Dim#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultConceptWarning([id10], "concept", "#Dim#", "dimension")]
      ]
    } : {
      TAG: 0,
      _0: s2
    };
    var concept_scale = fromOption2(slots.concept_scale, function(param) {
      return [
        [noQuantityScaleError([id10], "concept")],
        []
      ];
    });
    var concept_attributes = {
      TAG: 0,
      _0: slots.concept_attributes
    };
    var s$1 = slots.graphic;
    var graphic = s$1 === "#Ref#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultReferenceWarning([id10], "graphic", "dimension")]
      ]
    } : {
      TAG: 0,
      _0: s$1
    };
    var graphic_scale = fromOption2(slots.concept_scale, function(param) {
      return [
        [noQuantityScaleError([id10], "graphic")],
        []
      ];
    });
    var graphic_attributes = {
      TAG: 0,
      _0: slots.graphic_attributes
    };
    var $$function = fromOption2(slots.function, function(param) {
      return [
        [noFunctionError([id10])],
        []
      ];
    });
    var explicit = fromOption2(slots.explicit, function(param) {
      return [
        [noExplicitError([id10])],
        []
      ];
    });
    var scope = fromOption2(slots.scope, function(param) {
      return [
        [noScopeError([id10])],
        []
      ];
    });
    var organisation = {
      TAG: 0,
      _0: slots.organisation
    };
    var tokCount = {
      contents: 0
    };
    var dimCount = {
      contents: 0
    };
    var tokens = map11(all2(filter$1(void 0, 3, function(param, t) {
      if (t.TAG === 0) {
        var t$1 = t._0;
        if (t$1.TAG !== 3) {
          return;
        }
        tokCount.contents = tokCount.contents + 1 | 0;
        return {
          TAG: 0,
          _0: t$1._0
        };
      }
      tokCount.contents = tokCount.contents + 1 | 0;
      return {
        TAG: 1,
        _0: t._0
      };
    }), combineMessages), fromArray9);
    var dimensions = map11(all2(filter$1(void 0, 2, function(param, d) {
      if (d.TAG === 0) {
        var d$1 = d._0;
        if (d$1.TAG !== 2) {
          return;
        }
        dimCount.contents = dimCount.contents + 1 | 0;
        return {
          TAG: 0,
          _0: d$1._0
        };
      }
      dimCount.contents = dimCount.contents + 1 | 0;
      return {
        TAG: 1,
        _0: d._0
      };
    }), combineMessages), fromArray9);
    var representations__ = allUnit2(filter$1(false, 0, function(id$p, param) {
      return {
        TAG: 1,
        _0: [
          [badHierarchyError([
            id10,
            id$p
          ], "dimension", "representation")],
          []
        ]
      };
    }), combineMessages);
    var schemes__ = allUnit2(filter$1(false, 1, function(id$p, param) {
      return {
        TAG: 1,
        _0: [
          [badHierarchyError([
            id10,
            id$p
          ], "dimension", "scheme")],
          []
        ]
      };
    }), combineMessages);
    var anchors__ = hasAnchorsResult(id10, anchored, schemas, "dimension");
    var at_least_one_token_or_dimension__ = (tokCount.contents + dimCount.contents | 0) >= 1 ? {
      TAG: 0,
      _0: void 0
    } : {
      TAG: 1,
      _0: [
        [create7([id10], "R-dimensions must have at least one child.", "R-dimensions must contain at least one R-symbol, or must split into sub-R-dimensions (or both). This R-dimension has no R-symbol children and no sub-R-dimensions.", "Add an R-symbol or a sub-R-dimension below this R-dimension.", void 0)],
        []
      ]
    };
    return map11(both16([
      concept,
      concept_scale,
      concept_attributes,
      graphic,
      graphic_scale,
      graphic_attributes,
      $$function,
      explicit,
      scope,
      tokens,
      dimensions,
      organisation,
      representations__,
      schemes__,
      anchors__,
      at_least_one_token_or_dimension__
    ], combineMessages), function(param) {
      return {
        TAG: 2,
        _0: {
          id: id10,
          concept: param[0],
          concept_scale: param[1],
          concept_attributes: param[2],
          graphic: param[3],
          graphic_scale: param[4],
          graphic_attributes: param[5],
          function: param[6],
          scope: param[8],
          explicit: param[7],
          dimensions: param[10],
          tokens: param[9],
          organisation: param[11]
        }
      };
    });
  }
  function slots_to_token(id10, slots, schemas, below, anchored) {
    var filterAnchored = function(k2, f) {
      return filter3(void 0, anchored, schemas, k2, f);
    };
    var filter$1 = function(allowPlaceholdersOpt, k2, f) {
      var allowPlaceholders = allowPlaceholdersOpt !== void 0 ? allowPlaceholdersOpt : true;
      return filter3(allowPlaceholders, below, schemas, k2, f);
    };
    var s2 = slots.concept;
    var concept = s2 === "#Sym#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultConceptWarning([id10], "concept", "#Sym#", "token")]
      ]
    } : {
      TAG: 0,
      _0: s2
    };
    var s$1 = slots.graphic;
    var graphic = s$1 === "#Ref#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultReferenceWarning([id10], "graphic", "token")]
      ]
    } : {
      TAG: 0,
      _0: s$1
    };
    var is_class = fromOption2(slots.is_class, function(param) {
      return [
        [create7([id10], 'Unspecified if R-symbol is a "class" R-symbol.', 'R-symbols can be "standard" or "class": that is, they can stand in for more than one actual thing in the representation. This has not been specified.', 'Select whether this token is a class using the "Is class?" dropdown.', void 0)],
        []
      ];
    });
    var $$function = fromOption2(slots.function, function(param) {
      return [
        [noFunctionError([id10])],
        []
      ];
    });
    var explicit = fromOption2(slots.explicit, function(param) {
      return [
        [noExplicitError([id10])],
        []
      ];
    });
    var badNonAnchorError = function(id$p, kind, anchor) {
      return create7([
        id10,
        id$p
      ], (kind.startsWith("R-") ? "An " : "A ") + kind + " schema below an R-symbol must be anchored.", "Children of R-symbols must either be a sub-R-symbol, or it must be an anchored schema. This schema is not anchored, but it is not a sub-R-symbol: it is " + (kind.startsWith("R-") ? "an " : "a ") + kind + ".", anchor ? "Replace this connection with an anchoring connection." : "Remove this schema, or place it elsewhere in the hierarchy.", void 0);
    };
    var sub_tokens = map11(all2(filter$1(void 0, 3, function(param, t) {
      if (t.TAG !== 0) {
        return {
          TAG: 1,
          _0: t._0
        };
      }
      var t$1 = t._0;
      if (t$1.TAG === 3) {
        return {
          TAG: 0,
          _0: t$1._0
        };
      }
    }), combineMessages), fromArray9);
    var dimensions__ = allUnit2(filter$1(false, 2, function(id$p, param) {
      return {
        TAG: 1,
        _0: [
          [badNonAnchorError(id$p, "R-dimension", true)],
          []
        ]
      };
    }), combineMessages);
    var schemes__ = allUnit2(filter$1(false, 1, function(id$p, param) {
      return {
        TAG: 1,
        _0: [
          [badNonAnchorError(id$p, "R-scheme", true)],
          []
        ]
      };
    }), combineMessages);
    var representations__ = allUnit2(filter$1(false, 0, function(id$p, param) {
      return {
        TAG: 1,
        _0: [
          [badNonAnchorError(id$p, "Representation", false)],
          []
        ]
      };
    }), combineMessages);
    var anchored_tokens = map11(all2(filterAnchored(3, function(param, t) {
      if (t.TAG !== 0) {
        return {
          TAG: 1,
          _0: t._0
        };
      }
      var t$1 = t._0;
      if (t$1.TAG === 3) {
        return {
          TAG: 0,
          _0: t$1._0
        };
      }
    }), combineMessages), fromArray9);
    var anchored_dimensions = map11(all2(filterAnchored(2, function(param, d) {
      if (d.TAG !== 0) {
        return {
          TAG: 1,
          _0: d._0
        };
      }
      var d$1 = d._0;
      if (d$1.TAG === 2) {
        return {
          TAG: 0,
          _0: d$1._0
        };
      }
    }), combineMessages), fromArray9);
    var anchored_schemes = map11(all2(filterAnchored(1, function(param, s3) {
      if (s3.TAG !== 0) {
        return {
          TAG: 1,
          _0: s3._0
        };
      }
      var s$12 = s3._0;
      if (s$12.TAG === 1) {
        return {
          TAG: 0,
          _0: s$12._0
        };
      }
    }), combineMessages), fromArray9);
    var anchored_representations = map11(all2(filterAnchored(0, function(param, r) {
      if (r.TAG !== 0) {
        return {
          TAG: 1,
          _0: r._0
        };
      }
      var r$1 = r._0;
      if (r$1.TAG === 0) {
        return {
          TAG: 0,
          _0: r$1._0
        };
      }
    }), combineMessages), fromArray9);
    return map11(both13([
      concept,
      graphic,
      is_class,
      $$function,
      explicit,
      sub_tokens,
      anchored_tokens,
      anchored_dimensions,
      anchored_schemes,
      anchored_representations,
      dimensions__,
      schemes__,
      representations__
    ], combineMessages), function(param) {
      return {
        TAG: 3,
        _0: {
          id: id10,
          concept: param[0],
          graphic: param[1],
          is_class: param[2],
          function: param[3],
          explicit: param[4],
          sub_tokens: param[5],
          anchored_tokens: param[6],
          anchored_dimensions: param[7],
          anchored_schemes: param[8],
          anchored_representations: param[9]
        }
      };
    });
  }
  function slots_to_placeholder(id10, slots, schemas, below, anchored) {
    var filterAnchored = function(allowPlaceholdersOpt, k2, f) {
      var allowPlaceholders = allowPlaceholdersOpt !== void 0 ? allowPlaceholdersOpt : true;
      return filter3(allowPlaceholders, anchored, schemas, k2, f);
    };
    var filter$1 = function(allowPlaceholdersOpt, k2, f) {
      var allowPlaceholders = allowPlaceholdersOpt !== void 0 ? allowPlaceholdersOpt : true;
      return filter3(allowPlaceholders, below, schemas, k2, f);
    };
    var s2 = slots.description;
    var description = s2 === "#Placeholder#" ? {
      TAG: 1,
      _0: [
        [],
        [defaultConceptWarning([id10], "description", "#Placeholder#", "placeholder")]
      ]
    } : {
      TAG: 0,
      _0: s2
    };
    var isIntensional = fromOption2(slots.isIntensional, function(param) {
      return [
        [create7([id10], "Unspecified why Placeholder is included.", "Placeholders can be included because the substructure is not understood, or because it is understood but has chosen not to be modelled. You must indicate which case this is.", 'Select whether this Placeholder is understood using the "Omitted but understood?" dropdown.', void 0)],
        []
      ];
    });
    var representations__ = allUnit2(filter$1(true, 0, function(param, t) {
      if (t.TAG === 0) {
        if (t._0.TAG === 0) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return;
        }
      } else {
        return {
          TAG: 1,
          _0: t._0
        };
      }
    }), combineMessages);
    var schemes__ = allUnit2(filter$1(false, 1, function(param, t) {
      if (t.TAG === 0) {
        if (t._0.TAG === 1) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return;
        }
      } else {
        return {
          TAG: 1,
          _0: t._0
        };
      }
    }), combineMessages);
    var dimensions__ = allUnit2(filter$1(false, 2, function(param, t) {
      if (t.TAG === 0) {
        if (t._0.TAG === 2) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return;
        }
      } else {
        return {
          TAG: 1,
          _0: t._0
        };
      }
    }), combineMessages);
    var tokens__ = allUnit2(filter$1(false, 3, function(param, t) {
      if (t.TAG === 0) {
        if (t._0.TAG === 3) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return;
        }
      } else {
        return {
          TAG: 1,
          _0: t._0
        };
      }
    }), combineMessages);
    var anchored_representations__ = allUnit2(filterAnchored(true, 0, function(param, t) {
      if (t.TAG === 0) {
        if (t._0.TAG === 0) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return;
        }
      } else {
        return {
          TAG: 1,
          _0: t._0
        };
      }
    }), combineMessages);
    var anchored_schemes__ = allUnit2(filterAnchored(false, 1, function(param, t) {
      if (t.TAG === 0) {
        if (t._0.TAG === 1) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return;
        }
      } else {
        return {
          TAG: 1,
          _0: t._0
        };
      }
    }), combineMessages);
    var anchored_dimensions__ = allUnit2(filterAnchored(false, 2, function(param, t) {
      if (t.TAG === 0) {
        if (t._0.TAG === 2) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return;
        }
      } else {
        return {
          TAG: 1,
          _0: t._0
        };
      }
    }), combineMessages);
    var anchored_tokens__ = allUnit2(filterAnchored(false, 3, function(param, t) {
      if (t.TAG === 0) {
        if (t._0.TAG === 3) {
          return {
            TAG: 0,
            _0: void 0
          };
        } else {
          return;
        }
      } else {
        return {
          TAG: 1,
          _0: t._0
        };
      }
    }), combineMessages);
    return flatMap6(both102([
      description,
      isIntensional,
      representations__,
      schemes__,
      dimensions__,
      tokens__,
      anchored_representations__,
      anchored_schemes__,
      anchored_dimensions__,
      anchored_tokens__
    ], combineMessages), function(param) {
      return {
        TAG: 1,
        _0: [
          [],
          []
        ]
      };
    });
  }
  function fromSlotsAndLinks(slots, links2) {
    var match2 = toposort(links2, $$Map.keys(slots));
    var errors = match2[2];
    var order = match2[1];
    var roots = match2[0];
    if (errors.length !== 0) {
      return {
        TAG: 1,
        _0: [
          errors,
          []
        ]
      };
    }
    var f = function(_schemas, _i) {
      while (true) {
        var i = _i;
        var schemas2 = _schemas;
        if (i < 0) {
          return schemas2;
        }
        var id10 = getExn7(order, i);
        var children5 = keepMap2(links2, function(id11) {
          return function(param) {
            if (param[0] === id11 && param[2] === 0) {
              return some7(param[1]);
            }
          };
        }(id10));
        var anchoredChildren = keepMap2(links2, function(id11) {
          return function(param) {
            if (param[0] === id11 && param[2] === 1) {
              return some7(param[1]);
            }
          };
        }(id10));
        var match3 = $$Map.get(slots, id10);
        var match$1;
        if (match3 !== void 0) {
          switch (match3.TAG | 0) {
            case 0:
              match$1 = [
                0,
                slots_to_representation(id10, match3._0, schemas2, children5, anchoredChildren)
              ];
              break;
            case 1:
              match$1 = [
                1,
                slots_to_scheme(id10, match3._0, schemas2, children5, anchoredChildren)
              ];
              break;
            case 2:
              match$1 = [
                2,
                slots_to_dimension(id10, match3._0, schemas2, children5, anchoredChildren)
              ];
              break;
            case 3:
              match$1 = [
                3,
                slots_to_token(id10, match3._0, schemas2, children5, anchoredChildren)
              ];
              break;
            case 4:
              match$1 = [
                4,
                slots_to_placeholder(id10, match3._0, schemas2, children5, anchoredChildren)
              ];
              break;
          }
        } else {
          match$1 = [
            4,
            {
              TAG: 1,
              _0: [
                [internalError("BAD LINK", "Node with ID " + toString2(id10) + " missing.")],
                []
              ]
            }
          ];
        }
        var schemas$1 = $$Map.set(schemas2, id10, [
          match$1[0],
          match$1[1]
        ]);
        _i = i - 1 | 0;
        _schemas = schemas$1;
        continue;
      }
      ;
    };
    var schemas = f($$Map.empty(void 0), order.length - 1 | 0);
    var handleRoot = function(root5, multi) {
      var match3 = $$Map.get(schemas, root5);
      if (match3 !== void 0) {
        var err = match3[1];
        if (err.TAG === 0) {
          var r = err._0;
          if (r.TAG === 0) {
            var relations = all2(keepMap2(links2, function(param) {
              if (param[2] !== 2) {
                return;
              }
              var t = param[1];
              var s2 = param[0];
              var match4 = $$Map.get(schemas, s2);
              var match$1 = $$Map.get(schemas, t);
              if (match4 !== void 0) {
                var s$1 = match4[1];
                if (s$1.TAG === 0) {
                  if (match$1 !== void 0) {
                    var t$1 = match$1[1];
                    if (t$1.TAG === 0) {
                      return {
                        TAG: 0,
                        _0: create9(s$1._0, t$1._0, {
                          _0: "Automatic conversion"
                        })
                      };
                    }
                  }
                } else if (match$1 !== void 0 && match$1[1].TAG !== 0) {
                  return;
                }
              }
              var e3 = internalError("REL MISSING", "A relation link should be between two nodes (" + toString2(s2) + ", " + toString2(t) + "), but I can't find them!");
              return {
                TAG: 1,
                _0: [
                  [e3],
                  []
                ]
              };
            }), combineMessages);
            return map11(relations, function(relations2) {
              return {
                root: r,
                relations: relations2
              };
            });
          }
          var e = needsParentError([root5]);
          return {
            TAG: 1,
            _0: [
              [e],
              []
            ]
          };
        }
        var slots$1 = $$Map.get(slots, root5);
        if (slots$1 !== void 0) {
          switch (slots$1.TAG | 0) {
            case 0:
            case 4:
              return err;
            default:
              var e$1 = needsParentError([root5]);
              return thenError(err, [
                [e$1],
                []
              ], combineMessages);
          }
        } else {
          var e$2 = internalError("EXTRA ROOT", "We have found an ID (" + toString2(root5) + "), but have no idea what it's for!");
          return thenError(err, [
            [e$2],
            []
          ], combineMessages);
        }
      } else {
        var e$3 = internalError("LOST ROOT" + (multi ? " MULTI" : ""), "We know what the root should be (" + toString2(root5) + "), but somehow never found it!");
        return thenError(all2(map7($$Map.values(schemas), function(param) {
          return param[1];
        }), combineMessages), [
          [e$3],
          []
        ], combineMessages);
      }
    };
    var len = roots.length;
    if (len !== 1) {
      if (len === 0) {
        if ($$Map.isEmpty(slots)) {
          return {
            TAG: 1,
            _0: [
              [],
              []
            ]
          };
        } else {
          return {
            TAG: 1,
            _0: [
              [noRootError],
              []
            ]
          };
        }
      }
      var models = map7(roots, function(__x) {
        return handleRoot(__x, true);
      });
      var w = multipleRootsWarning(roots);
      return thenError(all2(models, combineMessages), [
        [],
        [w]
      ], combineMessages);
    }
    var root4 = roots[0];
    return handleRoot(root4, false);
  }
  function create10(nodes4, message2, details2, param) {
    return create7(nodes4, message2, details2, void 0, void 0);
  }
  function subsumes(t, t$p) {
    var s2 = $$Set.fromArray(nodes2(t));
    var s$p = $$Set.fromArray(nodes2(t$p));
    if ($$Set.subset(s$p, s2)) {
      return message(t$p) === message(t);
    } else {
      return false;
    }
  }
  var toJson18 = toJson15;
  var fromJson17 = fromJson14;
  function blitUnsafe2(a1, srcofs1, a22, srcofs2, blitLength) {
    if (srcofs2 <= srcofs1) {
      for (var j = 0; j < blitLength; ++j) {
        a22[j + srcofs2 | 0] = a1[j + srcofs1 | 0];
      }
      return;
    }
    for (var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1) {
      a22[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];
    }
  }
  function merge4(src, src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs, cmp12) {
    var src1r = src1ofs + src1len | 0;
    var src2r = src2ofs + src2len | 0;
    var _i1 = src1ofs;
    var _s1 = src[src1ofs];
    var _i2 = src2ofs;
    var _s2 = src2[src2ofs];
    var _d = dstofs;
    while (true) {
      var d = _d;
      var s2 = _s2;
      var i2 = _i2;
      var s1 = _s1;
      var i1 = _i1;
      if (cmp12(s1, s2) <= 0) {
        dst[d] = s1;
        var i1$1 = i1 + 1 | 0;
        if (i1$1 >= src1r) {
          return blitUnsafe2(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
        }
        _d = d + 1 | 0;
        _s1 = src[i1$1];
        _i1 = i1$1;
        continue;
      }
      dst[d] = s2;
      var i2$1 = i2 + 1 | 0;
      if (i2$1 >= src2r) {
        return blitUnsafe2(src, i1, dst, d + 1 | 0, src1r - i1 | 0);
      }
      _d = d + 1 | 0;
      _s2 = src2[i2$1];
      _i2 = i2$1;
      continue;
    }
    ;
  }
  function insertionSort(src, srcofs, dst, dstofs, len, cmp12) {
    for (var i = 0; i < len; ++i) {
      var e = src[srcofs + i | 0];
      var j = (dstofs + i | 0) - 1 | 0;
      while (j >= dstofs && cmp12(dst[j], e) > 0) {
        dst[j + 1 | 0] = dst[j];
        j = j - 1 | 0;
      }
      ;
      dst[j + 1 | 0] = e;
    }
  }
  function sortTo(src, srcofs, dst, dstofs, len, cmp12) {
    if (len <= 5) {
      return insertionSort(src, srcofs, dst, dstofs, len, cmp12);
    }
    var l1 = len / 2 | 0;
    var l2 = len - l1 | 0;
    sortTo(src, srcofs + l1 | 0, dst, dstofs + l1 | 0, l2, cmp12);
    sortTo(src, srcofs, src, srcofs + l2 | 0, l1, cmp12);
    return merge4(src, srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs, cmp12);
  }
  function stableSortInPlaceByU2(a3, cmp12) {
    var l = a3.length;
    if (l <= 5) {
      return insertionSort(a3, 0, a3, 0, l, cmp12);
    }
    var l1 = l / 2 | 0;
    var l2 = l - l1 | 0;
    var t = new Array(l2);
    sortTo(a3, l1, t, 0, l2, cmp12);
    sortTo(a3, 0, a3, l2, l1, cmp12);
    return merge4(a3, l2, l1, t, 0, l2, a3, 0, cmp12);
  }
  function stableSortInPlaceBy(a3, cmp12) {
    return stableSortInPlaceByU2(a3, __2(cmp12));
  }
  var spliceObjApply2 = function(obj, name3, args) {
    var i, argLen;
    argLen = args.length;
    var applied = [];
    for (i = 0; i < argLen - 1; ++i) {
      applied.push(args[i]);
    }
    var lastOne = args[argLen - 1];
    for (i = 0; i < lastOne.length; ++i) {
      applied.push(lastOne[i]);
    }
    return obj[name3].apply(obj, applied);
  };
  var React2 = __toModule(require_react());
  var React = __toModule(require_react());
  var t_rpc8 = Datatype.float_;
  var duplicate = (o) => {
    if (o === null) {
      return null;
    } else if (o === void 0) {
      return void 0;
    }
    let p = {};
    for (const [key, value] of Object.entries(o)) {
      if (typeof value === "function") {
        p[key] = value;
      } else if (value === void 0) {
        p[key] = void 0;
      } else if (value === null) {
        p[key] = null;
      } else if (typeof value === "object") {
        if (value instanceof Array) {
          p[key] = value.map(duplicate);
        } else {
          p[key] = duplicate(value);
        }
      } else if (typeof value === "symbol") {
        p[key] = value;
      } else {
        p[key] = JSON.parse(JSON.stringify(value));
      }
    }
    return p;
  };
  var readKey = (o, k2) => {
    return o[k2];
  };
  var dropUndefinedKeys = (o) => {
    var p = duplicate(o);
    Object.keys(p).forEach((key) => {
      if (p[key] === void 0) {
        delete p[key];
      }
    });
    return p;
  };
  function readKeyExn(prim0, prim1) {
    return readKey(prim0, prim1);
  }
  function dropUndefinedKeys2(prim) {
    return dropUndefinedKeys(prim);
  }
  function create11(color3, fontColor, fontSize, fontScaling, fontWeight, highlightColor, highlightFontColor, highlightFontSize, highlightFontWeight, labelProperty, mouseCursor, opacity, renderLabel, semanticStrokeWidth, strokeWidth, markerStart, markerEnd, markerHeight, markerWidth, curveType, strokeDasharray, strokeDashoffset, strokeLinecap, offsetSource, offsetTarget, param) {
    return dropUndefinedKeys2({
      color: color3,
      fontColor,
      fontSize,
      fontScaling,
      fontWeight,
      highlightColor,
      highlightFontColor,
      highlightFontSize,
      highlightFontWeight,
      labelProperty,
      mouseCursor,
      opacity,
      renderLabel,
      semanticStrokeWidth,
      strokeWidth,
      markerStart,
      markerEnd,
      markerHeight,
      markerWidth,
      type: curveType,
      strokeDasharray,
      strokeDashoffset,
      strokeLinecap,
      offsetSource,
      offsetTarget
    });
  }
  var Config = {
    create: create11
  };
  var noop = { value: () => {
  } };
  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
        throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }
  function Dispatch(_) {
    this._ = _;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name3 = "", i = t.indexOf(".");
      if (i >= 0)
        name3 = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t))
        throw new Error("unknown type: " + t);
      return { type: t, name: name3 };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _ = this._, T3 = parseTypenames(typename + "", _), t, i = -1, n = T3.length;
      if (arguments.length < 2) {
        while (++i < n)
          if ((t = (typename = T3[i]).type) && (t = get12(_[t], typename.name)))
            return t;
        return;
      }
      if (callback != null && typeof callback !== "function")
        throw new Error("invalid callback: " + callback);
      while (++i < n) {
        if (t = (typename = T3[i]).type)
          _[t] = set5(_[t], typename.name, callback);
        else if (callback == null)
          for (t in _)
            _[t] = set5(_[t], typename.name, null);
      }
      return this;
    },
    copy: function() {
      var copy = {}, _ = this._;
      for (var t in _)
        copy[t] = _[t].slice();
      return new Dispatch(copy);
    },
    call: function(type, that) {
      if ((n = arguments.length - 2) > 0)
        for (var args = new Array(n), i = 0, n, t; i < n; ++i)
          args[i] = arguments[i + 2];
      if (!this._.hasOwnProperty(type))
        throw new Error("unknown type: " + type);
      for (t = this._[type], i = 0, n = t.length; i < n; ++i)
        t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
      if (!this._.hasOwnProperty(type))
        throw new Error("unknown type: " + type);
      for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
        t[i].value.apply(that, args);
    }
  };
  function get12(type, name3) {
    for (var i = 0, n = type.length, c3; i < n; ++i) {
      if ((c3 = type[i]).name === name3) {
        return c3.value;
      }
    }
  }
  function set5(type, name3, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name3) {
        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    }
    if (callback != null)
      type.push({ name: name3, value: callback });
    return type;
  }
  var dispatch_default = dispatch;
  var xhtml = "http://www.w3.org/1999/xhtml";
  var namespaces_default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  function namespace_default(name3) {
    var prefix = name3 += "", i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name3.slice(0, i)) !== "xmlns")
      name3 = name3.slice(i + 1);
    return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name3 } : name3;
  }
  function creatorInherit(name3) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name3) : document2.createElementNS(uri, name3);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name3) {
    var fullname = namespace_default(name3);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }
  function none() {
  }
  function selector_default(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }
  function select_default(select) {
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group2[i]) && (subnode = select.call(node, node.__data__, i, group2))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }
  function array(x5) {
    return x5 == null ? [] : Array.isArray(x5) ? x5 : Array.from(x5);
  }
  function empty4() {
    return [];
  }
  function selectorAll_default(selector) {
    return selector == null ? empty4 : function() {
      return this.querySelectorAll(selector);
    };
  }
  function arrayAll(select) {
    return function() {
      return array(select.apply(this, arguments));
    };
  }
  function selectAll_default(select) {
    if (typeof select === "function")
      select = arrayAll(select);
    else
      select = selectorAll_default(select);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents2 = [], j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          subgroups.push(select.call(node, node.__data__, i, group2));
          parents2.push(node);
        }
      }
    }
    return new Selection(subgroups, parents2);
  }
  function matcher_default(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }
  var find2 = Array.prototype.find;
  function childFind(match2) {
    return function() {
      return find2.call(this.children, match2);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match2) {
    return this.select(match2 == null ? childFirst : childFind(typeof match2 === "function" ? match2 : childMatcher(match2)));
  }
  var filter4 = Array.prototype.filter;
  function children3() {
    return Array.from(this.children);
  }
  function childrenFilter(match2) {
    return function() {
      return filter4.call(this.children, match2);
    };
  }
  function selectChildren_default(match2) {
    return this.selectAll(match2 == null ? children3 : childrenFilter(typeof match2 === "function" ? match2 : childMatcher(match2)));
  }
  function filter_default(match2) {
    if (typeof match2 !== "function")
      match2 = matcher_default(match2);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group2[i]) && match2.call(node, node.__data__, i, group2)) {
          subgroup.push(node);
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }
  function sparse_default(update2) {
    return new Array(update2.length);
  }
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent2, datum3) {
    this.ownerDocument = parent2.ownerDocument;
    this.namespaceURI = parent2.namespaceURI;
    this._next = null;
    this._parent = parent2;
    this.__data__ = datum3;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child2) {
      return this._parent.insertBefore(child2, this._next);
    },
    insertBefore: function(child2, next) {
      return this._parent.insertBefore(child2, next);
    },
    querySelector: function(selector) {
      return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
      return this._parent.querySelectorAll(selector);
    }
  };
  function constant_default(x5) {
    return function() {
      return x5;
    };
  }
  function bindIndex(parent2, group2, enter, update2, exit, data) {
    var i = 0, node, groupLength = group2.length, dataLength = data.length;
    for (; i < dataLength; ++i) {
      if (node = group2[i]) {
        node.__data__ = data[i];
        update2[i] = node;
      } else {
        enter[i] = new EnterNode(parent2, data[i]);
      }
    }
    for (; i < groupLength; ++i) {
      if (node = group2[i]) {
        exit[i] = node;
      }
    }
  }
  function bindKey(parent2, group2, enter, update2, exit, data, key) {
    var i, node, nodeByKeyValue = new Map(), groupLength = group2.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i = 0; i < groupLength; ++i) {
      if (node = group2[i]) {
        keyValues[i] = keyValue = key.call(node, node.__data__, i, group2) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    }
    for (i = 0; i < dataLength; ++i) {
      keyValue = key.call(parent2, data[i], i, data) + "";
      if (node = nodeByKeyValue.get(keyValue)) {
        update2[i] = node;
        node.__data__ = data[i];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i] = new EnterNode(parent2, data[i]);
      }
    }
    for (i = 0; i < groupLength; ++i) {
      if ((node = group2[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
        exit[i] = node;
      }
    }
  }
  function datum(node) {
    return node.__data__;
  }
  function data_default(value, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents2 = this._parents, groups2 = this._groups;
    if (typeof value !== "function")
      value = constant_default(value);
    for (var m2 = groups2.length, update2 = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
      var parent2 = parents2[j], group2 = groups2[j], groupLength = group2.length, data = arraylike(value.call(parent2, parent2 && parent2.__data__, j, parents2)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update2[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
      bind(parent2, group2, enterGroup, updateGroup, exitGroup, data, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength)
            ;
          previous._next = next || null;
        }
      }
    }
    update2 = new Selection(update2, parents2);
    update2._enter = enter;
    update2._exit = exit;
    return update2;
  }
  function arraylike(data) {
    return typeof data === "object" && "length" in data ? data : Array.from(data);
  }
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }
  function join_default(onenter, onupdate, onexit) {
    var enter = this.enter(), update2 = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter)
        enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }
    if (onupdate != null) {
      update2 = onupdate(update2);
      if (update2)
        update2 = update2.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter && update2 ? enter.merge(update2).order() : update2;
  }
  function merge_default(context) {
    var selection3 = context.selection ? context.selection() : context;
    for (var groups0 = this._groups, groups1 = selection3._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge6 = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge6[i] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Selection(merges, this._parents);
  }
  function order_default() {
    for (var groups2 = this._groups, j = -1, m2 = groups2.length; ++j < m2; ) {
      for (var group2 = groups2[j], i = group2.length - 1, next = group2[i], node; --i >= 0; ) {
        if (node = group2[i]) {
          if (next && node.compareDocumentPosition(next) ^ 4)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  }
  function sort_default(compare2) {
    if (!compare2)
      compare2 = ascending;
    function compareNode(a3, b) {
      return a3 && b ? compare2(a3.__data__, b.__data__) : !a3 - !b;
    }
    for (var groups2 = this._groups, m2 = groups2.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          sortgroup[i] = node;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending(a3, b) {
    return a3 < b ? -1 : a3 > b ? 1 : a3 >= b ? 0 : NaN;
  }
  function call_default() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }
  function nodes_default() {
    return Array.from(this);
  }
  function node_default() {
    for (var groups2 = this._groups, j = 0, m2 = groups2.length; j < m2; ++j) {
      for (var group2 = groups2[j], i = 0, n = group2.length; i < n; ++i) {
        var node = group2[i];
        if (node)
          return node;
      }
    }
    return null;
  }
  function size_default() {
    let size11 = 0;
    for (const node of this)
      ++size11;
    return size11;
  }
  function empty_default() {
    return !this.node();
  }
  function each_default(callback) {
    for (var groups2 = this._groups, j = 0, m2 = groups2.length; j < m2; ++j) {
      for (var group2 = groups2[j], i = 0, n = group2.length, node; i < n; ++i) {
        if (node = group2[i])
          callback.call(node, node.__data__, i, group2);
      }
    }
    return this;
  }
  function attrRemove(name3) {
    return function() {
      this.removeAttribute(name3);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name3, value) {
    return function() {
      this.setAttribute(name3, value);
    };
  }
  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }
  function attrFunction(name3, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.removeAttribute(name3);
      else
        this.setAttribute(name3, v);
    };
  }
  function attrFunctionNS(fullname, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }
  function attr_default(name3, value) {
    var fullname = namespace_default(name3);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
  }
  function window_default(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }
  function styleRemove(name3) {
    return function() {
      this.style.removeProperty(name3);
    };
  }
  function styleConstant(name3, value, priority) {
    return function() {
      this.style.setProperty(name3, value, priority);
    };
  }
  function styleFunction(name3, value, priority) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.style.removeProperty(name3);
      else
        this.style.setProperty(name3, v, priority);
    };
  }
  function style_default(name3, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name3, value, priority == null ? "" : priority)) : styleValue(this.node(), name3);
  }
  function styleValue(node, name3) {
    return node.style.getPropertyValue(name3) || window_default(node).getComputedStyle(node, null).getPropertyValue(name3);
  }
  function propertyRemove(name3) {
    return function() {
      delete this[name3];
    };
  }
  function propertyConstant(name3, value) {
    return function() {
      this[name3] = value;
    };
  }
  function propertyFunction(name3, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        delete this[name3];
      else
        this[name3] = v;
    };
  }
  function property_default(name3, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name3, value)) : this.node()[name3];
  }
  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList(node) {
    return node.classList || new ClassList(node);
  }
  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }
  ClassList.prototype = {
    add: function(name3) {
      var i = this._names.indexOf(name3);
      if (i < 0) {
        this._names.push(name3);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function(name3) {
      var i = this._names.indexOf(name3);
      if (i >= 0) {
        this._names.splice(i, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function(name3) {
      return this._names.indexOf(name3) >= 0;
    }
  };
  function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n)
      list.add(names[i]);
  }
  function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n)
      list.remove(names[i]);
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name3, value) {
    var names = classArray(name3 + "");
    if (arguments.length < 2) {
      var list = classList(this.node()), i = -1, n = names.length;
      while (++i < n)
        if (!list.contains(names[i]))
          return false;
      return true;
    }
    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
  }
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }
  function text_default(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
  }
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }
  function htmlFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }
  function html_default(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
  }
  function raise() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }
  function lower() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }
  function append_default(name3) {
    var create18 = typeof name3 === "function" ? name3 : creator_default(name3);
    return this.select(function() {
      return this.appendChild(create18.apply(this, arguments));
    });
  }
  function constantNull() {
    return null;
  }
  function insert_default(name3, before) {
    var create18 = typeof name3 === "function" ? name3 : creator_default(name3), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create18.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }
  function remove5() {
    var parent2 = this.parentNode;
    if (parent2)
      parent2.removeChild(this);
  }
  function remove_default() {
    return this.each(remove5);
  }
  function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent2 = this.parentNode;
    return parent2 ? parent2.insertBefore(clone, this.nextSibling) : clone;
  }
  function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent2 = this.parentNode;
    return parent2 ? parent2.insertBefore(clone, this.nextSibling) : clone;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }
  function datum_default(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name3 = "", i = t.indexOf(".");
      if (i >= 0)
        name3 = t.slice(i + 1), t = t.slice(0, i);
      return { type: t, name: name3 };
    });
  }
  function onRemove(typename) {
    return function() {
      var on = this.__on;
      if (!on)
        return;
      for (var j = 0, i = -1, m2 = on.length, o; j < m2; ++j) {
        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
        } else {
          on[++i] = o;
        }
      }
      if (++i)
        on.length = i;
      else
        delete this.__on;
    };
  }
  function onAdd(typename, value, options) {
    return function() {
      var on = this.__on, o, listener = contextListener(value);
      if (on)
        for (var j = 0, m2 = on.length; j < m2; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options);
      o = { type: typename.type, name: typename.name, value, listener, options };
      if (!on)
        this.__on = [o];
      else
        on.push(o);
    };
  }
  function on_default(typename, value, options) {
    var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t;
    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on)
        for (var j = 0, m2 = on.length, o; j < m2; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
      return;
    }
    on = value ? onAdd : onRemove;
    for (i = 0; i < n; ++i)
      this.each(on(typenames[i], value, options));
    return this;
  }
  function dispatchEvent(node, type, params) {
    var window2 = window_default(node), event = window2.CustomEvent;
    if (typeof event === "function") {
      event = new event(type, params);
    } else {
      event = window2.document.createEvent("Event");
      if (params)
        event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type, false, false);
    }
    node.dispatchEvent(event);
  }
  function dispatchConstant(type, params) {
    return function() {
      return dispatchEvent(this, type, params);
    };
  }
  function dispatchFunction(type, params) {
    return function() {
      return dispatchEvent(this, type, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
  }
  function* iterator_default() {
    for (var groups2 = this._groups, j = 0, m2 = groups2.length; j < m2; ++j) {
      for (var group2 = groups2[j], i = 0, n = group2.length, node; i < n; ++i) {
        if (node = group2[i])
          yield node;
      }
    }
  }
  var root2 = [null];
  function Selection(groups2, parents2) {
    this._groups = groups2;
    this._parents = parents2;
  }
  function selection() {
    return new Selection([[document.documentElement]], root2);
  }
  function selection_selection() {
    return this;
  }
  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: select_default,
    selectAll: selectAll_default,
    selectChild: selectChild_default,
    selectChildren: selectChildren_default,
    filter: filter_default,
    data: data_default,
    enter: enter_default,
    exit: exit_default,
    join: join_default,
    merge: merge_default,
    selection: selection_selection,
    order: order_default,
    sort: sort_default,
    call: call_default,
    nodes: nodes_default,
    node: node_default,
    size: size_default,
    empty: empty_default,
    each: each_default,
    attr: attr_default,
    style: style_default,
    property: property_default,
    classed: classed_default,
    text: text_default,
    html: html_default,
    raise: raise_default,
    lower: lower_default,
    append: append_default,
    insert: insert_default,
    remove: remove_default,
    clone: clone_default,
    datum: datum_default,
    on: on_default,
    dispatch: dispatch_default2,
    [Symbol.iterator]: iterator_default
  };
  var selection_default = selection;
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent2, definition) {
    var prototype = Object.create(parent2.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
  var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
  var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
  var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
  var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
  var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy: function(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable: function() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format) {
    var m2, l;
    format = (format + "").trim().toLowerCase();
    return (m2 = reHex.exec(format)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba(r, g, b, a3) {
    if (a3 <= 0)
      r = g = b = NaN;
    return new Rgb(r, g, b, a3);
  }
  function rgbConvert(o) {
    if (!(o instanceof Color))
      o = color(o);
    if (!o)
      return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  }
  function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb, extend(Color, {
    brighter: function(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    darker: function(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    rgb: function() {
      return this;
    },
    displayable: function() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  }
  function rgb_formatRgb() {
    var a3 = this.opacity;
    a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3));
    return (a3 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a3 === 1 ? ")" : ", " + a3 + ")");
  }
  function hex(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0));
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h, s2, l, a3) {
    if (a3 <= 0)
      h = s2 = l = NaN;
    else if (l <= 0 || l >= 1)
      h = s2 = NaN;
    else if (s2 <= 0)
      h = NaN;
    return new Hsl(h, s2, l, a3);
  }
  function hslConvert(o) {
    if (o instanceof Hsl)
      return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color))
      o = color(o);
    if (!o)
      return new Hsl();
    if (o instanceof Hsl)
      return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min6 = Math.min(r, g, b), max6 = Math.max(r, g, b), h = NaN, s2 = max6 - min6, l = (max6 + min6) / 2;
    if (s2) {
      if (r === max6)
        h = (g - b) / s2 + (g < b) * 6;
      else if (g === max6)
        h = (b - r) / s2 + 2;
      else
        h = (r - g) / s2 + 4;
      s2 /= l < 0.5 ? max6 + min6 : 2 - max6 - min6;
      h *= 60;
    } else {
      s2 = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s2, l, o.opacity);
  }
  function hsl(h, s2, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
  }
  function Hsl(h, s2, l, opacity) {
    this.h = +h;
    this.s = +s2;
    this.l = +l;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl, extend(Color, {
    brighter: function(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    darker: function(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb: function() {
      var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
      return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    displayable: function() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl: function() {
      var a3 = this.opacity;
      a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3));
      return (a3 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a3 === 1 ? ")" : ", " + a3 + ")");
    }
  }));
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }
  function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis_default(values) {
    var n = values.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  function basisClosed_default(values) {
    var n = values.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  var constant_default2 = (x5) => () => x5;
  function linear(a3, d) {
    return function(t) {
      return a3 + t * d;
    };
  }
  function exponential(a3, b, y5) {
    return a3 = Math.pow(a3, y5), b = Math.pow(b, y5) - a3, y5 = 1 / y5, function(t) {
      return Math.pow(a3 + t * b, y5);
    };
  }
  function gamma(y5) {
    return (y5 = +y5) === 1 ? nogamma : function(a3, b) {
      return b - a3 ? exponential(a3, b, y5) : constant_default2(isNaN(a3) ? b : a3);
    };
  }
  function nogamma(a3, b) {
    var d = b - a3;
    return d ? linear(a3, d) : constant_default2(isNaN(a3) ? b : a3);
  }
  var rgb_default = function rgbGamma(y5) {
    var color3 = gamma(y5);
    function rgb3(start3, end) {
      var r = color3((start3 = rgb(start3)).r, (end = rgb(end)).r), g = color3(start3.g, end.g), b = color3(start3.b, end.b), opacity = nogamma(start3.opacity, end.opacity);
      return function(t) {
        start3.r = r(t);
        start3.g = g(t);
        start3.b = b(t);
        start3.opacity = opacity(t);
        return start3 + "";
      };
    }
    rgb3.gamma = rgbGamma;
    return rgb3;
  }(1);
  function rgbSpline(spline) {
    return function(colors) {
      var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color3;
      for (i = 0; i < n; ++i) {
        color3 = rgb(colors[i]);
        r[i] = color3.r || 0;
        g[i] = color3.g || 0;
        b[i] = color3.b || 0;
      }
      r = spline(r);
      g = spline(g);
      b = spline(b);
      color3.opacity = 1;
      return function(t) {
        color3.r = r(t);
        color3.g = g(t);
        color3.b = b(t);
        return color3 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default);
  var rgbBasisClosed = rgbSpline(basisClosed_default);
  function number_default(a3, b) {
    return a3 = +a3, b = +b, function(t) {
      return a3 * (1 - t) + b * t;
    };
  }
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero2(b) {
    return function() {
      return b;
    };
  }
  function one2(b) {
    return function(t) {
      return b(t) + "";
    };
  }
  function string_default(a3, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
    a3 = a3 + "", b = b + "";
    while ((am = reA.exec(a3)) && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s2[i])
          s2[i] += bs;
        else
          s2[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s2[i])
          s2[i] += bm;
        else
          s2[++i] = bm;
      } else {
        s2[++i] = null;
        q.push({ i, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s2[i])
        s2[i] += bs;
      else
        s2[++i] = bs;
    }
    return s2.length < 2 ? q[0] ? one2(q[0].x) : zero2(b) : (b = q.length, function(t) {
      for (var i2 = 0, o; i2 < b; ++i2)
        s2[(o = q[i2]).i] = o.x(t);
      return s2.join("");
    });
  }
  var degrees = 180 / Math.PI;
  var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose_default(a3, b, c3, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a3 * a3 + b * b))
      a3 /= scaleX, b /= scaleX;
    if (skewX = a3 * c3 + b * d)
      c3 -= a3 * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c3 * c3 + d * d))
      c3 /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a3 * d < b * c3)
      a3 = -a3, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a3) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX,
      scaleY
    };
  }
  var svgNode;
  function parseCss(value) {
    const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m2.isIdentity ? identity : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
  }
  function parseSvg(value) {
    if (value == null)
      return identity;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate()))
      return identity;
    value = value.matrix;
    return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
  }
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s2) {
      return s2.length ? s2.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s2, q) {
      if (xa !== xb || ya !== yb) {
        var i = s2.push("translate(", null, pxComma, null, pxParen);
        q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
      } else if (xb || yb) {
        s2.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a3, b, s2, q) {
      if (a3 !== b) {
        if (a3 - b > 180)
          b += 360;
        else if (b - a3 > 180)
          a3 += 360;
        q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default(a3, b) });
      } else if (b) {
        s2.push(pop(s2) + "rotate(" + b + degParen);
      }
    }
    function skewX(a3, b, s2, q) {
      if (a3 !== b) {
        q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default(a3, b) });
      } else if (b) {
        s2.push(pop(s2) + "skewX(" + b + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s2, q) {
      if (xa !== xb || ya !== yb) {
        var i = s2.push(pop(s2) + "scale(", null, ",", null, ")");
        q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a3, b) {
      var s2 = [], q = [];
      a3 = parse(a3), b = parse(b);
      translate(a3.translateX, a3.translateY, b.translateX, b.translateY, s2, q);
      rotate(a3.rotate, b.rotate, s2, q);
      skewX(a3.skewX, b.skewX, s2, q);
      scale(a3.scaleX, a3.scaleY, b.scaleX, b.scaleY, s2, q);
      a3 = b = null;
      return function(t) {
        var i = -1, n = q.length, o;
        while (++i < n)
          s2[(o = q[i]).i] = o.x(t);
        return s2.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
  var frame = 0;
  var timeout = 0;
  var interval = 0;
  var pokeDelay = 1e3;
  var taskHead;
  var taskTail;
  var clockLast = 0;
  var clockNow = 0;
  var clockSkew = 0;
  var clock = typeof performance === "object" && performance.now ? performance : Date;
  var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
    setTimeout(f, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function")
        throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail)
          taskTail._next = this;
        else
          taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };
  function timer(callback, delay, time) {
    var t = new Timer();
    t.restart(callback, delay, time);
    return t;
  }
  function timerFlush() {
    now();
    ++frame;
    var t = taskHead, e;
    while (t) {
      if ((e = clockNow - t._time) >= 0)
        t._call.call(void 0, e);
      t = t._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now3 = clock.now(), delay = now3 - clockLast;
    if (delay > pokeDelay)
      clockSkew -= delay, clockLast = now3;
  }
  function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time)
          time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }
    taskTail = t0;
    sleep(time);
  }
  function sleep(time) {
    if (frame)
      return;
    if (timeout)
      timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
      if (time < Infinity)
        timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval)
        interval = clearInterval(interval);
    } else {
      if (!interval)
        clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }
  function timeout_default(callback, delay, time) {
    var t = new Timer();
    delay = delay == null ? 0 : +delay;
    t.restart((elapsed) => {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }
  var emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
  var emptyTween = [];
  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var RUNNING = 4;
  var ENDING = 5;
  var ENDED = 6;
  function schedule_default(node, name3, id10, index3, group2, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id10 in schedules)
      return;
    create12(node, id10, {
      name: name3,
      index: index3,
      group: group2,
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id10) {
    var schedule = get13(node, id10);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set6(node, id10) {
    var schedule = get13(node, id10);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get13(node, id10) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id10]))
      throw new Error("transition not found");
    return schedule;
  }
  function create12(node, id10, self) {
    var schedules = node.__transition, tween;
    schedules[id10] = self;
    self.timer = timer(schedule, 0, self.time);
    function schedule(elapsed) {
      self.state = SCHEDULED;
      self.timer.restart(start3, self.delay, self.time);
      if (self.delay <= elapsed)
        start3(elapsed - self.delay);
    }
    function start3(elapsed) {
      var i, j, n, o;
      if (self.state !== SCHEDULED)
        return stop();
      for (i in schedules) {
        o = schedules[i];
        if (o.name !== self.name)
          continue;
        if (o.state === STARTED)
          return timeout_default(start3);
        if (o.state === RUNNING) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("interrupt", node, node.__data__, o.index, o.group);
          delete schedules[i];
        } else if (+i < id10) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
      }
      timeout_default(function() {
        if (self.state === STARTED) {
          self.state = RUNNING;
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      });
      self.state = STARTING;
      self.on.call("start", node, node.__data__, self.index, self.group);
      if (self.state !== STARTING)
        return;
      self.state = STARTED;
      tween = new Array(n = self.tween.length);
      for (i = 0, j = -1; i < n; ++i) {
        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
          tween[++j] = o;
        }
      }
      tween.length = j + 1;
    }
    function tick(elapsed) {
      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i = -1, n = tween.length;
      while (++i < n) {
        tween[i].call(node, t);
      }
      if (self.state === ENDING) {
        self.on.call("end", node, node.__data__, self.index, self.group);
        stop();
      }
    }
    function stop() {
      self.state = ENDED;
      self.timer.stop();
      delete schedules[id10];
      for (var i in schedules)
        return;
      delete node.__transition;
    }
  }
  function interrupt_default(node, name3) {
    var schedules = node.__transition, schedule, active, empty11 = true, i;
    if (!schedules)
      return;
    name3 = name3 == null ? null : name3 + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).name !== name3) {
        empty11 = false;
        continue;
      }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i];
    }
    if (empty11)
      delete node.__transition;
  }
  function interrupt_default2(name3) {
    return this.each(function() {
      interrupt_default(this, name3);
    });
  }
  function tweenRemove(id10, name3) {
    var tween0, tween1;
    return function() {
      var schedule = set6(this, id10), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name3) {
            tween1 = tween1.slice();
            tween1.splice(i, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id10, name3, value) {
    var tween0, tween1;
    if (typeof value !== "function")
      throw new Error();
    return function() {
      var schedule = set6(this, id10), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = { name: name3, value }, i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name3) {
            tween1[i] = t;
            break;
          }
        }
        if (i === n)
          tween1.push(t);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name3, value) {
    var id10 = this._id;
    name3 += "";
    if (arguments.length < 2) {
      var tween = get13(this.node(), id10).tween;
      for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name3) {
          return t.value;
        }
      }
      return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id10, name3, value));
  }
  function tweenValue(transition3, name3, value) {
    var id10 = transition3._id;
    transition3.each(function() {
      var schedule = set6(this, id10);
      (schedule.value || (schedule.value = {}))[name3] = value.apply(this, arguments);
    });
    return function(node) {
      return get13(node, id10).value[name3];
    };
  }
  function interpolate_default(a3, b) {
    var c3;
    return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c3 = color(b)) ? (b = c3, rgb_default) : string_default)(a3, b);
  }
  function attrRemove2(name3) {
    return function() {
      this.removeAttribute(name3);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name3, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name3);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction2(name3, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name3);
      string0 = this.getAttribute(name3);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attrFunctionNS2(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attr_default2(name3, value) {
    var fullname = namespace_default(name3), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name3, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name3, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
  }
  function attrInterpolate(name3, i) {
    return function(t) {
      this.setAttribute(name3, i.call(this, t));
    };
  }
  function attrInterpolateNS(fullname, i) {
    return function(t) {
      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
  }
  function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && attrInterpolateNS(fullname, i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween(name3, value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && attrInterpolate(name3, i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function attrTween_default(name3, value) {
    var key = "attr." + name3;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    var fullname = namespace_default(name3);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }
  function delayFunction(id10, value) {
    return function() {
      init(this, id10).delay = +value.apply(this, arguments);
    };
  }
  function delayConstant(id10, value) {
    return value = +value, function() {
      init(this, id10).delay = value;
    };
  }
  function delay_default(value) {
    var id10 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id10, value)) : get13(this.node(), id10).delay;
  }
  function durationFunction(id10, value) {
    return function() {
      set6(this, id10).duration = +value.apply(this, arguments);
    };
  }
  function durationConstant(id10, value) {
    return value = +value, function() {
      set6(this, id10).duration = value;
    };
  }
  function duration_default(value) {
    var id10 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id10, value)) : get13(this.node(), id10).duration;
  }
  function easeConstant(id10, value) {
    if (typeof value !== "function")
      throw new Error();
    return function() {
      set6(this, id10).ease = value;
    };
  }
  function ease_default(value) {
    var id10 = this._id;
    return arguments.length ? this.each(easeConstant(id10, value)) : get13(this.node(), id10).ease;
  }
  function easeVarying(id10, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (typeof v !== "function")
        throw new Error();
      set6(this, id10).ease = v;
    };
  }
  function easeVarying_default(value) {
    if (typeof value !== "function")
      throw new Error();
    return this.each(easeVarying(this._id, value));
  }
  function filter_default2(match2) {
    if (typeof match2 !== "function")
      match2 = matcher_default(match2);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group2[i]) && match2.call(node, node.__data__, i, group2)) {
          subgroup.push(node);
        }
      }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
  }
  function merge_default2(transition3) {
    if (transition3._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition3._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge6 = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge6[i] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Transition(merges, this._parents, this._name, this._id);
  }
  function start(name3) {
    return (name3 + "").trim().split(/^|\s+/).every(function(t) {
      var i = t.indexOf(".");
      if (i >= 0)
        t = t.slice(0, i);
      return !t || t === "start";
    });
  }
  function onFunction(id10, name3, listener) {
    var on0, on1, sit = start(name3) ? init : set6;
    return function() {
      var schedule = sit(this, id10), on = schedule.on;
      if (on !== on0)
        (on1 = (on0 = on).copy()).on(name3, listener);
      schedule.on = on1;
    };
  }
  function on_default2(name3, listener) {
    var id10 = this._id;
    return arguments.length < 2 ? get13(this.node(), id10).on.on(name3) : this.each(onFunction(id10, name3, listener));
  }
  function removeFunction(id10) {
    return function() {
      var parent2 = this.parentNode;
      for (var i in this.__transition)
        if (+i !== id10)
          return;
      if (parent2)
        parent2.removeChild(this);
    };
  }
  function remove_default2() {
    return this.on("end.remove", removeFunction(this._id));
  }
  function select_default2(select) {
    var name3 = this._name, id10 = this._id;
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group2[i]) && (subnode = select.call(node, node.__data__, i, group2))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
          schedule_default(subgroup[i], name3, id10, i, subgroup, get13(node, id10));
        }
      }
    }
    return new Transition(subgroups, this._parents, name3, id10);
  }
  function selectAll_default2(select) {
    var name3 = this._name, id10 = this._id;
    if (typeof select !== "function")
      select = selectorAll_default(select);
    for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents2 = [], j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          for (var children5 = select.call(node, node.__data__, i, group2), child2, inherit3 = get13(node, id10), k2 = 0, l = children5.length; k2 < l; ++k2) {
            if (child2 = children5[k2]) {
              schedule_default(child2, name3, id10, k2, children5, inherit3);
            }
          }
          subgroups.push(children5);
          parents2.push(node);
        }
      }
    }
    return new Transition(subgroups, parents2, name3, id10);
  }
  var Selection2 = selection_default.prototype.constructor;
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }
  function styleNull(name3, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name3), string1 = (this.style.removeProperty(name3), styleValue(this, name3));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name3) {
    return function() {
      this.style.removeProperty(name3);
    };
  }
  function styleConstant2(name3, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name3);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction2(name3, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name3), value1 = value(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name3), styleValue(this, name3));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id10, name3) {
    var on0, on1, listener0, key = "style." + name3, event = "end." + key, remove7;
    return function() {
      var schedule = set6(this, id10), on = schedule.on, listener = schedule.value[key] == null ? remove7 || (remove7 = styleRemove2(name3)) : void 0;
      if (on !== on0 || listener0 !== listener)
        (on1 = (on0 = on).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default2(name3, value, priority) {
    var i = (name3 += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value == null ? this.styleTween(name3, styleNull(name3, i)).on("end.style." + name3, styleRemove2(name3)) : typeof value === "function" ? this.styleTween(name3, styleFunction2(name3, i, tweenValue(this, "style." + name3, value))).each(styleMaybeRemove(this._id, name3)) : this.styleTween(name3, styleConstant2(name3, i, value), priority).on("end.style." + name3, null);
  }
  function styleInterpolate(name3, i, priority) {
    return function(t) {
      this.style.setProperty(name3, i.call(this, t), priority);
    };
  }
  function styleTween(name3, value, priority) {
    var t, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t = (i0 = i) && styleInterpolate(name3, i, priority);
      return t;
    }
    tween._value = value;
    return tween;
  }
  function styleTween_default(name3, value, priority) {
    var key = "style." + (name3 += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, styleTween(name3, value, priority == null ? "" : priority));
  }
  function textConstant2(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction2(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default2(value) {
    return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
  }
  function textInterpolate(i) {
    return function(t) {
      this.textContent = i.call(this, t);
    };
  }
  function textTween(value) {
    var t0, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t0 = (i0 = i) && textInterpolate(i);
      return t0;
    }
    tween._value = value;
    return tween;
  }
  function textTween_default(value) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, textTween(value));
  }
  function transition_default() {
    var name3 = this._name, id0 = this._id, id1 = newId();
    for (var groups2 = this._groups, m2 = groups2.length, j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          var inherit3 = get13(node, id0);
          schedule_default(node, name3, id1, i, group2, {
            time: inherit3.time + inherit3.delay + inherit3.duration,
            delay: 0,
            duration: inherit3.duration,
            ease: inherit3.ease
          });
        }
      }
    }
    return new Transition(groups2, this._parents, name3, id1);
  }
  function end_default() {
    var on0, on1, that = this, id10 = that._id, size11 = that.size();
    return new Promise(function(resolve, reject2) {
      var cancel = { value: reject2 }, end = { value: function() {
        if (--size11 === 0)
          resolve();
      } };
      that.each(function() {
        var schedule = set6(this, id10), on = schedule.on;
        if (on !== on0) {
          on1 = (on0 = on).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }
        schedule.on = on1;
      });
      if (size11 === 0)
        resolve();
    });
  }
  var id4 = 0;
  function Transition(groups2, parents2, name3, id10) {
    this._groups = groups2;
    this._parents = parents2;
    this._name = name3;
    this._id = id10;
  }
  function transition(name3) {
    return selection_default().transition(name3);
  }
  function newId() {
    return ++id4;
  }
  var selection_prototype = selection_default.prototype;
  Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: select_default2,
    selectAll: selectAll_default2,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: filter_default2,
    merge: merge_default2,
    selection: selection_default2,
    transition: transition_default,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: on_default2,
    attr: attr_default2,
    attrTween: attrTween_default,
    style: style_default2,
    styleTween: styleTween_default,
    text: text_default2,
    textTween: textTween_default,
    remove: remove_default2,
    tween: tween_default,
    delay: delay_default,
    duration: duration_default,
    ease: ease_default,
    easeVarying: easeVarying_default,
    end: end_default,
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
  };
  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }
  var defaultTiming = {
    time: null,
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };
  function inherit(node, id10) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id10])) {
      if (!(node = node.parentNode)) {
        throw new Error(`transition ${id10} not found`);
      }
    }
    return timing;
  }
  function transition_default2(name3) {
    var id10, timing;
    if (name3 instanceof Transition) {
      id10 = name3._id, name3 = name3._name;
    } else {
      id10 = newId(), (timing = defaultTiming).time = now(), name3 = name3 == null ? null : name3 + "";
    }
    for (var groups2 = this._groups, m2 = groups2.length, j = 0; j < m2; ++j) {
      for (var group2 = groups2[j], n = group2.length, node, i = 0; i < n; ++i) {
        if (node = group2[i]) {
          schedule_default(node, name3, id10, i, group2, timing || inherit(node, id10));
        }
      }
    }
    return new Transition(groups2, this._parents, name3, id10);
  }
  selection_default.prototype.interrupt = interrupt_default2;
  selection_default.prototype.transition = transition_default2;
  function Transform(k2, x5, y5) {
    this.k = k2;
    this.x = x5;
    this.y = y5;
  }
  Transform.prototype = {
    constructor: Transform,
    scale: function(k2) {
      return k2 === 1 ? this : new Transform(this.k * k2, this.x, this.y);
    },
    translate: function(x5, y5) {
      return x5 === 0 & y5 === 0 ? this : new Transform(this.k, this.x + this.k * x5, this.y + this.k * y5);
    },
    apply: function(point5) {
      return [point5[0] * this.k + this.x, point5[1] * this.k + this.y];
    },
    applyX: function(x5) {
      return x5 * this.k + this.x;
    },
    applyY: function(y5) {
      return y5 * this.k + this.y;
    },
    invert: function(location) {
      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
    },
    invertX: function(x5) {
      return (x5 - this.x) / this.k;
    },
    invertY: function(y5) {
      return (y5 - this.y) / this.k;
    },
    rescaleX: function(x5) {
      return x5.copy().domain(x5.range().map(this.invertX, this).map(x5.invert, x5));
    },
    rescaleY: function(y5) {
      return y5.copy().domain(y5.range().map(this.invertY, this).map(y5.invert, y5));
    },
    toString: function() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };
  var identity2 = new Transform(1, 0, 0);
  transform.prototype = Transform.prototype;
  function transform(node) {
    while (!node.__zoom)
      if (!(node = node.parentNode))
        return identity2;
    return node.__zoom;
  }
  var ReactD3Graph = __toModule(require_lib());
  var empty_nodes = [];
  var empty_links = [];
  var empty7 = {
    nodes: empty_nodes,
    links: empty_links
  };
  var $$Selection = {
    empty: empty7
  };
  var empty8 = $$Selection.empty;
  var r_const2 = unique(void 0);
  var s_const3 = unique(void 0);
  var d_const = unique(void 0);
  var t_const = unique(void 0);
  var p_const = unique(void 0);
  function hash11(t) {
    switch (t) {
      case 0:
        return r_const2;
      case 1:
        return s_const3;
      case 2:
        return d_const;
      case 3:
        return t_const;
      case 4:
        return p_const;
    }
  }
  var hash$1 = record6([
    "kind",
    hash11
  ], [
    "name",
    hash4
  ], [
    "name_suffix",
    function(__x) {
      return hash3(__x, hash4);
    }
  ], [
    "reference",
    hash4
  ], [
    "reference_suffix",
    function(__x) {
      return hash3(__x, hash4);
    }
  ], [
    "dashed",
    hash6
  ]);
  var id7 = {
    contents: 0
  };
  function create14(str) {
    id7.contents = id7.contents + 1 | 0;
    return str + ("/" + id7.contents);
  }
  var DOMAIN_ERROR = /* @__PURE__ */ create14("Color-ReactD3Graph.DOMAIN_ERROR");
  function isHexString(s2) {
    return /^#(([0-9a-f])|([0-9A-F])){6}$/.test(s2);
  }
  function sliceHexString(s2) {
    var r = s2.slice(1, 3);
    var g = s2.slice(3, 5);
    var b = s2.slice(5, 7);
    return [
      r,
      g,
      b
    ];
  }
  function hexToFloat(h) {
    return Number("0x".concat(h)) / 255;
  }
  function floatToHex(f) {
    var s2 = (f * 255 | 0).toString(16);
    if (s2.length < 2) {
      return "0" + s2;
    } else {
      return s2;
    }
  }
  function canonOfInternal(s2) {
    if (isHexString(s2)) {
      var match2 = sliceHexString(s2);
      return {
        red: hexToFloat(match2[0]),
        green: hexToFloat(match2[1]),
        blue: hexToFloat(match2[2])
      };
    }
    throw {
      RE_EXN_ID: DOMAIN_ERROR,
      Error: new Error()
    };
  }
  function internalOfCanon(t) {
    return "#".concat(floatToHex(t.red), floatToHex(t.green), floatToHex(t.blue));
  }
  function ofHexString(s2) {
    return internalOfCanon(canonOfInternal(s2));
  }
  var h_const2 = unique(void 0);
  var a_const = unique(void 0);
  var g_const2 = unique(void 0);
  function hash12(t) {
    switch (t) {
      case 0:
        return h_const2;
      case 1:
        return a_const;
      case 2:
        return g_const2;
    }
  }
  function toJson20(t) {
    var tmp;
    switch (t) {
      case 0:
        tmp = "Hierarchy";
        break;
      case 1:
        tmp = "Anchor";
        break;
      case 2:
        tmp = "Relation";
        break;
    }
    return toJson6(tmp);
  }
  function fromJson19(json) {
    return flatMap2(fromJson5(json), function(s2) {
      switch (s2) {
        case "Anchor":
          return create5(1);
        case "Hierarchy":
          return create5(0);
        case "Relation":
          return create5(2);
        default:
          return error_ss([
            "Unknown relation value '",
            s2,
            "'"
          ]);
      }
    });
  }
  var V1 = {
    toJson: toJson20,
    fromJson: fromJson19
  };
  function toJson$13(t) {
    var tmp;
    switch (t) {
      case 0:
        tmp = "Hierarchy";
        break;
      case 1:
        tmp = "Anchor";
        break;
      case 2:
        tmp = "Relation";
        break;
      case 3:
        tmp = "Overlap";
        break;
      case 4:
        tmp = "Disjoint";
        break;
      case 5:
        tmp = "Generic";
        break;
    }
    return toJson6(tmp);
  }
  function fromJson$14(json) {
    return flatMap2(fromJson5(json), function(s2) {
      switch (s2) {
        case "Anchor":
          return create5(1);
        case "Disjoint":
          return create5(4);
        case "Generic":
          return create5(5);
        case "Hierarchy":
          return create5(0);
        case "Overlap":
          return create5(3);
        case "Relation":
          return create5(2);
        default:
          return error_ss([
            "Unknown relation value '",
            s2,
            "'"
          ]);
      }
    });
  }
  var V2 = {
    toJson: toJson$13,
    fromJson: fromJson$14
  };
  function v2_to_v3(v2) {
    if (v2 !== 1) {
      if (v2 !== 0) {
        return 2;
      } else {
        return 0;
      }
    } else {
      return 1;
    }
  }
  function toJson$23(t) {
    var tmp;
    switch (t) {
      case 0:
        tmp = "Hierarchy";
        break;
      case 1:
        tmp = "Anchor";
        break;
      case 2:
        tmp = "Generic";
        break;
    }
    return toJson6(tmp);
  }
  function fromJson$22(json) {
    return flatMap2(fromJson5(json), function(s2) {
      switch (s2) {
        case "Anchor":
          return create5(1);
        case "Generic":
          return create5(2);
        case "Hierarchy":
          return create5(0);
        default:
          return map6(fromJson$14(json), v2_to_v3);
      }
    });
  }
  var hash$12 = record2([
    "kind",
    hash12
  ], [
    "label",
    function(__x) {
      return hash3(__x, hash);
    }
  ]);
  function relOffset(source2, target2) {
    return getWithDefault4(map8(both2([
      source2,
      target2
    ]), function(param) {
      var target3 = param[1];
      var source3 = param[0];
      var x1 = source3.x;
      var y1 = source3.y;
      var x22 = target3.x;
      var y22 = target3.y;
      var size11 = readKeyExn(source3, "size");
      var dx0 = x22 - x1;
      var dy0 = y22 - y1;
      var match2;
      if (Math.abs(dx0 / dy0) > size11.width / size11.height) {
        var dx = size11.width / 20 * Math.sign(dx0);
        var dy = dy0 * dx / dx0;
        match2 = [
          dx,
          dy
        ];
      } else {
        var dy$1 = size11.height / 20 * Math.sign(dy0);
        var dx$1 = dx0 * dy$1 / dy0;
        match2 = [
          dx$1,
          dy$1
        ];
      }
      var dy$2 = match2[1];
      var dx$2 = match2[0];
      var payload3 = readKeyExn(source3, "payload");
      var match$1 = payload3.kind;
      if (match$1 !== 2) {
        return {
          dx: dx$2 - 1,
          dy: dy$2
        };
      }
      if (Math.abs(dx$2 - size11.width / 20 * Math.sign(dx0)) >= 1e-4) {
        return {
          dx: dx$2 - 1,
          dy: dy$2
        };
      }
      var yoffset = size11.height / 10 - dy$2 + size11.height / 20;
      var xoffset = (-8 + 8 * yoffset / (size11.height / 10)) * -1 * Math.sign(dx$2);
      return {
        dx: dx$2 + xoffset - 1,
        dy: dy$2
      };
    }), {
      dx: 0,
      dy: 0
    });
  }
  var generic = Config.create(some7(ofHexString("#AA0000")), void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, 5, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, function(source2, target2, param) {
    return relOffset(source2, target2);
  }, function(source2, target2, param) {
    return relOffset(target2, source2);
  }, void 0);
  var Kind = {
    Stable: {
      V1,
      V2,
      V3: {
        toJson: toJson$23,
        fromJson: fromJson$22
      }
    }
  };
  function Make5($$Request, $$Response2) {
    var listen2 = function(t, callback) {
      t.addEventListener("message", function(msg) {
        return iter2(_12($$Response2.fromJson, JSON.parse(msg.data)), callback);
      });
    };
    var post2 = function(t, request) {
      var req = JSON.stringify(_12($$Request.toJson, request));
      t.postMessage(req);
    };
    var listen$1 = function(callback) {
      this.onmessage = function(msg) {
        return iter2(_12($$Request.fromJson, JSON.parse(msg.data)), callback);
      };
    };
    var respond = function(response) {
      postMessage(JSON.stringify(_12($$Response2.toJson, response)));
    };
    var create18 = function(callback) {
      var callback$1 = function(request) {
        var response = _12(callback, request);
        postMessage(JSON.stringify(_12($$Response2.toJson, response)));
      };
      this.onmessage = function(msg) {
        return iter2(_12($$Request.fromJson, JSON.parse(msg.data)), callback$1);
      };
    };
    return {
      create: function(prim) {
        return new Worker(prim);
      },
      listen: listen2,
      post: post2,
      terminate: function(prim) {
        prim.terminate();
      },
      WorkerThread: {
        create: create18,
        listen: listen$1,
        respond
      }
    };
  }
  function toJson21(t) {
    return fromList3({
      hd: [
        "domain",
        toJson6(t.domain)
      ],
      tl: {
        hd: [
          "display",
          toJson6(t.display)
        ],
        tl: {
          hd: [
            "notes",
            toJson6(t.notes)
          ],
          tl: 0
        }
      }
    });
  }
  function fromJson20(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var domain = getValue("domain", fromJson5);
      var display = getValue("display", fromJson5);
      var notes = getValue("notes", fromJson5);
      return map6(both3([
        domain,
        display,
        notes
      ]), function(param) {
        return {
          domain: param[0],
          display: param[1],
          notes: param[2]
        };
      });
    });
  }
  var empty9 = {
    domain: "#Rep#",
    display: "#Ref#",
    notes: ""
  };
  var hash13 = record3([
    "domain",
    hash4
  ], [
    "display",
    hash4
  ], [
    "notes",
    hash4
  ]);
  function toJson$14(t) {
    return fromList3({
      hd: [
        "concept_structure",
        toJson6(t.concept_structure)
      ],
      tl: {
        hd: [
          "graphic_structure",
          toJson6(t.graphic_structure)
        ],
        tl: {
          hd: [
            "function",
            toJson9(t.function)
          ],
          tl: {
            hd: [
              "explicit",
              toJson10(t.explicit)
            ],
            tl: {
              hd: [
                "scope",
                toJson11(t.scope)
              ],
              tl: {
                hd: [
                  "organisation",
                  toJson6(t.organisation)
                ],
                tl: {
                  hd: [
                    "notes",
                    toJson6(t.notes)
                  ],
                  tl: 0
                }
              }
            }
          }
        }
      }
    });
  }
  function fromJson$15(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var concept_structure = getValue("concept_structure", fromJson5);
      var graphic_structure = getValue("graphic_structure", fromJson5);
      var $$function = getValue("function", fromJson8);
      var explicit = getValue("explicit", fromJson9);
      var scope = getValue("scope", fromJson10);
      var organisation = getValue("organisation", fromJson5);
      var notes = getValue("notes", fromJson5);
      return map6(both7([
        concept_structure,
        graphic_structure,
        $$function,
        explicit,
        scope,
        organisation,
        notes
      ]), function(param) {
        return {
          concept_structure: param[0],
          graphic_structure: param[1],
          function: param[2],
          explicit: param[3],
          scope: param[4],
          organisation: param[5],
          notes: param[6]
        };
      });
    });
  }
  function v1_to_v2(v1) {
    return {
      concept_structure: v1.concept_structure,
      graphic_structure: v1.graphic_structure,
      function: v1.function,
      explicit: v1.explicit,
      scope: v1.scope,
      organisation: v1.organisation,
      notes: v1.notes
    };
  }
  function toJson$24(t) {
    return fromList3({
      hd: [
        "version",
        toJson2(2)
      ],
      tl: {
        hd: [
          "concept_structure",
          toJson6(t.concept_structure)
        ],
        tl: {
          hd: [
            "graphic_structure",
            toJson6(t.graphic_structure)
          ],
          tl: {
            hd: [
              "function",
              toJson4(t.function, toJson9)
            ],
            tl: {
              hd: [
                "explicit",
                toJson4(t.explicit, toJson10)
              ],
              tl: {
                hd: [
                  "scope",
                  toJson4(t.scope, toJson11)
                ],
                tl: {
                  hd: [
                    "organisation",
                    toJson6(t.organisation)
                  ],
                  tl: {
                    hd: [
                      "notes",
                      toJson6(t.notes)
                    ],
                    tl: 0
                  }
                }
              }
            }
          }
        }
      }
    });
  }
  function fromJson$23(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var version = getValue("version", fromJson);
      var v = match(version);
      if (v.TAG !== 0) {
        return map6(fromJson$15(json), v1_to_v2);
      }
      var v$1 = v._0;
      if (v$1 !== 2) {
        return error_ss([
          "Unrecognised version of InspectorState.Scheme: ",
          String(v$1)
        ]);
      }
      var concept_structure = getValue("concept_structure", fromJson5);
      var graphic_structure = getValue("graphic_structure", fromJson5);
      var $$function = getValue("function", function(__x) {
        return fromJson3(__x, fromJson8);
      });
      var explicit = getValue("explicit", function(__x) {
        return fromJson3(__x, fromJson9);
      });
      var scope = getValue("scope", function(__x) {
        return fromJson3(__x, fromJson10);
      });
      var organisation = getValue("organisation", fromJson5);
      var notes = getValue("notes", fromJson5);
      return map6(both7([
        concept_structure,
        graphic_structure,
        $$function,
        explicit,
        scope,
        organisation,
        notes
      ]), function(param) {
        return {
          concept_structure: param[0],
          graphic_structure: param[1],
          function: param[2],
          explicit: param[3],
          scope: param[4],
          organisation: param[5],
          notes: param[6]
        };
      });
    });
  }
  var empty$12 = {
    concept_structure: "#Sch#",
    graphic_structure: "#Ref#",
    function: void 0,
    explicit: void 0,
    scope: void 0,
    organisation: "",
    notes: ""
  };
  var hash$13 = record7([
    "concept_structure",
    hash4
  ], [
    "graphic_structure",
    hash4
  ], [
    "function",
    function(o) {
      return hash3(o, hash5);
    }
  ], [
    "explicit",
    function(o) {
      return hash3(o, hash6);
    }
  ], [
    "scope",
    function(o) {
      return hash3(o, hash7);
    }
  ], [
    "organisation",
    hash4
  ], [
    "notes",
    hash4
  ]);
  function toJson$3(t) {
    return fromList3({
      hd: [
        "concept",
        toJson6(t.concept)
      ],
      tl: {
        hd: [
          "concept_scale",
          toJson12(t.concept_scale)
        ],
        tl: {
          hd: [
            "concept_attributes",
            toJson5(t.concept_attributes, toJson13)
          ],
          tl: {
            hd: [
              "graphic",
              toJson6(t.graphic)
            ],
            tl: {
              hd: [
                "graphic_scale",
                toJson12(t.graphic_scale)
              ],
              tl: {
                hd: [
                  "graphic_attributes",
                  toJson5(t.graphic_attributes, toJson14)
                ],
                tl: {
                  hd: [
                    "function",
                    toJson9(t.function)
                  ],
                  tl: {
                    hd: [
                      "scope",
                      toJson11(t.scope)
                    ],
                    tl: {
                      hd: [
                        "explicit",
                        toJson10(t.explicit)
                      ],
                      tl: {
                        hd: [
                          "organisation",
                          toJson6(t.organisation)
                        ],
                        tl: {
                          hd: [
                            "notes",
                            toJson6(t.notes)
                          ],
                          tl: 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });
  }
  function fromJson$3(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var concept = getValue("concept", fromJson5);
      var concept_scale = getValue("concept_scale", fromJson11);
      var concept_attributes = getValue("concept_attributes", function(j) {
        return fromJson4(j, fromJson12);
      });
      var graphic = getValue("graphic", fromJson5);
      var graphic_scale = getValue("graphic_scale", fromJson11);
      var graphic_attributes = getValue("graphic_attributes", function(j) {
        return fromJson4(j, fromJson13);
      });
      var $$function = getValue("function", fromJson8);
      var scope = getValue("scope", fromJson10);
      var explicit = getValue("explicit", fromJson9);
      var organisation = getValue("organisation", fromJson5);
      var notes = getValue("notes", fromJson5);
      return map6(both11([
        concept,
        concept_scale,
        concept_attributes,
        graphic,
        graphic_scale,
        graphic_attributes,
        $$function,
        scope,
        explicit,
        organisation,
        notes
      ]), function(param) {
        return {
          concept: param[0],
          concept_scale: param[1],
          concept_attributes: param[2],
          graphic: param[3],
          graphic_scale: param[4],
          graphic_attributes: param[5],
          function: param[6],
          scope: param[7],
          explicit: param[8],
          organisation: param[9],
          notes: param[10]
        };
      });
    });
  }
  function v1_to_v2$1(v1) {
    return {
      concept: v1.concept,
      concept_scale: v1.concept_scale,
      concept_attributes: v1.concept_attributes,
      graphic: v1.graphic,
      graphic_scale: v1.graphic_scale,
      graphic_attributes: v1.graphic_attributes,
      function: v1.function,
      scope: v1.scope,
      explicit: v1.explicit,
      organisation: v1.organisation,
      notes: v1.notes
    };
  }
  function toJson$4(t) {
    return fromList3({
      hd: [
        "version",
        toJson2(2)
      ],
      tl: {
        hd: [
          "concept",
          toJson6(t.concept)
        ],
        tl: {
          hd: [
            "concept_scale",
            toJson4(t.concept_scale, toJson12)
          ],
          tl: {
            hd: [
              "concept_attributes",
              toJson5(t.concept_attributes, toJson6)
            ],
            tl: {
              hd: [
                "graphic",
                toJson6(t.graphic)
              ],
              tl: {
                hd: [
                  "graphic_scale",
                  toJson4(t.graphic_scale, toJson12)
                ],
                tl: {
                  hd: [
                    "graphic_attributes",
                    toJson5(t.graphic_attributes, toJson6)
                  ],
                  tl: {
                    hd: [
                      "function",
                      toJson4(t.function, toJson9)
                    ],
                    tl: {
                      hd: [
                        "scope",
                        toJson4(t.scope, toJson11)
                      ],
                      tl: {
                        hd: [
                          "explicit",
                          toJson4(t.explicit, toJson10)
                        ],
                        tl: {
                          hd: [
                            "organisation",
                            toJson6(t.organisation)
                          ],
                          tl: {
                            hd: [
                              "notes",
                              toJson6(t.notes)
                            ],
                            tl: 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });
  }
  function fromJson$4(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var version = getValue("version", fromJson);
      var v = match(version);
      if (v.TAG !== 0) {
        return map6(fromJson$3(json), v1_to_v2$1);
      }
      var v$1 = v._0;
      if (v$1 !== 2) {
        return error_ss([
          "Unknown version for InspectorState.Dimension: ",
          String(v$1)
        ]);
      }
      var concept = getValue("concept", fromJson5);
      var concept_scale = getValue("concept_scale", function(__x) {
        return fromJson3(__x, fromJson11);
      });
      var concept_attributes = getValue("concept_attributes", function(j) {
        return fromJson4(j, fromJson5);
      });
      var graphic = getValue("graphic", fromJson5);
      var graphic_scale = getValue("graphic_scale", function(__x) {
        return fromJson3(__x, fromJson11);
      });
      var graphic_attributes = getValue("graphic_attributes", function(j) {
        return fromJson4(j, fromJson5);
      });
      var $$function = getValue("function", function(__x) {
        return fromJson3(__x, fromJson8);
      });
      var scope = getValue("scope", function(__x) {
        return fromJson3(__x, fromJson10);
      });
      var explicit = getValue("explicit", function(__x) {
        return fromJson3(__x, fromJson9);
      });
      var organisation = getValue("organisation", fromJson5);
      var notes = getValue("notes", fromJson5);
      return map6(both11([
        concept,
        concept_scale,
        concept_attributes,
        graphic,
        graphic_scale,
        graphic_attributes,
        $$function,
        scope,
        explicit,
        organisation,
        notes
      ]), function(param) {
        return {
          concept: param[0],
          concept_scale: param[1],
          concept_attributes: param[2],
          graphic: param[3],
          graphic_scale: param[4],
          graphic_attributes: param[5],
          function: param[6],
          scope: param[7],
          explicit: param[8],
          organisation: param[9],
          notes: param[10]
        };
      });
    });
  }
  var empty$2 = {
    concept: "#Dim#",
    concept_scale: void 0,
    concept_attributes: 0,
    graphic: "#Ref#",
    graphic_scale: void 0,
    graphic_attributes: 0,
    function: void 0,
    scope: void 0,
    explicit: void 0,
    organisation: "",
    notes: ""
  };
  var hash$2 = record11([
    "concept",
    hash4
  ], [
    "concept_scale",
    function(o) {
      return hash3(o, hash8);
    }
  ], [
    "concept_attributes",
    function(attr) {
      return hash2(toArray8(attr), hash4);
    }
  ], [
    "graphic",
    hash4
  ], [
    "graphic_scale",
    function(o) {
      return hash3(o, hash8);
    }
  ], [
    "graphic_attributes",
    function(attr) {
      return hash2(toArray8(attr), hash4);
    }
  ], [
    "function",
    function(o) {
      return hash3(o, hash5);
    }
  ], [
    "scope",
    function(o) {
      return hash3(o, hash7);
    }
  ], [
    "explicit",
    function(o) {
      return hash3(o, hash6);
    }
  ], [
    "organisation",
    hash4
  ], [
    "notes",
    hash4
  ]);
  function toJson$5(t) {
    return fromList3({
      hd: [
        "concept",
        toJson6(t.concept)
      ],
      tl: {
        hd: [
          "graphic",
          toJson6(t.graphic)
        ],
        tl: {
          hd: [
            "is_class",
            toJson10(t.is_class)
          ],
          tl: {
            hd: [
              "function",
              toJson9(t.function)
            ],
            tl: {
              hd: [
                "explicit",
                toJson10(t.explicit)
              ],
              tl: {
                hd: [
                  "notes",
                  toJson6(t.notes)
                ],
                tl: 0
              }
            }
          }
        }
      }
    });
  }
  function fromJson$5(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var concept = getValue("concept", fromJson5);
      var graphic = getValue("graphic", fromJson5);
      var is_class = getValue("is_class", fromJson9);
      var $$function = getValue("function", fromJson8);
      var explicit = getValue("explicit", fromJson9);
      var notes = getValue("notes", fromJson5);
      return map6(both6([
        concept,
        graphic,
        is_class,
        $$function,
        explicit,
        notes
      ]), function(param) {
        return {
          concept: param[0],
          graphic: param[1],
          is_class: param[2],
          function: param[3],
          explicit: param[4],
          notes: param[5]
        };
      });
    });
  }
  function v1_to_v2$2(v1) {
    return {
      concept: v1.concept,
      graphic: v1.graphic,
      is_class: v1.is_class,
      function: v1.function,
      explicit: v1.explicit,
      notes: v1.notes
    };
  }
  function toJson$6(t) {
    return fromList3({
      hd: [
        "version",
        toJson2(2)
      ],
      tl: {
        hd: [
          "concept",
          toJson6(t.concept)
        ],
        tl: {
          hd: [
            "graphic",
            toJson6(t.graphic)
          ],
          tl: {
            hd: [
              "is_class",
              toJson4(t.is_class, toJson10)
            ],
            tl: {
              hd: [
                "function",
                toJson4(t.function, toJson9)
              ],
              tl: {
                hd: [
                  "explicit",
                  toJson4(t.explicit, toJson10)
                ],
                tl: {
                  hd: [
                    "notes",
                    toJson6(t.notes)
                  ],
                  tl: 0
                }
              }
            }
          }
        }
      }
    });
  }
  function fromJson$6(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var version = getValue("version", fromJson);
      var v = match(version);
      if (v.TAG !== 0) {
        return map6(fromJson$5(json), v1_to_v2$2);
      }
      var v$1 = v._0;
      if (v$1 !== 2) {
        return error_ss([
          "Unknown version for InspectorState.Token: ",
          String(v$1)
        ]);
      }
      var concept = getValue("concept", fromJson5);
      var graphic = getValue("graphic", fromJson5);
      var is_class = getValue("is_class", function(__x) {
        return fromJson3(__x, fromJson9);
      });
      var $$function = getValue("function", function(__x) {
        return fromJson3(__x, fromJson8);
      });
      var explicit = getValue("explicit", function(__x) {
        return fromJson3(__x, fromJson9);
      });
      var notes = getValue("notes", fromJson5);
      return map6(both6([
        concept,
        graphic,
        is_class,
        $$function,
        explicit,
        notes
      ]), function(param) {
        return {
          concept: param[0],
          graphic: param[1],
          is_class: param[2],
          function: param[3],
          explicit: param[4],
          notes: param[5]
        };
      });
    });
  }
  var empty$3 = {
    concept: "#Sym#",
    graphic: "#Ref#",
    is_class: void 0,
    function: void 0,
    explicit: void 0,
    notes: ""
  };
  var hash$3 = record6([
    "concept",
    hash4
  ], [
    "graphic",
    hash4
  ], [
    "is_class",
    function(o) {
      return hash3(o, hash6);
    }
  ], [
    "function",
    function(o) {
      return hash3(o, hash5);
    }
  ], [
    "explicit",
    function(o) {
      return hash3(o, hash6);
    }
  ], [
    "notes",
    hash4
  ]);
  function toJson$7(t) {
    return fromList3({
      hd: [
        "version",
        toJson2(1)
      ],
      tl: {
        hd: [
          "description",
          toJson6(t.description)
        ],
        tl: {
          hd: [
            "isIntensional",
            toJson4(t.isIntensional, toJson10)
          ],
          tl: {
            hd: [
              "notes",
              toJson6(t.notes)
            ],
            tl: 0
          }
        }
      }
    });
  }
  function fromJson$7(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var version = getValue("version", fromJson);
      var v = match(version);
      if (v.TAG !== 0) {
        return error_s("Unable to determine InspectorState.Placeholder version");
      }
      var v$1 = v._0;
      if (v$1 !== 1) {
        return error_ss([
          "Unknown InspectorState.Placeholder version ",
          String(v$1)
        ]);
      }
      var description = getValue("description", fromJson5);
      var isIntensional = getValue("isIntensional", function(__x) {
        return fromJson3(__x, fromJson9);
      });
      var notes = getValue("notes", fromJson5);
      return map6(both3([
        description,
        isIntensional,
        notes
      ]), function(param) {
        return {
          description: param[0],
          isIntensional: param[1],
          notes: param[2]
        };
      });
    });
  }
  var hash$4 = record3([
    "description",
    hash4
  ], [
    "isIntensional",
    function(o) {
      return hash3(o, hash6);
    }
  ], [
    "notes",
    hash4
  ]);
  function toJson$8(t) {
    var match2;
    switch (t.TAG | 0) {
      case 0:
        match2 = [
          "representation",
          toJson21(t._0)
        ];
        break;
      case 1:
        match2 = [
          "scheme",
          toJson$14(t._0)
        ];
        break;
      case 2:
        match2 = [
          "dimension",
          toJson$3(t._0)
        ];
        break;
      case 3:
        match2 = [
          "token",
          toJson$5(t._0)
        ];
        break;
    }
    return fromList3({
      hd: [
        "kind",
        toJson6(match2[0])
      ],
      tl: {
        hd: [
          "value",
          match2[1]
        ],
        tl: 0
      }
    });
  }
  function fromJson$8(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var kind = getValue("kind", fromJson5);
      var value = getValue("value", create5);
      return flatMap2(both([
        kind,
        value
      ]), function(param) {
        var value2 = param[1];
        var kind2 = param[0];
        switch (kind2) {
          case "dimension":
            return map6(fromJson$3(value2), function(d) {
              return {
                TAG: 2,
                _0: d
              };
            });
          case "representation":
            return map6(fromJson20(value2), function(r) {
              return {
                TAG: 0,
                _0: r
              };
            });
          case "scheme":
            return map6(fromJson$15(value2), function(s2) {
              return {
                TAG: 1,
                _0: s2
              };
            });
          case "token":
            return map6(fromJson$5(value2), function(t) {
              return {
                TAG: 3,
                _0: t
              };
            });
          default:
            return error_ss([
              "Unknown Schema slot kind '",
              kind2,
              "'"
            ]);
        }
      });
    });
  }
  var V12 = {
    toJson: toJson$8,
    fromJson: fromJson$8
  };
  function v1_to_v2$3(v1) {
    switch (v1.TAG | 0) {
      case 0:
        return {
          TAG: 0,
          _0: v1._0
        };
      case 1:
        return {
          TAG: 1,
          _0: v1_to_v2(v1._0)
        };
      case 2:
        return {
          TAG: 2,
          _0: v1_to_v2$1(v1._0)
        };
      case 3:
        return {
          TAG: 3,
          _0: v1_to_v2$2(v1._0)
        };
    }
  }
  function toJson$9(t) {
    var match2;
    switch (t.TAG | 0) {
      case 0:
        match2 = [
          "representation",
          toJson21(t._0)
        ];
        break;
      case 1:
        match2 = [
          "scheme",
          toJson$24(t._0)
        ];
        break;
      case 2:
        match2 = [
          "dimension",
          toJson$4(t._0)
        ];
        break;
      case 3:
        match2 = [
          "token",
          toJson$6(t._0)
        ];
        break;
      case 4:
        match2 = [
          "placeholder",
          toJson$7(t._0)
        ];
        break;
    }
    return fromList3({
      hd: [
        "version",
        toJson2(2)
      ],
      tl: {
        hd: [
          "kind",
          toJson6(match2[0])
        ],
        tl: {
          hd: [
            "value",
            match2[1]
          ],
          tl: 0
        }
      }
    });
  }
  function fromJson$9(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Schema slots object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var version = getValue("version", fromJson);
      var v = match(version);
      if (v.TAG !== 0) {
        return map6(fromJson$8(json), v1_to_v2$3);
      }
      var v$1 = v._0;
      if (v$1 !== 2) {
        return error_ss([
          "Unknown InspectorState version ",
          String(v$1)
        ]);
      }
      var kind = getValue("kind", fromJson5);
      var value = getValue("value", create5);
      return flatMap2(both([
        kind,
        value
      ]), function(param) {
        var value2 = param[1];
        var kind2 = param[0];
        switch (kind2) {
          case "dimension":
            return map6(fromJson$4(value2), function(d) {
              return {
                TAG: 2,
                _0: d
              };
            });
          case "placeholder":
            return map6(fromJson$7(value2), function(t) {
              return {
                TAG: 4,
                _0: t
              };
            });
          case "representation":
            return map6(fromJson20(value2), function(r) {
              return {
                TAG: 0,
                _0: r
              };
            });
          case "scheme":
            return map6(fromJson$23(value2), function(s2) {
              return {
                TAG: 1,
                _0: s2
              };
            });
          case "token":
            return map6(fromJson$6(value2), function(t) {
              return {
                TAG: 3,
                _0: t
              };
            });
          default:
            return error_ss([
              "Unknown Schema slot kind '",
              kind2,
              "'"
            ]);
        }
      });
    });
  }
  function empty$4(kind) {
    switch (kind) {
      case 0:
        return {
          TAG: 0,
          _0: empty9
        };
      case 1:
        return {
          TAG: 1,
          _0: empty$12
        };
      case 2:
        return {
          TAG: 2,
          _0: empty$2
        };
      case 3:
        return {
          TAG: 3,
          _0: empty$3
        };
      case 4:
        return {
          TAG: 4,
          _0: {
            description: "#Placeholder#",
            isIntensional: void 0,
            notes: ""
          }
        };
    }
  }
  function name2(t) {
    switch (t.TAG | 0) {
      case 0:
        return t._0.domain;
      case 1:
        return t._0.concept_structure;
      case 2:
      case 3:
        return t._0.concept;
      case 4:
        return t._0.description;
    }
  }
  function reference(t) {
    switch (t.TAG | 0) {
      case 0:
        return t._0.display;
      case 1:
        return t._0.graphic_structure;
      case 2:
        return t._0.graphic;
      case 3:
        return t._0.graphic;
      case 4:
        return "";
    }
  }
  var r_const3 = unique(void 0);
  var s_const4 = unique(void 0);
  var d_const2 = unique(void 0);
  var t_const2 = unique(void 0);
  var p_const2 = unique(void 0);
  var hash$6 = record2([
    "order",
    function(__x) {
      return hash3(__x, hash);
    }
  ], [
    "notes",
    hash4
  ]);
  var hash$7 = record2([
    "order",
    function(__x) {
      return hash3(__x, hash);
    }
  ], [
    "notes",
    hash4
  ]);
  var hash$8 = record1("notes", hash4);
  var h_const3 = unique(void 0);
  var a_const2 = unique(void 0);
  var g_const3 = unique(void 0);
  var schema_hash = unique(void 0);
  var link_hash = unique(void 0);
  var hash$11 = record2([
    "name",
    hash4
  ], [
    "notes",
    hash4
  ]);
  var Schema_Stable = {
    V1: V12,
    V2: {
      toJson: toJson$9,
      fromJson: fromJson$9,
      v1_to_v2: v1_to_v2$3
    }
  };
  var Schema3 = {
    empty: empty$4,
    name: name2,
    reference,
    Stable: Schema_Stable
  };
  function toJson22(t) {
    return fromList3({
      hd: [
        "id",
        toJson7(t.id)
      ],
      tl: {
        hd: [
          "model",
          toJson7(t.model)
        ],
        tl: {
          hd: [
            "slots",
            $$Map.toJson(t.slots, Schema3.Stable.V2.toJson)
          ],
          tl: {
            hd: [
              "links",
              toJson3(t.links, function(param) {
                var ajson = toJson7;
                var bjson = toJson7;
                var cjson = Kind.Stable.V3.toJson;
                return [
                  _1(ajson, param[0]),
                  _1(bjson, param[1]),
                  _1(cjson, param[2])
                ];
              })
            ],
            tl: 0
          }
        }
      }
    });
  }
  function fromJson21(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Request state object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var id10 = getValue("id", fromJson6);
      var model = getValue("model", fromJson6);
      var slots = getValue("slots", function(__x) {
        return $$Map.fromJson(__x, Schema3.Stable.V2.fromJson);
      });
      var links2 = getValue("links", function(__x) {
        return fromJson2(__x, function(param) {
          var ajson = fromJson6;
          var bjson = fromJson6;
          var cjson = Kind.Stable.V3.fromJson;
          var match2 = getWithDefault4(decodeArray2(param), []);
          if (match2.length !== 3) {
            return error_s("Not a triple");
          }
          var a3 = match2[0];
          var b = match2[1];
          var c3 = match2[2];
          return both3([
            _1(ajson, a3),
            _1(bjson, b),
            _1(cjson, c3)
          ]);
        });
      });
      return map6(both4([
        id10,
        model,
        slots,
        links2
      ]), function(param) {
        return {
          id: param[0],
          model: param[1],
          slots: param[2],
          links: param[3]
        };
      });
    });
  }
  function toJson$15(t) {
    return fromList3({
      hd: [
        "id",
        toJson7(t.id)
      ],
      tl: {
        hd: [
          "model",
          toJson7(t.model)
        ],
        tl: {
          hd: [
            "warnings",
            toJson3(t.warnings, toJson16)
          ],
          tl: {
            hd: [
              "warnings_done",
              toJson10(t.warnings_done)
            ],
            tl: {
              hd: [
                "errors",
                toJson3(t.errors, toJson15)
              ],
              tl: {
                hd: [
                  "errors_done",
                  toJson10(t.errors_done)
                ],
                tl: {
                  hd: [
                    "insights",
                    toJson3(t.insights, toJson18)
                  ],
                  tl: {
                    hd: [
                      "insights_done",
                      toJson10(t.insights_done)
                    ],
                    tl: {
                      hd: [
                        "killed",
                        toJson10(t.killed)
                      ],
                      tl: 0
                    }
                  }
                }
              }
            }
          }
        }
      }
    });
  }
  function fromJson$16(json) {
    return flatMap2(fromOption_s(decodeObject2(json), "Failed to decode Response state object JSON"), function(dict) {
      var getValue = function(key, reader) {
        return flatMap2(fromOption_ss(get11(dict, key), [
          "Unable to find key '",
          key,
          "'"
        ]), reader);
      };
      var id10 = getValue("id", fromJson6);
      var model = getValue("model", fromJson6);
      var warnings = getValue("warnings", function(__x) {
        return fromJson2(__x, fromJson15);
      });
      var warnings_done = getValue("warnings_done", fromJson9);
      var errors = getValue("errors", function(__x) {
        return fromJson2(__x, fromJson14);
      });
      var errors_done = getValue("errors_done", fromJson9);
      var insights = getValue("insights", function(__x) {
        return fromJson2(__x, fromJson17);
      });
      var insights_done = getValue("insights_done", fromJson9);
      var killed = getValue("killed", fromJson9);
      return map6(both9([
        id10,
        model,
        warnings,
        warnings_done,
        errors,
        errors_done,
        insights,
        insights_done,
        killed
      ]), function(param) {
        return {
          id: param[0],
          model: param[1],
          warnings: param[2],
          warnings_done: param[3],
          errors: param[4],
          errors_done: param[5],
          insights: param[6],
          insights_done: param[7],
          killed: param[8]
        };
      });
    });
  }
  var empty_id = create6(void 0);
  var empty_model = create6(void 0);
  var empty_warnings = [];
  var empty_errors = [];
  var empty_insights = [];
  var empty10 = {
    id: empty_id,
    model: empty_model,
    warnings: empty_warnings,
    warnings_done: true,
    errors: empty_errors,
    errors_done: true,
    insights: empty_insights,
    insights_done: true,
    killed: false
  };
  var $$Response = {
    toJson: toJson$15,
    fromJson: fromJson$16,
    empty: empty10
  };
  var partial_arg = {
    toJson: toJson22,
    fromJson: fromJson21
  };
  var partial_arg$1 = Make5;
  var T = function(param) {
    return partial_arg$1(partial_arg, param);
  }($$Response);
  var create15 = T.create;
  var listen = T.listen;
  var post = T.post;
  var terminate = T.terminate;
  var WorkerThread = T.WorkerThread;
  function forEachU8(s2, f, action) {
    for (var i = s2; i <= f; ++i) {
      action(i);
    }
  }
  function forEach9(s2, f, action) {
    return forEachU8(s2, f, __1(action));
  }
  function everyU7(_s, f, p) {
    while (true) {
      var s2 = _s;
      if (s2 > f) {
        return true;
      }
      if (!p(s2)) {
        return false;
      }
      _s = s2 + 1 | 0;
      continue;
    }
    ;
  }
  function every7(s2, f, p) {
    return everyU7(s2, f, __1(p));
  }
  function create16(l, v, r) {
    var hl = l !== void 0 ? l.h : 0;
    var hr = r !== void 0 ? r.h : 0;
    return {
      v,
      h: (hl >= hr ? hl : hr) + 1 | 0,
      l,
      r
    };
  }
  function singleton3(x5) {
    return {
      v: x5,
      h: 1,
      l: void 0,
      r: void 0
    };
  }
  function heightGe3(l, r) {
    if (r !== void 0) {
      if (l !== void 0) {
        return l.h >= r.h;
      } else {
        return false;
      }
    } else {
      return true;
    }
  }
  function lengthNode3(n) {
    var l = n.l;
    var r = n.r;
    var sizeL = l !== void 0 ? lengthNode3(l) : 0;
    var sizeR = r !== void 0 ? lengthNode3(r) : 0;
    return (1 + sizeL | 0) + sizeR | 0;
  }
  function size8(n) {
    if (n !== void 0) {
      return lengthNode3(n);
    } else {
      return 0;
    }
  }
  function fromSortedArrayRevAux3(arr, off, len) {
    switch (len) {
      case 0:
        return;
      case 1:
        return singleton3(arr[off]);
      case 2:
        var x0 = arr[off];
        var x1 = arr[off - 1 | 0];
        return {
          v: x1,
          h: 2,
          l: singleton3(x0),
          r: void 0
        };
      case 3:
        var x0$1 = arr[off];
        var x1$1 = arr[off - 1 | 0];
        var x22 = arr[off - 2 | 0];
        return {
          v: x1$1,
          h: 2,
          l: singleton3(x0$1),
          r: singleton3(x22)
        };
      default:
        var nl = len / 2 | 0;
        var left = fromSortedArrayRevAux3(arr, off, nl);
        var mid = arr[off - nl | 0];
        var right = fromSortedArrayRevAux3(arr, (off - nl | 0) - 1 | 0, (len - nl | 0) - 1 | 0);
        return create16(left, mid, right);
    }
  }
  function fromSortedArrayAux3(arr, off, len) {
    switch (len) {
      case 0:
        return;
      case 1:
        return singleton3(arr[off]);
      case 2:
        var x0 = arr[off];
        var x1 = arr[off + 1 | 0];
        return {
          v: x1,
          h: 2,
          l: singleton3(x0),
          r: void 0
        };
      case 3:
        var x0$1 = arr[off];
        var x1$1 = arr[off + 1 | 0];
        var x22 = arr[off + 2 | 0];
        return {
          v: x1$1,
          h: 2,
          l: singleton3(x0$1),
          r: singleton3(x22)
        };
      default:
        var nl = len / 2 | 0;
        var left = fromSortedArrayAux3(arr, off, nl);
        var mid = arr[off + nl | 0];
        var right = fromSortedArrayAux3(arr, (off + nl | 0) + 1 | 0, (len - nl | 0) - 1 | 0);
        return create16(left, mid, right);
    }
  }
  function rotateWithLeftChild3(k2) {
    var k1 = k2.l;
    k2.l = k1.r;
    k1.r = k2;
    var n = k2.l;
    var hlk2 = n !== void 0 ? n.h : 0;
    var n$1 = k2.r;
    var hrk2 = n$1 !== void 0 ? n$1.h : 0;
    k2.h = (hlk2 > hrk2 ? hlk2 : hrk2) + 1 | 0;
    var n$2 = k1.l;
    var hlk1 = n$2 !== void 0 ? n$2.h : 0;
    var hk2 = k2.h;
    k1.h = (hlk1 > hk2 ? hlk1 : hk2) + 1 | 0;
    return k1;
  }
  function rotateWithRightChild3(k1) {
    var k2 = k1.r;
    k1.r = k2.l;
    k2.l = k1;
    var n = k1.l;
    var hlk1 = n !== void 0 ? n.h : 0;
    var n$1 = k1.r;
    var hrk1 = n$1 !== void 0 ? n$1.h : 0;
    k1.h = (hlk1 > hrk1 ? hlk1 : hrk1) + 1 | 0;
    var n$2 = k2.r;
    var hrk2 = n$2 !== void 0 ? n$2.h : 0;
    var hk1 = k1.h;
    k2.h = (hrk2 > hk1 ? hrk2 : hk1) + 1 | 0;
    return k2;
  }
  function doubleWithLeftChild3(k3) {
    var k3l = k3.l;
    var v = rotateWithRightChild3(k3l);
    k3.l = v;
    return rotateWithLeftChild3(k3);
  }
  function doubleWithRightChild3(k2) {
    var k2r = k2.r;
    var v = rotateWithLeftChild3(k2r);
    k2.r = v;
    return rotateWithRightChild3(k2);
  }
  function heightUpdateMutate3(t) {
    var n = t.l;
    var hlt = n !== void 0 ? n.h : 0;
    var n$1 = t.r;
    var hrt = n$1 !== void 0 ? n$1.h : 0;
    t.h = (hlt > hrt ? hlt : hrt) + 1 | 0;
    return t;
  }
  function balMutate3(nt) {
    var l = nt.l;
    var r = nt.r;
    var hl = l !== void 0 ? l.h : 0;
    var hr = r !== void 0 ? r.h : 0;
    if (hl > (2 + hr | 0)) {
      var ll = l.l;
      var lr = l.r;
      if (heightGe3(ll, lr)) {
        return heightUpdateMutate3(rotateWithLeftChild3(nt));
      } else {
        return heightUpdateMutate3(doubleWithLeftChild3(nt));
      }
    }
    if (hr > (2 + hl | 0)) {
      var rl = r.l;
      var rr = r.r;
      if (heightGe3(rr, rl)) {
        return heightUpdateMutate3(rotateWithRightChild3(nt));
      } else {
        return heightUpdateMutate3(doubleWithRightChild3(nt));
      }
    }
    nt.h = (hl > hr ? hl : hr) + 1 | 0;
    return nt;
  }
  function sortedLengthAuxMore2(xs, _prec, _acc, len) {
    while (true) {
      var acc = _acc;
      var prec = _prec;
      if (acc >= len) {
        return acc;
      }
      var v = xs[acc];
      if (prec <= v) {
        return acc;
      }
      _acc = acc + 1 | 0;
      _prec = v;
      continue;
    }
    ;
  }
  function strictlySortedLength2(xs) {
    var len = xs.length;
    if (len === 0 || len === 1) {
      return len;
    }
    var x0 = xs[0];
    var x1 = xs[1];
    if (x0 < x1) {
      var _prec = x1;
      var _acc = 2;
      while (true) {
        var acc = _acc;
        var prec = _prec;
        if (acc >= len) {
          return acc;
        }
        var v = xs[acc];
        if (prec >= v) {
          return acc;
        }
        _acc = acc + 1 | 0;
        _prec = v;
        continue;
      }
      ;
    } else if (x0 > x1) {
      return -sortedLengthAuxMore2(xs, x1, 2, len) | 0;
    } else {
      return 1;
    }
  }
  function has10(_t, x5) {
    while (true) {
      var t = _t;
      if (t === void 0) {
        return false;
      }
      var v = t.v;
      if (x5 === v) {
        return true;
      }
      _t = x5 < v ? t.l : t.r;
      continue;
    }
    ;
  }
  function addMutate3(t, x5) {
    if (t === void 0) {
      return singleton3(x5);
    }
    var k2 = t.v;
    if (x5 === k2) {
      return t;
    }
    var l = t.l;
    var r = t.r;
    if (x5 < k2) {
      t.l = addMutate3(l, x5);
    } else {
      t.r = addMutate3(r, x5);
    }
    return balMutate3(t);
  }
  function fromArray15(xs) {
    var len = xs.length;
    if (len === 0) {
      return;
    }
    var next = strictlySortedLength2(xs);
    var result;
    if (next >= 0) {
      result = fromSortedArrayAux3(xs, 0, next);
    } else {
      next = -next | 0;
      result = fromSortedArrayRevAux3(xs, next - 1 | 0, next);
    }
    for (var i = next; i < len; ++i) {
      result = addMutate3(result, xs[i]);
    }
    return result;
  }
  var fromArray16 = fromArray15;
  var has11 = has10;
  var size9 = size8;
  function create17(rows, columns) {
    return map7(new Array(rows), function(param) {
      return new Array(columns).fill(0);
    });
  }
  function size10(t) {
    return [
      t.length,
      getWithDefault4(get7(t, 0), []).length
    ];
  }
  function get17(t, m2, n) {
    return flatMap4(get7(t, m2), function(row) {
      return get7(row, n);
    });
  }
  function set10(t, m2, n, v) {
    return getWithDefault4(map8(get7(t, m2), function(row) {
      return set4(row, n, v);
    }), false);
  }
  function check(t, m2, n, v) {
    return getWithDefault4(map8(get17(t, m2, n), function(v$p) {
      return v === v$p;
    }), false);
  }
  function dropColumns(t, cols) {
    return map7(t, function(row) {
      return keepWithIndex2(row, function(param, idx) {
        return !has11(cols, idx);
      });
    });
  }
  function hasZeroRow(t) {
    return some5(t, function(row) {
      return every4(row, function(v) {
        return v === 0;
      });
    });
  }
  function zero_columns(mat) {
    var match2 = size10(mat);
    var m2 = match2[0];
    var bad_cols = [];
    forEach9(0, match2[1] - 1 | 0, function(col) {
      if (every7(0, m2 - 1 | 0, function(row) {
        return check(mat, row, col, 0);
      })) {
        bad_cols.push(col);
        return;
      }
    });
    return fromArray16(bad_cols);
  }
  function backtrack(next, isGoal, apply, state) {
    if (_1(isGoal, state)) {
      return _1(apply, state);
    } else {
      return forEach5(_1(next, state), function(s2) {
        return backtrack(next, isGoal, apply, s2);
      });
    }
  }
  function findIsomorphism(param, find5, equiv_schemas, equiv_links, onFind) {
    var source_links = param[1];
    var source_schemas = param[0];
    var target_schemas = nodes(find5);
    var n_schemas_source = $$Map.size(source_schemas);
    var n_schemas_target = $$Map.size(target_schemas);
    var order_schemas_source = $$Map.keys(source_schemas);
    var order_schemas_target = $$Map.keys(target_schemas);
    var m2 = create17(n_schemas_target, n_schemas_source);
    var getidxSrc = function(i) {
      return flatMap4(get7(order_schemas_source, i), function(id10) {
        return $$Map.get(source_schemas, id10);
      });
    };
    var getidxTgt = function(i) {
      return flatMap4(get7(order_schemas_target, i), function(id10) {
        return $$Map.get(target_schemas, id10);
      });
    };
    forEach9(0, n_schemas_target - 1 | 0, function(row) {
      return forEach9(0, n_schemas_source - 1 | 0, function(col) {
        var equiv = getWithDefault4(map8(both2([
          getidxSrc(col),
          getidxTgt(row)
        ]), function(param2) {
          return _2(equiv_schemas, param2[0], param2[1]);
        }), false);
        if (equiv) {
          set10(m2, row, col, 1);
          return;
        }
      });
    });
    var zero_cols = zero_columns(m2);
    var m$1 = dropColumns(m2, zero_cols);
    var n_schemas_source$1 = n_schemas_source - size9(zero_cols) | 0;
    var order_schemas_source$1 = keepWithIndex2(order_schemas_source, function(param2, idx) {
      return !has11(zero_cols, idx);
    });
    if (hasZeroRow(m$1)) {
      return;
    }
    var used = $$Set.empty;
    var init3 = [
      m$1,
      0,
      used,
      order_schemas_source$1,
      n_schemas_source$1
    ];
    var conv = function(iso, order_schemas_source2) {
      var whole = [
        source_schemas,
        source_links
      ];
      var mapping = [];
      var match2 = size10(iso);
      var n = match2[1];
      forEach9(0, match2[0] - 1 | 0, function(row) {
        return forEach9(0, n - 1 | 0, function(col) {
          if (!check(iso, row, col, 1)) {
            return;
          }
          var id_in_whole = getExn8(get7(order_schemas_source2, col));
          var id_in_find = getExn8(get7(order_schemas_target, row));
          mapping.push([
            id_in_find,
            id_in_whole
          ]);
        });
      });
      var whole_links = whole[1];
      var find_links = links(find5);
      var mapping$p = $$Map.fromArray(mapping);
      var links_ok = every4(find_links, function(param2) {
        var find_kind = param2[2];
        var find_tgt = param2[1];
        var find_src = param2[0];
        return some5(whole_links, function(param3) {
          var whole_tgt = param3[1];
          var whole_src = param3[0];
          if (_2(equiv_links, param3[2], find_kind) && getWithDefault4(map8($$Map.get(mapping$p, find_src), function(id10) {
            return id10 === whole_src;
          }), false)) {
            return getWithDefault4(map8($$Map.get(mapping$p, find_tgt), function(id10) {
              return id10 === whole_tgt;
            }), false);
          } else {
            return false;
          }
        });
      });
      if (links_ok && !reject(find5, whole, mapping$p)) {
        return matchMaximal(find5, whole, mapping$p);
      }
    };
    var apply = function(param2) {
      return iter3(conv(param2[0], param2[3]), onFind);
    };
    var isGoal = function(param2) {
      return param2[1] === n_schemas_target;
    };
    var next = function(param2) {
      var n_schemas_source2 = param2[4];
      var order_schemas_source2 = param2[3];
      var used2 = param2[2];
      var d = param2[1];
      var m$p = param2[0];
      var n = [];
      forEach9(0, n_schemas_source2 - 1 | 0, function(col) {
        var is_used = getWithDefault4(map8(get7(order_schemas_source2, col), function(col2) {
          return $$Set.has(used2, col2);
        }), true);
        if (is_used) {
          return;
        }
        var m$p$p = map7(m$p, function(r) {
          return r.slice(0);
        });
        forEach9(0, n_schemas_source2 - 1 | 0, function(col$p) {
          if (col !== col$p) {
            set10(m$p$p, d, col$p, 0);
            return;
          }
        });
        var used$p = getWithDefault4(map8(get7(order_schemas_source2, col), function(id10) {
          return $$Set.add(used2, id10);
        }), used2);
        if (hasZeroRow(m$p$p)) {
          return;
        }
        var zero_cols2 = zero_columns(m$p$p);
        var m$p$p$1 = dropColumns(m$p$p, zero_cols2);
        var n_schemas_source$12 = n_schemas_source2 - size9(zero_cols2) | 0;
        var order_schemas_source$12 = keepWithIndex2(order_schemas_source2, function(param3, idx) {
          return !has11(zero_cols2, idx);
        });
        n.push([
          m$p$p$1,
          d + 1 | 0,
          used$p,
          order_schemas_source$12,
          n_schemas_source$12
        ]);
      });
      return n;
    };
    return backtrack(next, isGoal, apply, init3);
  }
  function removeSubsumed(arr, subsumes2) {
    var keep5 = {
      contents: []
    };
    forEach5(arr, function(v) {
      var subsumed = {
        contents: false
      };
      keep5.contents = mapPartial(keep5.contents, function(v$p) {
        var s2 = _2(subsumes2, v$p, v);
        var s$p = _2(subsumes2, v, v$p);
        if (s2) {
          subsumed.contents = true;
          return some7(v$p);
        } else if (s$p) {
          return;
        } else {
          return some7(v$p);
        }
      });
      if (!subsumed.contents) {
        keep5.contents.push(v);
        return;
      }
    });
    return keep5.contents;
  }
  _1(WorkerThread.listen, function(request) {
    var slots = request.slots;
    var links2 = request.links;
    var errors = [];
    var warnings = [];
    var insights = [];
    var model = fromSlotsAndLinks(slots, links2);
    mapError(model, function(param) {
      spliceObjApply2(errors, "push", [param[0]]);
      spliceObjApply2(warnings, "push", [param[1]]);
    });
    forEach5(links2, function(a3) {
      var ka2 = a3[2];
      var ta = a3[1];
      var sa = a3[0];
      return forEach5(links2, function(b) {
        if (!(a3 !== b && ta === b[0] && ka2 === 0 && b[2] === 0)) {
          return;
        }
        var tb = b[1];
        var c3 = find(links2, function(c4) {
          if (sa === c4[0] && tb === c4[1] && c4[2] === 0 && a3 !== c4) {
            return b !== c4;
          } else {
            return false;
          }
        });
        if (isSome2(c3)) {
          var nodes4 = [
            sa,
            ta,
            tb
          ];
          var message2 = "Transitive hierarchical connections";
          var details2 = "Connections in the hierarchy are transitive, so normally you do not connect a grandparent schema to its grandchildren schemas.";
          var suggestion2 = "Remove the transitive connection.";
          warnings.push(create8(nodes4, message2, details2, suggestion2, void 0));
          return;
        }
      });
    });
    var errors$1 = dedup(errors);
    var warnings$1 = dedup(warnings);
    _1(WorkerThread.respond, {
      id: request.id,
      model: request.model,
      warnings: warnings$1,
      warnings_done: true,
      errors: errors$1,
      errors_done: true,
      insights: [],
      insights_done: false,
      killed: false
    });
    var equiv_schemas = function(slots2, kind) {
      switch (slots2.TAG | 0) {
        case 0:
          if (typeof kind === "number") {
            if (kind !== 1) {
              return kind === 0;
            } else {
              return true;
            }
          } else {
            return false;
          }
        case 1:
          if (typeof kind !== "number") {
            return false;
          }
          if (kind >= 3) {
            return false;
          }
          switch (kind) {
            case 1:
              return false;
            case 0:
            case 2:
              return true;
          }
        case 2:
          if (typeof kind === "number") {
            if (kind !== 3) {
              return kind === 0;
            } else {
              return true;
            }
          } else {
            return false;
          }
        case 3:
          if (typeof kind === "number") {
            return kind === 0;
          } else {
            return getWithDefault4(slots2._0.is_class, false) === kind.is_class;
          }
        case 4:
          if (typeof kind === "number") {
            if (kind !== 0) {
              return kind >= 4;
            } else {
              return true;
            }
          } else {
            return false;
          }
      }
    };
    var equiv_links = function(k1, k2) {
      if (k2 === 0) {
        return true;
      }
      switch (k1) {
        case 0:
          return k2 < 2;
        case 1:
          return k2 === 2;
        case 2:
          return k2 >= 3;
      }
    };
    var isSubsumed = function(ins) {
      return some5(insights, function(i) {
        return subsumes(i, ins);
      });
    };
    var idiom = function(idiom$1, insight) {
      return findIsomorphism([
        slots,
        links2
      ], idiom$1, equiv_schemas, equiv_links, function(param) {
        var nodes4 = $$Map.keys(param[0]);
        stableSortInPlaceBy(nodes4, compare);
        var ins = _2(insight, nodes4, void 0);
        if (!isSubsumed(ins)) {
          insights.push(ins);
          return _1(WorkerThread.respond, {
            id: request.id,
            model: request.model,
            warnings: warnings$1,
            warnings_done: true,
            errors: errors$1,
            errors_done: true,
            insights,
            insights_done: false,
            killed: false
          });
        }
      });
    };
    idiom(pickCollection, function(nodes4, param) {
      return create10(nodes4, "Collection Pick idiom detected.", "The Collection Pick idiom selects one or more particular tokens out from a class token, because they are worth identifying in some way.", void 0);
    });
    idiom(filterCollection, function(nodes4, param) {
      return create10(nodes4, "Collection Filter idiom detected.", "The Collection Filter idiom refines a collection from everything, down to just the part of the collection begin interpreted.", void 0);
    });
    idiom(forEachCollection, function(nodes4, param) {
      return create10(nodes4, "Collection For-each idiom detected.", "The Collection For-each idiom describes an interpretation that is true for every element in the collection.", void 0);
    });
    idiom(reduceCollection, function(nodes4, param) {
      return create10(nodes4, "Collection Reduce idiom detected.", "The Collection Reduce idiom abstracts a collection up to a single R-Symbol standing for the entire collection at once.", void 0);
    });
    idiom(sumDimension, function(nodes4, param) {
      return create10(nodes4, "Sum R-dimension idiom detected.", "The Sum R-dimension idiom indicates that the parent R-dimension can be considered as being 'made up of' the children (sub) R-dimensions.", void 0);
    });
    idiom(prodDimension, function(nodes4, param) {
      return create10(nodes4, "Product R-dimension idiom detected.", "The Product R-dimension idiom indicates that the child R-dimension can be considered as being 'a combination of' the parent R-dimensions.", void 0);
    });
    idiom(explicitCoordinateSystem, function(nodes4, param) {
      return create10(nodes4, "Explicit Coordinate System idiom detected.", "The Explicit Coordinate System idiom indicates the R-dimensions together form the coordinate system indicated by the upper R-scheme, with the 'data' R-dimensions attached to the upper R-Scheme, and the lower R-scheme combining the 'coordinate' R-dimensions.", void 0);
    });
    idiom(implicitCoordinateSystem, function(nodes4, param) {
      return create10(nodes4, "Implicit Coordinate System idiom detected.", "The Implicit Coordinate System idiom indicates the R-dimensions together form the coordinate system indicated by the R-scheme, but there is no distinction between which are the 'data' and which are the 'coordinates'.", void 0);
    });
    var insights$1 = dedup(insights);
    return _1(WorkerThread.respond, {
      id: request.id,
      model: request.model,
      warnings: warnings$1,
      warnings_done: true,
      errors: errors$1,
      errors_done: true,
      insights: insights$1,
      insights_done: true,
      killed: false
    });
  });
  var T2;
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=worker.js.map
