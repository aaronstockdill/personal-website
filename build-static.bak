#!/usr/bin/env python3

"""
Compile the Dynamic content to static content.
"""

import markdown
from mdx_del_ins import DelInsExtension
from mdx_smartypants import SmartypantsExt
import io
import os
import sys
import shutil


def maybe_make_dir(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)


def oxford_join(items):
    items = list(items)
    if len(items) == 1:
        return items[0]
    if len(items) == 2:
        return " and ".join(items)
    return ", ".join(items[:-1]) + ", and " + items[-1]


def parse_bibtex(bibfile):
    """ This monster of a function is a small parser for BibTeX files.
    """
    bibname = ".".join(os.path.basename(bibfile).split(".")[:-1])
    pdflink = "/static_assets/{}.pdf".format(bibname)
    biblink = "/static_assets/{}.bib".format(bibname)
    with open(bibfile) as f:
        contents = f.read()
    def consume_whitespace(string, idx):
        whitespaces = '\t\n \r'
        while string[idx] in whitespaces: idx += 1
        return idx
    def read_type(string, idx):
        idx = consume_whitespace(string, idx)
        chars = ""
        while string[idx].lower() in "abcdefghikjlmnopqrstuvwxyz":
            chars += string[idx]
            idx += 1
        idx = consume_whitespace(string, idx)
        return chars, idx
    def read_citekey(string, idx):
        idx = consume_whitespace(string, idx)
        chars = ""
        while string[idx].lower() in "abcdefghikjlmnopqrstuvwxyz0123456789":
            chars += string[idx]
            idx += 1
        assert(string[idx] == ",")
        idx += 1
        idx = consume_whitespace(string, idx)
        return chars, idx
    def read_key(string, idx):
        idx = consume_whitespace(string, idx)
        chars = ""
        while string[idx].lower() in "abcdefghhijklmnopqrstuvwxyz-":
            chars += string[idx]
            idx += 1
        idx = consume_whitespace(string, idx)
        return chars, idx
    def read_value(string, idx):
        idx = consume_whitespace(string, idx)
        assert(string[idx] == "{")
        idx += 1
        idx = consume_whitespace(string, idx)
        chars = ""
        while string[idx] != "}":
            chars += string[idx]
            idx += 1
        assert(string[idx] == "}")
        idx += 1
        idx = consume_whitespace(string, idx)
        return chars, idx
    def read_attribute(string, idx):
        idx = consume_whitespace(string, idx)
        key, idx = read_key(string, idx)
        idx = consume_whitespace(string, idx)
        assert(string[idx] == '=')
        idx += 1
        idx = consume_whitespace(string, idx)
        attribute, idx = read_value(string, idx)
        idx = consume_whitespace(string, idx)
        return key, attribute, idx
    def parse(string, idx):
        parse_obj = {}
        idx = consume_whitespace(string, idx)
        assert(string[idx] == '@')
        idx += 1
        entry_type, idx = read_type(string, idx)
        parse_obj["type"] = entry_type
        idx = consume_whitespace(string, idx)
        assert(string[idx] == '{')
        idx += 1
        citekey, idx = read_citekey(string, idx)
        parse_obj["citekey"] = citekey
        idx = consume_whitespace(string, idx)
        while string[idx] != '}':
            label, value, idx = read_attribute(string, idx)
            parse_obj[label.lower()] = value
            idx = consume_whitespace(string, idx)
            if string[idx] == ',':
                idx += 1
                idx = consume_whitespace(string, idx)
        idx += 1
        return parse_obj, idx
    return {**parse(contents, 0)[0], **{"pdf_link": pdflink, "bib_link": biblink}}


def create_markdown_page(infile, outfile, templatefile,
                         prevpage=None, nextpage=None):
    """ Given a source file, produce the outfile based on templatefile.
    """
    title_string = infile.split("/")[-1].split(".")[0]
    html_string = io.BytesIO()
    markdown.markdownFromFile(input=infile, output=html_string, extensions=['footnotes', DelInsExtension(), SmartypantsExt(configs={})])
    with open(templatefile) as f:
        wrapper_html = f.read()
    replacements = [
        ("{{-- TITLE --}}", title_string),
        ("{{-- CONTENT --}}", str(html_string.getvalue(),
                                  encoding="UTF-8")),
        ("{{-- SLUG --}}", outfile.split("/")[-2]),
    ]
    if prevpage:
        (prevtitle, prevslug) = prevpage
        prevtitle = prevtitle.split("/")[-1].split(".")[0]
        replacements.extend([
            ("{{-- PREV-LINK --}}", prevslug),
            ("{{-- PREV-TITLE --}}", prevtitle),
            ("{{-- IF PREV-EXISTS --}}", ""),
            ("{{-- ENDIF PREV-EXISTS --}}", ""),
        ])
    else:
        replacements.extend([
            ("{{-- IF PREV-EXISTS --}}", "<!--"),
            ("{{-- ENDIF PREV-EXISTS --}}", "-->"),
        ])
    if nextpage:
        (nexttitle, nextslug) = nextpage
        nexttitle = nexttitle.split("/")[-1].split(".")[0]
        replacements.extend([
            ("{{-- NEXT-LINK --}}", nextslug),
            ("{{-- NEXT-TITLE --}}", nexttitle),
            ("{{-- IF NEXT-EXISTS --}}", ""),
            ("{{-- ENDIF NEXT-EXISTS --}}", ""),
        ])
    else:
        replacements.extend([
            ("{{-- IF NEXT-EXISTS --}}", "<!--"),
            ("{{-- ENDIF NEXT-EXISTS --}}", "-->"),
        ])
    for k, v in replacements:
        wrapper_html = wrapper_html.replace(k, v)
    maybe_make_dir(os.path.dirname(outfile))
    with open(outfile, 'w') as f:
        f.write(wrapper_html)
    html_string.close()


def create_blog_listing(filenames_and_links, outfile, templatefile):
    """ Given a list of blog posts, produce the main list.
    """
    sorter = lambda x: tuple(int(d) for d in x[0].split('.')[1].split("-"))
    listed_html = ""
    item_template = """<div class="dynamic-link"><a href="{link}">{title}</a><span class="date blog-date">{date}</span></div>"""
    curr_year = None
    month_names = [None] + "January,February,March,April,May,June,July,August,September,October,November,December".split(",")
    for filename, link in sorted(filenames_and_links, key=sorter, reverse=True):
        title, date, _ = filename.split('/')[-1].split('.')
        year, month, day = date.split("-")
        if year != curr_year:
            curr_year = year
            listed_html += "<div class='date blog-year'>" + year + "</div>"
        formatted_date = day + " " + month_names[int(month)]
        listed_html += item_template.format(link=link, title=title, date=formatted_date)
    with open(templatefile) as f:
        wrapper_html = f.read()
    wrapper_html = wrapper_html.replace("{{-- CONTENT --}}", listed_html)
    with open(outfile, 'w') as f:
        f.write(wrapper_html)


def create_research_listing(publications, talks_fn_links, outfile, templatefile):
    """ Similar to blog, create a listing of research.
    """
    def val(m):
        return {"Jan": 1, "Feb": 2, "Mar": 3, "Apr": 4, "May": 5, "Jun": 6,
                "Jul": 7, "Aug": 8, "Sep": 9, "Oct": 10, "Nov": 11, "Dec": 12}[m[:3]]
    talk_sorter = lambda x: tuple(int(d) for d in x[0].split(".")[1].split("-"))
    bib_sorter = lambda x: (int(x["year"]), val(x["month"]))
    listed_talks = ""
    listed_bib = ""
    talk_template = """<div class="dynamic-link"><a href="{link}">{title}</a><span class="date talk-date">{date}</span></div>"""
    bib_template = """
<div class="dynamic-link" id="{citekey}">
    <h2>{title}</h2>
    <span class="authors">{author}</span>
    <div class='pub-info'>
        {journal}
        <span class="date pub-date">{date}</span>
        {copyright}
        <a class="pdflink" href="{pdflink}">Download PDF</a>
        <a class="bibtex" href="{biblink}">Download BibTeX</a>
    </div>
    <h3>Abstract</h3>
    <p class="abstract">{abstract}</p>
</div>"""
    for filename, link in sorted(talks_fn_links, key=talk_sorter, reverse=True):
        parts = filename.split("/")[-1].split('.')
        listed_talks += talk_template.format(link=link, title=parts[0], date=parts[1])
    for bibobj in sorted(map(parse_bibtex, publications), key=bib_sorter, reverse=True):
        listed_bib += bib_template.format(
            citekey = bibobj["citekey"],
            pdflink = bibobj["pdf_link"],
            title = bibobj["title"],
            author = oxford_join(name.split(", ")[1] + " " + name.split(", ")[0] for name in bibobj["author"].split(" and ")),
            journal = "<span class='jounrnal'>" + bibobj["journal"] + "</span>" if "journal" in bibobj
            else "<span class='journal'>" + bibobj["booktitle"] + "</span>" if "booktitle" in bibobj
            else "",
            date = bibobj["month"] + " " + bibobj["year"],
            copyright = "<span class='orig'>" + bibobj["copyright"] + "</span>" if "copyright" in bibobj else "",
            biblink = bibobj["bib_link"],
            abstract = bibobj["abstract"]
        )
    with open(templatefile) as f:
        wrapper_html = f.read()
    wrapper_html = wrapper_html.replace("{{-- TALKS --}}", listed_talks)
    wrapper_html = wrapper_html.replace("{{-- PUBLICATIONS --}}", listed_bib)
    with open(outfile, 'w') as f:
        f.write(wrapper_html)


def format_url(filename, toplevel):
    to_remove = "./~!?,-:;@#$%^&*()[]+=}{|\"'<>"
    name = filename.lower().split('/')[-1].split(".")[0]
    for bad in to_remove:
        name = name.replace(bad, "")
    return "/{}/{}/".format(toplevel, name.replace(" ", "-"))


def copy_to_assets(filename, targetdir):
    maybe_make_dir(targetdir)
    if os.path.isdir(filename):
        try:
            shutil.copytree(filename,
                            os.path.join(targetdir,
                                         filename.rstrip("/").split("/")[-1]))
        except FileExistsError:
            pass
    else:
        shutil.copy(filename, targetdir)


def copy_static_files(file_list):
    for file_name in file_list:
        copy_to_assets(file_name, "source/static_assets/")


def listdir(dir_name):
    if dir_name[-1] == "/":
        dir_name = dir_name[:-1]
    return [dir_name + "/" + f for f in os.listdir(dir_name)]


def prev_and_next(vals):
    return zip(vals[1:] + [None],
               vals,
               [None] + vals[:-1])


def main():
    blog_files = listdir("dynamic/blog")
    pub_files = listdir("dynamic/publications")
    talk_files = listdir("dynamic/talks")
    copy_static_files([f for f in blog_files + pub_files + talk_files
                       if f[0] != '.'
                       and f.split(".")[-1] != "md"
                       and f.split(".")[-1] != "index"])

    def comment(f):
        return f.strip()[0] == '#'

    with open("dynamic/blog/blog.index") as idx:
        blogs = []
        for f in idx.readlines():
            if not comment(f):
                f = "dynamic/blog/" + f.strip()
                blogs.append((f, format_url(f, "blog")))

    with open("dynamic/talks/talks.index") as idx:
        talks = []
        for f in idx.readlines():
            if not comment(f):
                f = "dynamic/talks/" + f.strip()
                blogs.append((f, format_url(f, "blog")))
                talks.append((f, format_url(f, "talk")))

    publications = [f for f in pub_files if f.split(".")[-1] == "bib"]

    sorter = lambda x: tuple(int(d) for d in x[0].split('.')[1].split("-"))

    blogs = list(sorted(blogs, key=sorter, reverse=True))
    for (prevp, currp, nextp) in prev_and_next(blogs):
        create_markdown_page(currp[0], "source" + currp[1] + "index.kit",
                             "source/blog_post.template", prevp, nextp)

    talks = list(sorted(talks, key=sorter, reverse=True))
    for (prevp, currp, nextp) in prev_and_next(talks):
        create_markdown_page(currp[0], "source" + currp[1] + "index.kit",
                             "source/talk.template", prevp, nextp)


    create_blog_listing(blogs,
                        "source/blog.kit",
                        "source/blog_index.template")
    create_research_listing(publications, talks,
                            "source/research.kit",
                            "source/research.template")


main()
